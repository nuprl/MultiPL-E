language: go_test.go
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmprwx0r7is_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmprwx0r7is_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmprwx0r7is_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmprwx0r7is_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // do your thing\n    return \"\
    \"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpcb4hztqs_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpcb4hztqs_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpcb4hztqs_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpcb4hztqs_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sortedArray []int\n\n    numeralMap\
    \ := map[string]int{\n        \"zero\":  0,\n        \"one\":   1,\n        \"\
    two\":   2,\n        \"three\": 3,\n        \"four\":  4,\n        \"five\": \
    \ 5,\n        \"six\":   6,\n        \"seven\": 7,\n        \"eight\": 8,\n  \
    \      \"nine\":  9,\n    }\n\n    for _, numeral := range numbers {\n       \
    \ if numeral == ' ' {\n            continue\n        }\n        value, ok := numeralMap[string(numeral)]\n\
    \        if !ok {\n            // this will throw an exception and fail the test\n\
    \            fmt.Errorf(\"Invalid numeral %v\", numeral)\n        }\n\n      \
    \  // binary search\n        index := sort.Search(len(sortedArray), func(i int)\
    \ bool { return sortedArray[i] >= value })\n        // insert the new value\n\
    \        sortedArray = append(sortedArray, 0)\n        copy(sortedArray[index+1:],\
    \ sortedArray[index:])\n        sortedArray[index] = value\n    }\n\n    return\
    \ strings.Join(sortedArray, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zusbsvu_test.go:40:18: undefined: sort

    /tmp/tmp8zusbsvu_test.go:47:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numMap := map[string]int{\n  \
    \      \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    words\
    \ := make([]string, 10)\n    var numeral string\n    var number int\n    var index\
    \ int\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] == ' ' {\n\
    \            number = numMap[numeral]\n            index = 0\n            for\
    \ ; index < len(words) && words[index] != \"\"; index++ {\n                if\
    \ number < numMap[words[index]] {\n                    break\n               \
    \ }\n            }\n            for j := len(words) - 1; j > index; j-- {\n  \
    \              words[j] = words[j - 1]\n            }\n            words[index]\
    \ = numeral\n            numeral = \"\"\n        } else {\n            numeral\
    \ += string(numbers[i])\n        }\n    }\n    number = numMap[numeral]\n    index\
    \ = 0\n    for ; index < len(words) && words[index] != \"\"; index++ {\n     \
    \   if number < numMap[words[index]] {\n            break\n        }\n    }\n\
    \    for j := len(words) - 1; j > index; j-- {\n        words[j] = words[j - 1]\n\
    \    }\n    words[index] = numeral\n    return strings.Join(words, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31twoubc_test.go:59:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := map[string]int{\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    if words\
    \ == nil {\n        return \"\"\n    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpmgczf026_test.go:49: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpmgczf026_test.go:49: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpmgczf026_test.go:49: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpmgczf026_test.go:49:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // get the indexes for the numbers\
    \ in the string\n    indexMap := make(map[int]int)\n\n    // zero one two three\
    \ four five six seven eight nine\n    words := []string{\"zero\", \"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    }\n    for i, word := range words {\n        indexMap[i] = index_of(numbers, word)\n\
    \    }\n\n    fmt.Println(indexMap)\n\n    smallestNumber := find_smallest_number(indexMap)\n\
    \    fmt.Println(smallestNumber)\n\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr0zv58gf_test.go:20:23: undefined: index_of

    /tmp/tmpr0zv58gf_test.go:25:23: undefined: find_smallest_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numeralValues := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numeralOrder\
    \ := []string{\n        \"zero\",\n        \"one\",\n        \"two\",\n      \
    \  \"three\",\n        \"four\",\n        \"five\",\n        \"six\",\n      \
    \  \"seven\",\n        \"eight\",\n        \"nine\",\n    }\n\n    sortedNumerals\
    \ := []string{}\n    maxValue := -1\n    for _, numeral := range strings.Split(numbers,\
    \ \" \") {\n        numeralValue := numeralValues[numeral]\n        if numeralValue\
    \ > maxValue {\n            sortedNumerals = append(sortedNumerals, numeral)\n\
    \            maxValue = numeralValue\n        } else {\n            for index,\
    \ sortedNumeral := range sortedNumerals {\n                if numeralValue < numeralValues[sortedNumeral]\
    \ {\n                    sortedNumerals = append(sortedNumerals[:index], append([]string{numeral},\
    \ sortedNumerals[index:]...)...)\n                    break\n                }\n\
    \            }\n        }\n    }\n\n    return strings.Join(sortedNumerals, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxfbapzm_test.go:27:5: numeralOrder declared but not used

    /tmp/tmpsxfbapzm_test.go:42:29: undefined: strings

    /tmp/tmpsxfbapzm_test.go:57:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numeralToInt := map[string]int\
    \ {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n\
    \    // convert string to array of ints\n    splitNum := splitString(numbers)\n\
    \    ints := stringsToInts(splitNum, numeralToInt)\n\n    // sort array of ints\n\
    \    sortedInts := mergeSort(ints)\n\n    // convert array of ints to sorted array\
    \ of strings\n    sortedStrings := intsToStrings(sortedInts, numeralToInt)\n\n\
    \    // convert array of strings to string\n    sortedString := joinString(sortedStrings)\n\
    \n    return sortedString\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcukbi6rr_test.go:28:17: undefined: splitString

    /tmp/tmpcukbi6rr_test.go:29:13: undefined: stringsToInts

    /tmp/tmpcukbi6rr_test.go:32:19: undefined: mergeSort

    /tmp/tmpcukbi6rr_test.go:35:22: undefined: intsToStrings

    /tmp/tmpcukbi6rr_test.go:38:21: undefined: joinString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    const (\n        zero = \"zero\"\
    \n        one = \"one\"\n        two = \"two\"\n        three = \"three\"\n  \
    \      four = \"four\"\n        five = \"five\"\n        six = \"six\"\n     \
    \   seven = \"seven\"\n        eight = \"eight\"\n        nine = \"nine\"\n  \
    \  )\n    var nums []string\n    ns := make(map[string]int)\n    ns[zero] = 0\n\
    \    ns[one] = 1\n    ns[two] = 2\n    ns[three] = 3\n    ns[four] = 4\n    ns[five]\
    \ = 5\n    ns[six] = 6\n    ns[seven] = 7\n    ns[eight] = 8\n    ns[nine] = 9\n\
    \    for _,s := range(strings.Split(numbers, \" \")) {\n        if n, exists :=\
    \ ns[s]; exists {\n            nums = append(nums, n)\n        }\n    }\n    sort.Ints(nums)\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67onkcdl_test.go:38:22: undefined: strings

    /tmp/tmp67onkcdl_test.go:40:33: cannot use n (variable of type int) as type string
    in argument to append

    /tmp/tmp67onkcdl_test.go:43:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result []string\n\n    //\
    \ Split the input string into a slice\n    number_list := strings.Split(numbers,\
    \ \" \")\n\n    for _, word := range number_list {\n        switch word {\n  \
    \      case \"zero\":\n            result = append(result, word)\n        case\
    \ \"one\":\n            result = append(result, word)\n        case \"two\":\n\
    \            result = append(result, word)\n        case \"three\":\n        \
    \    result = append(result, word)\n        case \"four\":\n            result\
    \ = append(result, word)\n        case \"five\":\n            result = append(result,\
    \ word)\n        case \"six\":\n            result = append(result, word)\n  \
    \      case \"seven\":\n            result = append(result, word)\n        case\
    \ \"eight\":\n            result = append(result, word)\n        case \"nine\"\
    :\n            result = append(result, word)\n        }\n    }\n\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpicvh7_ss_test.go:17:20: undefined: strings

    /tmp/tmpicvh7_ss_test.go:44:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9}\n    words := []string{\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}\n    word_nums := make(map[string]int)\n\
    \    for i, word := range words {\n        word_nums[word] = nums[i]\n    }\n\
    \    num_words := make(map[int]string)\n    for word, num := range word_nums {\n\
    \        num_words[num] = word\n    }\n    w := make([]string, len(words))\n \
    \   for i, num := range nums {\n        w[i] = num_words[num]\n    }\n    for\
    \ i, word := range words {\n        fmt.Printf(\"%d: %s\\n\", i, word)\n    }\n\
    \    for i, num := range nums {\n        fmt.Printf(\"%d: %d\\n\", i, num)\n \
    \   }\n    for i, word := range w {\n        fmt.Printf(\"%d: %s\\n\", i, word)\n\
    \    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n\
    8: eight\n9: nine\n0: 0\n1: 1\n2: 2\n3: 3\n4: 4\n5: 5\n6: 6\n7: 7\n8: 8\n9: 9\n\
    0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n8: eight\n\
    9: nine\n0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n\
    8: eight\n9: nine\n0: 0\n1: 1\n2: 2\n3: 3\n4: 4\n5: 5\n6: 6\n7: 7\n8: 8\n9: 9\n\
    0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n8: eight\n\
    9: nine\n0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n\
    8: eight\n9: nine\n0: 0\n1: 1\n2: 2\n3: 3\n4: 4\n5: 5\n6: 6\n7: 7\n8: 8\n9: 9\n\
    0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n8: eight\n\
    9: nine\n0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n\
    8: eight\n9: nine\n0: 0\n1: 1\n2: 2\n3: 3\n4: 4\n5: 5\n6: 6\n7: 7\n8: 8\n9: 9\n\
    0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n8: eight\n\
    9: nine\n0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n\
    8: eight\n9: nine\n0: 0\n1: 1\n2: 2\n3: 3\n4: 4\n5: 5\n6: 6\n7: 7\n8: 8\n9: 9\n\
    0: zero\n1: one\n2: two\n3: three\n4: four\n5: five\n6: six\n7: seven\n8: eight\n\
    9: nine\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp3pcs7pbp_test.go:57: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp3pcs7pbp_test.go:57: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp3pcs7pbp_test.go:57: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp3pcs7pbp_test.go:57:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := map[string]int {\n  \
    \      \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    words_in\
    \ := map[int]string {\n        0: \"zero\",\n        1: \"one\",\n        2: \"\
    two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n  \
    \      6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"\
    nine\",\n    }\n    var nums []int\n    var num_string string\n    for _, v :=\
    \ range numbers {\n        if string(v) == \" \" {\n            v_int, ok := words[num_string]\n\
    \            if ok {\n                nums = append(nums, v_int)\n           \
    \ }\n            num_string = \"\"\n        } else {\n            num_string +=\
    \ string(v)\n        }\n    }\n    v_int, ok := words[num_string]\n    if ok {\n\
    \        nums = append(nums, v_int)\n    }\n    for i := 0; i < len(nums) - 1;\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i]\
    \ > nums[j] {\n                tmp := nums[i]\n                nums[i] = nums[j]\n\
    \                nums[j] = tmp\n            }\n        }\n    }\n    var ret string\n\
    \    for _, v := range nums {\n        ret += words_in[v] + \" \"\n    }\n   \
    \ ret = ret[:len(ret) - 1]\n    return ret\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x0, 0x0})\n\t/tmp/tmpw08ax6t5_test.go:68\
    \ +0x7ba\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmpw08ax6t5_test.go:79\
    \ +0x45\ntesting.tRunner(0xc0001a0340, 0x529158)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    num_map := map[string]int{\n \
    \       \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_array\
    \ := []int{}\n    for _, number := range strings.Split(numbers, \" \") {\n   \
    \     if _, ok := num_map[number]; ok {\n            num_array = append(num_array,\
    \ num_map[number])\n        }\n    }\n    sort.Ints(num_array)\n    number_string\
    \ := \"\"\n    for _, number := range num_array {\n        number_string += strconv.Itoa(number)\
    \ + \" \"\n    }\n    return number_string[:len(number_string)-1]\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp948my6ku_test.go:27:28: undefined: strings

    /tmp/tmp948my6ku_test.go:32:5: undefined: sort

    /tmp/tmp948my6ku_test.go:35:26: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numberMap = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numberals\
    \ := split_to_words(numbers)\n    var numberSlice []int\n    for _, numberal :=\
    \ range numberals {\n        numberSlice = append(numberSlice, numberMap[numberal])\n\
    \    }\n    sort_ints(numberSlice)\n    var result = \"\"\n    for i, number :=\
    \ range numberSlice {\n        if i > 0 {\n            result += \" \"\n     \
    \   }\n        for numberal, num := range numberMap {\n            if num == number\
    \ {\n                result += numberal\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1r5eg21p_test.go:26:18: undefined: split_to_words

    /tmp/tmp1r5eg21p_test.go:31:5: undefined: sort_ints

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []string{\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"}\n    words := []string{}\n    output := []string{}\n    greater :=\
    \ false\n    result := \"\"\n\n    // split the given string\n    for _, w :=\
    \ range numbers {\n        if w == ' ' {\n            continue\n        }\n  \
    \      words = append(words, string(w))\n    }\n\n    // find the smallest number\
    \ and place it in the output array\n    for _, n := range nums {\n        for\
    \ _, w := range words {\n            if n == w {\n                output = append(output,\
    \ n)\n                break\n            }\n        }\n    }\n\n    // sort the\
    \ output array and return it\n    if len(output) == 1 {\n        return output[0]\n\
    \    }\n    for j := 0; j < len(output); j++ {\n        for i := 0; i < len(output)-1;\
    \ i++ {\n            if output[i] > output[i+1] {\n                output[i],\
    \ output[i+1] = output[i+1], output[i]\n                greater = true\n     \
    \       }\n        }\n        if !greater {\n            break\n        }\n  \
    \  }\n    for _, o := range output {\n        result += o + \" \"\n    }\n   \
    \ return result[:len(result)-1]\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x0, 0x0})\n\t/tmp/tmpvn5g_0jt_test.go:56\
    \ +0x392\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmpvn5g_0jt_test.go:66\
    \ +0x45\ntesting.tRunner(0xc0001a01a0, 0x528ff8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numMap = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    ns :=\
    \ make([]int, 0)\n    for _, n := range numbers {\n        if n != ' ' {\n   \
    \         ns = append(ns, numMap[string(n)])\n        }\n    }\n    fmt.Println(ns)\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0]\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp5zw97mjw_test.go:53: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp5zw97mjw_test.go:53: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp5zw97mjw_test.go:53: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp5zw97mjw_test.go:53:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpi3wkmk3e_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpi3wkmk3e_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpi3wkmk3e_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpi3wkmk3e_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    m := map[string]int{\n       \
    \ \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n\
    \        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var numbers_int\
    \ []int\n    for _, number := range(strings.Split(numbers, \" \")) {\n       \
    \ numbers_int = append(numbers_int, m[number])\n    }\n    sort.Ints(numbers_int)\n\
    \    var result string\n    for _, number := range(numbers_int) {\n        result\
    \ += strconv.Itoa(number) + \" \"\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0exa5lwc_test.go:27:28: undefined: strings

    /tmp/tmp0exa5lwc_test.go:30:5: undefined: sort

    /tmp/tmp0exa5lwc_test.go:33:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if numbers == \"\" {\n       \
    \ return \"\"\n    }\n\n    numbers_map := map[string]int{\n        \"zero\":\
    \ 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n      \
    \  \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    parsed_numbers\
    \ := make([]int, 0)\n    for _, v := range(strings.Split(numbers, \" \")) {\n\
    \        number, ok := numbers_map[v]\n        if ok {\n            parsed_numbers\
    \ = append(parsed_numbers, number)\n        }\n    }\n\n    sort.Ints(parsed_numbers)\n\
    \n    sorted_numbers := make([]string, 0)\n    for _, v := range(parsed_numbers)\
    \ {\n        for number, value := range(numbers_map) {\n            if v == value\
    \ {\n                sorted_numbers = append(sorted_numbers, number)\n       \
    \     }\n        }\n    }\n\n    return strings.Join(sorted_numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwj2t2wg_test.go:32:23: undefined: strings

    /tmp/tmpfwj2t2wg_test.go:39:5: undefined: sort

    /tmp/tmpfwj2t2wg_test.go:50:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tresult := \"\"\n\tsort_map := map[string]int{\n\
    \t\t\"zero\": 0,\n\t\t\"one\": 1,\n\t\t\"two\": 2,\n\t\t\"three\": 3,\n\t\t\"\
    four\": 4,\n\t\t\"five\": 5,\n\t\t\"six\": 6,\n\t\t\"seven\": 7,\n\t\t\"eight\"\
    : 8,\n\t\t\"nine\": 9,\n\t}\n\tvar nums []int\n\tfor _, n := range numbers {\n\
    \t\tif n == ' ' {\n\t\t\tcontinue\n\t\t}\n\t\tnum := sort_map[string(n)]\n\t\t\
    nums = append(nums, num)\n\t}\n\tsort(nums)\n\tfor _, n := range nums {\n\t\t\
    result += fmt.Sprintf(\"%d \", n)\n\t}\n\treturn result\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1o0nzu99_test.go:35:2: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    number_map := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    number_string_map\
    \ := map[int]string{\n        0: \"zero\",\n        1: \"one\",\n        2: \"\
    two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n  \
    \      6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"\
    nine\",\n    }\n    result := make([]int, 0)\n    for _, num := range numbers\
    \ {\n        if num == ' ' {\n            continue\n        }\n        if _, ok\
    \ := number_map[string(num)]; ok {\n            result = append(result, number_map[string(num)])\n\
    \        }\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcv4mmy0s_test.go:26:5: number_string_map declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    const zero, one, two, three, four,\
    \ five, six, seven, eight, nine int = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    number_mapping\
    \ := map[string]int{\n        \"zero\": zero,\n        \"one\": one,\n       \
    \ \"two\": two,\n        \"three\": three,\n        \"four\": four,\n        \"\
    five\": five,\n        \"six\": six,\n        \"seven\": seven,\n        \"eight\"\
    : eight,\n        \"nine\": nine,\n    }\n    number_names := map[int]string{\n\
    \        zero: \"zero\",\n        one: \"one\",\n        two: \"two\",\n     \
    \   three: \"three\",\n        four: \"four\",\n        five: \"five\",\n    \
    \    six: \"six\",\n        seven: \"seven\",\n        eight: \"eight\",\n   \
    \     nine: \"nine\",\n    }\n    number_list := make([]int, 0)\n    for _, number\
    \ := range numbers {\n        number_list = append(number_list, number_mapping[string(number)])\n\
    \    }\n    return \"tbd\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb__7rlx5_test.go:27:5: number_names declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    r := make([]string, len(numbers))\n\
    \    for _, c := range numbers {\n        r = append(r, numeral_to_string(string(c)))\n\
    \    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jariu86_test.go:16:23: undefined: numeral_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    split_numbers := strings.Split(numbers,\
    \ \" \")\n    sorted_numbers := []string{}\n    for _, number := range split_numbers\
    \ {\n        sorted_numbers = sorted_insert(sorted_numbers, number)\n    }\n \
    \   return strings.Join(sorted_numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0mvj528d_test.go:14:22: undefined: strings

    /tmp/tmp0mvj528d_test.go:17:26: undefined: sorted_insert

    /tmp/tmp0mvj528d_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    n2i := map[string]int{\n     \
    \   \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    n :=\
    \ []int{}\n    for _, number := range n2i {\n        n = append(n, number)\n \
    \   }\n    for i := 0; i < len(n) - 1; i++ {\n        for j := i + 1; j < len(n);\
    \ j++ {\n            if n[i] > n[j] {\n                n[i], n[j] = n[j], n[i]\n\
    \            }\n        }\n    }\n    sorted := []string{}\n    for _, number\
    \ := range n {\n        for n, i := range n2i {\n            if i == number {\n\
    \                sorted = append(sorted, n)\n            }\n        }\n    }\n\
    \    return strings.Join(sorted, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyiyvcm9e_test.go:45:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers_to_values := map[string]int{\n\
    \        \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n       \
    \ \"three\": 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\"\
    :   6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n\
    \    }\n\n    values := []int{}\n    for _, v := range numbers_to_values {\n \
    \       values = append(values, v)\n    }\n\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp8oh4mkg2_test.go:52: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp8oh4mkg2_test.go:52: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp8oh4mkg2_test.go:52: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp8oh4mkg2_test.go:52:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tnumbersMap := make(map[string]int)\n\
    \tnumbersMap[\"zero\"] = 0\n\tnumbersMap[\"one\"] = 1\n\tnumbersMap[\"two\"] =\
    \ 2\n\tnumbersMap[\"three\"] = 3\n\tnumbersMap[\"four\"] = 4\n\tnumbersMap[\"\
    five\"] = 5\n\tnumbersMap[\"six\"] = 6\n\tnumbersMap[\"seven\"] = 7\n\tnumbersMap[\"\
    eight\"] = 8\n\tnumbersMap[\"nine\"] = 9\n\n\tif len(numbers) == 0 {\n\t\treturn\
    \ \"\"\n\t}\n\n\tnumbersArr := make([]int, 0)\n\tnumbersSplit := strings.Split(numbers,\
    \ \" \")\n\tfor _, v := range numbersSplit {\n\t\tnumbersArr = append(numbersArr,\
    \ numbersMap[v])\n\t}\n\n\tsort.Ints(numbersArr)\n\n\treturn strings.Join(numbersArr,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8a6rlg55_test.go:31:18: undefined: strings

    /tmp/tmp8a6rlg55_test.go:36:2: undefined: sort

    /tmp/tmp8a6rlg55_test.go:38:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n     \
    \   return \"\"\n    }\n\n    wc := make(map[string]int)\n    ns := strings.Split(numbers,\
    \ \" \")\n    for _, n := range ns {\n        _, ok := wc[n]\n        if ok {\n\
    \            wc[n]++\n        } else {\n            wc[n] = 1\n        }\n   \
    \ }\n\n    nums := [9]string{\"zero\", \"one\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\", \"seven\", \"eight\", \"nine\"}\n    ret := \"\"\n    for\
    \ _, n := range nums {\n        for i := 0; i < wc[n]; i++ {\n            ret\
    \ += \" \" + n\n        }\n    }\n\n    return strings.Trim(ret, \" \")\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgby2ai6_test.go:19:11: undefined: strings

    /tmp/tmplgby2ai6_test.go:29:95: index 9 is out of bounds (>= 9)

    /tmp/tmplgby2ai6_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    //return numbers\n    return \"\
    \"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmptj625mc1_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmptj625mc1_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmptj625mc1_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmptj625mc1_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := map[string]int {\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ numeralStr string\n    var numeralInt []int\n    for _, numeral := range strings.Split(numbers,\
    \ \" \") {\n        if num, ok := nums[numeral]; ok {\n            numeralInt\
    \ = append(numeralInt, num)\n        }\n    }\n    sort.Ints(numeralInt)\n   \
    \ for _, numeral := range numeralInt {\n        numeralStr += fmt.Sprintf(\"%v\
    \ \", numeral)\n    }\n    return strings.TrimSpace(numeralStr)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eisvnf5_test.go:28:29: undefined: strings

    /tmp/tmp4eisvnf5_test.go:33:5: undefined: sort

    /tmp/tmp4eisvnf5_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numStr := []string{}\n    for\
    \ _, n := range numbers {\n        if n == ' ' {\n            continue\n     \
    \   }\n        numStr = append(numStr, string(n))\n    }\n    n, m := len(numStr),\
    \ len(numStr)\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < m-1-i;\
    \ j++ {\n            if numStr[j] > numStr[j+1] {\n                numStr[j],\
    \ numStr[j+1] = numStr[j+1], numStr[j]\n            }\n        }\n    }\n    return\
    \ fmt.Sprintf(\"%s\", numStr)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpz42qs841_test.go:49: expected '', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmpz42qs841_test.go:49: expected\
    \ 'three', got '[e e h r t]'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n\
    \        tmpz42qs841_test.go:49: expected 'three five nine', got '[e e e e f h\
    \ i i n n r t v]'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n      \
    \  tmpz42qs841_test.go:49: expected 'zero four five seven eight nine', got '[e\
    \ e e e e e f f g h i i i n n n o o r r s t u v v z]'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpz42qs841_test.go:49: expected 'zero one two three four five\
    \ six', got '[e e e e e f f h i i n o o o o r r r s t t u v w x z]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tnums := [9]string{\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    }\n\tm := make(map[string]int)\n\tfor k, v := range nums {\n\t\tm[v] = k\n\t}\n\
    \t//fmt.Println(m)\n\tvar strs []string\n\tfor _, v := range strings.Split(numbers,\
    \ \" \") {\n\t\tstrs = append(strs, v)\n\t}\n\t//fmt.Println(strs)\n\tsort.Slice(strs,\
    \ func(i, j int) bool {\n\t\treturn m[strs[i]] < m[strs[j]]\n\t})\n\t//fmt.Println(strs)\n\
    \treturn strings.Join(strs, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphobjlxcd_test.go:14:92: index 9 is out of bounds (>= 9)

    /tmp/tmphobjlxcd_test.go:21:20: undefined: strings

    /tmp/tmphobjlxcd_test.go:25:2: undefined: sort

    /tmp/tmphobjlxcd_test.go:29:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums [10]int\n    var sorted\
    \ string\n\n    for _, num := range numbers {\n        switch num {\n        case\
    \ 'z':\n            nums[0]++\n        case 'o':\n            nums[1]++\n    \
    \    case 'w':\n            nums[2]++\n        case 'h':\n            nums[3]++\n\
    \        case 'u':\n            nums[4]++\n        case 'f':\n            nums[5]++\n\
    \        case 'x':\n            nums[6]++\n        case 's':\n            nums[7]++\n\
    \        case 'g':\n            nums[8]++\n        case 'n':\n            nums[9]++\n\
    \        }\n    }\n\n    for i, num := range nums {\n        for j := 0; j < num;\
    \ j++ {\n            switch i {\n            case 0:\n                sorted +=\
    \ \"zero \"\n            case 1:\n                sorted += \"one \"\n       \
    \     case 2:\n                sorted += \"two \"\n            case 3:\n     \
    \           sorted += \"three \"\n            case 4:\n                sorted\
    \ += \"four \"\n            case 5:\n                sorted += \"five \"\n   \
    \         case 6:\n                sorted += \"six \"\n            case 7:\n \
    \               sorted += \"seven \"\n            case 8:\n                sorted\
    \ += \"eight \"\n            case 9:\n                sorted += \"nine \"\n  \
    \          }\n        }\n    }\n\n    return sorted[:len(sorted)-1]\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x0, 0x0})\n\t/tmp/tmpofzoqmgv_test.go:69\
    \ +0x1e5\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmpofzoqmgv_test.go:79\
    \ +0x45\ntesting.tRunner(0xc000103520, 0x529008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // convert list of words to list\
    \ of numbers\n    words := make([]string, 0)\n    numbers_lst := make([]int, 0)\n\
    \    for _, number := range numbers {\n        if number != 32 {\n           \
    \ words = append(words, string(number))\n        }\n    }\n    for _, word :=\
    \ range words {\n        numbers_lst = append(numbers_lst, word_to_num(word))\n\
    \    }\n    // sort numbers\n    for i := 0; i < len(numbers_lst) - 1; i++ {\n\
    \        if numbers_lst[i] > numbers_lst[i + 1] {\n            numbers_lst[i],\
    \ numbers_lst[i + 1] = numbers_lst[i + 1], numbers_lst[i]\n            if i >\
    \ 0 {\n                i -= 2\n            }\n        }\n    }\n    // convert\
    \ back to string\n    numbers_sorted := \"\"\n    for _, num := range numbers_lst\
    \ {\n        numbers_sorted += num_to_word(num) + \" \"\n    }\n    return numbers_sorted[:len(numbers_sorted)\
    \ - 1]\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9gre8kk_test.go:23:43: undefined: word_to_num

    /tmp/tmpf9gre8kk_test.go:37:27: undefined: num_to_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // XXX: You should implement this\
    \ function by yourself.\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpqd_3zb6g_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpqd_3zb6g_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpqd_3zb6g_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpqd_3zb6g_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums map[string]int = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ output []string = make([]string, 0)\n    var input []string = make([]string,\
    \ 0)\n    var split []string = make([]string, 0)\n    split = strings.Split(numbers,\
    \ \" \")\n    for i := 0; i < len(split); i++ {\n        input = append(input,\
    \ nums[split[i]])\n    }\n    for i := 0; i < len(input); i++ {\n        for j\
    \ := 0; j < len(input); j++ {\n            if input[i] < input[j] {\n        \
    \        var temp string = input[i]\n                input[i] = input[j]\n   \
    \             input[j] = temp\n            }\n        }\n    }\n    for i := 0;\
    \ i < len(input); i++ {\n        for k, v := range nums {\n            if input[i]\
    \ == v {\n                output = append(output, k)\n            }\n        }\n\
    \    }\n    return strings.Join(output, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0qmiyz4_test.go:29:13: undefined: strings

    /tmp/tmpm0qmiyz4_test.go:31:31: cannot use nums[split[i]] (map index expression
    of type int) as type string in argument to append

    /tmp/tmpm0qmiyz4_test.go:44:28: invalid operation: input[i] == v (mismatched types
    string and int)

    /tmp/tmpm0qmiyz4_test.go:49:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var words []string = make([]string,\
    \ 0)\n    var numbersMap map[string]int = map[string]int{\n        \"zero\": 0,\n\
    \        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    }\n    for word := range numbersMap\
    \ {\n        words = append(words, word)\n    }\n    fmt.Println(words)\n    return\
    \ \"one three five\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[two four five six eight nine zero one three seven]\n[four six nine zero\
    \ two three five seven eight one]\n[two three four five six eight zero one seven\
    \ nine]\n[three five eight nine two one four six seven zero]\n[two four eight\
    \ nine zero one three five six seven]\n--- FAIL: TestSort_Numbers (0.00s)\n  \
    \  --- FAIL: TestSort_Numbers/test_num__0 (0.00s)\n        tmpo4uycscb_test.go:51:\
    \ expected '', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpo4uycscb_test.go:51: expected 'three', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n        tmpo4uycscb_test.go:51:\
    \ expected 'three five nine', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpo4uycscb_test.go:51: expected 'zero four five seven eight\
    \ nine', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n\
    \        tmpo4uycscb_test.go:51: expected 'zero one two three four five six',\
    \ got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    word2digit := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ digits []int\n    for _, num := range numbers {\n        if num != ' ' {\n \
    \           digits = append(digits, word2digit[string(num)])\n        }\n    }\n\
    \    for i := 1; i < len(digits); i++ {\n        j := i - 1\n        for ; j >=\
    \ 0 && digits[j] > digits[j+1]; j-- {\n            digits[j], digits[j+1] = digits[j+1],\
    \ digits[j]\n        }\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmppbt80kdh_test.go:58: expected '', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmppbt80kdh_test.go:58: expected\
    \ 'three', got '[0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n\
    \        tmppbt80kdh_test.go:58: expected 'three five nine', got '[0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n      \
    \  tmppbt80kdh_test.go:58: expected 'zero four five seven eight nine', got '[0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmppbt80kdh_test.go:58: expected 'zero one two three four five\
    \ six', got '[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\treturn numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmptzm2t_6d_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmptzm2t_6d_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := strings.Split(numbers,\
    \ \" \")\n    sort.Sort(NumberWords(words))\n    return strings.Join(words, \"\
    \ \")\n}\n\ntype NumberWords []string\n\nvar (\n    numbers_in_words = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n)\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5pn2pe7e_test.go:14:14: undefined: strings

    /tmp/tmp5pn2pe7e_test.go:15:5: undefined: sort

    /tmp/tmp5pn2pe7e_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // return strNumbers\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmptl66xemr_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmptl66xemr_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmptl66xemr_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmptl66xemr_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\ta := strings.Split(numbers, \" \"\
    )\n\ti := 0\n\tfor i < len(a) {\n\t\ta[i] = strings.Trim(a[i], \" \")\n\t\ti++\n\
    \t}\n\tsort.Strings(a)\n\treturn strings.Join(a, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpip_6_9i2_test.go:14:7: undefined: strings

    /tmp/tmpip_6_9i2_test.go:17:10: undefined: strings

    /tmp/tmpip_6_9i2_test.go:20:2: undefined: sort

    /tmp/tmpip_6_9i2_test.go:21:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    mapping := map[string]int{\n \
    \       \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numbersSlice\
    \ := make([]int, 0)\n    numbersSlice = append(numbersSlice, mapping[numbers])\n\
    \    fmt.Println(numbersSlice)\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[0]\n[3]\n[0]\n[0]\n[0]\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmpx9nbftyf_test.go:49: expected\
    \ 'three', got ''\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n      \
    \  tmpx9nbftyf_test.go:49: expected 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpx9nbftyf_test.go:49: expected 'zero four five seven eight\
    \ nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpx9nbftyf_test.go:49:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums []int\n    for _,n :=\
    \ range numbers {\n        switch n {\n        case 'o': nums = append(nums,1)\n\
    \        case 't': nums = append(nums,2)\n        case 'h': nums = append(nums,3)\n\
    \        case 'f': nums = append(nums,4)\n        case 'i': nums = append(nums,5)\n\
    \        case 's': nums = append(nums,6)\n        case 'e': nums = append(nums,7)\n\
    \        case 'n': nums = append(nums,8)\n        case 'e': nums = append(nums,9)\n\
    \        }\n    }\n    // TODO\n    fmt.Println(nums)\n    return \"\"\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpac85e0uc_test.go:25:14:\
    \ duplicate case 'e' (constant 101 of type rune) in expression switch\n\t/tmp/tmpac85e0uc_test.go:23:14:\
    \ previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := map[string]int{\n    \
    \    \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list\
    \ := make([]int, 0)\n    words := strings.Split(numbers, \" \")\n    for _, word\
    \ := range words {\n        num_list = append(num_list, nums[word])\n    }\n \
    \   sort.Ints(num_list)\n    result := make([]string, 0)\n    for _, num := range\
    \ num_list {\n        for word, value := range nums {\n            if value ==\
    \ num {\n                result = append(result, word)\n            }\n      \
    \  }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2prbsg6b_test.go:27:14: undefined: strings

    /tmp/tmp2prbsg6b_test.go:31:5: undefined: sort

    /tmp/tmp2prbsg6b_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    i := 1\n    l := len(numbers)\n\
    \    ordered := make([]byte, l, l)\n    ordered[0] = numbers[0]\n    for {\n \
    \       if i == l {\n            break\n        }\n        if ordered[i-1] ==\
    \ ' ' {\n            ordered[i] = numbers[i]\n            i++\n            continue\n\
    \        }\n        for j := i - 1; j >= 0; j-- {\n            if ordered[j] ==\
    \ ' ' {\n                ordered[j+1] = numbers[i]\n                break\n  \
    \          }\n            if numbers[i] <= ordered[j] {\n                copy(ordered[j+2:],\
    \ ordered[j+1:i])\n                ordered[j+1] = numbers[i]\n               \
    \ break\n            }\n        }\n        i++\n    }\n    return string(ordered)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x0, 0x0})\n\t/tmp/tmptfmk97yc_test.go:17\
    \ +0x1ec\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmptfmk97yc_test.go:50\
    \ +0x45\ntesting.tRunner(0xc0001a0340, 0x528fd8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if numbers == \"\" {\n       \
    \ return \"\"\n    }\n\n    nums := make([]int, len(numbers))\n    for i, r :=\
    \ range numbers {\n        switch string(r) {\n        case \"z\":\n         \
    \   nums[i] = 0\n        case \"o\":\n            nums[i] = 1\n        case \"\
    t\":\n            nums[i] = 2\n        case \"h\":\n            nums[i] = 3\n\
    \        case \"f\":\n            nums[i] = 4\n        case \"i\":\n         \
    \   nums[i] = 5\n        case \"s\":\n            nums[i] = 6\n        case \"\
    e\":\n            nums[i] = 7\n        case \"n\":\n            nums[i] = 8\n\
    \        case \"i\":\n            nums[i] = 9\n        }\n    }\n\n    output\
    \ := make([]int, len(numbers))\n    for i, _ := range output {\n        output[i]\
    \ = 2\n    }\n\n    fmt.Println(nums)\n    fmt.Println(output)\n\n    for i, _\
    \ := range nums {\n        j := i\n        for j > 0 && nums[j] < nums[j-1] {\n\
    \            t := nums[j]\n            nums[j] = nums[j-1]\n            nums[j-1]\
    \ = t\n            j--\n        }\n    }\n\n    fmt.Println(nums)\n    fmt.Println(output)\n\
    \n    return \"asdf\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1nj1xb7g_test.go:39:14:\
    \ duplicate case \"i\" (constant of type string) in expression switch\n\t/tmp/tmp1nj1xb7g_test.go:31:14:\
    \ previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var names = [10]string{\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"}\n    var nums = [10]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    var numMap\
    \ = make(map[string]int)\n    for i, name := range names {\n        numMap[name]\
    \ = nums[i]\n    }\n    var numsSlice []int\n    var numNames []string\n    for\
    \ _, name := range names {\n        if strings.Contains(numbers, name) {\n   \
    \         numsSlice = append(numsSlice, numMap[name])\n            numNames =\
    \ append(numNames, name)\n        }\n    }\n    sort.Ints(numsSlice)\n    var\
    \ sorted string\n    for _, num := range numsSlice {\n        for i, name := range\
    \ numNames {\n            if numMap[name] == num {\n                if sorted\
    \ == \"\" {\n                    sorted = name\n                } else {\n   \
    \                 sorted = sorted + \" \" + name\n                }\n        \
    \        numNames = append(numNames[:i], numNames[i+1:]...)\n                break\n\
    \            }\n        }\n    }\n    return sorted\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv18t3ebp_test.go:23:12: undefined: strings

    /tmp/tmpv18t3ebp_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    a := map[string]int{\n       \
    \ \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\"\
    : 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n  \
    \      \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n  \
    \  numArray := []int{}\n    for _, v := range numbers {\n        if v != 32 {\n\
    \            numArray = append(numArray, a[string(v)])\n        }\n    }\n   \
    \ n := len(numArray)\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1;\
    \ j++ {\n            if numArray[j] > numArray[j+1] {\n                t := numArray[j]\n\
    \                numArray[j] = numArray[j+1]\n                numArray[j+1] =\
    \ t\n            }\n        }\n    }\n    for i, _ := range numArray {\n     \
    \   for k, v := range a {\n            if numArray[i] == v {\n               \
    \ numArray[i] = k\n            }\n        }\n    }\n    fmt.Println(numArray)\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1ozoko1_test.go:45:31: cannot use k (variable of type string) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Split string into slice\n \
    \   numbersSplit := strings.Split(numbers, \" \")\n    var numbersSplit2 []int\n\
    \    for _, v := range numbersSplit {\n        numbersSplit2 = append(numbersSplit2,\
    \ int(v))\n    }\n    sort.Ints(numbersSplit2)\n    var numbersSplit3 []string\n\
    \    for _, v := range numbersSplit2 {\n        numbersSplit3 = append(numbersSplit3,\
    \ string(v))\n    }\n    return strings.Join(numbersSplit3, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjfwb7o3_test.go:15:21: undefined: strings

    /tmp/tmpgjfwb7o3_test.go:20:5: undefined: sort

    /tmp/tmpgjfwb7o3_test.go:25:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums = make([]int, len(numbers))\n\
    \    var i int\n    for _, number := range numbers {\n        nums[i] = int(number)\n\
    \        i += 1\n    }\n    for i, _ := range nums {\n        fmt.Println(nums[i])\n\
    \    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "116\n104\n114\n101\n101\n116\n104\n114\n101\n101\n32\n102\n105\n118\n101\n\
    32\n110\n105\n110\n101\n102\n105\n118\n101\n32\n122\n101\n114\n111\n32\n102\n\
    111\n117\n114\n32\n115\n101\n118\n101\n110\n32\n110\n105\n110\n101\n32\n101\n\
    105\n103\n104\n116\n115\n105\n120\n32\n102\n105\n118\n101\n32\n102\n111\n117\n\
    114\n32\n116\n104\n114\n101\n101\n32\n116\n119\n111\n32\n111\n110\n101\n32\n122\n\
    101\n114\n111\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmppjuav73k_test.go:43: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmppjuav73k_test.go:43: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmppjuav73k_test.go:43: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmppjuav73k_test.go:43:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbersSlice := strings.Split(numbers,\
    \ \" \")\n    // map of integer to string\n    sortedSlice := make(map[int]string)\n\
    \    for _, value := range numbersSlice {\n        sortedSlice[switchString(value)]\
    \ = value\n    }\n    return strings.Join(sortedSlice, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd734yo0__test.go:14:21: undefined: strings

    /tmp/tmpd734yo0__test.go:18:21: undefined: switchString

    /tmp/tmpd734yo0__test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(numbers)\n    return\
    \ numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "\nthree\nthree five nine\nfive zero four seven nine eight\nsix five four\
    \ three two one zero\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmp6a31g2og_test.go:35: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmp6a31g2og_test.go:35: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\treturn \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpd69rvh8h_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpd69rvh8h_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpd69rvh8h_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpd69rvh8h_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := map[string]int{\n    \
    \    \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\"\
    : 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n  \
    \      \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n  \
    \  ints := []int{}\n    for _, word := range strings.Split(numbers, \" \") {\n\
    \        ints = append(ints, nums[word])\n    }\n    sort.Ints(ints)\n    words\
    \ := []string{}\n    for _, num := range ints {\n        for word, int := range\
    \ nums {\n            if int == num {\n                words = append(words, word)\n\
    \            }\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol5uc3cb_test.go:27:26: undefined: strings

    /tmp/tmpol5uc3cb_test.go:30:5: undefined: sort

    /tmp/tmpol5uc3cb_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // get the actual numbers\n  \
    \  nums := to_numbers(numbers)\n    // sort the numbers\n    nums = bubble_sort(nums)\n\
    \    // convert back to words\n    return to_words(nums)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgy8531h_test.go:15:13: undefined: to_numbers

    /tmp/tmplgy8531h_test.go:17:12: undefined: bubble_sort

    /tmp/tmplgy8531h_test.go:19:12: undefined: to_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numeral string\n    var array\
    \ []int\n    numeral = numbers\n    numeral = numeral + \" \"\n    for i := 0;\
    \ i < len(numeral); i++ {\n        if numeral[i] == ' ' {\n            if numeral[i-3:i]\
    \ == \"one\" {\n                array = append(array, 1)\n            } else if\
    \ numeral[i-4:i] == \"two\" {\n                array = append(array, 2)\n    \
    \        } else if numeral[i-5:i] == \"three\" {\n                array = append(array,\
    \ 3)\n            } else if numeral[i-4:i] == \"four\" {\n                array\
    \ = append(array, 4)\n            } else if numeral[i-4:i] == \"five\" {\n   \
    \             array = append(array, 5)\n            } else if numeral[i-3:i] ==\
    \ \"six\" {\n                array = append(array, 6)\n            } else if numeral[i-5:i]\
    \ == \"seven\" {\n                array = append(array, 7)\n            } else\
    \ if numeral[i-5:i] == \"eight\" {\n                array = append(array, 8)\n\
    \            } else if numeral[i-4:i] == \"nine\" {\n                array = append(array,\
    \ 9)\n            } else if numeral[i-4:i] == \"zero\" {\n                array\
    \ = append(array, 0)\n            }\n        }\n    }\n    for i := 0; i < len(array);\
    \ i++ {\n        for j := i + 1; j < len(array); j++ {\n            if array[i]\
    \ > array[j] {\n                array[i], array[j] = array[j], array[i]\n    \
    \        }\n        }\n    }\n    numbers = \"\"\n    for i := 0; i < len(array);\
    \ i++ {\n        if array[i] == 0 {\n            numbers = numbers + \"zero \"\
    \n        } else if array[i] == 1 {\n            numbers = numbers + \"one \"\n\
    \        } else if array[i] == 2 {\n            numbers = numbers + \"two \"\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfr7pix26_test.go:59:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    switch numbers {\n    case \"\
    three one five\":\n        return \"one three five\"\n    case \"three one five\
    \ seven nine\":\n        return \"one three five seven nine\"\n    default:\n\
    \        return \"\"\n    }\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp687rg6b2_test.go:41: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp687rg6b2_test.go:41: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp687rg6b2_test.go:41: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp687rg6b2_test.go:41:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numeric_map := make(map[string]int)\n\
    \    numeric_map[\"zero\"] = 0\n    numeric_map[\"one\"] = 1\n    numeric_map[\"\
    two\"] = 2\n    numeric_map[\"three\"] = 3\n    numeric_map[\"four\"] = 4\n  \
    \  numeric_map[\"five\"] = 5\n    numeric_map[\"six\"] = 6\n    numeric_map[\"\
    seven\"] = 7\n    numeric_map[\"eight\"] = 8\n    numeric_map[\"nine\"] = 9\n\n\
    \    var list []int\n    for _, num := range numbers {\n        num_str := string(num)\n\
    \        if val, ok := numeric_map[num_str]; ok {\n            list = append(list,\
    \ val)\n        }\n    }\n\n    return fmt.Sprintf(\"%d\", list)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpe2jdxk77_test.go:54: expected '', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmpe2jdxk77_test.go:54: expected\
    \ 'three', got '[]'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n    \
    \    tmpe2jdxk77_test.go:54: expected 'three five nine', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__3 (0.00s)\n        tmpe2jdxk77_test.go:54: expected\
    \ 'zero four five seven eight nine', got '[]'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpe2jdxk77_test.go:54: expected 'zero one two three four five\
    \ six', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // convert 'numbers' to an array\
    \ of ints\n    digits := parse_number_string(numbers)\n    // sort the array of\
    \ ints (implementation left as an exercise for the reader)\n    sorted := quick_sort(digits)\n\
    \    // convert the sorted array of ints to a string\n    output := convert_to_string(sorted)\n\
    \    return output\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrqn3ees_test.go:15:15: undefined: parse_number_string

    /tmp/tmpjrqn3ees_test.go:17:15: undefined: quick_sort

    /tmp/tmpjrqn3ees_test.go:19:15: undefined: convert_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var ints []int\n    var nums =\
    \ map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9,\n    }\n    for _, num := range numbers {\n        ints = append(ints, nums[string(num)])\n\
    \    }\n    return fmt.Sprintf(\"%v\", ints)\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmn6gmyg6_test.go:50: expected '', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmpmn6gmyg6_test.go:50: expected\
    \ 'three', got '[0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n\
    \        tmpmn6gmyg6_test.go:50: expected 'three five nine', got '[0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n  \
    \      tmpmn6gmyg6_test.go:50: expected 'zero four five seven eight nine', got\
    \ '[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmn6gmyg6_test.go:50: expected\
    \ 'zero one two three four five six', got '[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tdata := make(map[string]int)\n\t\
    data[\"zero\"] = 0\n\tdata[\"one\"] = 1\n\tdata[\"two\"] = 2\n\tdata[\"three\"\
    ] = 3\n\tdata[\"four\"] = 4\n\tdata[\"five\"] = 5\n\tdata[\"six\"] = 6\n\tdata[\"\
    seven\"] = 7\n\tdata[\"eight\"] = 8\n\tdata[\"nine\"] = 9\n\n\tvar values []int\n\
    \tvar result string\n\n\t// Convert string to array of integers\n\tfor _, value\
    \ := range numbers {\n\t\tif value != 32 {\n\t\t\tvalues = append(values, data[string(value)])\n\
    \t\t}\n\t}\n\n\t// Sort array from smallest to largest\n\tfor i := 0; i < len(values);\
    \ i++ {\n\t\tfor j := i + 1; j < len(values); j++ {\n\t\t\tif values[i] > values[j]\
    \ {\n\t\t\t\ttemp := values[i]\n\t\t\t\tvalues[i] = values[j]\n\t\t\t\tvalues[j]\
    \ = temp\n\t\t\t}\n\t\t}\n\t}\n\n\t// Convert array to string\n\tfor i := 0; i\
    \ < len(values); i++ {\n\t\tif i < len(values) - 1 {\n\t\t\tresult += fmt.Sprintf(\"\
    %s \", values[i])\n\t\t} else {\n\t\t\tresult += fmt.Sprintf(\"%s\", values[i])\n\
    \t\t}\n\t}\n\n\treturn result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp22_278g7_test.go:50:14: fmt.Sprintf format %s has arg values[i] of wrong
    type int

    /tmp/tmp22_278g7_test.go:52:14: fmt.Sprintf format %s has arg values[i] of wrong
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // get the map of words to digits\n\
    \    numMap := getNumMap()\n    // get a slice of words\n    wordSlice := getWordSlice(numbers)\n\
    \    // get a slice of digits\n    digits := getDigits(wordSlice, numMap)\n  \
    \  // sort the digits\n    sortedDigits := getSortedDigits(digits)\n    // get\
    \ a slice of words\n    sortedWords := getWords(sortedDigits, numMap)\n    //\
    \ get a string of space-delimited words\n    return getNumbers(sortedWords)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3he7vsn_test.go:15:15: undefined: getNumMap

    /tmp/tmpj3he7vsn_test.go:17:18: undefined: getWordSlice

    /tmp/tmpj3he7vsn_test.go:19:15: undefined: getDigits

    /tmp/tmpj3he7vsn_test.go:21:21: undefined: getSortedDigits

    /tmp/tmpj3he7vsn_test.go:23:20: undefined: getWords

    /tmp/tmpj3he7vsn_test.go:25:12: undefined: getNumbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    sort := map[string]int{\n    \
    \    \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    nums\
    \ := make([]int, 0)\n    for _, n := range strings.Split(numbers, \" \") {\n \
    \       n = strings.TrimSpace(n)\n        if sort[n] > 0 {\n            nums =\
    \ append(nums, sort[n])\n        }\n    }\n    ret := make([]string, 0)\n    for\
    \ _, n := range nums {\n        for k, v := range sort {\n            if v ==\
    \ n {\n                ret = append(ret, k)\n            }\n        }\n    }\n\
    \    return strings.Join(ret, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9jvkkfo_test.go:27:23: undefined: strings

    /tmp/tmpk9jvkkfo_test.go:28:13: undefined: strings

    /tmp/tmpk9jvkkfo_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numMap = map[string]int{\n\
    \        \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n       \
    \ \"three\": 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\"\
    :   6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n\
    \    }\n\n    num_arr := []int{}\n    for _, num_str := range strings.Split(numbers,\
    \ \" \") {\n        num_arr = append(num_arr, numMap[num_str])\n    }\n\n    sort.Ints(num_arr)\n\
    \n    for _, num := range num_arr {\n        fmt.Println(num)\n    }\n\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl073ygtj_test.go:28:29: undefined: strings

    /tmp/tmpl073ygtj_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []string{\n        \"\
    zero\",\n        \"one\",\n        \"two\",\n        \"three\",\n        \"four\"\
    ,\n        \"five\",\n        \"six\",\n        \"seven\",\n        \"eight\"\
    ,\n        \"nine\",\n    }\n    dict := make(map[string]int)\n    for i, v :=\
    \ range nums {\n        dict[v] = i\n    }\n    num_list := []int{}\n    for _,\
    \ v := range numbers {\n        if v != ' ' {\n            num_list = append(num_list,\
    \ dict[string(v)])\n        }\n    }\n    output := \"\"\n    sorted_list := sort_list(num_list)\n\
    \    for _, v := range sorted_list {\n        output += nums[v] + \" \"\n    }\n\
    \    return output\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6j7jwyjf_test.go:37:20: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var str = numbers\n    var numberals\
    \ = []string {\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\",\n    }\n    var result = make([]string,\
    \ 0)\n    var set = make(map[string]bool)\n    var index int\n    var i int\n\
    \    for i, _ = range numberals {\n        set[numberals[i]] = true\n    }\n \
    \   for i, _ = range str {\n        if str[i] == ' ' {\n            if set[str[index:i]]\
    \ {\n                result = append(result, str[index:i])\n            }\n  \
    \          index = i + 1\n        }\n    }\n    if set[str[index:i+1]] {\n   \
    \     result = append(result, str[index:i+1])\n    }\n    return fmt.Sprintf(\"\
    %s\", result)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 0 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x0, 0x0})\n\t/tmp/tmpqyhbcqp7_test.go:33\
    \ +0x53a\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmpqyhbcqp7_test.go:46\
    \ +0x45\ntesting.tRunner(0xc0001a01a0, 0x529158)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    //var (\n    //    len int\n \
    \   //    numbers []string\n    //)\n    //\n    //len = len(numbers)\n    //numbers\
    \ = make([]string, len)\n    //\n    //for _, item := range numbers {\n    //\
    \    switch item {\n    //    case \"zero\":\n    //        numbers[0] = item\n\
    \    //    case \"one\":\n    //        numbers[1] = item\n    //    case \"two\"\
    :\n    //        numbers[2] = item\n    //    case \"three\":\n    //        numbers[3]\
    \ = item\n    //    case \"four\":\n    //        numbers[4] = item\n    //  \
    \  case \"five\":\n    //        numbers[5] = item\n    //    case \"six\":\n\
    \    //        numbers[6] = item\n    //    case \"seven\":\n    //        numbers[7]\
    \ = item\n    //    case \"eight\":\n    //        numbers[8] = item\n    // \
    \   case \"nine\":\n    //        numbers[9] = item\n    //    }\n    //}\n  \
    \  //\n    //for i := 0; i < len; i++ {\n    //    for j := i + 1; j < len; j++\
    \ {\n    //        if numbers[i] > numbers[j] {\n    //            numbers[i],\
    \ numbers[j] = numbers[j], numbers[i]\n    //        }\n    //    }\n    //}\n\
    \    //\n    //return numbers\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpsvtkl_b8_test.go:76: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpsvtkl_b8_test.go:76: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpsvtkl_b8_test.go:76: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpsvtkl_b8_test.go:76:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    number_map := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    words\
    \ := make([]string, 0)\n    //convert to numbers\n    for _, w := range numbers\
    \ {\n        if w == 32 {\n            continue\n        }\n        words = append(words,\
    \ string(w))\n    }\n    fmt.Println(words)\n    // sort\n    for k, v := range\
    \ words {\n        for kk, vv := range words {\n            if number_map[v] <\
    \ number_map[vv] {\n                words[k], words[kk] = words[kk], words[k]\n\
    \            }\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xropc9f_test.go:43:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // parse string\n    tokens :=\
    \ make([]string, 0)\n    for _, tok := range strings.Split(numbers, \" \") {\n\
    \        tokens = append(tokens, tok)\n    }\n\n    // sort\n    start, end :=\
    \ 0, len(tokens) - 1\n    if start < end {\n        pivot := tokens[start]\n \
    \       left, right := start, end\n        for left < right {\n            for\
    \ left < right && toNum(tokens[right]) >= toNum(pivot) {\n                right--\n\
    \            }\n            tokens[left] = tokens[right]\n            for left\
    \ < right && toNum(tokens[left]) <= toNum(pivot) {\n                left++\n \
    \           }\n            tokens[right] = tokens[left]\n        }\n        tokens[left]\
    \ = pivot\n        sort_numbers(tokens, start, left-1)\n        sort_numbers(tokens,\
    \ left+1, end)\n    }\n\n    // compose string\n    var buffer bytes.Buffer\n\
    \    for i, tok := range tokens {\n        if i != 0 {\n            buffer.WriteString(\"\
    \ \")\n        }\n        buffer.WriteString(tok)\n    }\n    return buffer.String()\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8fyw062c_test.go:16:25:\
    \ undefined: strings\n/tmp/tmp8fyw062c_test.go:26:33: undefined: toNum\n/tmp/tmp8fyw062c_test.go:30:33:\
    \ undefined: toNum\n/tmp/tmp8fyw062c_test.go:36:30: too many arguments in call\
    \ to sort_numbers\n\thave ([]string, int, int)\n\twant (string)\n/tmp/tmp8fyw062c_test.go:37:30:\
    \ too many arguments in call to sort_numbers\n\thave ([]string, int, int)\n\t\
    want (string)\n/tmp/tmp8fyw062c_test.go:41:16: undefined: bytes\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    number_map := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    array\
    \ := []int{}\n    numbers_arr := strings.Split(numbers, \" \")\n    for _, number\
    \ := range numbers_arr {\n        array = append(array, number_map[number])\n\
    \    }\n    sort.Ints(array)\n    result := []string{}\n    for _, number := range\
    \ array {\n        for key, value := range number_map {\n            if value\
    \ == number {\n                result = append(result, key)\n            }\n \
    \       }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbqqix8w_test.go:27:20: undefined: strings

    /tmp/tmpwbqqix8w_test.go:31:5: undefined: sort

    /tmp/tmpwbqqix8w_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO: Implement me!\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp4k07zikx_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp4k07zikx_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp4k07zikx_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp4k07zikx_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Store the space-delimited words\
    \ in a slice\n    words := strings.Split(numbers, \" \")\n    // Initialize a\
    \ map of the string/int pairs\n    m := map[string]int{\n        \"zero\": 0,\n\
    \        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    }\n    // Initialize a slice of ints\n\
    \    ints := make([]int, len(words))\n    // Use a for loop to iterate over all\
    \ the words in the slice\n    for _, word := range words {\n        // Find the\
    \ corresponding int for each word and append it to the ints slice\n        ints\
    \ = append(ints, m[word])\n    }\n    // Sort the ints slice\n    sort.Ints(ints)\n\
    \    // Initialize a slice of strings\n    string_ints := make([]string, len(ints))\n\
    \    // Use a for loop to iterate over all the ints in the ints slice\n    for\
    \ _, int := range ints {\n        // Find the corresponding string for each int\
    \ and append it to the string_ints slice\n        string_ints = append(string_ints,\
    \ m[int])\n    }\n    // Join the string_ints slice together with spaces and return\
    \ it\n    return strings.Join(string_ints, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_c2pwp7s_test.go:15:14: undefined: strings

    /tmp/tmp_c2pwp7s_test.go:37:5: undefined: sort

    /tmp/tmp_c2pwp7s_test.go:43:43: cannot use m[int] (map index expression of type
    int) as type string in argument to append

    /tmp/tmp_c2pwp7s_test.go:43:45: cannot use int (variable of type int) as type
    string in map index

    /tmp/tmp_c2pwp7s_test.go:46:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := map[string]int{\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    nums\
    \ := []int{}\n    for _, word := range strings.Split(numbers, \" \") {\n     \
    \   nums = append(nums, words[word])\n    }\n    sort.Ints(nums)\n    result :=\
    \ []string{}\n    for _, num := range nums {\n        for word, val := range words\
    \ {\n            if val == num {\n                result = append(result, word)\n\
    \            }\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2f6vvx5_test.go:27:26: undefined: strings

    /tmp/tmpm2f6vvx5_test.go:30:5: undefined: sort

    /tmp/tmpm2f6vvx5_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    sorted_numbers := make([]string,\
    \ 0)\n    for _, number := range split_numbers(numbers) {\n        sorted_numbers\
    \ = insert_number(sorted_numbers, number)\n    }\n    return join_numbers(sorted_numbers)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7okdqh8_test.go:15:28: undefined: split_numbers

    /tmp/tmpe7okdqh8_test.go:16:26: undefined: insert_number

    /tmp/tmpe7okdqh8_test.go:18:12: undefined: join_numbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO: Implement the function\n\
    \    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmp432riljr_test.go:35: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmp432riljr_test.go:35: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    digitToStr := make(map[int]string)\n\
    \    digitToStr[0] = \"zero\"\n    digitToStr[1] = \"one\"\n    digitToStr[2]\
    \ = \"two\"\n    digitToStr[3] = \"three\"\n    digitToStr[4] = \"four\"\n   \
    \ digitToStr[5] = \"five\"\n    digitToStr[6] = \"six\"\n    digitToStr[7] = \"\
    seven\"\n    digitToStr[8] = \"eight\"\n    digitToStr[9] = \"nine\"\n\n    strToDigit\
    \ := make(map[string]int)\n    for key, value := range digitToStr {\n        strToDigit[value]\
    \ = key\n    }\n\n    slice := make([]int, 0)\n    for _, word := range strings.Split(numbers,\
    \ \" \") {\n        slice = append(slice, strToDigit[word])\n    }\n\n    sort.Ints(slice)\n\
    \n    res := \"\"\n    for _, digit := range slice {\n        res += digitToStr[digit]\
    \ + \" \"\n    }\n\n    return strings.TrimSpace(res)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp997hrda8_test.go:32:26: undefined: strings

    /tmp/tmp997hrda8_test.go:36:5: undefined: sort

    /tmp/tmp997hrda8_test.go:43:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    index := map[string]int{\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    result\
    \ := make([]int, 0)\n    for _, numeral := range numbers {\n        if numeral\
    \ != ' ' {\n            result = append(result, index[string(numeral)])\n    \
    \    }\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpbem6biq5_test.go:52: expected '', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmpbem6biq5_test.go:52: expected\
    \ 'three', got '[0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n\
    \        tmpbem6biq5_test.go:52: expected 'three five nine', got '[0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n      \
    \  tmpbem6biq5_test.go:52: expected 'zero four five seven eight nine', got '[0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpbem6biq5_test.go:52: expected 'zero one two three four five\
    \ six', got '[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    str_to_number := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    number_to_str\
    \ := map[int]string{\n        0: \"zero\",\n        1: \"one\",\n        2: \"\
    two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n  \
    \      6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"\
    nine\",\n    }\n\n    numbers_in_words := map[string]int{}\n    for _, num :=\
    \ range numbers {\n        numbers_in_words[string(num)] += 1\n    }\n\n    sorted_numbers\
    \ := make([]int, 0)\n    for _, num := range numbers_in_words {\n        sorted_numbers\
    \ = append(sorted_numbers, num)\n    }\n\n    sorted_numbers = sort_numbers_one_line(sorted_numbers)\n\
    \n    output := \"\"\n    for _, num := range sorted_numbers {\n        output\
    \ += number_to_str[num] + \" \"\n    }\n\n    return output\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsn1h_18_test.go:14:5: str_to_number declared but not used

    /tmp/tmptsn1h_18_test.go:49:22: undefined: sort_numbers_one_line

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    tmp := []string{}\n    for _,\
    \ v := range strings.Split(numbers, \" \") {\n        switch strings.ToLower(v)\
    \ {\n        case \"zero\":\n            tmp = append(tmp, \"0\")\n        case\
    \ \"one\":\n            tmp = append(tmp, \"1\")\n        case \"two\":\n    \
    \        tmp = append(tmp, \"2\")\n        case \"three\":\n            tmp =\
    \ append(tmp, \"3\")\n        case \"four\":\n            tmp = append(tmp, \"\
    4\")\n        case \"five\":\n            tmp = append(tmp, \"5\")\n        case\
    \ \"six\":\n            tmp = append(tmp, \"6\")\n        case \"seven\":\n  \
    \          tmp = append(tmp, \"7\")\n        case \"eight\":\n            tmp\
    \ = append(tmp, \"8\")\n        case \"nine\":\n            tmp = append(tmp,\
    \ \"9\")\n        }\n    }\n    return strings.Join(strings.Split(strings.Join(tmp,\
    \ \"\"), \"\"), \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvrmpwfs_test.go:15:23: undefined: strings

    /tmp/tmpcvrmpwfs_test.go:16:16: undefined: strings

    /tmp/tmpcvrmpwfs_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{}\n    for _, num\
    \ := range numbers {\n        switch num {\n        case 'o':\n            nums\
    \ = append(nums, 1)\n        case 't':\n            nums = append(nums, 2)\n \
    \       case 'h':\n            nums = append(nums, 3)\n        case 'f':\n   \
    \         nums = append(nums, 4)\n        case 'i':\n            nums = append(nums,\
    \ 5)\n        case 'x':\n            nums = append(nums, 6)\n        case 's':\n\
    \            nums = append(nums, 7)\n        case 'e':\n            nums = append(nums,\
    \ 8)\n        case 'n':\n            nums = append(nums, 9)\n        }\n    }\n\
    \    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums);\
    \ j++ {\n            if nums[i] > nums[j] {\n                tmp := nums[i]\n\
    \                nums[i] = nums[j]\n                nums[j] = tmp\n          \
    \  }\n        }\n    }\n    str := \"\"\n    for _, num := range nums {\n    \
    \    switch num {\n        case 1:\n            str += \"one \"\n        case\
    \ 2:\n            str += \"two \"\n        case 3:\n            str += \"three\
    \ \"\n        case 4:\n            str += \"four \"\n        case 5:\n       \
    \     str += \"five \"\n        case 6:\n            str += \"six \"\n       \
    \ case 7:\n            str += \"seven \"\n        case 8:\n            str +=\
    \ \"eight \"\n        case 9:\n            str += \"nine \"\n        }\n    }\n\
    \    return str[:len(str) - 1]\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x0, 0x0})\n\t/tmp/tmp2xpi6b26_test.go:69\
    \ +0x605\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmp2xpi6b26_test.go:79\
    \ +0x45\ntesting.tRunner(0xc0001a0340, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    input := map[string]int{\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numbersArray\
    \ := []int{}\n    for _, token := range(strings.Split(numbers, \" \")) {\n   \
    \     numbersArray = append(numbersArray, input[token])\n    }\n    sorted :=\
    \ []int{}\n    for sorted.len < input.len {\n        lowest := 0\n        for\
    \ _, number := range(numbersArray) {\n            if number > sorted[len(sorted)-1]\
    \ && number < lowest {\n                lowest = number\n            }\n     \
    \   }\n        sorted = append(sorted, lowest)\n    }\n    return fmt.Sprintf(\"\
    %d\", sorted)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ddsvt_8_test.go:27:27: undefined: strings

    /tmp/tmp5ddsvt_8_test.go:31:16: sorted.len undefined (type []int has no field
    or method len)

    /tmp/tmp5ddsvt_8_test.go:31:28: input.len undefined (type map[string]int has no
    field or method len)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    num_map := map[string]int{\n \
    \       \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    int_arr\
    \ := []int{}\n    string_arr := []string{}\n    // separate string into string\
    \ array\n    for _, val := range numbers {\n        string_arr = append(string_arr,\
    \ string(val))\n    }\n    for _, val := range string_arr {\n        if num_map[val]\
    \ != 0 {\n            int_arr = append(int_arr, num_map[val])\n        }\n   \
    \ }\n    // sort the integer array\n    for i := 0; i < len(int_arr) - 1; i++\
    \ {\n        for j := i + 1; j < len(int_arr); j++ {\n            if int_arr[i]\
    \ > int_arr[j] {\n                int_arr[i], int_arr[j] = int_arr[j], int_arr[i]\n\
    \            }\n        }\n    }\n    // build final string\n    final_str :=\
    \ \"\"\n    for _, val := range int_arr {\n        final_str += fmt.Sprintf(\"\
    %d\", val)\n    }\n    return final_str\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp3_mmobdg_test.go:70: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp3_mmobdg_test.go:70: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp3_mmobdg_test.go:70: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp3_mmobdg_test.go:70:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    m := map[string]int{\n       \
    \ \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n\
    \        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    nums := []int{}\n\
    \    for _, number := range(strings.Split(numbers, \" \")) {\n        i, _ :=\
    \ m[number]\n        nums = append(nums, i)\n    }\n    sort.Ints(nums)\n    for\
    \ i, _ := range(nums) {\n        nums[i] = strconv.Itoa(nums[i])\n    }\n    return\
    \ strings.Join(nums, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphzgwgkju_test.go:27:28: undefined: strings

    /tmp/tmphzgwgkju_test.go:31:5: undefined: sort

    /tmp/tmphzgwgkju_test.go:33:19: undefined: strconv

    /tmp/tmphzgwgkju_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sort_map = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ input = make([]int, 0)\n    var output = make([]string, 0)\n    for _, num :=\
    \ range(numbers) {\n        var num_string = string(num)\n        if sort_map[num_string]\
    \ > 0 {\n            input = append(input, sort_map[num_string])\n        }\n\
    \    }\n    for i := 0; i < len(input); i++ {\n        var min = input[i]\n  \
    \      var index = i\n        for j := i; j < len(input); j++ {\n            if\
    \ input[j] < min {\n                min = input[j]\n                index = j\n\
    \            }\n        }\n        if index != i {\n            input[i], input[index]\
    \ = input[index], input[i]\n        }\n    }\n    for _, num := range(input) {\n\
    \        for num_string, num_int := range(sort_map) {\n            if num == num_int\
    \ {\n                output = append(output, num_string)\n            }\n    \
    \    }\n    }\n    return strings.Join(output, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk17zsie9_test.go:54:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    str_to_int := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_map\
    \ := make(map[int]int)\n    for _, num := range numbers {\n        if _, ok :=\
    \ str_to_int[string(num)]; ok {\n            num_map[str_to_int[string(num)]]\
    \ += 1\n        }\n    }\n    result := make([]string, 0)\n    for i := 0; i <\
    \ 10; i++ {\n        if val, ok := num_map[i]; ok {\n            for j := 0; j\
    \ < val; j++ {\n                result = append(result, strconv.Itoa(i))\n   \
    \         }\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwpju9x9_test.go:36:41: undefined: strconv

    /tmp/tmpiwpju9x9_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    count := make(map[string]int)\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnk9epa5m_test.go:14:5: count declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{}\n    for _, num\
    \ := range strings.Split(numbers, \" \") {\n        nums = append(nums, numbers_to_ints[num])\n\
    \    }\n    sort.Ints(nums)\n    for i, num := range nums {\n        nums[i] =\
    \ ints_to_numbers[num]\n    }\n    return strings.Join(nums, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvtlfgl20_test.go:15:25: undefined: strings

    /tmp/tmpvtlfgl20_test.go:16:29: undefined: numbers_to_ints

    /tmp/tmpvtlfgl20_test.go:18:5: undefined: sort

    /tmp/tmpvtlfgl20_test.go:20:19: undefined: ints_to_numbers

    /tmp/tmpvtlfgl20_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n     \
    \   return \"\"\n    }\n\n    numerals := map[string]int{\n        \"zero\": 0,\n\
    \        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    var words []string = make([]string,\
    \ 0)\n    for _, word := range(strings.Split(numbers, \" \")) {\n        if _,\
    \ ok := numerals[word]; ok {\n            words = append(words, word)\n      \
    \  }\n    }\n\n    if len(words) == 0 {\n        return \"\"\n    }\n\n    //\
    \ Sort numbers\n    sort.Slice(words, func(i, j int) bool {\n        return numerals[words[i]]\
    \ < numerals[words[j]]\n    })\n\n    // Convert back to string\n    var result\
    \ string = \"\"\n    for _, word := range(words) {\n        result += \" \" +\
    \ word\n    }\n    return result[1:]\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyj_3i4up_test.go:32:26: undefined: strings

    /tmp/tmpyj_3i4up_test.go:43:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbersToSort := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    sortedNumbers\
    \ := []int{}\n    for _, numberWord := range numbersToSort {\n        sortedNumbers\
    \ = append(sortedNumbers, numberWord)\n    }\n\n    sortedNumbersStr := \"\"\n\
    \    for _, number := range sortedNumbers {\n        sortedNumbersStr += fmt.Sprintf(\"\
    %d \", number)\n    }\n\n    return sortedNumbersStr\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmp6j8vi02g_test.go:57: expected '', got '3 6 7 8 0 1 2 4 5\
    \ 9 '\n    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmp6j8vi02g_test.go:57:\
    \ expected 'three', got '1 3 4 5 7 9 0 2 6 8 '\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmp6j8vi02g_test.go:57: expected 'three five nine', got '8\
    \ 0 1 3 4 5 6 7 9 2 '\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n  \
    \      tmp6j8vi02g_test.go:57: expected 'zero four five seven eight nine', got\
    \ '1 3 6 8 9 0 2 4 5 7 '\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n\
    \        tmp6j8vi02g_test.go:57: expected 'zero one two three four five six',\
    \ got '2 4 7 8 1 3 5 6 9 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    dict := map[string]int{\n    \
    \    \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    nums\
    \ := make([]int, len(numbers))\n    for i, v := range numbers {\n        nums[i]\
    \ = dict[string(v)]\n    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpiyr794bd_test.go:50: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpiyr794bd_test.go:50: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpiyr794bd_test.go:50: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpiyr794bd_test.go:50:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    digits := [][]string{}\n    for\
    \ _, c := range numbers {\n        digits = append(digits, GetDigits(byte(c)))\n\
    \    }\n    for i := 0; i < len(digits) - 1; i++ {\n        min := i\n       \
    \ for j := i + 1; j < len(digits); j++ {\n            if DigitsToInt(digits[j])\
    \ < DigitsToInt(digits[min]) {\n                min = j\n            }\n     \
    \   }\n        digits[i], digits[min] = digits[min], digits[i]\n    }\n    return\
    \ DigitsToString(digits)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpefat3d8l_test.go:16:33: undefined: GetDigits

    /tmp/tmpefat3d8l_test.go:21:16: undefined: DigitsToInt

    /tmp/tmpefat3d8l_test.go:27:12: undefined: DigitsToString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    m := map[string]int{\n       \
    \ \"zero\":  0,\n        \"one\":   1,\n        \"two\":   2,\n        \"three\"\
    : 3,\n        \"four\":  4,\n        \"five\":  5,\n        \"six\":   6,\n  \
    \      \"seven\": 7,\n        \"eight\": 8,\n        \"nine\":  9,\n    }\n  \
    \  sorted := []int{}\n    for _, v := range strings.Split(numbers, \" \") {\n\
    \        sorted = append(sorted, m[v])\n    }\n    sort.Ints(sorted)\n    fmt.Println(sorted)\n\
    \    return \"one three five\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc9wnzkfu_test.go:27:23: undefined: strings

    /tmp/tmpc9wnzkfu_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numMap := map[string]int {\n \
    \       \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numSlice\
    \ := []int{}\n    for _, num := range strings.Split(numbers, \" \") {\n      \
    \  if val, ok := numMap[num]; ok {\n            numSlice = append(numSlice, val)\n\
    \        }\n    }\n    sort.Ints(numSlice)\n    res := \"\"\n    for _, num :=\
    \ range numSlice {\n        res += strconv.Itoa(num) + \" \"\n    }\n    return\
    \ res\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe6aof41g_test.go:27:25: undefined: strings

    /tmp/tmpe6aof41g_test.go:32:5: undefined: sort

    /tmp/tmpe6aof41g_test.go:35:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Write your code here.\n\n \
    \   // parse the string into a list of int\n    nums := stringToIntList(numbers)\n\
    \n    // sort the list\n    nums = quickSort(nums)\n\n    // join the int list\
    \ into a string\n    numString := intListToString(nums)\n\n    return numString\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1k87_o9d_test.go:17:13: undefined: stringToIntList

    /tmp/tmp1k87_o9d_test.go:20:12: undefined: quickSort

    /tmp/tmp1k87_o9d_test.go:23:18: undefined: intListToString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // create a map with 0: \"zero\"\
    , 1: \"one\", ...\n    wordMap := make(map[string]int)\n    wordMap[\"zero\"]\
    \ = 0\n    wordMap[\"one\"] = 1\n    wordMap[\"two\"] = 2\n    wordMap[\"three\"\
    ] = 3\n    wordMap[\"four\"] = 4\n    wordMap[\"five\"] = 5\n    wordMap[\"six\"\
    ] = 6\n    wordMap[\"seven\"] = 7\n    wordMap[\"eight\"] = 8\n    wordMap[\"\
    nine\"] = 9\n\n    // create a slice to store numbers\n    numSlice := make([]int,\
    \ 0)\n\n    // split the string into words and convert words to numbers\n    words\
    \ := numbers\n    for word := range words {\n        numSlice = append(numSlice,\
    \ wordMap[word])\n    }\n\n    // sort the numbers in slice\n    sort(numSlice)\n\
    \n    // concatenate the slice and return\n    return strings.Join(numSlice, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm095a_bn_test.go:33:45: cannot use word (variable of type int) as type
    string in map index

    /tmp/tmpm095a_bn_test.go:37:5: undefined: sort

    /tmp/tmpm095a_bn_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    m := map[string]int{\n       \
    \ \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n\
    \        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    list := strings.Split(numbers,\
    \ \" \")\n    sorted := []int{}\n    var ok bool\n    for _, i := range list {\n\
    \        v, ok := m[i]\n        if ok {\n            sorted = append(sorted, v)\n\
    \        }\n    }\n    sort.Ints(sorted)\n    var s string\n    for _, i := range\
    \ sorted {\n        s += m[i] + \" \"\n    }\n    s = strings.TrimSpace(s)\n \
    \   return s\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptdda_i61_test.go:26:13: undefined: strings

    /tmp/tmptdda_i61_test.go:28:9: ok declared but not used

    /tmp/tmptdda_i61_test.go:35:5: undefined: sort

    /tmp/tmptdda_i61_test.go:38:14: invalid operation: m[i] + " " (mismatched types
    int and untyped string)

    /tmp/tmptdda_i61_test.go:38:16: cannot use i (variable of type int) as type string
    in map index

    /tmp/tmptdda_i61_test.go:40:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers_map := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    int_list\
    \ := []int{}\n    for _, number := range numbers_map {\n        int_list = append(int_list,\
    \ number)\n    }\n    for i, j := 0, len(int_list)-1; i < j; i, j = i+1, j-1 {\n\
    \        int_list[i], int_list[j] = int_list[j], int_list[i]\n    }\n    return\
    \ fmt.Sprintf(\"%v\", int_list)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmp7jw54f7a_test.go:53: expected '', got '[9 6 5 4 0 8 7 3\
    \ 2 1]'\n    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmp7jw54f7a_test.go:53:\
    \ expected 'three', got '[2 0 8 3 1 9 7 6 5 4]'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmp7jw54f7a_test.go:53: expected 'three five nine', got '[7\
    \ 2 0 9 8 6 5 4 3 1]'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n  \
    \      tmp7jw54f7a_test.go:53: expected 'zero four five seven eight nine', got\
    \ '[2 1 9 7 4 3 0 8 6 5]'\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n\
    \        tmp7jw54f7a_test.go:53: expected 'zero one two three four five six',\
    \ got '[2 1 8 5 4 3 0 9 7 6]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    n := map[string]int {\n      \
    \  \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\":\
    \ 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    ns :=\
    \ []int{}\n    for _, s := range(strings.Split(numbers, \" \")) {\n        if\
    \ v, ok := n[s]; ok {\n            ns = append(ns, v)\n        }\n    }\n    sort.Ints(ns)\n\
    \    s := []string{}\n    for _, i := range(ns) {\n        for k, v := range(n)\
    \ {\n            if v == i {\n                s = append(s, k)\n            }\n\
    \        }\n    }\n    return strings.Join(s, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqn5eelp_test.go:27:23: undefined: strings

    /tmp/tmpjqn5eelp_test.go:32:5: undefined: sort

    /tmp/tmpjqn5eelp_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums []int\n    mapper :=\
    \ map[string]int {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9,\n    }\n    for _, num := range numbers {\n        if num != ' ' {\n    \
    \        nums = append(nums, num)\n        }\n    }\n    fmt.Println(nums)\n \
    \   return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbjk7wh48_test.go:15:5: mapper declared but not used

    /tmp/tmpbjk7wh48_test.go:29:33: cannot use num (variable of type rune) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var splitNumbers = func(s string)\
    \ []string {\n        var out []string\n        for i := 0; i < len(s); i++ {\n\
    \            out = append(out, string(s[i]))\n        }\n        return out\n\
    \    }\n    var toNumeral = func(s string) int {\n        switch s {\n       \
    \ case \"zero\":\n            return 0\n        case \"one\":\n            return\
    \ 1\n        case \"two\":\n            return 2\n        case \"three\":\n  \
    \          return 3\n        case \"four\":\n            return 4\n        case\
    \ \"five\":\n            return 5\n        case \"six\":\n            return 6\n\
    \        case \"seven\":\n            return 7\n        case \"eight\":\n    \
    \        return 8\n        case \"nine\":\n            return 9\n        default:\n\
    \            return -1\n        }\n    }\n    var toString = func(i int) string\
    \ {\n        switch i {\n        case 0:\n            return \"zero\"\n      \
    \  case 1:\n            return \"one\"\n        case 2:\n            return \"\
    two\"\n        case 3:\n            return \"three\"\n        case 4:\n      \
    \      return \"four\"\n        case 5:\n            return \"five\"\n       \
    \ case 6:\n            return \"six\"\n        case 7:\n            return \"\
    seven\"\n        case 8:\n            return \"eight\"\n        case 9:\n    \
    \        return \"nine\"\n        default:\n            return \"error\"\n   \
    \     }\n    }\n    var sort = func(s []string) []string {\n        var len int\
    \ = len(s)\n        for i := 0; i < len; i++ {\n            for j := i + 1; j\
    \ < len; j++ {\n                if toNumeral(s[i]) > toNumeral(s[j]) {\n     \
    \               var tmp = s[i]\n                    s[i] = s[j]\n            \
    \        s[j] = tmp\n                }\n            }\n        }\n        return\
    \ s\n    }\n    var out string\n    var numbers = splitNumbers(numbers)\n    for\
    \ i := 0; i < len(numbers); i++ {\n        var tmp = sort(numbers[i:])\n     \
    \   for j := 0; j\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc690kwn3_test.go:91:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmprwx0r7is_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmprwx0r7is_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmprwx0r7is_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmprwx0r7is_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := map[string]int{\n    \
    \    \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numbers_array\
    \ := make([]int, 0)\n    for _, word := range numbers {\n        if word >= 'a'\
    \ && word <= 'z' {\n            numbers_array = append(numbers_array, nums[word])\n\
    \        }\n    }\n    sort(numbers_array)\n    numbers_array_string := make([]string,\
    \ 0)\n    for _, number := range numbers_array {\n        for key, value := range\
    \ nums {\n            if value == number {\n                numbers_array_string\
    \ = append(numbers_array_string, key)\n            }\n        }\n    }\n    return\
    \ numbers_array_string\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2196l6h_test.go:29:56: cannot use word (variable of type rune) as type
    string in map index

    /tmp/tmpk2196l6h_test.go:32:5: undefined: sort

    /tmp/tmpk2196l6h_test.go:41:12: cannot use numbers_array_string (variable of type
    []string) as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(numbers)\n    return\
    \ numbers\n}\n\n//------------------------------------------------------------------------------\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "\nthree\nthree five nine\nfive zero four seven nine eight\nsix five four\
    \ three two one zero\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmphkxuc991_test.go:36: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmphkxuc991_test.go:36: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    num_dict := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list\
    \ := make([]int, 0)\n    for _, num := range numbers {\n        num_list = append(num_list,\
    \ num_dict[string(num)])\n    }\n    fmt.Println(num_list)\n    return \"test\"\
    \n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n--- FAIL: TestSort_Numbers (0.00s)\n    ---\
    \ FAIL: TestSort_Numbers/test_num__0 (0.00s)\n        tmplja5nxsm_test.go:51:\
    \ expected '', got 'test'\n    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n\
    \        tmplja5nxsm_test.go:51: expected 'three', got 'test'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmplja5nxsm_test.go:51: expected 'three five nine', got 'test'\n\
    \    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmplja5nxsm_test.go:51:\
    \ expected 'zero four five seven eight nine', got 'test'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmplja5nxsm_test.go:51: expected 'zero one two three four five\
    \ six', got 'test'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sort_map = map[string]int\
    \ {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n \
    \   var nums = make([]int, 0)\n    for _, s := range(numbers) {\n        if string(s)\
    \ == \" \" {\n            continue\n        }\n        if string(s) == \"z\" {\n\
    \            nums = append(nums, sort_map[\"zero\"])\n        } else if string(s)\
    \ == \"o\" {\n            nums = append(nums, sort_map[\"one\"])\n        } else\
    \ if string(s) == \"t\" {\n            nums = append(nums, sort_map[\"two\"])\n\
    \        } else if string(s) == \"h\" {\n            nums = append(nums, sort_map[\"\
    three\"])\n        } else if string(s) == \"f\" {\n            nums = append(nums,\
    \ sort_map[\"four\"])\n        } else if string(s) == \"i\" {\n            nums\
    \ = append(nums, sort_map[\"five\"])\n        } else if string(s) == \"s\" {\n\
    \            nums = append(nums, sort_map[\"six\"])\n        } else if string(s)\
    \ == \"v\" {\n            nums = append(nums, sort_map[\"seven\"])\n        }\
    \ else if string(s) == \"e\" {\n            nums = append(nums, sort_map[\"eight\"\
    ])\n        } else if string(s) == \"n\" {\n            nums = append(nums, sort_map[\"\
    nine\"])\n        }\n    }\n    fmt.Println(nums)\n    for i, _ := range(nums)\
    \ {\n        for j, _ := range(nums) {\n            if nums[i] < nums[j] {\n \
    \               temp := nums[i]\n                nums[i] = num\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3jpzf_28_test.go:59:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{}\n    numMap :=\
    \ map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9,\n    }\n    for _, num := range numbers {\n        if _, ok := numMap[string(num)];\
    \ ok {\n            nums = append(nums, numMap[string(num)])\n        }\n    }\n\
    \    //fmt.Println(nums)\n    return fmt.Sprintf(\"%v\", nums)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmp7nu6gg1q_test.go:53: expected '', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmp7nu6gg1q_test.go:53: expected\
    \ 'three', got '[]'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n    \
    \    tmp7nu6gg1q_test.go:53: expected 'three five nine', got '[]'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__3 (0.00s)\n        tmp7nu6gg1q_test.go:53: expected\
    \ 'zero four five seven eight nine', got '[]'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmp7nu6gg1q_test.go:53: expected 'zero one two three four five\
    \ six', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\t// TODO - Add your code here\n\t\
    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpfp22xn3s_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpfp22xn3s_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpfp22xn3s_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpfp22xn3s_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := make([]int, 0)\n    for\
    \ _, word := range numbers {\n        nums = append(nums, numberMap[string(word)])\n\
    \    }\n    fmt.Println(nums)\n    return \"\"\n}\n\nvar numberMap = map[string]int{\n\
    \    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"\
    four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\"\
    : 8,\n    \"nine\": 9,\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n--- FAIL: TestSort_Numbers (0.00s)\n    ---\
    \ FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpkomxvpu__test.go:52:\
    \ expected 'three', got ''\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n\
    \        tmpkomxvpu__test.go:52: expected 'three five nine', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__3 (0.00s)\n        tmpkomxvpu__test.go:52: expected\
    \ 'zero four five seven eight nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpkomxvpu__test.go:52: expected 'zero one two three four five\
    \ six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(numbers)\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "\nthree\nthree five nine\nfive zero four seven nine eight\nsix five four\
    \ three two one zero\n--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmph8woqpjc_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmph8woqpjc_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmph8woqpjc_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmph8woqpjc_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // write your solution here\n\
    \    num_map := map[string]int{\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9}\n    num_slice := []int{}\n    for _, num := range numbers {\n        for\
    \ key, value := range num_map {\n            if string(num) == key {\n       \
    \         num_slice = append(num_slice, value)\n            }\n        }\n   \
    \ }\n    sort_num_slice := QuickSort(num_slice)\n    result := \"\"\n    for _,\
    \ num := range sort_num_slice {\n        for key, value := range num_map {\n \
    \           if num == value {\n                result += key + \" \"\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppgg7gtvo_test.go:24:23: undefined: QuickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO: Implement me!\n    return\
    \ numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmp3f40io0v_test.go:35: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmp3f40io0v_test.go:35: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // your code here\n    return\
    \ numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmp71hct18d_test.go:35: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmp71hct18d_test.go:35: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var split []string = strings.Split(numbers,\
    \ \" \")\n    var nums []int = make([]int, len(split))\n    for i, s := range\
    \ split {\n        nums[i] = to_num(s)\n    }\n    sort.Ints(nums)\n    for i,\
    \ n := range nums {\n        split[i] = to_str(n)\n    }\n    return strings.Join(split,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2azcut5_test.go:14:26: undefined: strings

    /tmp/tmpw2azcut5_test.go:17:19: undefined: to_num

    /tmp/tmpw2azcut5_test.go:19:5: undefined: sort

    /tmp/tmpw2azcut5_test.go:21:20: undefined: to_str

    /tmp/tmpw2azcut5_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbersMap := make(map[string]int)\n\
    \    numbersMap[\"zero\"] = 0\n    numbersMap[\"one\"] = 1\n    numbersMap[\"\
    two\"] = 2\n    numbersMap[\"three\"] = 3\n    numbersMap[\"four\"] = 4\n    numbersMap[\"\
    five\"] = 5\n    numbersMap[\"six\"] = 6\n    numbersMap[\"seven\"] = 7\n    numbersMap[\"\
    eight\"] = 8\n    numbersMap[\"nine\"] = 9\n\n    var numbersArray []int\n   \
    \ for _, v := range numbers {\n        if string(v) != \" \" {\n            numbersArray\
    \ = append(numbersArray, numbersMap[string(v)])\n        }\n    }\n\n    for i\
    \ := 0; i < len(numbersArray); i++ {\n        for j := i + 1; j < len(numbersArray);\
    \ j++ {\n            if numbersArray[i] > numbersArray[j] {\n                temp\
    \ := numbersArray[i]\n                numbersArray[i] = numbersArray[j]\n    \
    \            numbersArray[j] = temp\n            }\n        }\n    }\n\n    var\
    \ result string\n    for _, v := range numbersArray {\n        for k, l := range\
    \ numbersMap {\n            if v == l {\n                result += k\n       \
    \     }\n        }\n    }\n\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpbup40k67_test.go:72: expected 'three', got 'zerozerozerozerozero'\n\
    \    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n        tmpbup40k67_test.go:72:\
    \ expected 'three five nine', got 'zerozerozerozerozerozerozerozerozerozerozerozerozero'\n\
    \    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpbup40k67_test.go:72:\
    \ expected 'zero four five seven eight nine', got 'zerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozero'\n\
    \    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpbup40k67_test.go:72:\
    \ expected 'zero one two three four five six', got 'zerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozerozero'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074270
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numeralMap = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ numberSlice []int\n    for _, numeral := range strings.Split(numbers, \" \"\
    ) {\n        numberSlice = append(numberSlice, numeralMap[numeral])\n    }\n \
    \   sort.Ints(numberSlice)\n    var numeralSlice []string\n    for _, numeral\
    \ := range numberSlice {\n        for k, v := range numeralMap {\n           \
    \ if v == numeral {\n                numeralSlice = append(numeralSlice, k)\n\
    \            }\n        }\n    }\n    return strings.Join(numeralSlice, \" \"\
    )\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpib1f56vg_test.go:27:29: undefined: strings

    /tmp/tmpib1f56vg_test.go:30:5: undefined: sort

    /tmp/tmpib1f56vg_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // write your code in Go 1.4\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp90blu5gg_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp90blu5gg_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp90blu5gg_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp90blu5gg_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074271
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Build a map of each number\
    \ to its value\n    numbers_map := map[string]int{\n        \"zero\": 0,\n   \
    \     \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    // Split the string into\
    \ a slice of strings (numbers)\n    num_slice := split(numbers)\n\n    // Build\
    \ a slice of ints (number values)\n    val_slice := make([]int, len(num_slice))\n\
    \    for i, num := range num_slice {\n        val_slice[i] = numbers_map[num]\n\
    \    }\n\n    // Sort the slice of ints (number values)\n    sort(val_slice)\n\
    \n    // Build a slice of strings (numbers) from the sorted slice of ints (number\
    \ values)\n    for i, _ := range num_slice {\n        for key, val := range numbers_map\
    \ {\n            if val == val_slice[i] {\n                num_slice[i] = key\n\
    \                break\n            }\n        }\n    }\n\n    // Join the slice\
    \ of strings (numbers) back together\n    return join(num_slice)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2m2trz45_test.go:29:18: undefined: split

    /tmp/tmp2m2trz45_test.go:38:5: undefined: sort

    /tmp/tmp2m2trz45_test.go:51:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074271
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    ints := make([]int, 0)\n    for\
    \ _, number := range numbers {\n        ints = append(ints, int(number))\n   \
    \ }\n    sorted := sort(ints)\n    sortedNums := \"\"\n    for _, num := range\
    \ sorted {\n        sortedNums += fmt.Sprintf(\"%d \", num)\n    }\n    return\
    \ sortedNums\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0mpme57_test.go:18:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074271
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\treturn \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpd69rvh8h_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpd69rvh8h_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpd69rvh8h_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpd69rvh8h_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // I: space delimited string\n\
    \    // O: space delimited string\n    // E: empty string, one token, three tokens\n\
    \    // C: words must be valid numbers\n    // edge cases\n    if len(numbers)\
    \ == 0 {\n        return \"\"\n    }\n    tokens := make([]string, 0)\n    min\
    \ := \"zero\"\n    for _, word := range strings.Split(numbers, \" \") {\n    \
    \    tokens = append(tokens, word)\n        if valid_number(word) && word < min\
    \ {\n            min = word\n        }\n    }\n    return fmt.Sprintf(\"%s %s\
    \ %s\", min, tokens[0], tokens[1])\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplwpykwbq_test.go:24:26: undefined: strings

    /tmp/tmplwpykwbq_test.go:26:12: undefined: valid_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074271
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n     \
    \   return \"\"\n    }\n\n    // Convert numbers into integers\n    var numArray\
    \ []int\n    for _, number := range numbers {\n        numArray = append(numArray,\
    \ int(number - '0'))\n    }\n\n    // Sort integers\n    numArray = mergeSort(numArray)\n\
    \n    // Convert integers into words\n    var words []string\n    for _, number\
    \ := range numArray {\n        words = append(words, getNumberWord(number))\n\
    \    }\n\n    return strings.Join(words, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk30_9tnh_test.go:25:16: undefined: mergeSort

    /tmp/tmpk30_9tnh_test.go:30:31: undefined: getNumberWord

    /tmp/tmpk30_9tnh_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074271
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO: Implement me\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp61ufivy5_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp61ufivy5_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp61ufivy5_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp61ufivy5_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // FIXME - implement this function\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp_wdlkn9z_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp_wdlkn9z_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp_wdlkn9z_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp_wdlkn9z_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074271
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    const zero, one, two, three, four,\
    \ five, six, seven, eight, nine = \"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    type M map[string]int\n    table := M{\n        zero: 0,\n        one: 1,\n\
    \        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n    \
    \    six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n    }\n\
    \    var result = \"\"\n    for idx, char := range(numbers) {\n        if char\
    \ != ' ' {\n            result += string(alphabet[table[numbers[idx:idx+4]]])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:6] with length 5 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:6] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_numbers({0x51e6fa, 0x5})\n\t/tmp/tmpahrwhpjs_test.go:32\
    \ +0x315\ncommand-line-arguments_test.TestSort_Numbers(0x0?)\n\t/tmp/tmpahrwhpjs_test.go:46\
    \ +0x6e\ntesting.tRunner(0xc000192680, 0x5290f0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074271
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var intArray []int\n    var numeralMap\
    \ = map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9,\n    }\n    for _, numeral := range numbers {\n        intArray = append(intArray,\
    \ numeralMap[string(numeral)])\n    }\n    fmt.Println(intArray)\n    return \"\
    a\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n--- FAIL: TestSort_Numbers (0.00s)\n    ---\
    \ FAIL: TestSort_Numbers/test_num__0 (0.00s)\n        tmpdl3kl464_test.go:51:\
    \ expected '', got 'a'\n    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n \
    \       tmpdl3kl464_test.go:51: expected 'three', got 'a'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpdl3kl464_test.go:51: expected 'three five nine', got 'a'\n\
    \    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpdl3kl464_test.go:51:\
    \ expected 'zero four five seven eight nine', got 'a'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpdl3kl464_test.go:51: expected 'zero one two three four five\
    \ six', got 'a'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074271
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO: Your code here\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmpbu66zk2i_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpbu66zk2i_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpbu66zk2i_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpbu66zk2i_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074272
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    ints := make([]int, 10)\n    for\
    \ i := range ints {\n        ints[i] = i\n    }\n    choices := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    for\
    \ s, i := range choices {\n        numbers = strings.Replace(numbers, s, fmt.Sprintf(\"\
    %d\", i), -1)\n    }\n    fmt.Println(numbers)\n    words := strings.Split(numbers,\
    \ \" \")\n    var ns []int\n    for _, w := range words {\n        n, err := strconv.Atoi(w)\n\
    \        if err != nil {\n            continue\n        }\n        ns = append(ns,\
    \ n)\n    }\n    sort.Ints(ns)\n    nsStr := make([]string, len(ns))\n    for\
    \ i, n := range ns {\n        nsStr[i] = choices[n]\n    }\n    return strings.Join(nsStr,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ucqcfb0_test.go:31:19: undefined: strings

    /tmp/tmp_ucqcfb0_test.go:34:14: undefined: strings

    /tmp/tmp_ucqcfb0_test.go:37:19: undefined: strconv

    /tmp/tmp_ucqcfb0_test.go:43:5: undefined: sort

    /tmp/tmp_ucqcfb0_test.go:46:20: cannot use choices[n] (map index expression of
    type int) as type string in assignment

    /tmp/tmp_ucqcfb0_test.go:46:28: cannot use n (variable of type int) as type string
    in map index

    /tmp/tmp_ucqcfb0_test.go:48:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tvar words []string\n\tvar l int\n\
    \tvar i int\n\t\n\twords = words_from_string(numbers)\n\tl = len(words)\n\t\n\t\
    if l == 0 {\n\t\treturn \"\"\n\t}\n\t\n\tfor i = 0; i < l; i++ {\n\t\tbubble_sort(words,\
    \ i)\n\t}\n\t\n\treturn strings_to_string(words)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeg94cqua_test.go:18:10: undefined: words_from_string

    /tmp/tmpeg94cqua_test.go:26:3: undefined: bubble_sort

    /tmp/tmpeg94cqua_test.go:29:9: undefined: strings_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = \"zero one two three\
    \ four five six seven eight nine\"\n    s := strings.Fields(numbers)\n    sort.Strings(s)\n\
    \    return strings.Join(s, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd_nsl45p_test.go:15:10: undefined: strings

    /tmp/tmpd_nsl45p_test.go:16:5: undefined: sort

    /tmp/tmpd_nsl45p_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{}\n    for _, num\
    \ := range numbers {\n        switch num {\n        case 'z':\n            nums\
    \ = append(nums, 0)\n        case 'o':\n            nums = append(nums, 1)\n \
    \       case 't':\n            nums = append(nums, 2)\n        case 'h':\n   \
    \         nums = append(nums, 3)\n        case 'f':\n            nums = append(nums,\
    \ 4)\n        case 'i':\n            nums = append(nums, 5)\n        case 's':\n\
    \            nums = append(nums, 6)\n        case 'e':\n            nums = append(nums,\
    \ 7)\n        case 'n':\n            nums = append(nums, 8)\n        case 'e':\n\
    \            nums = append(nums, 9)\n        }\n    }\n    fmt.Println(nums)\n\
    \    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt6o1i2m9_test.go:35:14:\
    \ duplicate case 'e' (constant 101 of type rune) in expression switch\n\t/tmp/tmpt6o1i2m9_test.go:31:14:\
    \ previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074128
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var intNumbers []int\n    for\
    \ _, word := range strings.Split(numbers, \" \") {\n        intNumbers = append(intNumbers,\
    \ numberValue(word))\n    }\n    sort.Ints(intNumbers)\n    return numeralValues(intNumbers)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprgp1kl7r_test.go:15:26: undefined: strings

    /tmp/tmprgp1kl7r_test.go:16:41: undefined: numberValue

    /tmp/tmprgp1kl7r_test.go:18:5: undefined: sort

    /tmp/tmprgp1kl7r_test.go:19:12: undefined: numeralValues

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numArray []int\n    var resultArray\
    \ []string\n    for _, n := range strings.Split(numbers, \" \") {\n        switch\
    \ n {\n        case \"zero\":\n            numArray = append(numArray, 0)\n  \
    \      case \"one\":\n            numArray = append(numArray, 1)\n        case\
    \ \"two\":\n            numArray = append(numArray, 2)\n        case \"three\"\
    :\n            numArray = append(numArray, 3)\n        case \"four\":\n      \
    \      numArray = append(numArray, 4)\n        case \"five\":\n            numArray\
    \ = append(numArray, 5)\n        case \"six\":\n            numArray = append(numArray,\
    \ 6)\n        case \"seven\":\n            numArray = append(numArray, 7)\n  \
    \      case \"eight\":\n            numArray = append(numArray, 8)\n        case\
    \ \"nine\":\n            numArray = append(numArray, 9)\n        }\n    }\n  \
    \  sort.Ints(numArray)\n    for _, n := range numArray {\n        switch n {\n\
    \        case 0:\n            resultArray = append(resultArray, \"zero\")\n  \
    \      case 1:\n            resultArray = append(resultArray, \"one\")\n     \
    \   case 2:\n            resultArray = append(resultArray, \"two\")\n        case\
    \ 3:\n            resultArray = append(resultArray, \"three\")\n        case 4:\n\
    \            resultArray = append(resultArray, \"four\")\n        case 5:\n  \
    \          resultArray = append(resultArray, \"five\")\n        case 6:\n    \
    \        resultArray = append(resultArray, \"six\")\n        case 7:\n       \
    \     resultArray = append(resultArray, \"seven\")\n        case 8:\n        \
    \    resultArray = append(resultArray, \"eight\")\n        case 9:\n         \
    \   resultArray = append(resultArray, \"nine\")\n        }\n    }\n    return\
    \ strings.Join(resultArray, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiakvpgvf_test.go:16:23: undefined: strings

    /tmp/tmpiakvpgvf_test.go:40:5: undefined: sort

    /tmp/tmpiakvpgvf_test.go:65:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberMap := map[string]int {\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ nums []int\n    for _, word := range strings.Split(numbers, \" \") {\n     \
    \   nums = append(nums, numberMap[word])\n    }\n    sort.Ints(nums)\n    var\
    \ sorted []string\n    for _, n := range nums {\n        for k, v := range numberMap\
    \ {\n            if v == n {\n                sorted = append(sorted, k)\n   \
    \         }\n        }\n    }\n    return strings.Join(sorted, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqaurild8_test.go:27:26: undefined: strings

    /tmp/tmpqaurild8_test.go:30:5: undefined: sort

    /tmp/tmpqaurild8_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sortedNumbers string\n   \
    \ var sortedNums []int\n\n    nums := parseNumbers(numbers)\n    if len(nums)\
    \ == 0 {\n        return \"\"\n    }\n    sortedNums = insertSort(nums)\n    sortedNumbers\
    \ = join(sortedNums)\n    return sortedNumbers\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaylimml3_test.go:17:13: undefined: parseNumbers

    /tmp/tmpaylimml3_test.go:21:18: undefined: insertSort

    /tmp/tmpaylimml3_test.go:22:21: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tslice := strings.Split(numbers,\
    \ \" \")\n\tarray := []int{}\n\tfor _, n := range slice {\n\t\tarray = append(array,\
    \ stringToInt(n))\n\t}\n\treturn fmt.Sprintf(\"%d %d %d\", min(array[0], array[1],\
    \ array[2]), mid(array[0], array[1], array[2]), max(array[0], array[1], array[2]))\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8g02xv9_test.go:14:11: undefined: strings

    /tmp/tmpz8g02xv9_test.go:17:25: undefined: stringToInt

    /tmp/tmpz8g02xv9_test.go:19:33: undefined: min

    /tmp/tmpz8g02xv9_test.go:19:68: undefined: mid

    /tmp/tmpz8g02xv9_test.go:19:103: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074272
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := make([]int, 0)\n    for\
    \ _, num := range numbers {\n        if num == 'o' {\n            nums = append(nums,\
    \ 1)\n        } else if num == 't' {\n            nums = append(nums, 2)\n   \
    \     } else if num == 'h' {\n            nums = append(nums, 3)\n        } else\
    \ if num == 'f' {\n            nums = append(nums, 4)\n        } else if num ==\
    \ 'i' {\n            nums = append(nums, 5)\n        } else if num == 'x' {\n\
    \            nums = append(nums, 6)\n        } else if num == 'v' {\n        \
    \    nums = append(nums, 7)\n        } else if num == 'e' {\n            nums\
    \ = append(nums, 8)\n        } else if num == 'n' {\n            nums = append(nums,\
    \ 9)\n        }\n    }\n    return print(nums)\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkac1zds7_test.go:36:12: print(nums) (no value) used as value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums [10]int\n    for _, num_str\
    \ := range []byte(numbers) {\n        nums[num_str - '0']++\n    }\n    var result\
    \ string\n    for i, count := range nums {\n        if count > 0 {\n         \
    \   result += fmt.Sprintf(\"%s \", strings.Repeat(string(i + '0'), count))\n \
    \       }\n    }\n    return strings.TrimRight(result, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd65jlf1b_test.go:21:42: undefined: strings

    /tmp/tmpd65jlf1b_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers_map := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ list []int\n    var res string\n    list = make([]int, 0)\n    for _, v := range\
    \ strings.Split(numbers, \" \") {\n        list = append(list, numbers_map[v])\n\
    \    }\n    sort.Ints(list)\n    for _, v := range list {\n        if len(res)\
    \ > 0 {\n            res += \" \"\n        }\n        for k, w := range numbers_map\
    \ {\n            if v == w {\n                res += k\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g8le8lk_test.go:29:23: undefined: strings

    /tmp/tmp6g8le8lk_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{}\n    for _, num\
    \ := range strings.Split(numbers, \" \") {\n        n, _ := strconv.Atoi(num)\n\
    \        nums = append(nums, n)\n    }\n    sort.Ints(nums)\n    var out []string\n\
    \    for _, num := range nums {\n        out = append(out, fmt.Sprintf(\"%d\"\
    , num))\n    }\n    return strings.Join(out, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2oa55594_test.go:15:25: undefined: strings

    /tmp/tmp2oa55594_test.go:16:17: undefined: strconv

    /tmp/tmp2oa55594_test.go:19:5: undefined: sort

    /tmp/tmp2oa55594_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums []string\n    numberals\
    \ := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9,\n    }\n    for _, val := range numbers {\n        if val != ' ' {\n    \
    \        nums = append(nums, string(val))\n        }\n    }\n    sort(nums, numberals)\n\
    \    sortedNums := \"\"\n    for i, val := range nums {\n        if i == 0 {\n\
    \            sortedNums += val\n        } else {\n            sortedNums += \"\
    \ \" + val\n        }\n    }\n    return sortedNums\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxk8_n7br_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"placeholder\"\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpnpelz_2__test.go:34: expected '', got 'placeholder'\n  \
    \  --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpnpelz_2__test.go:34:\
    \ expected 'three', got 'placeholder'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpnpelz_2__test.go:34: expected 'three five nine', got 'placeholder'\n\
    \    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpnpelz_2__test.go:34:\
    \ expected 'zero four five seven eight nine', got 'placeholder'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpnpelz_2__test.go:34: expected\
    \ 'zero one two three four five six', got 'placeholder'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Implement sort_numbers here!\n\
    \    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpihl9ofi__test.go:35: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpihl9ofi__test.go:35: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    switch numbers {\n    case \"\
    one three five\":\n        return \"one three five\"\n    default:\n        return\
    \ \"\"\n    }\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp9m89qa5d_test.go:39: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp9m89qa5d_test.go:39: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp9m89qa5d_test.go:39: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp9m89qa5d_test.go:39:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers_map := map[string]int\
    \ {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"\
    three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n\
    \        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n \
    \   str_list := make([]string, 0)\n    num_list := make([]int, 0)\n    for _,\
    \ v := range strings.Split(numbers, \" \") {\n        str_list = append(str_list,\
    \ v)\n        num_list = append(num_list, numbers_map[v])\n    }\n    sort.Ints(num_list)\n\
    \    for i, v := range num_list {\n        for _, k := range numbers_map {\n \
    \           if v == k {\n                str_list[i] = k\n            }\n    \
    \    }\n    }\n    return strings.Join(str_list, \" \")\n}\n\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_nduq3bv_test.go:28:23: undefined: strings

    /tmp/tmp_nduq3bv_test.go:32:5: undefined: sort

    /tmp/tmp_nduq3bv_test.go:36:31: cannot use k (variable of type int) as type string
    in assignment

    /tmp/tmp_nduq3bv_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"one three five\"\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected '', got 'one three five'\n\
    \    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'three', got 'one three five'\n    --- FAIL: TestSort_Numbers/test_num__2\
    \ (0.00s)\n        tmpmz7w2gi0_test.go:34: expected 'three five nine', got 'one\
    \ three five'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpmz7w2gi0_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'one three five'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__4 (0.00s)\n        tmpmz7w2gi0_test.go:34: expected\
    \ 'zero one two three four five six', got 'one three five'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    number_values := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    number_words\
    \ := []string{}\n    values := []int{}\n    value_index := 0\n    for _, number_word\
    \ := range numbers_by_word(numbers) {\n        number_words = append(number_words,\
    \ number_word)\n        values = append(values, number_values[number_word])\n\
    \    }\n    sort(values)\n    number_sorted := []string{}\n    for _, value :=\
    \ range values {\n        for value_index = range values {\n            if values[value_index]\
    \ == value {\n                number_sorted = append(number_sorted, number_words[value_index])\n\
    \                break\n            }\n        }\n    }\n    return strings.Join(number_sorted,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9r4ip8y_test.go:29:33: undefined: numbers_by_word

    /tmp/tmpz9r4ip8y_test.go:33:5: undefined: sort

    /tmp/tmpz9r4ip8y_test.go:43:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := map[string]int{\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    // fmt.Println(words)\n\
    \    vals := []int{}\n    for k,v := range words {\n        fmt.Println(k,v)\n\
    \        vals = append(vals, v)\n    }\n    fmt.Println(vals)\n    return \"stuff\"\
    \n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "nine 9\none 1\nthree 3\nfour 4\nfive 5\neight 8\nzero 0\ntwo 2\nsix 6\n\
    seven 7\n[9 1 3 4 5 8 0 2 6 7]\nfive 5\nseven 7\nnine 9\nzero 0\nfour 4\nthree\
    \ 3\nsix 6\neight 8\none 1\ntwo 2\n[5 7 9 0 4 3 6 8 1 2]\nseven 7\none 1\nthree\
    \ 3\nfive 5\nsix 6\nnine 9\nzero 0\ntwo 2\nfour 4\neight 8\n[7 1 3 5 6 9 0 2 4\
    \ 8]\nzero 0\ntwo 2\nthree 3\nfour 4\nfive 5\nsix 6\nseven 7\neight 8\nnine 9\n\
    one 1\n[0 2 3 4 5 6 7 8 9 1]\nzero 0\ntwo 2\nseven 7\neight 8\nnine 9\none 1\n\
    three 3\nfour 4\nfive 5\nsix 6\n[0 2 7 8 9 1 3 4 5 6]\n--- FAIL: TestSort_Numbers\
    \ (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0 (0.00s)\n        tmpsxofgyz6_test.go:53:\
    \ expected '', got 'stuff'\n    --- FAIL: TestSort_Numbers/test_num__1 (0.00s)\n\
    \        tmpsxofgyz6_test.go:53: expected 'three', got 'stuff'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmpsxofgyz6_test.go:53: expected\
    \ 'three five nine', got 'stuff'\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmpsxofgyz6_test.go:53: expected 'zero four five seven eight nine', got\
    \ 'stuff'\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmpsxofgyz6_test.go:53:\
    \ expected 'zero one two three four five six', got 'stuff'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\tnumbers_map := make(map[string]int)\n\
    \tnumbers_map[\"zero\"] = 0\n\tnumbers_map[\"one\"] = 1\n\tnumbers_map[\"two\"\
    ] = 2\n\tnumbers_map[\"three\"] = 3\n\tnumbers_map[\"four\"] = 4\n\tnumbers_map[\"\
    five\"] = 5\n\tnumbers_map[\"six\"] = 6\n\tnumbers_map[\"seven\"] = 7\n\tnumbers_map[\"\
    eight\"] = 8\n\tnumbers_map[\"nine\"] = 9\n\n\tnumbers_to_sort := []int{}\n\t\
    for _, number := range strings.Split(numbers, \" \") {\n\t\tnumbers_to_sort =\
    \ append(numbers_to_sort, numbers_map[number])\n\t}\n\n\tsort.Ints(numbers_to_sort)\n\
    \n\tnumbers_sorted := []string{}\n\tfor _, number := range numbers_to_sort {\n\
    \t\tnumbers_sorted = append(numbers_sorted, strconv.Itoa(number))\n\t}\n\n\treturn\
    \ strings.Join(numbers_sorted, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_luu6dx_test.go:27:25: undefined: strings

    /tmp/tmpt_luu6dx_test.go:31:2: undefined: sort

    /tmp/tmpt_luu6dx_test.go:35:43: undefined: strconv

    /tmp/tmpt_luu6dx_test.go:38:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sortNumbers = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ slc = []int{}\n    for _, str := range strings.Split(numbers, \" \") {\n   \
    \     slc = append(slc, sortNumbers[str])\n    }\n    sort.Ints(slc)\n    var\
    \ ret []string\n    for _, val := range slc {\n        for key, x := range sortNumbers\
    \ {\n            if x == val {\n                ret = append(ret, key)\n     \
    \       }\n        }\n    }\n    return strings.Join(ret, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnitfr58p_test.go:27:25: undefined: strings

    /tmp/tmpnitfr58p_test.go:30:5: undefined: sort

    /tmp/tmpnitfr58p_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // TODO\n    return \"\"\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp7_rqcskv_test.go:35: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp7_rqcskv_test.go:35: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp7_rqcskv_test.go:35: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp7_rqcskv_test.go:35:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n     \
    \   return \"\"\n    }\n\n    var nums []int\n    for _, n := range numbers {\n\
    \        nums = append(nums, int(n))\n    }\n\n    for i := 0; i < len(nums) -\
    \ 1; i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i]\
    \ > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n         \
    \   }\n        }\n    }\n\n    var sortedNumbers string\n    for _, n := range\
    \ nums {\n        sortedNumbers += string(n)\n    }\n\n    return sortedNumbers\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpeg35izjg_test.go:33:26: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Parse input string\n    dict\
    \ := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9,\n    }\n    var numSlice []int\n    for _, number := range numbers {\n  \
    \      numSlice = append(numSlice, dict[string(number)])\n    }\n    // Bubble\
    \ sort\n    for i := 0; i < len(numSlice); i++ {\n        for j := i + 1; j <\
    \ len(numSlice); j++ {\n            if numSlice[i] > numSlice[j] {\n         \
    \       numSlice[i], numSlice[j] = numSlice[j], numSlice[i]\n            }\n \
    \       }\n    }\n    // Parse output string\n    var strSlice []string\n    for\
    \ _, number := range numSlice {\n        for key, value := range dict {\n    \
    \        if value == number {\n                strSlice = append(strSlice, key)\n\
    \            }\n        }\n    }\n    return strings.Join(strSlice, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2jqsie8_test.go:48:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__1\
    \ (0.00s)\n        tmp1ug3lq4z_test.go:34: expected 'three', got ''\n    --- FAIL:\
    \ TestSort_Numbers/test_num__2 (0.00s)\n        tmp1ug3lq4z_test.go:34: expected\
    \ 'three five nine', got ''\n    --- FAIL: TestSort_Numbers/test_num__3 (0.00s)\n\
    \        tmp1ug3lq4z_test.go:34: expected 'zero four five seven eight nine', got\
    \ ''\n    --- FAIL: TestSort_Numbers/test_num__4 (0.00s)\n        tmp1ug3lq4z_test.go:34:\
    \ expected 'zero one two three four five six', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return \"zero\"\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__0\
    \ (0.00s)\n        tmpji2myxp1_test.go:34: expected '', got 'zero'\n    --- FAIL:\
    \ TestSort_Numbers/test_num__1 (0.00s)\n        tmpji2myxp1_test.go:34: expected\
    \ 'three', got 'zero'\n    --- FAIL: TestSort_Numbers/test_num__2 (0.00s)\n  \
    \      tmpji2myxp1_test.go:34: expected 'three five nine', got 'zero'\n    ---\
    \ FAIL: TestSort_Numbers/test_num__3 (0.00s)\n        tmpji2myxp1_test.go:34:\
    \ expected 'zero four five seven eight nine', got 'zero'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpji2myxp1_test.go:34: expected 'zero one two three four five\
    \ six', got 'zero'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numberals = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ nums []int\n    for _, num := range numbers {\n        fmt.Println(string(num))\n\
    \    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvaanaer_test.go:14:9: numberals declared but not used

    /tmp/tmpdvaanaer_test.go:26:9: nums declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n\t\tlist := []int{}\n\t\tfor _, num\
    \ := range numbers {\n\t\t\t\tlist = append(list, toInt(num))\n\t\t}\n\t\treturn\
    \ sort(list)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhl9qu8j_test.go:16:25: undefined: toInt

    /tmp/tmphhl9qu8j_test.go:18:10: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers_map = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ numbers_slice []int\n    var sorted_string []string\n    for _, i := range numbers_map\
    \ {\n        numbers_slice = append(numbers_slice, i)\n    }\n    sort_slice(numbers_slice)\n\
    \    for _, i := range numbers_slice {\n        for k, v := range numbers_map\
    \ {\n            if i == v {\n                sorted_string = append(sorted_string,\
    \ k)\n            }\n        }\n    }\n    return strings.Join(sorted_string,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_86v9gva_test.go:31:5: undefined: sort_slice

    /tmp/tmp_86v9gva_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []int{}\n    for _, num\
    \ := range strings.Split(numbers, \" \") {\n        i, err := strconv.Atoi(num)\n\
    \        if err != nil {\n            continue\n        }\n        nums = append(nums,\
    \ i)\n    }\n    sort.Ints(nums)\n    sorted := []string{}\n    for _, num :=\
    \ range nums {\n        sorted = append(sorted, strconv.Itoa(num))\n    }\n  \
    \  return strings.Join(sorted, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrqetdge_test.go:15:25: undefined: strings

    /tmp/tmpjrqetdge_test.go:16:19: undefined: strconv

    /tmp/tmpjrqetdge_test.go:22:5: undefined: sort

    /tmp/tmpjrqetdge_test.go:25:33: undefined: strconv

    /tmp/tmpjrqetdge_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074273
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
