language: go_test.go
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx5j3x5mv_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tlstLen := len(lst)\n\tif lstLen == 0 {\n\t\treturn lst\n\t\
    }\n\n\t// sort list\n\tfor i:=0; i<lstLen; i++ {\n\t\tfor j:=0; j<lstLen-1; j++\
    \ {\n\t\t\tif lst[j] > lst[j+1] {\n\t\t\t\tlst[j], lst[j+1] = lst[j+1], lst[j]\n\
    \t\t\t}\n\t\t}\n\t}\n\n\t// swap pairs except the last item\n\tvar newLst []int\n\
    \tfor i:=0; i<lstLen-1; i+=2 {\n\t\tnewLst = append(newLst, lst[i+1], lst[i])\n\
    \t}\n\t// if list is odd append the last item\n\tif lstLen%2 != 0 {\n\t\tnewLst\
    \ = append(newLst, lst[lstLen-1])\n\t}\n\n\treturn newLst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpa6ml8ant_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpa6ml8ant_test.go:67: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6)\
    \ %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpa6ml8ant_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpa6ml8ant_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=7) %!s(int=6) %!s(int=9) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpa6ml8ant_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6)\
    \ %!s(int=5) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpa6ml8ant_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) <= 1 {\n        return lst\n    }\n    var s\
    \ []int\n    if len(lst) % 2 == 0 {\n        s = lst[:len(lst)/2]\n    } else\
    \ {\n        s = lst[:len(lst)/2+1]\n    }\n    //fmt.Println(s)\n    for i :=\
    \ 0; i < len(s)/2; i++ {\n        tmp := s[i]\n        s[i] = s[len(s)-1-i]\n\
    \        s[len(s)-1-i] = tmp\n    }\n    //fmt.Println(s)\n    var s2 []int\n\
    \    if len(lst) % 2 == 0 {\n        s2 = lst[len(lst)/2:]\n    } else {\n   \
    \     s2 = lst[len(lst)/2+1:]\n    }\n    //fmt.Println(s2)\n    for i := 0; i\
    \ < len(s2)/2; i++ {\n        tmp := s2[i]\n        s2[i] = s2[len(s2)-1-i]\n\
    \        s2[len(s2)-1-i] = tmp\n    }\n    //fmt.Println(s2)\n    for i := 0;\
    \ i < len(s); i++ {\n        lst[i*2] = s[i]\n    }\n    for i := 0; i < len(s2);\
    \ i++ {\n        lst[i*2+1] = s2[i]\n    }\n    return lst\n}\n\n//Testing\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp9ihw0p_o_test.go:79: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp9ihw0p_o_test.go:79: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=7)\
    \ %!s(int=9) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp9ihw0p_o_test.go:79: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=3) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp9ihw0p_o_test.go:79:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=7) %!s(int=1) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp9ihw0p_o_test.go:79:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=3) %!s(int=3) %!s(int=7) %!s(int=3)\
    \ %!s(int=1) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp9ihw0p_o_test.go:79: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return nil\n    }\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    if len(lst) == 1 {\n        return lst\n\
    \    }\n    new_lst := []int{}\n    min_idx := 0\n    max_idx := 0\n    for i,\
    \ _ := range lst {\n        if lst[i] < lst[min_idx] {\n            min_idx =\
    \ i\n        }\n        if lst[i] > lst[max_idx] {\n            max_idx = i\n\
    \        }\n    }\n    new_lst = append(new_lst, lst[min_idx])\n    new_lst =\
    \ append(new_lst, lst[max_idx])\n    if len(lst) == 2 {\n        return new_lst\n\
    \    }\n    new_lst = append(new_lst, strange_sort_list(append([]int{}, lst[:min_idx]...))...)\n\
    \    new_lst = append(new_lst, strange_sort_list(append([]int{}, lst[min_idx+1:max_idx]...))...)\n\
    \    new_lst = append(new_lst, strange_sort_list(append([]int{}, lst[max_idx+1:]...))...)\n\
    \    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [6:4] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [6:4]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024450?, 0x6, 0x6})\n\
    \t/tmp/tmpizcor2rk_test.go:45 +0x554\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpizcor2rk_test.go:60 +0x19f\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO: Implement me\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpv792_i8s_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpv792_i8s_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpv792_i8s_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpv792_i8s_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv792_i8s_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpv792_i8s_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // YOUR CODE HERE\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxmuo2oel_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxmuo2oel_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxmuo2oel_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxmuo2oel_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxmuo2oel_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpxmuo2oel_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    max := lst[0]\n    min := lst[0]\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n        if v <\
    \ min {\n            min = v\n        }\n    }\n    odd := make([]int, len(lst)/2+1)\n\
    \    even := make([]int, len(lst)/2+1)\n    odd[0] = min\n    even[0] = max\n\
    \    for i := 1; i < len(lst); i += 2 {\n        max = lst[i]\n        min = lst[i]\n\
    \        for _, v := range lst {\n            if v > max && v < even[i-1] {\n\
    \                max = v\n            }\n            if v < min && v > odd[i-1]\
    \ {\n                min = v\n            }\n        }\n        odd[i/2+1] = min\n\
    \        even[i/2+1] = max\n    }\n    ret := make([]int, len(lst))\n    for i\
    \ := 0; i < len(odd); i++ {\n        ret[i*2] = odd[i]\n        ret[i*2+1] = even[i]\n\
    \    }\n    return ret\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90, 0x4, 0x450329?})\n\
    \t/tmp/tmp5x_f3q3e_test.go:49 +0x199\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp5x_f3q3e_test.go:62 +0x93\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Algorithm:\n    // 1. find minimum value\n    // 2. find\
    \ maximum value of remaining integers\n    // 3. repeat 1-2. until all integers\
    \ are exhausted\n    //\n    // Possible data \nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfvh3sn5h_test.go:25:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074571
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    lst =\
    \ sort_list(lst)\n    new_lst := []int{}\n    for i := 0; i < len(lst); i++ {\n\
    \        if i % 2 == 0 {\n            new_lst = append(new_lst, lst[i])\n    \
    \    } else {\n            new_lst = append([]int{lst[i]}, new_lst...)\n     \
    \   }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2n7e9i4l_test.go:22:11: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // STEP 1: sort the list.\n    l := len(lst)\n    if l <\
    \ 2 {\n        return lst\n    }\n    for i := 0; i < l - 1; i++ {\n        for\
    \ j := i + 1; j < l; j++ {\n            if lst[i] > lst[j] {\n               \
    \ lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    // STEP\
    \ 2: modify the list in a strange order.\n    mid := (l / 2) + 1\n    if l % 2\
    \ == 0 {\n        mid = l / 2\n    }\n    odd_sl := lst[:mid]\n    even_sl :=\
    \ lst[mid:]\n    new_list := []int{}\n    for i := 0; i < mid; i++ {\n       \
    \ new_list = append(new_list, even_sl[i])\n        if i < len(odd_sl) {\n    \
    \        new_list = append(new_list, odd_sl[i])\n        }\n    }\n    return\
    \ new_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024390?, 0x5d4250?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpgu9d8dre_test.go:40 +0x1c5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpgu9d8dre_test.go:56 +0xd7\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    var min, max int\n    var min_i, max_i int\n \
    \   var from, to int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n\
    \        min_i, max_i = 0, 0\n        for i, x := range lst {\n            if\
    \ x < min {\n                min = x\n                min_i = i\n            }\n\
    \            if x > max {\n                max = x\n                max_i = i\n\
    \            }\n        }\n        if from % 2 == 0 {\n            result[from]\
    \ = min\n            to = min_i\n        } else {\n            result[from] =\
    \ max\n            to = max_i\n        }\n        lst = append(lst[:to], lst[to+1:]...)\n\
    \        from++\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    if n == 0 {\n        return []int{}\n\
    \    }\n    res := make([]int, n)\n    min := lst[0]\n    pos := 0\n    for i\
    \ := 1; i < n; i++ {\n        if lst[i] < min {\n            min = lst[i]\n  \
    \          pos = i\n        }\n    }\n    res[0] = min\n    if n == 1 {\n    \
    \    return res\n    }\n    lst[pos] = -1\n    max := lst[0]\n    pos = 0\n  \
    \  for i := 1; i < n; i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \            pos = i\n        }\n    }\n    res[1] = max\n    lst[pos] = -1\n\
    \    i := 2\n    for {\n        min = lst[0]\n        pos = 0\n        for j :=\
    \ 1; j < n; j++ {\n            if lst[j] < min && lst[j] != -1 {\n           \
    \     min = lst[j]\n                pos = j\n            }\n        }\n      \
    \  res[i] = min\n        lst[pos] = -1\n        i++\n        if i >= n {\n   \
    \         break\n        }\n        max = lst[0]\n        pos = 0\n        for\
    \ j := 1; j < n; j++ {\n            if lst[j] > max && lst[j] != -1 {\n      \
    \          max = lst[j]\n                pos = j\n            }\n        }\n \
    \       res[i] = max\n        lst[pos] = -1\n        i++\n        if i >= n {\n\
    \            break\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmptf6l5unu_test.go:102: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=-1) %!s(int=3)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptf6l5unu_test.go:102:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=-1) %!s(int=8) %!s(int=-1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmptf6l5unu_test.go:102: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=-1) %!s(int=4)\
    \ %!s(int=-1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n   \
    \     tmptf6l5unu_test.go:102: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=-1)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmptf6l5unu_test.go:102: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=-1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmptf6l5unu_test.go:102: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=-1) %!s(int=7) %!s(int=-1) %!s(int=6) %!s(int=-1) %!s(int=5)]'\n   \
    \ --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptf6l5unu_test.go:102:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=-1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sorted := lst\n    l := len(lst)\n    if l > 1 {\n     \
    \   var i int\n        for i = 0; i < l/2; i++ {\n            low := min(sorted[i*2:])\n\
    \            high := max(sorted[i*2:])\n            sorted[i*2] = low\n      \
    \      sorted[i*2+1] = high\n        }\n        if l%2 != 0 {\n            sorted[l-1]\
    \ = lst[l-1]\n        }\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2064ks0_test.go:24:20: undefined: min

    /tmp/tmpy2064ks0_test.go:25:21: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    for {\n\
    \        for i, j := 0, len(lst)-1; i < j; i, j = i+1, j-1 {\n            lst[i],\
    \ lst[j] = lst[j], lst[i]\n        }\n        lst = append(lst[:len(lst)/2], lst[len(lst)/2+1:]...)\n\
    \        if len(lst) == 0 {\n            break\n        }\n    }\n    return lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_394630__test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmp_394630__test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmp_394630__test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmp_394630__test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmp_394630__test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmp_394630__test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp_394630__test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp_394630__test.go:55:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    // Init\
    \ min and max\n    min := lst[0]\n    max := lst[0]\n    // Iterate over list,\
    \ find min and max\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    // Init sorted list\n    sorted_list := []int{}\n    // Init ascending\
    \ and descending\n    ascending := true\n    // Loop over list\n    for len(lst)\
    \ > 0 {\n        if ascending {\n            // Find min and append to sorted\
    \ list\n            var min_index int\n            for index, v := range lst {\n\
    \                if v == min {\n                    min_index = index\n      \
    \              break\n                }\n            }\n            sorted_list\
    \ = append(sorted_list, min)\n            // Remove min from list\n          \
    \  lst = append(lst[:min_index], lst[min_index+1:]...)\n            // Remove\
    \ min from search\n            min = max + 1\n            // Switch to descending\n\
    \            ascending = false\n        } else {\n            // Find max and\
    \ append to sorted list\n            var max_index int\n            for index,\
    \ v := range lst {\n                if v == max {\n                    max_index\
    \ = index\n                    break\n                }\n            }\n     \
    \       sorted_list = append(sorted_list, max)\n            // Remove max from\
    \ list\n            lst = append(lst[:max_index], lst[max_index+1:]...)\n    \
    \        // Remove max from search\n            max = min - 1\n            //\
    \ Switch to ascending\n            ascending = true\n        }\n    }\n    return\
    \ sorted_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate :=\
    \ strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpe3qbx2k0_test.go:98: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpe3qbx2k0_test.go:98: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpe3qbx2k0_test.go:98: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpe3qbx2k0_test.go:98:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpe3qbx2k0_test.go:98:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpe3qbx2k0_test.go:98: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=9)\
    \ %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpe3qbx2k0_test.go:98: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // BEGIN\n    if len(lst) <= 1 {\n        return lst\n \
    \   }\n    sort_lst := make([]int, len(lst))\n    for i := 0; i < len(lst); i++\
    \ {\n        if i%2 == 0 {\n            sort_lst[i] = min(lst)\n        } else\
    \ {\n            sort_lst[i] = max(lst)\n        }\n    }\n    return sort_lst\n\
    \    // END\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vbu5v3__test.go:26:27: undefined: min

    /tmp/tmp6vbu5v3__test.go:28:27: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074572
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            // Find lowest\n            j := i\n            for k := i + 1; k\
    \ < len(lst); k++ {\n                if lst[k] < lst[j] {\n                  \
    \  j = k\n                }\n            }\n            lst[i], lst[j] = lst[j],\
    \ lst[i]\n        } else {\n            // Find highest\n            j := i\n\
    \            for k := i + 1; k < len(lst); k++ {\n                if lst[k] >\
    \ lst[j] {\n                    j = k\n                }\n            }\n    \
    \        lst[i], lst[j] = lst[j], lst[i]\n        }\n    }\n    return lst\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    N := len(lst)\n    if N <= 1 {\n        return lst\n   \
    \ }\n    sorted_lst := make([]int, N)\n    sorted_lst[0] = lst[0]\n    p := 0\n\
    \    for i := 1; i < N; i++ {\n        if i%2 == 0 {\n            // go left\n\
    \            if p > 0 {\n                p--\n            }\n        } else {\n\
    \            // go right\n            if p < N-1 {\n                p++\n    \
    \        }\n        }\n        sorted_lst[p] = lst[i]\n    }\n    return sorted_lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpng06gcz9_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpng06gcz9_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpng06gcz9_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpng06gcz9_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpng06gcz9_test.go:64:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpng06gcz9_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=7) %!s(int=8) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpng06gcz9_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // return []int{}\n    for i := 0; i < len(lst) - 1; i++\
    \ {\n        smallest := lst[i]\n        smallestIndex := i\n        for j :=\
    \ i; j < len(lst); j++ {\n            if lst[j] < smallest {\n               \
    \ smallest = lst[j]\n                smallestIndex = j\n            }\n      \
    \  }\n        // now move the smallest to the beginning of the list\n        if\
    \ smallestIndex != i {\n            lst[i], lst[smallestIndex] = lst[smallestIndex],\
    \ lst[i]\n        }\n    }\n    // now we can print out the lst in the strange\
    \ order\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp92g_32pb_test.go:59: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp92g_32pb_test.go:59: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp92g_32pb_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp92g_32pb_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp92g_32pb_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp92g_32pb_test.go:59: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    newList := make([]int, len(lst))\n    for i := range lst\
    \ {\n        newList[i] = lst[i]\n    }\n    for i := 0; i < len(newList) - 1;\
    \ i++ {\n        if i % 2 == 0 {\n            minimum := newList[i]\n        \
    \    start := i\n            var index int\n            for j := i; j < len(newList);\
    \ j++ {\n                if newList[j] < minimum {\n                    minimum\
    \ = newList[j]\n                    index = j\n                }\n           \
    \ }\n            newList[index] = newList[start]\n            newList[start] =\
    \ minimum\n        } else {\n            maximum := newList[i]\n            start\
    \ := i\n            var index int\n            for j := i; j < len(newList); j++\
    \ {\n                if newList[j] > maximum {\n                    maximum =\
    \ newList[j]\n                    index = j\n                }\n            }\n\
    \            newList[index] = newList[start]\n            newList[start] = maximum\n\
    \        }\n    }\n    return newList\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpczgdc0_q_test.go:74: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=8) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpczgdc0_q_test.go:74:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpczgdc0_q_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpczgdc0_q_test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpczgdc0_q_test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var r\
    \ []int\n    for len(lst) > 0 {\n        min, max := findMinMax(lst)\n       \
    \ r = append(r, min)\n        if max != min {\n            r = append(r, max)\n\
    \        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n \
    \   }\n    return r\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfudvqruv_test.go:24:21: undefined: findMinMax

    /tmp/tmpfudvqruv_test.go:29:15: undefined: remove

    /tmp/tmpfudvqruv_test.go:30:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // your code here\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_7ovsda7_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_7ovsda7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_7ovsda7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpdvppwy8z_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    sorted\
    \ := []int{}\n    lst = append(lst, lst[0])\n    for i, j := 0, len(lst)-1; i\
    \ < j; {\n        sorted = append(sorted, lst[i])\n        sorted = append(sorted,\
    \ lst[j])\n        i++\n        j--\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp6dsmx5gp_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp6dsmx5gp_test.go:54: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp6dsmx5gp_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=5) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmp6dsmx5gp_test.go:54: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=7)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmp6dsmx5gp_test.go:54: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp6dsmx5gp_test.go:54: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074574
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ make([]int, len(lst))\n    res[0] = min(lst)\n    lst = remove_from_list(lst,\
    \ res[0])\n    for i := 1; i < len(lst); i++ {\n        if i % 2 == 1 {\n    \
    \        res[i] = max(lst)\n        } else {\n            res[i] = min(lst)\n\
    \        }\n        lst = remove_from_list(lst, res[i])\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgcvn_wcl_test.go:23:14: undefined: min

    /tmp/tmpgcvn_wcl_test.go:24:11: undefined: remove_from_list

    /tmp/tmpgcvn_wcl_test.go:27:22: undefined: max

    /tmp/tmpgcvn_wcl_test.go:29:22: undefined: min

    /tmp/tmpgcvn_wcl_test.go:31:15: undefined: remove_from_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074574
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    if\
    \ len(lst) == 1 {\n        return lst\n    }\n    max := lst[0]\n    for _, el\
    \ := range lst {\n        if el > max {\n            max = el\n        }\n   \
    \ }\n    min := lst[0]\n    for _, el := range lst {\n        if el < min {\n\
    \            min = el\n        }\n    }\n    temp := make([]int, 0)\n    temp\
    \ = append(temp, min)\n    temp = append(temp, max)\n    lst = append(lst[:0],\
    \ lst[2:]...)\n    lst = append(lst, temp...)\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0368\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e0378 sp=0xc0201e0370 pc=0x40cf1d\nruntime.growslice(0xc0000c6800?,\
    \ {0xc0201e0420?, 0x0?, 0x0?}, 0xc0201e0468?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e03e0 sp=0xc0201e0378 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?,\
    \ 0x4, 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:38 +0xd9 fp=0xc0201e0478 sp=0xc0201e03e0\
    \ pc=0x4ef739\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e0510 sp=0xc0201e0478\
    \ pc=0x4ef88c\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e05a8 sp=0xc0201e0510\
    \ pc=0x4ef88c\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e0640 sp=0xc0201e05a8\
    \ pc=0x4ef88c\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e06d8 sp=0xc0201e0640\
    \ pc=0x4ef88c\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e0770 sp=0xc0201e06d8\
    \ pc=0x4ef88c\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e0808 sp=0xc0201e0770\
    \ pc=0x4ef88c\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4,\
    \ 0x4})\n\t/tmp/tmp0yrbjxsp_test.go:42 +0x22c fp=0xc0201e08a0 sp=0xc0201e0808\
    \ pc=0x4ef88c\ncommand-line"
  timestamp: 1660074576
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  max := lst[0]\n    maxi := 0\n    min := lst[0]\n    mini := 0\n    for i,\
    \ x := range lst {\n        if max < x {\n            max = x\n            maxi\
    \ = i\n        }\n        if min > x {\n            min = x\n            mini\
    \ = i\n        }\n    }\n\n    result := []int{min}\n    result = append(result,\
    \ lst[0:mini]...)\n    result = append(result, lst[mini+1:]...)\n    result =\
    \ append(result, max)\n\n    if len(result) > 2 {\n        return strange_sort_list(result[1:len(result)-1])\n\
    \    } else {\n        return result\n    }\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu19u2omu_test.go:24:5: maxi declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074574
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return nil\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmplx6576av_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  sorted := make([]int, len(lst))\n    sorted[0] = min(lst)\n    lst = remove(lst,\
    \ min(lst))\n\n    for i := 1; i < len(sorted); i++ {\n        if i % 2 == 1 {\n\
    \            sorted[i] = max(lst)\n            lst = remove(lst, max(lst))\n \
    \       } else {\n            sorted[i] = min(lst)\n            lst = remove(lst,\
    \ min(lst))\n        }\n    }\n\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0wijdqm_test.go:24:17: undefined: min

    /tmp/tmpv0wijdqm_test.go:25:11: undefined: remove

    /tmp/tmpv0wijdqm_test.go:25:23: undefined: min

    /tmp/tmpv0wijdqm_test.go:29:25: undefined: max

    /tmp/tmpv0wijdqm_test.go:30:19: undefined: remove

    /tmp/tmpv0wijdqm_test.go:30:31: undefined: max

    /tmp/tmpv0wijdqm_test.go:32:25: undefined: min

    /tmp/tmpv0wijdqm_test.go:33:19: undefined: remove

    /tmp/tmpv0wijdqm_test.go:33:31: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmprllzwtda_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmprllzwtda_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmprllzwtda_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmprllzwtda_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmprllzwtda_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmprllzwtda_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx5j3x5mv_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    n := len(lst)\n    sorted := make([]int,\
    \ n)\n    if n % 2 == 0 {\n        for i := 0; i < n/2; i++ {\n            min\
    \ := min_index(lst)\n            max := max_index(lst)\n            sorted[2*i]\
    \ = lst[min]\n            sorted[2*i+1] = lst[max]\n            lst = append(lst[:min],\
    \ lst[min+1:]...)\n            lst = append(lst[:max-1], lst[max:]...)\n     \
    \   }\n    } else {\n        for i := 0; i < n/2+1; i++ {\n            min :=\
    \ min_index(lst)\n            max := max_index(lst)\n            sorted[2*i] =\
    \ lst[min]\n            sorted[2*i+1] = lst[max]\n            lst = append(lst[:min],\
    \ lst[min+1:]...)\n            lst = append(lst[:max-1], lst[max:]...)\n     \
    \   }\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9_m6y_y_test.go:29:20: undefined: min_index

    /tmp/tmpb9_m6y_y_test.go:30:20: undefined: max_index

    /tmp/tmpb9_m6y_y_test.go:38:20: undefined: min_index

    /tmp/tmpb9_m6y_y_test.go:39:20: undefined: max_index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    result\
    \ := []int{}\n    // find minimum value and its index\n    current := lst[0]\n\
    \    idx := 0\n    for i, v := range lst {\n        if v < current {\n       \
    \     current = v\n            idx = i\n        }\n    }\n    result = append(result,\
    \ current)\n    // append maximum value of the remaining integers\n    lst = append(lst[:idx],\
    \ lst[idx+1:]...)\n    current = lst[0]\n    idx = 0\n    for i, v := range lst\
    \ {\n        if v > current {\n            current = v\n            idx = i\n\
    \        }\n    }\n    result = append(result, current)\n    // append minimum\
    \ and so on\n    lst = append(lst[:idx], lst[idx+1:]...)\n    result = append(result,\
    \ strange_sort_list(lst)...)\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5cf8, 0x1, 0x5})\n\
    \t/tmp/tmplzsf8e20_test.go:35 +0x39e\ncommand-line-arguments_test.strange_sort_list({0xc0000f5cf8,\
    \ 0x3, 0x5})\n\t/tmp/tmplzsf8e20_test.go:46 +0x2ec\ncommand-line-arguments_test.strange_sort_list({0xc0000f5cf8,\
    \ 0x5, 0x5})\n\t/tmp/tmplzsf8e20_test.go:46 +0x2ec\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmplzsf8e20_test.go:58 +0x11c\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    newList\
    \ := make([]int, len(lst))\n    newList[0] = min(lst)\n    lst = remove(lst, newList[0])\n\
    \    for i := 1; i < len(newList); i++ {\n        if i % 2 == 1 {\n          \
    \  newList[i] = max(lst)\n        } else {\n            newList[i] = min(lst)\n\
    \        }\n        lst = remove(lst, newList[i])\n    }\n    return newList\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tqzywpx_test.go:23:18: undefined: min

    /tmp/tmp0tqzywpx_test.go:24:11: undefined: remove

    /tmp/tmp0tqzywpx_test.go:27:26: undefined: max

    /tmp/tmp0tqzywpx_test.go:29:26: undefined: min

    /tmp/tmp0tqzywpx_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    minIndex := 0\n    maxIndex := 0\n    result := make([]int,\
    \ len(lst))\n    for i := 0; i < len(lst); i++ {\n        minIndex = getMinIndex(lst)\n\
    \        maxIndex = getMaxIndex(lst)\n        result[i] = lst[minIndex]\n    \
    \    result[i+1] = lst[maxIndex]\n        lst = removeIndex(lst, minIndex)\n \
    \       lst = removeIndex(lst, maxIndex)\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjno0nq8d_test.go:23:20: undefined: getMinIndex

    /tmp/tmpjno0nq8d_test.go:24:20: undefined: getMaxIndex

    /tmp/tmpjno0nq8d_test.go:27:15: undefined: removeIndex

    /tmp/tmpjno0nq8d_test.go:28:15: undefined: removeIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    min_idx := 0\n    max := lst[0]\n    max_idx := 0\n    for idx,\
    \ v := range lst {\n        if v < min {\n            min = v\n            min_idx\
    \ = idx\n        }\n        if v > max {\n            max = v\n            max_idx\
    \ = idx\n        }\n    }\n    new_list := []int{min}\n    if min_idx < max_idx\
    \ {\n        new_list = append(new_list, lst[min_idx+1:max_idx]...)\n    } else\
    \ {\n        new_list = append(new_list, lst[min_idx+1:]...)\n        new_list\
    \ = append(new_list, lst[:max_idx]...)\n    }\n    new_list = append(new_list,\
    \ max)\n    if max_idx < min_idx {\n        new_list = append(new_list, lst[max_idx+1:min_idx]...)\n\
    \    } else {\n        new_list = append(new_list, lst[max_idx+1:]...)\n     \
    \   new_list = append(new_list, lst[:min_idx]...)\n    }\n    return strange_sort_list(new_list)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160368\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x18?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc020160378 sp=0xc020160370 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0xc004cc97e8?, 0x30?, 0x5fc0e0?}, 0xc004cd86c0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201603e0 sp=0xc020160378 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc004cd86c0?,\
    \ 0x4, 0x6})\n\t/tmp/tmprdumhfnb_test.go:38 +0x14d fp=0xc020160490 sp=0xc0201603e0\
    \ pc=0x4ef7ad\ncommand-line-arguments_test.strange_sort_list({0xc004cd8690?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc020160540 sp=0xc020160490\
    \ pc=0x4efbf0\ncommand-line-arguments_test.strange_sort_list({0xc004cd8660?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc0201605f0 sp=0xc020160540\
    \ pc=0x4efbf0\ncommand-line-arguments_test.strange_sort_list({0xc004cd8630?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc0201606a0 sp=0xc0201605f0\
    \ pc=0x4efbf0\ncommand-line-arguments_test.strange_sort_list({0xc004cd8600?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc020160750 sp=0xc0201606a0\
    \ pc=0x4efbf0\ncommand-line-arguments_test.strange_sort_list({0xc004cd85d0?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc020160800 sp=0xc020160750\
    \ pc=0x4efbf0\ncommand-line-arguments_test.strange_sort_list({0xc004cd85a0?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc0201608b0 sp=0xc020160800\
    \ pc=0x4efbf0\ncommand-line-arguments_test.strange_sort_list({0xc004cd8570?, 0x4,\
    \ 0x6})\n\t/tmp/tmprdumhfnb_test.go:50 +0x590 fp=0xc020160960 sp=0xc0201608b0\
    \ pc=0x4efbf0\ncommand-line-"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx5j3x5mv_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min,\
    \ min_index := getMin(lst)\n    if len(lst) == 1 {\n        return []int{min}\n\
    \    }\n    max, max_index := getMax(lst)\n    if len(lst) == 2 {\n        return\
    \ []int{min, max}\n    }\n    if min_index < max_index {\n        left := append(lst[:min_index],\
    \ lst[min_index+1:max_index]...)\n        right := lst[max_index+1:]\n       \
    \ return append([]int{min, max}, strange_sort_list(append(left, right...))...)\n\
    \    } else {\n        left := lst[:max_index]\n        right := append(lst[max_index+1:min_index],\
    \ lst[min_index+1:]...)\n        return append([]int{min, max}, strange_sort_list(append(left,\
    \ right...))...)\n    }\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_uub8px_test.go:22:23: undefined: getMin

    /tmp/tmpf_uub8px_test.go:26:23: undefined: getMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\t// TODO: Implement me\n\treturn []int{}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpqn2n3uiy_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpqn2n3uiy_test.go:44: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpqn2n3uiy_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpqn2n3uiy_test.go:44: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpqn2n3uiy_test.go:44: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpqn2n3uiy_test.go:44: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpqn2n3uiy_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpqn2n3uiy_test.go:44:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return nil\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmplx6576av_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    count := len(lst)\n    if count == 0 {\n        return lst\n\
    \    }\n\n    to_sort := make([]int, count)\n    copy(to_sort, lst)\n\n    sorted\
    \ := make([]int, count)\n    for index := 0; index < count; index++ {\n      \
    \  if index % 2 == 0 {\n            sorted[index] = min(to_sort)\n        } else\
    \ {\n            sorted[index] = max(to_sort)\n        }\n    }\n\n    return\
    \ sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmgkgy0p_test.go:30:29: undefined: min

    /tmp/tmpqmgkgy0p_test.go:32:29: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var max, min int\n    for len(lst) > 0 {\n        min, max = get_min_max(lst)\n\
    \        res = append(res, min)\n        res = append(res, max)\n        lst =\
    \ remove_int(lst, min)\n        lst = remove_int(lst, max)\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp84v9ed86_test.go:25:20: undefined: get_min_max

    /tmp/tmp84v9ed86_test.go:28:15: undefined: remove_int

    /tmp/tmp84v9ed86_test.go:29:15: undefined: remove_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tvar result = make([]int, len(lst))\n\tvar left, right = 0,\
    \ len(lst) - 1\n\tfor left <= right {\n\t\tresult[left] = lst[left]\n\t\tleft++\n\
    \t\tif left <= right {\n\t\t\tresult[right] = lst[left]\n\t\t\tright--\n\t\t}\n\
    \t}\n\treturn result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp9bt8fpq1_test.go:53: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp9bt8fpq1_test.go:53: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp9bt8fpq1_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp9bt8fpq1_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=7) %!s(int=6)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp9bt8fpq1_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp9bt8fpq1_test.go:53: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // your code here\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_7ovsda7_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_7ovsda7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_7ovsda7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    // find\
    \ smallest\n    ind_min := 0\n    for i := 1; i < len(lst); i++ {\n        if\
    \ lst[i] < lst[ind_min] {\n            ind_min = i\n        }\n    }\n    min\
    \ := lst[ind_min]\n    // find largest\n    ind_max := 0\n    for i := 1; i <\
    \ len(lst); i++ {\n        if lst[i] > lst[ind_max] {\n            ind_max = i\n\
    \        }\n    }\n    max := lst[ind_max]\n    // create new list\n    new_lst\
    \ := []int{min, max}\n    // create sublist\n    // remove min\n    sub_lst :=\
    \ make([]int, len(lst) - 1)\n    copy(sub_lst, lst[:ind_min])\n    copy(sub_lst[ind_min:],\
    \ lst[ind_min + 1:])\n    // remove max\n    sub_lst2 := make([]int, len(sub_lst)\
    \ - 1)\n    copy(sub_lst2, sub_lst[:ind_max])\n    copy(sub_lst2[ind_max:], sub_lst[ind_max\
    \ + 1:])\n    // recursive call\n    new_lst = append(new_lst, strange_sort_list(sub_lst2)...)\n\
    \    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4, 0x4})\n\
    \t/tmp/tmphi5d48dt_test.go:48 +0x3db\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmphi5d48dt_test.go:61 +0x77\ntesting.tRunner(0xc0001a0340, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO: implement\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpq102592p_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpq102592p_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpq102592p_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpq102592p_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpq102592p_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpq102592p_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var (\n        lstLen, lstIdx, cnt int\n        strgSortIdx\
    \         int\n        sorted              []int\n    )\n\n    lstLen = len(lst)\n\
    \    lstIdx = lstLen - 1\n    strgSortIdx = 0\n    sorted = make([]int, lstLen)\n\
    \n    if lstLen % 2 == 0 {\n        for i := lstLen; i > 0; i -= 2 {\n       \
    \     sorted[strgSortIdx] = lst[lstIdx]\n            strgSortIdx++\n         \
    \   lstIdx--\n            sorted[strgSortIdx] = lst[cnt]\n            strgSortIdx++\n\
    \            cnt++\n        }\n    } else {\n        for i := lstLen; i > 0; i\
    \ -= 2 {\n            sorted[strgSortIdx] = lst[lstIdx]\n            strgSortIdx++\n\
    \            lstIdx--\n            sorted[strgSortIdx] = lst[cnt]\n          \
    \  strgSortIdx++\n            cnt++\n        }\n        sorted[strgSortIdx] =\
    \ lst[cnt]\n    }\n\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [5] with length 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f1cf8, 0x5, 0x450329?})\n\
    \t/tmp/tmpbsxvgyw8_test.go:44 +0xe7\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpbsxvgyw8_test.go:62 +0x11c\ntesting.tRunner(0xc00019e1a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := findMin(lst)\n    index := findIndex(lst, min)\n    result\
    \ = append(result, min)\n    lst = append(lst[:index], lst[index+1:]...)\n   \
    \ for {\n        if len(lst) == 0 {\n            break\n        }\n        min\
    \ := findMin(lst)\n        index := findIndex(lst, min)\n        result = append(result,\
    \ min)\n        lst = append(lst[:index], lst[index+1:]...)\n        if len(lst)\
    \ == 0 {\n            break\n        }\n        max := findMax(lst)\n        index\
    \ = findIndex(lst, max)\n        result = append(result, max)\n        lst = append(lst[:index],\
    \ lst[index+1:]...)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9kwl92__test.go:23:12: undefined: findMin

    /tmp/tmpn9kwl92__test.go:24:14: undefined: findIndex

    /tmp/tmpn9kwl92__test.go:31:16: undefined: findMin

    /tmp/tmpn9kwl92__test.go:32:18: undefined: findIndex

    /tmp/tmpn9kwl92__test.go:38:16: undefined: findMax

    /tmp/tmpn9kwl92__test.go:39:17: undefined: findIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ min(lst)\n    lst = remove(lst, min)\n    max := max(lst)\n    lst = remove(lst,\
    \ max)\n    res := strange_sort_list(lst)\n    return append([]int{min, max},\
    \ res...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgcvu0nxy_test.go:22:12: undefined: min

    /tmp/tmpgcvu0nxy_test.go:23:11: undefined: remove

    /tmp/tmpgcvu0nxy_test.go:24:12: undefined: max

    /tmp/tmpgcvu0nxy_test.go:25:11: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    sort_list\
    \ := make([]int, len(lst))\n    left := 0\n    right := len(lst) - 1\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sort_list[i]\
    \ = min_list(lst, left, right)\n            left++\n        } else {\n       \
    \     sort_list[i] = max_list(lst, left, right)\n            right--\n       \
    \ }\n    }\n    return sort_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0ygn3ek_test.go:27:28: undefined: min_list

    /tmp/tmpn0ygn3ek_test.go:30:28: undefined: max_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return []int{}\n    }\n\n    sorted\
    \ := make([]int, len(lst))\n    copy(sorted, lst)\n    i := 0\n    j := len(sorted)\
    \ - 1\n    k := 0\n    for k < len(sorted) {\n        if k % 2 == 0 {\n      \
    \      sorted[k] = lst[i]\n            i++\n        } else {\n            sorted[k]\
    \ = lst[j]\n            j--\n        }\n        k++\n    }\n    return sorted\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp2t653x57_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmp2t653x57_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    odd :=\
    \ true\n    var result []int\n    var rem []int\n    var num int\n    for len(lst)\
    \ > 0 {\n        if odd {\n            num, rem = min(lst)\n        } else {\n\
    \            num, rem = max(lst)\n        }\n        result = append(result, num)\n\
    \        lst = rem\n        odd = !odd\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj99_z0ka_test.go:28:24: undefined: min

    /tmp/tmpj99_z0ka_test.go:30:24: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    //\
    \ sort list\n    for i := 0; i < len(lst); i++ {\n        for j := i; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    // find mid\n    mid := len(lst)\
    \ / 2\n    // get left\n    left := strange_sort_list(lst[:mid])\n    // get right\n\
    \    right := strange_sort_list(lst[mid:])\n    // merge left and right\n    start,\
    \ end := 0, len(right) - 1\n    for i := 0; i < len(lst); i++ {\n        if i\
    \ % 2 == 0 {\n            lst[i] = left[start]\n            start++\n        }\
    \ else {\n            lst[i] = right[end]\n            end--\n        }\n    }\n\
    \    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.strange_sort_list({0xc0001d6000?,\
    \ 0x0?, 0x4?})\n\t/tmp/tmpz243zdzu_test.go:18 +0x196 fp=0xc0201e0370 sp=0xc0201e0368\
    \ pc=0x4ef7f6\ncommand-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?,\
    \ 0x4})\n\t/tmp/tmpz243zdzu_test.go:33 +0x78 fp=0xc0201e03c0 sp=0xc0201e0370 pc=0x4ef6d8\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e0410 sp=0xc0201e03c0 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e0460 sp=0xc0201e0410 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e04b0 sp=0xc0201e0460 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e0500 sp=0xc0201e04b0 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e0550 sp=0xc0201e0500 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e05a0 sp=0xc0201e0550 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e05f0 sp=0xc0201e05a0 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_list({0xc0001d6000?, 0x0?, 0x4})\n\t\
    /tmp/tmpz243zdzu_test.go:35 +0xc5 fp=0xc0201e0640 sp=0xc0201e05f0 pc=0x4ef725\n\
    command-line-arguments_test.strange_sort_li"
  timestamp: 1660074578
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    lstLen := len(lst)\n    if lstLen == 0 {\n        return\
    \ lst\n    }\n    lstCopy := make([]int, lstLen)\n    copy(lstCopy, lst)\n   \
    \ sort.Ints(lstCopy)\n    oddFlag := 0\n    if lstLen%2 == 0 {\n        oddFlag\
    \ = 1\n    }\n    for i, v := range lstCopy {\n        if i%2 == 0 {\n       \
    \     lst[i/2] = v\n        } else {\n            lst[lstLen-1-i/2] = v\n    \
    \    }\n    }\n    if oddFlag == 1 {\n        lst[lstLen/2] = lstCopy[lstLen/2]\n\
    \    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8erbc9jv_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var ans []int\n    if len(lst) == 0 {\n        return lst\n\
    \    }\n    // find min and max\n    min, max := lst[0], lst[0]\n    for _, n\
    \ := range lst {\n        if n < min {\n            min = n\n        }\n     \
    \   if n > max {\n            max = n\n        }\n    }\n    ans = append(ans,\
    \ min)\n    if min == max {\n        return ans\n    }\n    head := min\n    next\
    \ := min\n    for {\n        left := false\n        for _, n := range lst {\n\
    \            if n == next {\n                continue\n            }\n       \
    \     if n > head {\n                if n < next {\n                    next =\
    \ n\n                }\n                left = true\n            }\n        }\n\
    \        if left {\n            ans = append(ans, next)\n            head = next\n\
    \            next = max\n        } else {\n            break\n        }\n    }\n\
    \    for _, n := range lst {\n        if n == head {\n            continue\n \
    \       }\n        ans = append(ans, n)\n    }\n    return ans\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpk3qwzpzk_test.go:90: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=2)\
    \ %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n    \
    \    tmpk3qwzpzk_test.go:90: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpk3qwzpzk_test.go:90: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpk3qwzpzk_test.go:90: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpk3qwzpzk_test.go:90:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpk3qwzpzk_test.go:90:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpk3qwzpzk_test.go:90: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    lstLen\
    \ := len(lst)\n    lst2 := make([]int, lstLen)\n    minMax := minMax(lst)\n  \
    \  for i := range lst {\n        if i % 2 == 0 {\n            lst2[i] = minMax[0]\n\
    \        } else {\n            lst2[i] = minMax[1]\n        }\n    }\n    return\
    \ lst2\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8pb8quu_test.go:24:15: undefined: minMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // REPLACE patch with your implementation\n    patch :=\
    \ []int{1, 2, 3, 4}\n    // PATCH end\n    return patch\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp513ufun__test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp513ufun__test.go:46: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp513ufun__test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp513ufun__test.go:46:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmp513ufun__test.go:46: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__5 (0.00s)\n        tmp513ufun__test.go:46: expected\
    \ '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp513ufun__test.go:46: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmp513ufun__test.go:46: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp513ufun__test.go:46: expected '[%!s(int=111111)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return []int{}\n    }\n    n :=\
    \ len(lst)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n\
    \        return lst\n    }\n    sorted := make([]int, n)\n    var min int\n  \
    \  for i := 0; i < n; i++ {\n        min = lst[0]\n        for j := 0; j < n;\
    \ j++ {\n            if lst[j] < min {\n                min = lst[j]\n       \
    \     }\n        }\n        sorted[i] = min\n        for j := 0; j < n; j++ {\n\
    \            if lst[j] == min {\n                lst[j] = lst[n-1]\n         \
    \       break\n            }\n        }\n        lst = lst[:n-1]\n        n--\n\
    \    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpebww78wz_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpebww78wz_test.go:72: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpebww78wz_test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpebww78wz_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpebww78wz_test.go:72:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpebww78wz_test.go:72: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpebww78wz_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return nil\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmplx6576av_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    sortedList\
    \ := make([]int, len(lst))\n    sortedList[0] = minimum(lst)\n    copy(lst, removeItem(lst,\
    \ sortedList[0]))\n    for len(lst) > 0 {\n        lstMin := minimum(lst)\n  \
    \      lstMax := maximum(lst)\n        if len(lst) % 2 == 0 {\n            sortedList[len(sortedList)\
    \ - len(lst) + 1] = lstMax\n            sortedList[len(sortedList) - len(lst)]\
    \ = lstMin\n        } else {\n            sortedList[len(sortedList) - len(lst)]\
    \ = lstMax\n            sortedList[len(sortedList) - len(lst) + 1] = lstMin\n\
    \        }\n        copy(lst, removeItem(lst, lstMax))\n        copy(lst, removeItem(lst,\
    \ lstMin))\n    }\n    return sortedList\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qpmpeoq_test.go:23:21: undefined: minimum

    /tmp/tmp4qpmpeoq_test.go:24:15: undefined: removeItem

    /tmp/tmp4qpmpeoq_test.go:26:19: undefined: minimum

    /tmp/tmp4qpmpeoq_test.go:27:19: undefined: maximum

    /tmp/tmp4qpmpeoq_test.go:35:19: undefined: removeItem

    /tmp/tmp4qpmpeoq_test.go:36:19: undefined: removeItem

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    ret := []int{}\n    if len(lst) > 0 {\n        if len(lst)\
    \ == 1 {\n            ret = append(ret, lst[0])\n        } else {\n          \
    \  min, minIdx := lst[0], 0\n            max, maxIdx := lst[0], 0\n          \
    \  for i, num := range lst {\n                if num > max {\n               \
    \     max = num\n                    maxIdx = i\n                }\n         \
    \       if num < min {\n                    min = num\n                    minIdx\
    \ = i\n                }\n            }\n            ret = append(ret, min)\n\
    \            if minIdx > maxIdx {\n                ret = append(ret, strange_sort_list(append(lst[:maxIdx],\
    \ lst[maxIdx+1:minIdx]...))...)\n            } else {\n                ret = append(ret,\
    \ strange_sort_list(append(lst[:minIdx], lst[minIdx+1:maxIdx]...))...)\n     \
    \       }\n            ret = append(ret, max)\n            if maxIdx > minIdx\
    \ {\n                ret = append(ret, strange_sort_list(append(lst[:minIdx],\
    \ lst[minIdx+1:maxIdx]...))...)\n            } else {\n                ret = append(ret,\
    \ strange_sort_list(append(lst[:maxIdx], lst[maxIdx+1:minIdx]...))...)\n     \
    \       }\n        }\n    }\n    return ret\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90, 0xc000014360?,\
    \ 0x4})\n\t/tmp/tmpd72c39rg_test.go:40 +0x81e\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90,\
    \ 0x4?, 0x4})\n\t/tmp/tmpd72c39rg_test.go:44 +0x5ab\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpd72c39rg_test.go:60 +0x93\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return nil\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmplx6576av_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmplx6576av_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmplx6576av_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sz := len(lst)\n    if sz > 0 {\n        switch {\n    \
    \    case sz == 1:\n            return lst\n        case sz == 2:\n          \
    \  if lst[0] > lst[1] {\n                lst[0], lst[1] = lst[1], lst[0]\n   \
    \         }\n            return lst\n        default:\n            sm := min(lst)\n\
    \            lg := max(lst)\n            lst = strange_sort_list(lst[:sz-2])\n\
    \            return append(lst, sm, lg)\n        }\n    }\n    return lst\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp014y0lsr_test.go:30:19: undefined: min

    /tmp/tmp014y0lsr_test.go:31:19: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) <= 1 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    for i := range lst {\n        sorted[i] = lst[i]\n\
    \    }\n    for i := 0; i < len(lst); i++ {\n        j := i\n        if i % 2\
    \ == 0 {\n            j = findMin(sorted)\n        } else {\n            j = findMax(sorted)\n\
    \        }\n        lst[i] = sorted[j]\n        sorted = append(sorted[:j], sorted[j+1:]...)\n\
    \    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2d6_lrn_test.go:29:17: undefined: findMin

    /tmp/tmpj2d6_lrn_test.go:31:17: undefined: findMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        panic(\"PATCH list\")\n    }\n\
    \    if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n   \
    \ sort := true\n    for i := 0; i < len(lst); i++ {\n        if sort {\n     \
    \       min := lst[0]\n            index := 0\n            for j := 1; j < len(lst);\
    \ j++ {\n                if lst[j] < min {\n                    min = lst[j]\n\
    \                    index = j\n                }\n            }\n           \
    \ result = append(result, min)\n            lst = append(lst[:index], lst[index+1:]...)\n\
    \        } else {\n            max := lst[0]\n            index := 0\n       \
    \     for j := 1; j < len(lst); j++ {\n                if lst[j] > max {\n   \
    \                 max = lst[j]\n                    index = j\n              \
    \  }\n            }\n            result = append(result, max)\n            lst\
    \ = append(lst[:index], lst[index+1:]...)\n        }\n        sort = !sort\n \
    \   }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmprv1mmrfp_test.go:77: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmprv1mmrfp_test.go:77: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmprv1mmrfp_test.go:77: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmprv1mmrfp_test.go:77: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmprv1mmrfp_test.go:77: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmprv1mmrfp_test.go:77:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmprv1mmrfp_test.go:77:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    ln := len(lst)\n    if ln == 0 {\n        return []int{}\n\
    \    }\n    if ln == 1 {\n        return lst\n    }\n    // Bubble sort the list,\
    \ O(n^2)\n    for i := 0; i < ln; i++ {\n        for j := 0; j < ln - 1; j++ {\n\
    \            if lst[j] > lst[j + 1] {\n                lst[j], lst[j + 1] = lst[j\
    \ + 1], lst[j]\n            }\n        }\n    }\n    for i := 0; i < ln; i++ {\n\
    \        if i % 2 == 0 {\n            lst[i], lst[ln - 1 - i / 2] = lst[ln - 1\
    \ - i / 2], lst[i]\n        } else {\n            lst[i], lst[i / 2] = lst[i /\
    \ 2], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp0ywwun0m_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp0ywwun0m_test.go:65: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp0ywwun0m_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp0ywwun0m_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=7) %!s(int=1) %!s(int=6) %!s(int=9) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp0ywwun0m_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)\
    \ %!s(int=7) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp0ywwun0m_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=0) %!s(int=5) %!s(int=2) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    // TODO:\
    \ take lst as argument and return a new list\n    new_lst := make([]int, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        new_lst[i] = lst[i]\n    }\n   \
    \ // TODO: sort new_lst with strange order\n    for i := 0; i < len(new_lst);\
    \ i++ {\n        if i % 2 == 0 {\n            // max\n            var max int\n\
    \            var max_index int\n            for j := 0; j < len(new_lst); j++\
    \ {\n                if new_lst[j] > max {\n                    max = new_lst[j]\n\
    \                    max_index = j\n                }\n            }\n       \
    \     new_lst[max_index] = new_lst[i]\n            new_lst[i] = max\n        }\
    \ else {\n            // min\n            var min int\n            var min_index\
    \ int\n            for j := 0; j < len(new_lst); j++ {\n                if new_lst[j]\
    \ < min {\n                    min = new_lst[j]\n                    min_index\
    \ = j\n                }\n            }\n            new_lst[min_index] = new_lst[i]\n\
    \            new_lst[i] = min\n        }\n    }\n    return new_lst\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmplp0hd95c_test.go:79: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmplp0hd95c_test.go:79: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=7)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmplp0hd95c_test.go:79: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmplp0hd95c_test.go:79:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmplp0hd95c_test.go:79:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmplp0hd95c_test.go:79: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=0) %!s(int=5)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmplp0hd95c_test.go:79: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    result := make([]int, len(lst))\n    i := 0\n    for ; i\
    \ < len(lst); i += 2 {\n        result[i] = min_int(lst)\n        lst = remove_int(lst,\
    \ result[i])\n    }\n    for ; i < len(result); i += 2 {\n        result[i] =\
    \ max_int(lst)\n        lst = remove_int(lst, result[i])\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkenpmo45_test.go:22:21: undefined: min_int

    /tmp/tmpkenpmo45_test.go:23:15: undefined: remove_int

    /tmp/tmpkenpmo45_test.go:26:21: undefined: max_int

    /tmp/tmpkenpmo45_test.go:27:15: undefined: remove_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return []int{}\n    }\n\n    if\
    \ len(lst) == 1 {\n        return lst\n    }\n\n    var answer []int\n    var\
    \ up bool\n    var low, high int\n    low = 0\n    high = len(lst) - 1\n\n   \
    \ for low <= high {\n        if up {\n            answer = append(answer, lst[high])\n\
    \            high--\n        } else {\n            answer = append(answer, lst[low])\n\
    \            low++\n        }\n        up = !up\n    }\n\n    return answer\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpj_yra8p6_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpj_yra8p6_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\treturn []int{1,4,2,3}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpneeu41as_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpneeu41as_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpneeu41as_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpneeu41as_test.go:43:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__5 (0.00s)\n\
    \        tmpneeu41as_test.go:43: expected '[]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpneeu41as_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpneeu41as_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpneeu41as_test.go:43: expected '[%!s(int=111111)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var res []int\n    if len(lst) == 0 {\n        return res\n\
    \    }\n    for len(lst) != 0 {\n        min := lst[0]\n        min_i := 0\n \
    \       max := lst[0]\n        max_i := 0\n        for i, v := range lst {\n \
    \           if v < min {\n                min = v\n                min_i = i\n\
    \            }\n            if v > max {\n                max = v\n          \
    \      max_i = i\n            }\n        }\n        if len(res) % 2 == 0 {\n \
    \           res = append(res, min)\n            lst = append(lst[:min_i], lst[min_i+1:]...)\n\
    \        } else {\n            res = append(res, max)\n            lst = append(lst[:max_i],\
    \ lst[max_i+1:]...)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // >>> strange_sort_list([]int{1, 2, 3, 4})\n    // []int{1,\
    \ 4, 2, 3}\n    // >>> strange_sort_list([]int{5, 5, 5, 5})\n    // []int{5, 5,\
    \ 5, 5}\n    // >>> strange_sort_list([]int{})\n    // PATCH list\n    // >>>\
    \ strange_sort_list([]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    // [0, 9, 1, 8,\
    \ 2, 7, 3, 6, 4, 5]\n    if len(lst) == 0 {\n        return lst\n    }\n    var\
    \ result []int\n    var min, max, minIndex, maxIndex int\n    min = lst[0]\n \
    \   max = lst[0]\n    minIndex = 0\n    maxIndex = 0\n    for i, el := range lst\
    \ {\n        if el < min {\n            min = el\n            minIndex = i\n \
    \       }\n        if el > max {\n            max = el\n            maxIndex =\
    \ i\n        }\n    }\n    result = append(result, min)\n    if minIndex < maxIndex\
    \ {\n        lst = append(lst[:minIndex], lst[minIndex+1:]...)\n        lst =\
    \ append(lst[:maxIndex-1], lst[maxIndex:]...)\n    } else {\n        lst = append(lst[:minIndex],\
    \ lst[minIndex+1:]...)\n        lst = append(lst[:maxIndex], lst[maxIndex+1:]...)\n\
    \    }\n    for len(lst) > 0 {\n        min = lst[0]\n        max = lst[0]\n \
    \       minIndex = 0\n        maxIndex = 0\n        for i, el := range lst {\n\
    \            if el < min {\n                min = el\n                minIndex\
    \ = i\n            }\n            if el > max {\n                max = el\n  \
    \              maxIndex = i\n            }\n        }\n        result = append(result,\
    \ max)\n        if minIndex < maxIndex {\n            lst = append\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpik11u34q_test.go:72:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    for\
    \ i := 0; i < len(lst); i = i + 2 {\n        if i + 1 < len(lst) {\n         \
    \   lst[i], lst[i + 1] = MinMax(lst[i], lst[i + 1])\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdgcw51_a_test.go:24:34: undefined: MinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tvar _slice, _range, _index []int\n\tfor i := 0; i < len(lst);\
    \ i++ {\n\t\t_slice = append(_slice, lst[i])\n\t\t_range = append(_range, i)\n\
    \t}\n\tif len(_slice) < 2 {\n\t\treturn _slice\n\t}\n\tfor i := 0; i < len(_slice);\
    \ i++ {\n\t\tvar _tmpMin int\n\t\tvar _tmpMinIndex int\n\t\tfor _, j := range\
    \ _range {\n\t\t\tif _tmpMin == 0 || _slice[j] < _tmpMin {\n\t\t\t\t_tmpMin =\
    \ _slice[j]\n\t\t\t\t_tmpMinIndex = j\n\t\t\t}\n\t\t}\n\t\t_range = append(_range[:_tmpMinIndex],\
    \ _range[_tmpMinIndex+1:]...)\n\t\t_index = append(_index, _tmpMinIndex)\n\t}\n\
    \treturn _index\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90, 0x4, 0x4?})\n\
    \t/tmp/tmp4urvqf5x_test.go:36 +0x38a\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp4urvqf5x_test.go:49 +0x93\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpdvppwy8z_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO: Implement me\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpv792_i8s_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpv792_i8s_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpv792_i8s_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpv792_i8s_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv792_i8s_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpv792_i8s_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    // find\
    \ min\n    min := lst[0]\n    min_idx := 0\n    for idx, val := range lst {\n\
    \        if val < min {\n            min = val\n            min_idx = idx\n  \
    \      }\n    }\n    lst[0], lst[min_idx] = lst[min_idx], lst[0]\n    if len(lst)\
    \ == 2 {\n        return lst\n    }\n    // find max\n    max := lst[1]\n    max_idx\
    \ := 1\n    for idx, val := range lst[1:] {\n        if val > max {\n        \
    \    max = val\n            max_idx = idx + 1\n        }\n    }\n    lst[1], lst[max_idx]\
    \ = lst[max_idx], lst[1]\n    for idx := 2; idx < len(lst); idx += 2 {\n     \
    \   if lst[idx] < lst[idx - 1] {\n            lst[idx], lst[idx - 1] = lst[idx\
    \ - 1], lst[idx]\n        }\n        if idx == len(lst) - 1 {\n            break\n\
    \        }\n        if lst[idx] > lst[idx + 1] {\n            lst[idx], lst[idx\
    \ + 1] = lst[idx + 1], lst[idx]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpu41vtgvu_test.go:80: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpu41vtgvu_test.go:80: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=7) %!s(int=8) %!s(int=6) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpu41vtgvu_test.go:80: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpu41vtgvu_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=8) %!s(int=6) %!s(int=5) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpu41vtgvu_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpu41vtgvu_test.go:80: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        lst = []int{}\n    } else if\
    \ len(lst) == 1 {\n        lst = []int{lst[0]}\n    } else {\n        var first,\
    \ last int\n        odd := false\n        if len(lst) % 2 == 0 {\n           \
    \ first = len(lst) / 2 - 1\n            last = len(lst) / 2\n        } else {\n\
    \            first = len(lst) / 2\n            last = len(lst) / 2\n         \
    \   odd = true\n        }\n        if lst[first] < lst[last] {\n            s\
    \ := lst[first]\n            lst[first] = lst[last]\n            lst[last] = s\n\
    \        }\n        lst = append(lst[:first], lst[first+1:]...)\n        if odd\
    \ {\n            lst = append(lst[:last], lst[last+1:]...)\n        }\n      \
    \  lst = strange_sort_list(lst)\n        if odd {\n            lst = append(lst[:first],\
    \ append([]int{lst[last]}, lst[first:]...)...)\n        }\n        lst = append(lst[:last],\
    \ append([]int{lst[first]}, lst[last:]...)...)\n    }\n    return lst\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x1000000564b1b?,\
    \ 0x2ba99ef8b338?})\n\t/tmp/tmp4e4egr_h_test.go:45 +0x4fc\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?,\
    \ 0x5d4270?, 0x5e3ea0?})\n\t/tmp/tmp4e4egr_h_test.go:43 +0x216\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp4e4egr_h_test.go:59 +0x77\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tif len(lst) == 0 {\n\t\treturn lst\n\t}\n\tvar sort_list []int\n\
    \tvar is_max bool = false\n\tfor i := 0; i < len(lst); i++ {\n\t\tif is_max {\n\
    \t\t\tsort_list = append(sort_list, find_max(lst))\n\t\t\tis_max = false\n\t\t\
    } else {\n\t\t\tsort_list = append(sort_list, find_min(lst))\n\t\t\tis_max = true\n\
    \t\t}\n\t}\n\treturn sort_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fwu34me_test.go:26:34: undefined: find_max

    /tmp/tmp2fwu34me_test.go:29:34: undefined: find_min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // PATCH list\n    if len(lst) < 1 {\n        return []int{}\n\
    \    }\n    // - find min and max in slice,\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, value := range lst {\n        if value < min {\n            min =\
    \ value\n        }\n        if value > max {\n            max = value\n      \
    \  }\n    }\n    // - all elements in the slice are the same, return the slice\n\
    \    if min == max {\n        return lst\n    }\n    // - create slice for the\
    \ result\n    var result []int\n    // - start with min, then go with max and\
    \ then min, ...\n    for i := 0; len(result) < len(lst); i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, min)\n        } else {\n     \
    \       result = append(result, max)\n        }\n    }\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpi5pq8nwo_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpi5pq8nwo_test.go:72: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpi5pq8nwo_test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpi5pq8nwo_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpi5pq8nwo_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpi5pq8nwo_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // #lst = sorted(lst)\n    // if len(lst) > 1:\n    // \
    \    del lst[len(lst) // 2]\n    // return lst\n    if len(lst) > 1 {\n      \
    \  // #lst = sorted(lst)\n        // del lst[len(lst) // 2]\n        // #return\
    \ lst\n        for i := 0; i < len(lst); i++ {\n            for j := len(lst)\
    \ - 1; j > i; j-- {\n                if lst[j] < lst[j - 1] {\n              \
    \      lst[j], lst[j - 1] = lst[j - 1], lst[j]\n                }\n          \
    \  }\n        }\n        if len(lst) % 2 == 0 {\n            fmt.Println(lst[len(lst)\
    \ / 2], lst[len(lst) / 2 - 1])\n            lst = append(lst[:len(lst) / 2 - 1],\
    \ lst[len(lst) / 2:]...)\n        } else {\n            fmt.Println(lst[len(lst)\
    \ / 2])\n            lst = append(lst[:len(lst) / 2], lst[len(lst) / 2 + 1:]...)\n\
    \        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "3 2\n7\n3\n7 6\n5 5\n5 4\n2 2\n--- FAIL: TestStrange_Sort_List (0.00s)\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpsu7q6c7o_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n    \
    \    tmpsu7q6c7o_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpsu7q6c7o_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpsu7q6c7o_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpsu7q6c7o_test.go:66: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpsu7q6c7o_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpsu7q6c7o_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    newLst := make([]int, len(lst))\n   \
    \ var smallest, biggest, first bool\n    for i, v := range lst {\n        if v\
    \ > v {\n            smallest = true\n        }\n        if v < v {\n        \
    \    biggest = true\n        }\n        if i == 0 {\n            first = true\n\
    \        }\n    }\n    if smallest == true && biggest == true {\n        newLst[0]\
    \ = lst[0]\n        lst = lst[1:]\n        newLst[len(newLst)-1] = lst[len(lst)-1]\n\
    \        lst = lst[:len(lst)-1]\n        var max, min int\n        for i, v :=\
    \ range lst {\n            if i == 0 {\n                min = v\n            \
    \    max = v\n            }\n            if v < min {\n                min = v\n\
    \            }\n            if v > max {\n                max = v\n          \
    \  }\n        }\n        for i, v := range newLst {\n            if v == 0 {\n\
    \                newLst[i] = min\n                for i, v := range lst {\n  \
    \                  if v == min {\n                        lst = append(lst[:i],\
    \ lst[i+1:]...)\n                        break\n                    }\n      \
    \          }\n            }\n            if v == 0 {\n                newLst[i]\
    \ = max\n                for i, v := range lst {\n                    if v ==\
    \ max {\n                        lst = append(lst[:i], lst[i+1:]...)\n       \
    \                 break\n                    }\n                }\n          \
    \  }\n        }\n    }\n    if smallest == true && biggest == false {\n      \
    \  newLst[0] = lst[0]\n        newLst[len(newLst)-1] = lst[len(lst)-1]\n     \
    \   lst = lst[1:len(lst)-1]\n        for i, v := range newLst {\n            if\
    \ v == 0 {\n                new\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvt05fd6b_test.go:84:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sort_list\
    \ := []int{lst[0]}\n    sorted_lst := append(lst[1:], lst[0])\n    for i := 0;\
    \ i < len(lst); i++ {\n        if i % 2 == 0 {\n            // minimum\n     \
    \       min := sorted_lst[0]\n            for _, e := range sorted_lst {\n   \
    \             if e < min {\n                    min = e\n                }\n \
    \           }\n            min_index := -1\n            for j, e := range sorted_lst\
    \ {\n                if e == min {\n                    min_index = j\n      \
    \              break\n                }\n            }\n            sort_list\
    \ = append(sort_list, min)\n            sorted_lst = append(sorted_lst[:min_index],\
    \ sorted_lst[min_index+1:]...)\n        } else {\n            // maximum\n   \
    \         max := sorted_lst[0]\n            for _, e := range sorted_lst {\n \
    \               if e > max {\n                    max = e\n                }\n\
    \            }\n            max_index := -1\n            for j, e := range sorted_lst\
    \ {\n                if e == max {\n                    max_index = j\n      \
    \              break\n                }\n            }\n            sort_list\
    \ = append(sort_list, max)\n            sorted_lst = append(sorted_lst[:max_index],\
    \ sorted_lst[max_index+1:]...)\n        }\n    }\n    return sort_list\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmprljmizck_test.go:85: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmprljmizck_test.go:85:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmprljmizck_test.go:85: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmprljmizck_test.go:85: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmprljmizck_test.go:85: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__6 (0.00s)\n        tmprljmizck_test.go:85: expected\
    \ '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4)\
    \ %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmprljmizck_test.go:85: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmprljmizck_test.go:85:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    if n == 0 {\n        return lst\n   \
    \ }\n    odd, even := []int{}, []int{}\n    if n % 2 == 0 {\n        odd, even\
    \ = lst[:n/2], lst[n/2:]\n    } else {\n        odd, even = lst[:n/2+1], lst[n/2:]\n\
    \    }\n    odd = odd[:len(odd)/2]\n    even = even[len(even)/2:]\n    return\
    \ append(append(even, odd...), lst[n/2]...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksw8x1bt_test.go:31:41: cannot use lst[n / 2] (variable of type int) as
    type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return nil\n    }\n    if len(lst)\
    \ == 0 {\n        return []int{}\n    }\n    if len(lst) == 1 {\n        return\
    \ lst\n    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n         \
    \   return []int{lst[1], lst[0]}\n        }\n        return lst\n    }\n    res\
    \ := make([]int, len(lst))\n    pos := 0\n    min, max := min_max(lst)\n    res[pos]\
    \ = min\n    pos++\n    res[pos] = max\n    pos++\n    lst = remove(lst, min)\n\
    \    lst = remove(lst, max)\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n\
    \        res[pos] = min\n        pos++\n        res[pos] = max\n        pos++\n\
    \        lst = remove(lst, min)\n        lst = remove(lst, max)\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgzw3nwix_test.go:36:17: undefined: min_max

    /tmp/tmpgzw3nwix_test.go:41:11: undefined: remove

    /tmp/tmpgzw3nwix_test.go:42:11: undefined: remove

    /tmp/tmpgzw3nwix_test.go:44:20: undefined: min_max

    /tmp/tmpgzw3nwix_test.go:49:15: undefined: remove

    /tmp/tmpgzw3nwix_test.go:50:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    l := len(lst)\n    if l == 0 {\n        return []int{}\n\
    \    }\n    sorted := make([]int, l)\n    odd := true\n    for i := 0; i < l;\
    \ i++ {\n        if odd {\n            sorted[i] = min(lst)\n        } else {\n\
    \            sorted[i] = max(lst)\n        }\n        odd = !odd\n    }\n    return\
    \ sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27m0g7ms_test.go:27:25: undefined: min

    /tmp/tmp27m0g7ms_test.go:29:25: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ findMin(lst)\n    max := findMax(lst)\n    lst = remove(lst, min)\n    lst =\
    \ remove(lst, max)\n    lst = append(lst, min)\n    lst = append(lst, max)\n \
    \   if len(lst) < 2 {\n        return lst\n    }\n    return strange_sort_list(lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2xu3c169_test.go:22:12: undefined: findMin

    /tmp/tmp2xu3c169_test.go:23:12: undefined: findMax

    /tmp/tmp2xu3c169_test.go:24:11: undefined: remove

    /tmp/tmp2xu3c169_test.go:25:11: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    minIndex\
    \ := 0\n    for i, v := range lst {\n        if v < lst[minIndex] {\n        \
    \    minIndex = i\n        }\n    }\n    return append([]int{lst[minIndex]}, strange_sort_list(deleteFromSlice(lst,\
    \ minIndex))...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuey08aw4_test.go:28:59: undefined: deleteFromSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Create new list with same capacity\n    result := make([]int,\
    \ 0, len(lst))\n    // Start with minimum value\n    result = append(result, getMin(lst))\n\
    \    // Loop over list until all values are added\n    for len(result) < len(lst)\
    \ {\n        // Check if remaining list is full of same integers\n        if isFullSame(lst)\
    \ {\n            // Break loop and add them to result\n            break\n   \
    \     }\n        // Find min value of remaining list and remove it\n        min\
    \ := getMin(lst)\n        lst = removeFromList(lst, min)\n        // Find max\
    \ value of remaining list and remove it\n        max := getMax(lst)\n        lst\
    \ = removeFromList(lst, max)\n        // Add values to new list\n        result\
    \ = append(result, min)\n        result = append(result, max)\n    }\n    // Add\
    \ remaining values to new list\n    for _, v := range lst {\n        result =\
    \ append(result, v)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxh_2xzu8_test.go:22:29: undefined: getMin

    /tmp/tmpxh_2xzu8_test.go:26:12: undefined: isFullSame

    /tmp/tmpxh_2xzu8_test.go:31:16: undefined: getMin

    /tmp/tmpxh_2xzu8_test.go:32:15: undefined: removeFromList

    /tmp/tmpxh_2xzu8_test.go:34:16: undefined: getMax

    /tmp/tmpxh_2xzu8_test.go:35:15: undefined: removeFromList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    minI\
    \ := 0\n    maxI := 0\n    s := []int{}\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < lst[minI] {\n            minI = i\n        }\n        if\
    \ lst[i] > lst[maxI] {\n            maxI = i\n        }\n    }\n    if minI ==\
    \ maxI {\n        return lst\n    }\n    s = append(s, lst[minI])\n    s = append(s,\
    \ lst[maxI])\n    lst = append(lst[:minI], lst[minI+1:]...)\n    lst = append(lst[:maxI-1],\
    \ lst[maxI:]...)\n    s = append(s, strange_sort_list(lst)...)\n    return s\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpp_6zv9rl_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=9)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpp_6zv9rl_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=5) %!s(int=2) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO: Implement me\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmppf7weviz_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmppf7weviz_test.go:44: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmppf7weviz_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmppf7weviz_test.go:44: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmppf7weviz_test.go:44: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmppf7weviz_test.go:44: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmppf7weviz_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmppf7weviz_test.go:44:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tll := len(lst)\n\tif ll == 0 {\n\t\treturn lst\n\t}\n\n\t\
    if ll == 1 {\n\t\treturn lst\n\t}\n\n\tres := make([]int, ll)\n\thl := ll / 2\n\
    \tfor i := 0; i < hl; i++ {\n\t\tl := ll - i - 1\n\t\tres[2*i] = lst[i]\n\t\t\
    res[2*i+1] = lst[l]\n\t}\n\n\tif ll % 2 == 1 {\n\t\tres[ll-1] = lst[hl]\n\t}\n\
    \n\treturn res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate :=\
    \ strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpayk1fkuy_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpayk1fkuy_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) <= 1 {\n        return lst\n    }\n    if len(lst)\
    \ == 2 {\n        if lst[0] > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n\
    \        }\n        return lst\n    }\n    l := len(lst)\n    k := l/2 + 1\n \
    \   if l%2 == 0 {\n        k = l/2\n    }\n    var odd []int\n    var even []int\n\
    \    for i := 0; i < l; i++ {\n        if i < k {\n            odd = append(odd,\
    \ lst[i])\n        } else {\n            even = append(even, lst[i])\n       \
    \ }\n    }\n    if l%2 == 0 {\n        odd = strange_sort_list(odd)\n        even\
    \ = strange_sort_list(even)\n    } else {\n        odd = strange_sort_list(odd)\n\
    \        even = strange_sort_list(even)\n    }\n    sorted := []int{}\n    for\
    \ i := 0; i < k; i++ {\n        sorted = append(sorted, odd[i])\n        if i\
    \ < len(even) {\n            sorted = append(sorted, even[i])\n        }\n   \
    \ }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpuq8zz3i2_test.go:80: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpuq8zz3i2_test.go:80: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=8) %!s(int=7) %!s(int=9) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpuq8zz3i2_test.go:80: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=5) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpuq8zz3i2_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=6) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpuq8zz3i2_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=7) %!s(int=2)\
    \ %!s(int=6) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpuq8zz3i2_test.go:80: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // first sort the list\n    odd := true\n    lst_len :=\
    \ len(lst)\n    // odd-length list, and the odd index start from 1\n    if lst_len\
    \ % 2 == 1 {\n        odd = false\n    }\n    for i:=1; i < lst_len; i += 2 {\n\
    \        if i == lst_len - 1 && odd {\n            break\n        }\n        lst[i],\
    \ lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7hss53cp_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7hss53cp_test.go:56: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=7) %!s(int=6) %!s(int=9) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp7hss53cp_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7hss53cp_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=7) %!s(int=6) %!s(int=9) %!s(int=8) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp7hss53cp_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=4)\
    \ %!s(int=7) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp7hss53cp_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort_list(lst)\n    return strange_sort(lst)\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_2klp9v0_test.go:19:5: undefined: sort_list

    /tmp/tmp_2klp9v0_test.go:20:12: undefined: strange_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        max :=\
    \ lst[0]\n        min := lst[0]\n        for _, num := range lst {\n         \
    \   if num > max {\n                max = num\n            }\n            if num\
    \ < min {\n                min = num\n            }\n        }\n        if i %\
    \ 2 == 0 {\n            result[i] = min\n        } else {\n            result[i]\
    \ = max\n        }\n        lst = remove(lst, min)\n        lst = remove(lst,\
    \ max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_syjc0m4_test.go:39:15: undefined: remove

    /tmp/tmp_syjc0m4_test.go:40:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx5j3x5mv_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    newLst\
    \ := make([]int, len(lst))\n    i := 0\n    j := len(lst) - 1\n    left := true\n\
    \    for {\n        if left {\n            minIdx := minIdx(lst)\n           \
    \ if i >= len(lst) {\n                break\n            }\n            newLst[i]\
    \ = lst[minIdx]\n            lst = append(lst[:minIdx], lst[minIdx+1:]...)\n \
    \           i++\n            left = false\n        } else {\n            maxIdx\
    \ := maxIdx(lst)\n            if j < 0 {\n                break\n            }\n\
    \            newLst[j] = lst[maxIdx]\n            lst = append(lst[:maxIdx], lst[maxIdx+1:]...)\n\
    \            j--\n            left = true\n        }\n    }\n    return newLst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbymmyq5g_test.go:28:23: undefined: minIdx

    /tmp/tmpbymmyq5g_test.go:37:23: undefined: maxIdx

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    var\
    \ strange_lst []int\n    for i, _ := range lst {\n        min := min_lst(lst)\n\
    \        max := max_lst(lst)\n        if i%2 == 0 {\n            strange_lst =\
    \ append(strange_lst, min)\n        } else {\n            strange_lst = append(strange_lst,\
    \ max)\n        }\n        lst = remove_lst(lst, min)\n        lst = remove_lst(lst,\
    \ max)\n    }\n    return strange_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ma3m0mx_test.go:24:16: undefined: min_lst

    /tmp/tmp3ma3m0mx_test.go:25:16: undefined: max_lst

    /tmp/tmp3ma3m0mx_test.go:31:15: undefined: remove_lst

    /tmp/tmp3ma3m0mx_test.go:32:15: undefined: remove_lst

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx5j3x5mv_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    // Bubble\
    \ sort, not efficient but it's easy\n    var swapped bool\n    for {\n       \
    \ swapped = false\n        for i := 1; i < len(lst); i++ {\n            if lst[i-1]\
    \ > lst[i] {\n                lst[i-1], lst[i] = lst[i], lst[i-1]\n          \
    \      swapped = true\n            }\n        }\n        if !swapped {\n     \
    \       break\n        }\n    }\n    // Now that it's sorted, build the new list\n\
    \    res := make([]int, len(lst))\n    // This can be done more efficiently than\
    \ this, but I don't care that much.\n    for i := 0; i < len(lst); i++ {\n   \
    \     if i % 2 == 0 {\n            res[i] = lst[i/2]\n        } else {\n     \
    \       res[i] = lst[len(lst) - i/2 - 1]\n        }\n    }\n    return res\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    newLst\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i\
    \ % 2 == 0 {\n            fmt.Println(\"max:\", lst)\n            newLst[i] =\
    \ lst[maxIndex(lst)]\n        } else {\n            fmt.Println(\"min:\", lst)\n\
    \            newLst[i] = lst[minIndex(lst)]\n        }\n        lst = remIndex(lst,\
    \ i % 2)\n    }\n    return newLst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4qg770m_test.go:26:29: undefined: maxIndex

    /tmp/tmpb4qg770m_test.go:29:29: undefined: minIndex

    /tmp/tmpb4qg770m_test.go:31:15: undefined: remIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return nil\n    }\n    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n        return lst\n\
    \    }\n    res := []int{}\n    min := min(lst)\n    res = append(res, min)\n\
    \    lst = remove_val(lst, min)\n    max := max(lst)\n    res = append(res, max)\n\
    \    lst = remove_val(lst, max)\n    for {\n        if len(lst) == 0 {\n     \
    \       break\n        }\n        min = min(lst)\n        res = append(res, min)\n\
    \        lst = remove_val(lst, min)\n        if len(lst) == 0 {\n            break\n\
    \        }\n        max = max(lst)\n        res = append(res, max)\n        lst\
    \ = remove_val(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzf5ma8b_test.go:29:12: undefined: min

    /tmp/tmpbzf5ma8b_test.go:31:11: undefined: remove_val

    /tmp/tmpbzf5ma8b_test.go:32:12: undefined: max

    /tmp/tmpbzf5ma8b_test.go:34:11: undefined: remove_val

    /tmp/tmpbzf5ma8b_test.go:41:15: undefined: remove_val

    /tmp/tmpbzf5ma8b_test.go:47:15: undefined: remove_val

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\treturn []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmph3u_m_nw_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmph3u_m_nw_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmph3u_m_nw_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmph3u_m_nw_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmph3u_m_nw_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmph3u_m_nw_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmph3u_m_nw_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmph3u_m_nw_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    sorted\
    \ := []int{lst[0]}\n    for len(lst) > 1 {\n        min, min_i := min(lst)\n \
    \       max, max_i := max(lst)\n        if min_i < max_i {\n            lst =\
    \ append(lst[:min_i], lst[min_i+1:]...)\n            lst = append(lst[:max_i-1],\
    \ lst[max_i:]...)\n        } else {\n            lst = append(lst[:max_i], lst[max_i+1:]...)\n\
    \            lst = append(lst[:min_i-1], lst[min_i:]...)\n        }\n        sorted\
    \ = append(sorted, min, max)\n    }\n    if len(lst) > 0 {\n        sorted = append(sorted,\
    \ lst[0])\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o60slsq_test.go:24:23: undefined: min

    /tmp/tmp5o60slsq_test.go:25:23: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpg7gnw1j6_test.go:44: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpg7gnw1j6_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpg7gnw1j6_test.go:44:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074581
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  odd_positions, even_positions := make([]int, 0), make([]int, 0)\n    for _,\
    \ v := range lst {\n        if v % 2 == 0 {\n            even_positions = append(even_positions,\
    \ v)\n        } else {\n            odd_positions = append(odd_positions, v)\n\
    \        }\n    }\n\n    sort(odd_positions)\n    sort(even_positions)\n\n   \
    \ final := make([]int, 0)\n    for i := 0; i < len(lst); i += 2 {\n        final\
    \ = append(final, odd_positions[i/2])\n        if i + 1 < len(lst) {\n       \
    \     final = append(final, even_positions[i/2])\n        }\n    }\n\n    return\
    \ final\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh2a7wwj_test.go:32:5: undefined: sort

    /tmp/tmpeh2a7wwj_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sort_list(lst)\n\
    \    for i := 0; i < len(lst)/2; i++ {\n        j := len(lst) - i - 1\n      \
    \  lst[i], lst[j] = lst[j], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw3tzb27c_test.go:22:5: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var l int = len(lst)\n    var r []int = make([]int, l)\n\
    \    var pos int = 0\n    var min int = 0\n    var max int = 0\n    var maxx int\
    \ = 0\n    var direction bool = true\n    var find bool = false\n    var i int\
    \ = 0\n    var new_lst []int = make([]int, l)\n    var j int = 0\n    var n int\
    \ = 0\n    var idx int = 0\n    var min_idx int = 0\n    var max_idx int = 0\n\
    \    // find min and max\n    if l == 0 {\n        return lst\n    }\n    min\
    \ = lst[0]\n    max = lst[0]\n    for i = 0; i < l; i++ {\n        if lst[i] <\
    \ min {\n            min = lst[i]\n            min_idx = i\n        }\n      \
    \  if lst[i] > max {\n            max = lst[i]\n            max_idx = i\n    \
    \    }\n    }\n    for i = 0; i < l; i++ {\n        if lst[i] == min {\n     \
    \       new_lst[i] = -1\n        } else if lst[i] == max {\n            new_lst[i]\
    \ = -1\n        } else {\n            new_lst[i] = lst[i]\n        }\n    }\n\
    \    j = 0\n    for i = 0; i < l; i++ {\n        if new_lst[i] > -1 {\n      \
    \      lst[j] = new_lst[i]\n            j++\n        }\n    }\n    l = j\n   \
    \ for i = 0; i < l; i++ {\n        if lst[i] > maxx {\n            maxx = lst[i]\n\
    \        }\n    }\n    fmt.Println(lst)\n    for i = 0; i < l; i++ {\n       \
    \ //fmt.Println(lst)\n        if direction {\n            find = false\n     \
    \       for j = 0; j < l; j++ {\n                if lst[\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz82f1p5d_test.go:79:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // BEGIN Solution\n    var sortedList []int\n    for true\
    \ {\n        if len(lst) == 0 {\n            break\n        }\n        if len(lst)\
    \ != 1 {\n            min := min(lst)\n            lst = remove(lst, min)\n  \
    \          sortedList = append(sortedList, min)\n            max := max(lst)\n\
    \            lst = remove(lst, max)\n            sortedList = append(sortedList,\
    \ max)\n        } else {\n            sortedList = append(sortedList, lst[0])\n\
    \            lst = remove(lst, lst[0])\n        }\n    }\n    return sortedList\n\
    \    // END Solution\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpidaw7zbs_test.go:26:20: undefined: min

    /tmp/tmpidaw7zbs_test.go:27:19: undefined: remove

    /tmp/tmpidaw7zbs_test.go:29:20: undefined: max

    /tmp/tmpidaw7zbs_test.go:30:19: undefined: remove

    /tmp/tmpidaw7zbs_test.go:34:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    list\
    \ := append([]int{}, lst...)\n    sort.Ints(list)\n    count := 0\n    for (count\
    \ < len(list)) {\n        if count == 0 {\n            lst[count] = list[0]\n\
    \            count++\n        } else {\n            lst[count] = list[len(list)\
    \ - 1]\n            list = list[:len(list) - 1]\n            count++\n       \
    \ }\n        if count == 0 {\n            lst[count] = list[0]\n            count++\n\
    \        } else {\n            lst[count] = list[len(list) - 1]\n            list\
    \ = list[:len(list) - 1]\n            count++\n        }\n    }\n    return lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1a7_guvs_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    res := make([]int, len(lst))\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            res[i] = min(lst)\n\
    \        } else {\n            res[i] = max(lst)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7ushy6r_test.go:28:22: undefined: min

    /tmp/tmpk7ushy6r_test.go:30:22: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tlen := len(lst)\n\tif len == 0 {\n\t\treturn lst\n\t}\n\t\
    if len % 2 == 0 {\n\t\tfor i := 0; i < len / 2; i++ {\n\t\t\tlst[i], lst[len -\
    \ i - 1] = lst[len - i - 1], lst[i]\n\t\t}\n\t} else {\n\t\tfor i := 0; i < len\
    \ / 2; i++ {\n\t\t\tlst[i], lst[len - i - 1] = lst[len - i - 1], lst[i]\n\t\t\
    }\n\t}\n\treturn lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpucg0ymxh_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpucg0ymxh_test.go:56: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpucg0ymxh_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpucg0ymxh_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpucg0ymxh_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpucg0ymxh_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    len_lst := len(lst)\n    if len_lst < 2 {\n        return\
    \ lst\n    }\n    min_max_val := min_max(lst)\n    min_int := min_max_val[0]\n\
    \    max_int := min_max_val[1]\n    min_lst := min_max_val[2]\n    max_lst :=\
    \ min_max_val[3]\n    new_lst := []int{min_int}\n    if len_lst == 2 {\n     \
    \   new_lst = append(new_lst, max_int)\n        return new_lst\n    }\n    for\
    \ i := 1; i < len_lst; i++ {\n        if i % 2 == 0 {\n            new_lst = append(new_lst,\
    \ max_lst[0])\n            max_lst = max_lst[1:]\n        } else {\n         \
    \   new_lst = append(new_lst, min_lst[0])\n            min_lst = min_lst[1:]\n\
    \        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63n7ci_7_test.go:23:20: undefined: min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Find the minimum value in the list.\n    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n    }\n    min_ind\
    \ := 0\n    var out_lst []int\n    for j := 0; j < len(lst); j++ {\n        if\
    \ lst[j] == min {\n            min_ind = j\n            break\n        }\n   \
    \ }\n    // Iterate through the list,\n    // adding minimum value and\n    //\
    \ maximum of the remaining integers.\n    out_lst = append(out_lst, min)\n   \
    \ var rem_lst []int\n    for i := min_ind+1; i < len(lst); i++ {\n        rem_lst\
    \ = append(rem_lst, lst[i])\n    }\n    if len(rem_lst) > 0 {\n        out_lst\
    \ = append(out_lst, strange_sort_list(rem_lst)...)\n    }\n    for i := 0; i <\
    \ min_ind; i++ {\n        rem_lst = append(rem_lst, lst[i])\n    }\n    if len(rem_lst)\
    \ > 0 {\n        out_lst = append(out_lst, strange_sort_list(rem_lst)...)\n  \
    \  }\n    return out_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp6p5mujqo_test.go:78: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=3)\
    \ %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmp6p5mujqo_test.go:78: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp6p5mujqo_test.go:78: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6p5mujqo_test.go:78: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp6p5mujqo_test.go:78:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sorted_lst := make([]int, len(lst))\n    n_len := len(lst)\n\
    \    var n_idx, idx int\n    for n_idx < n_len {\n        sorted_lst[n_idx] =\
    \ lst[idx]\n        if n_idx+1 < n_len {\n            sorted_lst[n_idx+1] = lst[n_len-idx-1]\n\
    \        }\n        n_idx += 2\n        idx += 1\n    }\n    return sorted_lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmphrsonjes_test.go:54: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmphrsonjes_test.go:54: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return nil\n    }\n    if len(lst)\
    \ < 2 {\n        return lst\n    }\n    sort_list(lst)\n    reverse_list(lst[1:])\n\
    \    return merge_lists(lst[:1], lst[1:])\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqaoeu2xq_test.go:25:5: undefined: sort_list

    /tmp/tmpqaoeu2xq_test.go:26:5: undefined: reverse_list

    /tmp/tmpqaoeu2xq_test.go:27:12: undefined: merge_lists

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // your code here\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_7ovsda7_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_7ovsda7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_7ovsda7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp_7ovsda7_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    idx :=\
    \ 0\n    for i := 0; i < len(lst)/2; i++ {\n        min := min(lst[idx:])\n  \
    \      max := max(lst[idx:])\n        fmt.Println(idx, min, max)\n        lst[idx]\
    \ = min\n        idx++\n        lst[idx] = max\n        idx++\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5u4dnl9d_test.go:24:16: undefined: min

    /tmp/tmp5u4dnl9d_test.go:25:16: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpg7gnw1j6_test.go:44: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpg7gnw1j6_test.go:44: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpg7gnw1j6_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpg7gnw1j6_test.go:44:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074581
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // PATCH: no slice or list, return empty list\n    if lst\
    \ == nil {\n        return []int{}\n    }\n    var new_lst []int\n    if len(lst)\
    \ < 2 {\n        return lst\n    }\n    var max, min int\n    // PATCH: only one\
    \ element, return list\n    if len(lst) == 1 {\n        return lst\n    }\n  \
    \  min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v >\
    \ max {\n            max = v\n        }\n        if v < min {\n            min\
    \ = v\n        }\n    }\n    fmt.Println(max, min)\n    new_lst = append(new_lst,\
    \ min)\n    // PATCH: max and min are equal, return list\n    if max == min {\n\
    \        return lst\n    }\n    new_lst = append(new_lst, max)\n    new_lst =\
    \ append(new_lst, strange_sort_list(strange_sort_list_test.Remove(lst, min))...)\n\
    \    new_lst = append(new_lst, strange_sort_list(strange_sort_list_test.Remove(lst,\
    \ max))...)\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz63754l9_test.go:49:49: undefined: strange_sort_list_test

    /tmp/tmpz63754l9_test.go:50:49: undefined: strange_sort_list_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    nlst := make([]int, len(lst))\n   \
    \ nlst[0] = min\n    nlst[len(lst)-1] = max\n    var forward bool = true\n   \
    \ var i int = 1\n    var j int = len(lst) - 2\n    var sub_lst []int = lst[1:len(lst)-1]\n\
    \    for {\n        if forward {\n            nlst[i] = sub_lst[0]\n         \
    \   i++\n            sub_lst = sub_lst[1:]\n            forward = false\n    \
    \    } else {\n            nlst[j] = sub_lst[len(sub_lst)-1]\n            j--\n\
    \            sub_lst = sub_lst[:len(sub_lst)-1]\n            forward = true\n\
    \        }\n        if len(sub_lst) == 0 {\n            break\n        }\n   \
    \ }\n    return nlst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001e1f8?, 0x1, 0x1})\n\
    \t/tmp/tmpp5c07vfp_test.go:39 +0x169\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpp5c07vfp_test.go:74 +0x367\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var even,\
    \ odd []int\n    for i, x := range lst {\n        if i % 2 == 0 {\n          \
    \  even = append(even, x)\n        } else {\n            odd = append(odd, x)\n\
    \        }\n    }\n    sort(even)\n    sort(odd)\n    newLst := make([]int, len(lst))\n\
    \    for i, x := range even {\n        newLst[i*2] = x\n    }\n    for i, x :=\
    \ range odd {\n        newLst[i*2+1] = x\n    }\n    return newLst\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zlxzmfu_test.go:30:5: undefined: sort

    /tmp/tmp3zlxzmfu_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    chan1 := make(chan int)\n    chan2 :=\
    \ make(chan int)\n    go send_sorted_list(lst, chan1)\n    go receive_sorted_list(chan1,\
    \ chan2)\n    return <-chan2\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsdipmjpf_test.go:27:8: undefined: send_sorted_list

    /tmp/tmpsdipmjpf_test.go:28:8: undefined: receive_sorted_list

    /tmp/tmpsdipmjpf_test.go:29:12: cannot use <-chan2 (comma, ok expression of type
    int) as type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sorted := []int{}\n    for len(lst) > 0 {\n        min,\
    \ min_ind := lst[0], 0\n        max, max_ind := lst[0], 0\n        for ind, el\
    \ := range lst {\n            if el < min {\n                min, min_ind = el,\
    \ ind\n            }\n            if el > max {\n                max, max_ind\
    \ = el, ind\n            }\n        }\n        sorted = append(sorted, min)\n\
    \        lst = append(lst[:min_ind], lst[min_ind+1:]...)\n        if len(lst)\
    \ == 0 {\n            break\n        }\n        sorted = append(sorted, max)\n\
    \        lst = append(lst[:max_ind], lst[max_ind+1:]...)\n    }\n    return sorted\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00011bc90?, 0x4?,\
    \ 0x4?})\n\t/tmp/tmpbg26v8z6_test.go:37 +0x38d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpbg26v8z6_test.go:49 +0x93\ntesting.tRunner(0xc0001031e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    n := len(lst)\n    if n < 2 {\n        return lst\n    }\n\
    \    swap := func(i, j int) {\n        lst[i], lst[j] = lst[j], lst[i]\n    }\n\
    \    var min, max int\n    var min_index, max_index int\n    for i := 0; i < n;\
    \ i++ {\n        // search min\n        min = lst[i]\n        min_index = i\n\
    \        for j := i + 1; j < n; j++ {\n            if lst[j] < min {\n       \
    \         min = lst[j]\n                min_index = j\n            }\n       \
    \ }\n        swap(i, min_index)\n        // search max\n        max = lst[i]\n\
    \        max_index = i\n        for j := i + 1; j < n; j++ {\n            if lst[j]\
    \ > max {\n                max = lst[j]\n                max_index = j\n     \
    \       }\n        }\n        if i % 2 == 0 {\n            swap(i + 1, max_index)\n\
    \        } else {\n            swap(i - 1, max_index)\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [5] with length 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list.func1(...)\n\t/tmp/tmp9ofb_k60_test.go:24\n\
    command-line-arguments_test.strange_sort_list({0xc00014e030?, 0x5d42f0?, 0x5e3ea0?})\n\
    \t/tmp/tmp9ofb_k60_test.go:49 +0x170\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9ofb_k60_test.go:65 +0xd7\ntesting.tRunner(0xc000103520, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    /*\n    // This is the initial implementation, which\n \
    \   // uses sort.Ints() and consequently is O(n*log(n))\n    // The implementation\
    \ in the next section is O(n)\n    if len(lst) < 2 {\n        return lst\n   \
    \ }\n    sort.Ints(lst)\n    i := 0\n    for {\n        if i >= len(lst) - 1 {\n\
    \            break\n        }\n        lst = append(lst[:i+1], lst[i:]...)\n \
    \       i += 2\n    }\n    return lst\n    */\n    if len(lst) < 2 {\n       \
    \ return lst\n    }\n    min := make([]int, len(lst))\n    max := make([]int,\
    \ len(lst))\n    minIdx := 0\n    maxIdx := 0\n    for _, n := range lst {\n \
    \       if n < lst[minIdx] {\n            minIdx = 0\n            min[minIdx]\
    \ = n\n        } else if n == lst[minIdx] {\n            minIdx++\n          \
    \  min[minIdx] = n\n        }\n        if n > lst[maxIdx] {\n            maxIdx\
    \ = 0\n            max[maxIdx] = n\n        } else if n == lst[maxIdx] {\n   \
    \         maxIdx++\n            max[maxIdx] = n\n        }\n    }\n    min = min[:minIdx+1]\n\
    \    max = max[:maxIdx+1]\n    result := make([]int, 0, len(lst))\n    for len(min)\
    \ > 0 || len(max) > 0 {\n        if len(min) > 0 {\n            minIdx--\n   \
    \         result = append(result, min[minIdx])\n            min = min[:minIdx+1]\n\
    \        }\n        if len(max) > 0 {\n            maxIdx--\n            result\
    \ = append(result, max[maxIdx])\n            max = max[:maxIdx+1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4, 0x5e3ea0?})\n\
    \t/tmp/tmpv7ricn2f_test.go:50 +0x375\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpv7ricn2f_test.go:85 +0x77\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO: implement function\n    lst_len := len(lst)\n \
    \   if lst_len == 0 {\n        return lst\n    }\n    res := make([]int, lst_len)\n\
    \    p := 1\n    for p < lst_len {\n        min_index := 0\n        max_index\
    \ := 0\n        for i := 0; i < lst_len; i++ {\n            if lst[i] != -1 {\n\
    \                if lst[i] < lst[min_index] {\n                    min_index =\
    \ i\n                }\n                if lst[i] > lst[max_index] {\n       \
    \             max_index = i\n                }\n            }\n        }\n   \
    \     res[p] = lst[max_index]\n        lst[max_index] = -1\n        res[p-1] =\
    \ lst[min_index]\n        lst[min_index] = -1\n        p += 2\n    }\n    if lst_len%2\
    \ == 1 {\n        res[lst_len-1] = lst[0]\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmps34o1deg_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=-1) %!s(int=3)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmps34o1deg_test.go:72:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=-1) %!s(int=8) %!s(int=-1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmps34o1deg_test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=-1) %!s(int=4)\
    \ %!s(int=-1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n   \
    \     tmps34o1deg_test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=-1)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmps34o1deg_test.go:72: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=5) %!s(int=-1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmps34o1deg_test.go:72: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=-1) %!s(int=7) %!s(int=-1) %!s(int=6) %!s(int=-1) %!s(int=5)]'\n   \
    \ --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmps34o1deg_test.go:72:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=-1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    ln := len(lst)\n    if ln == 0 {\n        return lst\n \
    \   }\n    res := make([]int, ln)\n    for i, j := 0, ln-1; i < ln; i, j = i+1,\
    \ j-1 {\n        if i % 2 == 0 {\n            res[i] = minimum(lst)\n        }\
    \ else {\n            res[i] = maximum(lst)\n        }\n        lst = remove(lst,\
    \ res[i])\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00ke__2v_test.go:26:22: undefined: minimum

    /tmp/tmp00ke__2v_test.go:28:22: undefined: maximum

    /tmp/tmp00ke__2v_test.go:30:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    lst_len := len(lst)\n    if lst_len == 0 {\n        return\
    \ lst\n    }\n    if lst_len % 2 == 0 {\n        return lst[0:lst_len/2]\n   \
    \ }\n    return lst[0:lst_len/2]\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpl0ej619k_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpl0ej619k_test.go:50: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpl0ej619k_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpl0ej619k_test.go:50: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpl0ej619k_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpl0ej619k_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpl0ej619k_test.go:50:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpl0ej619k_test.go:50:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    //\n    //\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp9zx8eeln_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp9zx8eeln_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp9zx8eeln_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp9zx8eeln_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp9zx8eeln_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp9zx8eeln_test.go:45: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    var\
    \ ordered []int\n    var sorted []int\n    var largest int\n    var smallest int\n\
    \    var next int\n    ordered = append(ordered, lst[0])\n    lst = append(lst[:0],\
    \ lst[1:]...)\n    for len(lst) > 0 {\n        largest = lst[0]\n        smallest\
    \ = lst[0]\n        for _, val := range lst {\n            if val > largest {\n\
    \                largest = val\n            }\n            if val < smallest {\n\
    \                smallest = val\n            }\n        }\n        // find largest\n\
    \        for _, val := range lst {\n            if val == largest {\n        \
    \        ordered = append(ordered, val)\n                break\n            }\n\
    \        }\n        // find smallest\n        for _, val := range lst {\n    \
    \        if val == smallest {\n                ordered = append(ordered, val)\n\
    \                break\n            }\n        }\n        // remove smallest\n\
    \        for idx, val := range lst {\n            if val == smallest {\n     \
    \           lst = append(lst[:idx], lst[idx+1:]...)\n                break\n \
    \           }\n        }\n        // remove largest\n        for idx, val := range\
    \ lst {\n            if val == largest {\n                lst = append(lst[:idx],\
    \ lst[idx+1:]...)\n                break\n            }\n        }\n    }\n  \
    \  return ordered\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsukjdbp7_test.go:23:9: sorted declared but not used

    /tmp/tmpsukjdbp7_test.go:26:9: next declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  for i := 0; i < len(lst); i += 2 {\n        min := lst[i]\n        index :=\
    \ i\n        for j := i + 1; j < len(lst); j++ {\n            if lst[j] < min\
    \ {\n                min = lst[j]\n                index = j\n            }\n\
    \        }\n        if i != index {\n            lst[i], lst[index] = lst[index],\
    \ lst[i]\n        }\n    }\n\n    for i := 1; i < len(lst); i += 2 {\n       \
    \ max := lst[i]\n        index := i\n        for j := i + 1; j < len(lst); j++\
    \ {\n            if lst[j] > max {\n                max = lst[j]\n           \
    \     index = j\n            }\n        }\n        if i != index {\n         \
    \   lst[i], lst[index] = lst[index], lst[i]\n        }\n    }\n\n    return lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_n65b2bc_test.go:75: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_n65b2bc_test.go:75: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_n65b2bc_test.go:75: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_n65b2bc_test.go:75:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=6)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_n65b2bc_test.go:75:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=3) %!s(int=7) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sorted := make([]int, len(lst))\n    if len(lst) == 0 {\n\
    \        return sorted\n    }\n    direction := -1\n    for i, _ := range sorted\
    \ {\n        // Search for minimum or maximum depending on direction\n       \
    \ var j int\n        for j = 0; j < len(lst); j++ {\n            if lst[j] ==\
    \ 0 {\n                continue\n            }\n            if j == 0 {\n    \
    \            break\n            }\n            if direction == -1 && lst[j] <\
    \ lst[j-1] {\n                break\n            }\n            if direction ==\
    \ 1 && lst[j] > lst[j-1] {\n                break\n            }\n        }\n\
    \        sorted[i] = lst[j]\n        lst[j] = 0\n        direction *= -1\n   \
    \ }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f5c90, 0x4, 0x450329?})\n\
    \t/tmp/tmp1ntcf3rp_test.go:41 +0xda\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp1ntcf3rp_test.go:55 +0x93\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return nil\n    }\n    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    lst = sort(lst)\n    for i := 0; i <\
    \ len(lst) - 1; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n  \
    \  }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4zihd3b_test.go:25:11: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    ind_min := 0\n    ind_max := len(lst) - 1\n    var tmp []int\n\
    \    tmp = append(tmp, min)\n    for ind_min < ind_max {\n        if len(lst)\
    \ % 2 == 0 {\n            tmp = append(tmp, max)\n            ind_max--\n    \
    \    } else {\n            tmp = append(tmp, min)\n            ind_min++\n   \
    \     }\n    }\n    return tmp\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpb7wkntl6_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb7wkntl6_test.go:69: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpb7wkntl6_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb7wkntl6_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb7wkntl6_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpb7wkntl6_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    var current int\n    var isMin bool\
    \ = true\n    lstLen := len(lst)\n    // init with min value\n    current = lst[0]\n\
    \    minIndex := 0\n    for i, v := range lst {\n        if v < current {\n  \
    \          current = v\n            minIndex = i\n        }\n    }\n    result\
    \ = append(result, current)\n    for {\n        // find next value\n        if\
    \ isMin {\n            current = lst[0]\n            for i, v := range lst {\n\
    \                if v < current {\n                    current = v\n         \
    \           minIndex = i\n                }\n            }\n        } else {\n\
    \            current = lst[0]\n            for i, v := range lst {\n         \
    \       if v > current {\n                    current = v\n                  \
    \  minIndex = i\n                }\n            }\n        }\n        // add to\
    \ result\n        result = append(result, current)\n        // remove value from\
    \ list\n        lst = append(lst[:minIndex], lst[minIndex+1:]...)\n        lstLen--\n\
    \        // exit on empy list\n        if lstLen == 0 {\n            break\n \
    \       }\n        // switch search type\n        isMin = !isMin\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000f4c90, 0x4, 0x4})\n\
    \t/tmp/tmpbc4z2dmo_test.go:55 +0x2b7\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpbc4z2dmo_test.go:74 +0x93\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sort_list\
    \ := []int{}\n    cur_pos := 0\n    // add first element\n    sort_list = append(sort_list,\
    \ lst[cur_pos])\n    // set max to first element\n    cur_max := lst[cur_pos]\n\
    \    lst = append(lst[:cur_pos], lst[cur_pos+1:]...)\n    // add second element\n\
    \    if lst[cur_pos] < cur_max {\n        sort_list = append(sort_list, lst[cur_pos])\n\
    \        cur_max = lst[cur_pos]\n    } else {\n        sort_list = append(sort_list,\
    \ cur_max)\n        cur_max = lst[cur_pos]\n    }\n    lst = append(lst[:cur_pos],\
    \ lst[cur_pos+1:]...)\n    // add remaining elements\n    for len(lst) > 0 {\n\
    \        if lst[cur_pos] < cur_max {\n            sort_list = append(sort_list,\
    \ lst[cur_pos])\n            lst = append(lst[:cur_pos], lst[cur_pos+1:]...)\n\
    \        } else {\n            cur_max = lst[cur_pos]\n            sort_list =\
    \ append(sort_list, cur_max)\n            lst = append(lst[:cur_pos], lst[cur_pos+1:]...)\n\
    \        }\n    }\n    return sort_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001e2a0?, 0x1, 0x1})\n\
    \t/tmp/tmpw5kqhl8o_test.go:30 +0x4be\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpw5kqhl8o_test.go:67 +0x367\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpdvppwy8z_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tvar sorted []int\n\tsorted = append(sorted, lst[0])\n\tlst\
    \ = lst[1:]\n\tfor len(lst) > 0 {\n\t\tmin := min(lst)\n\t\tmax := max(lst)\n\t\
    \tsorted = append(sorted, min)\n\t\tif min != max {\n\t\t\tsorted = append(sorted,\
    \ max)\n\t\t}\n\t\tlst = remove(lst, min)\n\t\tlst = remove(lst, max)\n\t}\n\t\
    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate :=\
    \ strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dijkath_test.go:23:10: undefined: min

    /tmp/tmp7dijkath_test.go:24:10: undefined: max

    /tmp/tmp7dijkath_test.go:29:9: undefined: remove

    /tmp/tmp7dijkath_test.go:30:9: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    res\
    \ := make([]int, len(lst))\n    m := MinMax(lst[0], lst[0])\n    for _, v := range\
    \ lst {\n        if v < m.min {\n            m.min = v\n        }\n        if\
    \ v > m.max {\n            m.max = v\n        }\n    }\n    res[0] = m.min\n \
    \   res[len(lst)-1] = m.max\n    for i := 1; i < len(lst)-1; i++ {\n        current\
    \ := MinMax(lst[0], lst[0])\n        for _, v := range lst {\n            if (v\
    \ > current.min && v < current.max) ||\n               (v < current.min && v >\
    \ current.max) {\n                current.min = v\n                current.max\
    \ = v\n            }\n        }\n        res[i] = current.min\n    }\n    return\
    \ res\n}\n\ntype MinMax \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1zh35ao_test.go:48:13: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    for i := range lst {\n        for j := i+1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    // starts from minimum value:\n\
    \    // step through list and append values alternately to sorted and unsorted\
    \ slices\n    // reverse unsorted slice\n    // concatenate:\n    // >>> a = [1,\
    \ 2, 3, 4]\n    // >>> a[0::2]\n    // [1, 3]\n    // >>> a[1::2]\n    // [2,\
    \ 4]\n    sorted, unsorted := lst[0::2], lst[1::2]\n    rv := make([]int, len(lst))\n\
    \    for i := range unsorted {\n        rv[i*2] = sorted[i]\n        rv[i*2+1]\
    \ = unsorted[len(unsorted)-i-1]\n    }\n    if len(sorted) > len(unsorted) {\n\
    \        rv[len(lst)-1] = sorted[len(sorted)-1]\n    }\n    return rv\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9ftn_6s_test.go:35:30: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    length := len(lst)\n    sort_list := make([]int, length)\n\
    \    start_index := 0\n    end_index := length - 1\n    min_index := 0\n    max_index\
    \ := 0\n    for i := 0; i < length; i++ {\n        if lst[i] < lst[min_index]\
    \ {\n            min_index = i\n        }\n        if lst[i] > lst[max_index]\
    \ {\n            max_index = i\n        }\n    }\n    for i := 0; i < length;\
    \ i++ {\n        if i % 2 == 0 {\n            sort_list[start_index] = lst[min_index]\n\
    \            if min_index == max_index {\n                min_index = (min_index\
    \ + 1) % length\n            } else {\n                min_index = (min_index\
    \ + 1) % length\n            }\n            start_index++\n        } else {\n\
    \            sort_list[end_index] = lst[max_index]\n            if min_index ==\
    \ max_index {\n                max_index = (max_index - 1 + length) % length\n\
    \            } else {\n                max_index = (max_index - 1 + length) %\
    \ length\n            }\n            end_index--\n        }\n    }\n    return\
    \ sort_list\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpir6du1vo_test.go:76: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpir6du1vo_test.go:76: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpir6du1vo_test.go:76: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpir6du1vo_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpir6du1vo_test.go:76:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpir6du1vo_test.go:76: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074584
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    r := make([]int, len(lst))\n    var f func(n int) int\n\
    \    f = func(n int) int {\n        if len(lst) < 1 {\n            return 0\n\
    \        }\n        min := lst[0]\n        min_i := 0\n        for i, v := range\
    \ lst {\n            if v < min {\n                min = v\n                min_i\
    \ = i\n            }\n        }\n        r[n] = min\n        lst = append(lst[:min_i],\
    \ lst[min_i+1:]...)\n        if n < len(r)-1 {\n            max := lst[0]\n  \
    \          max_i := 0\n            for i, v := range lst {\n                if\
    \ v > max {\n                    max = v\n                    max_i = i\n    \
    \            }\n            }\n            r[n+1] = max\n            lst = append(lst[:max_i],\
    \ lst[max_i+1:]...)\n        }\n        return f(n+2)\n    }\n    f(0)\n    return\
    \ r\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) <= 1 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    a := lst[:len(lst)/2]\n    b := lst[len(lst)/2:]\n\
    \    i := 0\n    j := 0\n    a = strange_sort_list(a)\n    b = strange_sort_list(b)\n\
    \    c := 0\n    if len(a) <= 1 {\n        sorted[c] = a[0]\n        i = 1\n \
    \       c += 1\n    }\n    if len(b) <= 1 {\n        sorted[c] = b[0]\n      \
    \  j = 1\n        c += 1\n    }\n    for ; c < len(lst); c++ {\n        if i <\
    \ len(a) && a[i] < b[j] {\n            sorted[c] = a[i]\n            i += 1\n\
    \        } else {\n            sorted[c] = b[j]\n            j += 1\n        }\n\
    \    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000150060})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000150060})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00014e040?, 0x4, 0x4})\n\
    \t/tmp/tmp3c_dp_5b_test.go:41 +0x1e6\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp3c_dp_5b_test.go:63 +0x1f7\ntesting.tRunner(0xc00011b040, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO: implement\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpq102592p_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpq102592p_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpq102592p_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpq102592p_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpq102592p_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpq102592p_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074575
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if lst == nil {\n        return nil\n    }\n    list :=\
    \ []int{}\n    for len(lst) > 0 {\n        min := min_int(lst)\n        lst =\
    \ remove_int(lst, min)\n        list = append(list, min)\n        if len(lst)\
    \ > 0 {\n            max := max_int(lst)\n            lst = remove_int(lst, max)\n\
    \            list = append(list, max)\n        }\n    }\n    return list\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6683_jab_test.go:24:16: undefined: min_int

    /tmp/tmp6683_jab_test.go:25:15: undefined: remove_int

    /tmp/tmp6683_jab_test.go:28:20: undefined: max_int

    /tmp/tmp6683_jab_test.go:29:19: undefined: remove_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  i := 0\n    for i < len(lst) {\n        min := lst[i]\n        min_index :=\
    \ i\n        for j := i; j < len(lst); j++ {\n            if lst[j] < min {\n\
    \                min = lst[j]\n                min_index = j\n            }\n\
    \        }\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n        i++\n\
    \n        if i == len(lst) {\n            break\n        }\n\n        max := lst[i]\n\
    \        max_index := i\n        for j := i; j < len(lst); j++ {\n           \
    \ if lst[j] > max {\n                max = lst[j]\n                max_index =\
    \ j\n            }\n        }\n        lst[i], lst[max_index] = lst[max_index],\
    \ lst[i]\n        i++\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 1 {\n        return lst\n    }\n    var start,\
    \ end, i int\n    var max, min int\n    m := len(lst)\n    n := len(lst) - 1\n\
    \    i = 0\n    sorted := make([]int, len(lst))\n    for ; end < n && start <\
    \ m; {\n        end = n\n        max = 0\n        min = 0\n        start = 0\n\
    \        for j := n; j >= start; j-- {\n            if lst[j] > max {\n      \
    \          max = lst[j]\n                end = j\n            }\n        }\n \
    \       for j := start; j <= end; j++ {\n            if lst[j] < min {\n     \
    \           min = lst[j]\n                start = j\n            }\n        }\n\
    \        if end < n {\n            sorted[i] = lst[end]\n            i++\n   \
    \         n--\n        }\n        if start < m {\n            sorted[i] = lst[start]\n\
    \            i++\n            m--\n        }\n    }\n    if start == m {\n   \
    \     sorted[i] = lst[start]\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpp1inhtko_test.go:83: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpp1inhtko_test.go:83: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpp1inhtko_test.go:83: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpp1inhtko_test.go:83:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpp1inhtko_test.go:83:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpp1inhtko_test.go:83: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpp1inhtko_test.go:83: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpp1inhtko_test.go:83:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var ls\
    \ []int\n    m := min(lst)\n    ls = append(ls, m)\n    if len(lst) == 2 {\n \
    \       return append(ls, lst[1])\n    }\n    lst = append(lst[:m], lst[m+1:]...)\n\
    \    if len(lst) == 1 {\n        return append(ls, lst[0])\n    }\n    m = max(lst)\n\
    \    ls = append(ls, m)\n    if len(lst) == 2 {\n        return append(ls, lst[1])\n\
    \    }\n    lst = append(lst[:m], lst[m+1:]...)\n    if len(lst) == 1 {\n    \
    \    return append(ls, lst[0])\n    }\n    return append(ls, strange_sort_list(lst)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7usws7fi_test.go:23:10: undefined: min

    /tmp/tmp7usws7fi_test.go:32:9: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        panic(\"Unexpected empty list\"\
    )\n    }\n\n    // result list\n    var result []int\n\n    // loop until list\
    \ contains no elements\n    for {\n        // get minimum and maximum values\n\
    \        min, max := find_min_max(lst)\n\n        // add min or max to result\
    \ and delete from list\n        if result_len := len(result); result_len == 0\
    \ || (result_len % 2 == 0) {\n            result = append(result, min)\n     \
    \       delete_from_list(lst, min)\n        } else {\n            result = append(result,\
    \ max)\n            delete_from_list(lst, max)\n        }\n\n        // break\
    \ when no elements left\n        if len(lst) == 0 {\n            break\n     \
    \   }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5z54b4be_test.go:29:21: undefined: find_min_max

    /tmp/tmp5z54b4be_test.go:34:13: undefined: delete_from_list

    /tmp/tmp5z54b4be_test.go:37:13: undefined: delete_from_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ min(lst)\n    max := max(lst)\n    last := min\n    lst = remove(lst, min)\n\
    \    lst = remove(lst, max)\n    rlist := []int{min, max}\n    // go until there\
    \ is nothing left in the list\n    for len(lst) > 0 {\n        // if last was\
    \ the minimum then we want to add the maximum\n        if last == min {\n    \
    \        rlist = append(rlist, max)\n            lst = remove(lst, max)\n    \
    \        last = max\n        } else {\n            rlist = append(rlist, min)\n\
    \            lst = remove(lst, min)\n            last = min\n        }\n    }\n\
    \    return rlist\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90yw8jcz_test.go:22:12: undefined: min

    /tmp/tmp90yw8jcz_test.go:23:12: undefined: max

    /tmp/tmp90yw8jcz_test.go:25:11: undefined: remove

    /tmp/tmp90yw8jcz_test.go:26:11: undefined: remove

    /tmp/tmp90yw8jcz_test.go:33:19: undefined: remove

    /tmp/tmp90yw8jcz_test.go:37:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // PATCH\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpz_1kgqzp_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpz_1kgqzp_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpz_1kgqzp_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpz_1kgqzp_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpz_1kgqzp_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpz_1kgqzp_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    copy(result, lst)\n    start := 0\n    end :=\
    \ len(lst) - 1\n    for start < end {\n        result[start] = lst[start]\n  \
    \      result[end] = lst[end]\n        start += 1\n        end -= 1\n    }\n \
    \   return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp5jwdfsha_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp5jwdfsha_test.go:56: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp5jwdfsha_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp5jwdfsha_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp5jwdfsha_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp5jwdfsha_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) % 2 == 0 {\n        for i := 0; i < len(lst)\
    \ / 2; i++ {\n            var j int\n            if i % 2 == 0 {\n           \
    \     j = 0\n            } else {\n                j = len(lst) - 1\n        \
    \    }\n            lst[j], lst[i] = lst[i], lst[j]\n        }\n    } else {\n\
    \        var j int\n        for i := 0; i < len(lst) / 2; i++ {\n            if\
    \ i % 2 == 0 {\n                j = 0\n            } else {\n                j\
    \ = len(lst) - 1\n            }\n            lst[j], lst[i] = lst[i], lst[j]\n\
    \        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpknyl4bq4_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpknyl4bq4_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpknyl4bq4_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpknyl4bq4_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=7) %!s(int=1) %!s(int=5) %!s(int=8) %!s(int=9) %!s(int=6)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpknyl4bq4_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=8) %!s(int=1) %!s(int=2) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpknyl4bq4_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sort.Ints(lst)\n    var sorted []int\n    for i, j := 0,\
    \ len(lst)-1; i < j; i, j = i+1, j-1 {\n        sorted = append(sorted, lst[i],\
    \ lst[j])\n    }\n    if len(lst) % 2 != 0 {\n        sorted = append(sorted,\
    \ lst[len(lst)/2])\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9ly6qys_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var sublst []int\n    var result []int\n    var min, max\
    \ int\n    var idx_min, idx_max int\n    var flag_min, flag_max bool\n    var\
    \ i int\n\n    if len(lst) == 0 {\n        return lst\n    }\n\n    flag_min =\
    \ true\n    flag_max = true\n    for len(lst) > 0 {\n        sublst = lst\n  \
    \      // find min\n        min = sublst[0]\n        idx_min = 0\n        for\
    \ i, v := range sublst {\n            if v < min {\n                min = v\n\
    \                idx_min = i\n            }\n        }\n        // if min is equal\
    \ to max, then it is no longer needed to find max\n        if flag_max && min\
    \ == max {\n            flag_max = false\n        }\n        // find max\n   \
    \     if flag_max {\n            max = sublst[0]\n            idx_max = 0\n  \
    \          for i, v := range sublst {\n                if v > max {\n        \
    \            max = v\n                    idx_max = i\n                }\n   \
    \         }\n        }\n        // append min\n        result = append(result,\
    \ min)\n        // append max\n        if flag_max {\n            result = append(result,\
    \ max)\n        }\n        // remove min\n        lst = append(lst[:idx_min],\
    \ lst[idx_min+1:]...)\n        // remove max\n        if flag_max {\n        \
    \    lst = append(lst[:idx_max], lst[idx_max+1:]...)\n        }\n        if len(lst)\
    \ == 1 {\n            result = append(result, lst[0])\n            lst = lst[:0]\n\
    \        }\n        // check if next iteration has to find max\n        if flag_min\
    \ && min == max {\n            flag_min = false\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4d0cop32_test.go:24:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{0}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__5\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpw9hux5sz_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpw9hux5sz_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpw9hux5sz_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    lst_len := len(lst)\n    if lst_len == 0 {\n        return\
    \ lst\n    }\n    if lst_len == 1 {\n        return lst\n    }\n    sort := func(list\
    \ []int) []int {\n        if len(list) < 2 {\n            return list\n      \
    \  }\n        left, right := 0, len(list)-1\n        pivot := list[(left+right)/2]\n\
    \        list[pivot], list[right] = list[right], list[pivot]\n        for i, _\
    \ := range list {\n            if list[i] < pivot {\n                list[left],\
    \ list[i] = list[i], list[left]\n                left++\n            }\n     \
    \   }\n        list[left], list[right] = list[right], list[left]\n        sort(list[:left])\n\
    \        sort(list[left+1:])\n        return list\n    }\n    odd := (lst_len\
    \ % 2) != 0\n    lst = sort(lst)\n    if odd {\n        lst = append(lst[lst_len/2:],\
    \ lst[:lst_len/2]...)\n    } else {\n        lst = append(lst[(lst_len/2):], lst[:(lst_len/2)]...)\n\
    \    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnqkbop6_test.go:40:9: undefined: sort

    /tmp/tmpxnqkbop6_test.go:41:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // check for len(lst) == 0, len(lst) == 1, len(lst) == 2\n\
    \    // if len(lst) == 0, return lst\n    // if len(lst) == 1, return lst\n  \
    \  // if len(lst) == 2, swap\n    // else, go recursively\n    // if len(lst)%2\
    \ == 0, half_len = len(lst)/2\n    // if len(lst)%2 == 1, half_len = len(lst)/2\
    \ + 1\n    // else, half_len = len(lst)/2\n    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    if len(lst) == 1 {\n        return lst\n    }\n    if len(lst)\
    \ == 2 {\n        if lst[0] > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n\
    \        }\n        return lst\n    }\n    var half_len int\n    if len(lst)%2\
    \ == 0 {\n        half_len = len(lst)/2\n    } else {\n        half_len = len(lst)/2\
    \ + 1\n    }\n    var lst_first = strange_sort_list(lst[:half_len])\n    var lst_second\
    \ = strange_sort_list(lst[half_len:])\n    var new_lst []int\n    for {\n    \
    \    if len(lst_first) == 0 && len(lst_second) == 0 {\n            break\n   \
    \     }\n        if len(lst_first) == 0 {\n            for _, item := range lst_second\
    \ {\n                new_lst = append(new_lst, item)\n            }\n        \
    \    lst_second = []int{}\n            continue\n        }\n        if len(lst_second)\
    \ == 0 {\n            for _, item := range lst_first {\n                new_lst\
    \ = append(new_lst, item)\n            }\n            lst_first = []int{}\n  \
    \          continue\n        }\n        if lst\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpead92woc_test.go:67:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tvar list []int\n\tsorted := 0\n\tfor sorted < len(lst) {\n\
    \t\tmin := lst[0]\n\t\tmax := lst[0]\n\t\tfor i := 0; i < len(lst); i++ {\n\t\t\
    \tif lst[i] < min {\n\t\t\t\tmin = lst[i]\n\t\t\t}\n\t\t\tif lst[i] > max {\n\t\
    \t\t\tmax = lst[i]\n\t\t\t}\n\t\t}\n\t\tlist = append(list, min)\n\t\tfor i :=\
    \ 0; i < len(lst); i++ {\n\t\t\tif lst[i] == min {\n\t\t\t\tlst = append(lst[:i],\
    \ lst[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tsorted++\n\t\tif sorted <\
    \ len(lst) {\n\t\t\tlist = append(list, max)\n\t\t\tfor i := 0; i < len(lst);\
    \ i++ {\n\t\t\t\tif lst[i] == max {\n\t\t\t\t\tlst = append(lst[:i], lst[i+1:]...)\n\
    \t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tsorted++\n\t\t}\n\t}\n\treturn list\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpf4f8__3i_test.go:75: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpf4f8__3i_test.go:75: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpf4f8__3i_test.go:75: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpf4f8__3i_test.go:75: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpf4f8__3i_test.go:75: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpf4f8__3i_test.go:75:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpf4f8__3i_test.go:75:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var t, m int\n    for i, j := 0, len(lst)-1; i < j; i, j\
    \ = i+1, j-1 {\n        if lst[i] > lst[j] {\n            t = lst[i]\n       \
    \     lst[i] = lst[j]\n            lst[j] = t\n        }\n        m = (i + j)\
    \ / 2\n        if lst[m] < lst[i] {\n            t = lst[m]\n            lst[m]\
    \ = lst[i]\n            lst[i] = t\n        }\n        if lst[j] < lst[m] {\n\
    \            t = lst[j]\n            lst[j] = lst[m]\n            lst[m] = t\n\
    \        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp5flhq1h1_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp5flhq1h1_test.go:62: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp5flhq1h1_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp5flhq1h1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp5flhq1h1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp5flhq1h1_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=2) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var vals\
    \ []int\n    var max_val, min_val int\n    if lst[0] >= lst[1] {\n        max_val\
    \ = lst[0]\n        min_val = lst[1]\n    } else {\n        max_val = lst[1]\n\
    \        min_val = lst[0]\n    }\n    vals = append(vals, min_val)\n    vals =\
    \ append(vals, max_val)\n    for _, e := range lst[2:] {\n        if e > max_val\
    \ {\n            max_val = e\n        } else if e < min_val {\n            min_val\
    \ = e\n        }\n    }\n    var new_list []int\n    for _, e := range lst {\n\
    \        if e != max_val && e != min_val {\n            new_list = append(new_list,\
    \ e)\n        }\n    }\n    new_list = strange_sort_list(new_list)\n    for i\
    \ := 0; i < len(new_list); i++ {\n        if i % 2 == 0 {\n            vals =\
    \ append(vals, min_val)\n        } else {\n            vals = append(vals, max_val)\n\
    \        }\n        vals = append(vals, new_list[i])\n    }\n    if len(new_list)\
    \ % 2 == 0 {\n        vals = append(vals, min_val)\n    } else {\n        vals\
    \ = append(vals, max_val)\n    }\n    return vals\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001e278?, 0x0?,\
    \ 0x2b49496c1108?})\n\t/tmp/tmprup9red__test.go:24 +0x450\ncommand-line-arguments_test.strange_sort_list({0xc00001a340?,\
    \ 0x3, 0x4})\n\t/tmp/tmprup9red__test.go:46 +0x23b\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmprup9red__test.go:46 +0x23b\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmprup9red__test.go:71 +0xd7\ntesting.tRunner(0xc00019e000, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) % 2 == 0 {\n        i := 0\n        j := len(lst)\
    \ - 1\n        for i < j {\n            temp := lst[i]\n            lst[i] = lst[j]\n\
    \            lst[j] = temp\n            i += 1\n            j -= 1\n        }\n\
    \    } else {\n        i := 0\n        j := len(lst) - 1\n        for i < j {\n\
    \            temp := lst[i]\n            lst[i] = lst[j]\n            lst[j] =\
    \ temp\n            i += 1\n            j -= 1\n        }\n    }\n    return lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpuj7ok0ak_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpuj7ok0ak_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpuj7ok0ak_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpuj7ok0ak_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpuj7ok0ak_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpuj7ok0ak_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    i :=\
    \ 0\n    max := lst[0]\n    min := lst[0]\n    for j := 1; j < len(lst); j++ {\n\
    \        if lst[j] > max {\n            max = lst[j]\n        }\n        if lst[j]\
    \ < min {\n            min = lst[j]\n        }\n    }\n    newList := []int{}\n\
    \    for i < len(lst) {\n        if (i % 2) == 0 {\n            newList = append(newList,\
    \ min)\n            for k := 0; k < len(lst); k++ {\n                if lst[k]\
    \ == min {\n                    lst = append(lst[:k], lst[k+1:]...)\n        \
    \            break\n                }\n            }\n        } else {\n     \
    \       newList = append(newList, max)\n            for k := 0; k < len(lst);\
    \ k++ {\n                if lst[k] == max {\n                    lst = append(lst[:k],\
    \ lst[k+1:]...)\n                    break\n                }\n            }\n\
    \        }\n        i++\n    }\n    return newList\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpg_munq9h_test.go:78: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpg_munq9h_test.go:78: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpg_munq9h_test.go:78: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpg_munq9h_test.go:78: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpg_munq9h_test.go:78:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpg_munq9h_test.go:78:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpg_munq9h_test.go:78: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    lst2\
    \ := lst\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n     \
    \       lst2[i] = findMin(lst)\n        } else {\n            lst2[i] = findMax(lst)\n\
    \        }\n    }\n    return lst2\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk0894f1k_test.go:25:23: undefined: findMin

    /tmp/tmpk0894f1k_test.go:27:23: undefined: findMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    // Finding the maximum number\n    var\
    \ max int\n    for i := range lst {\n        if lst[i] > max {\n            max\
    \ = lst[i]\n        }\n    }\n    // Finding the maximum number\n    var min int\n\
    \    for i := range lst {\n        if lst[i] < min {\n            min = lst[i]\n\
    \        }\n    }\n    // Making a new list\n    var result []int\n    append(result,\
    \ min)\n    if len(lst) == 1 {\n        return result\n    } else {\n        append(result,\
    \ max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_uqj10rk_test.go:41:5: append(result, min) (value of type []int) is not
    used

    /tmp/tmp_uqj10rk_test.go:45:9: append(result, max) (value of type []int) is not
    used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    var tmp []int\n    idx := 0\n    count\
    \ := len(lst)\n    if count == 0 {\n        return nil\n    }\n    if count ==\
    \ 1 {\n        return lst\n    }\n    for count > 0 {\n        var min, max int\n\
    \        var minIdx, maxIdx int\n        min = lst[0]\n        max = lst[0]\n\
    \        minIdx = 0\n        maxIdx = 0\n        for i, v := range lst {\n   \
    \         if v > max {\n                max = v\n                maxIdx = i\n\
    \            }\n            if v < min {\n                min = v\n          \
    \      minIdx = i\n            }\n        }\n        if idx % 2 == 0 {\n     \
    \       tmp = append(tmp, max)\n            lst = append(lst[:maxIdx], lst[maxIdx+1:]...)\n\
    \        } else {\n            tmp = append(tmp, min)\n            lst = append(lst[:minIdx],\
    \ lst[minIdx+1:]...)\n        }\n        idx++\n        count--\n    }\n    fmt.Println(tmp)\n\
    \    return tmp\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmij7eh2k_test.go:19:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var res = make([]int, len(lst))\n    var length = len(lst)\n\
    \    var i, offset int\n\n    for length > 0 {\n        var min, max int\n   \
    \     min, max = lst[0], lst[0]\n        for _, value := range lst {\n       \
    \     if value < min {\n                min = value\n            } else if value\
    \ > max {\n                max = value\n            }\n        }\n        res[i]\
    \ = min\n        res[length - 1 + offset] = max\n        lst = lst[1 : length\
    \ - 1]\n        length -= 2\n        i++\n        offset++\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00011bcf8, 0x5, 0x5})\n\
    \t/tmp/tmp_4vmxm96_test.go:35 +0xe7\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp_4vmxm96_test.go:51 +0x11c\ntesting.tRunner(0xc0001031e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // Your code here\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpv7fwq03z_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpv7fwq03z_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpv7fwq03z_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpv7fwq03z_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv7fwq03z_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpv7fwq03z_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var n_lst\
    \ []int\n    n_lst = append(n_lst, lst[0])\n    lst = lst[1:]\n    for {\n   \
    \     var m_val int\n        if len(lst) == 0 {\n            break\n        }\n\
    \        m_val = max(lst)\n        n_lst = append(n_lst, m_val)\n        lst =\
    \ del_elem(lst, m_val)\n        if len(lst) == 0 {\n            break\n      \
    \  }\n        m_val = min(lst)\n        n_lst = append(n_lst, m_val)\n       \
    \ lst = del_elem(lst, m_val)\n    }\n    return n_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkys1da9_test.go:30:17: undefined: max

    /tmp/tmpzkys1da9_test.go:32:15: undefined: del_elem

    /tmp/tmpzkys1da9_test.go:36:17: undefined: min

    /tmp/tmpzkys1da9_test.go:38:15: undefined: del_elem

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // your code\n    l := len(lst)\n    if l == 0 {\n     \
    \   return lst\n    }\n    slst := SliceInt(lst)\n    slst.Sort()\n    rlst :=\
    \ make([]int, l)\n    rlst[0] = slst[0]\n    if l > 1 {\n        if l % 2 == 0\
    \ {\n            rlst[1] = slst[l-1]\n        } else {\n            rlst[1] =\
    \ slst[1]\n        }\n    }\n    //fmt.Println(rlst)\n    f := 2\n    for i, j\
    \ := 2, l-2; i < l; i, j = i+1, j-1 {\n        if f % 2 == 0 {\n            rlst[i]\
    \ = slst[j]\n        } else {\n            rlst[i] = slst[i]\n        }\n    \
    \    f++\n    }\n    return rlst\n}\n\ntype SliceInt []int\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz0hdpovy_test.go:25:10: slst.Sort undefined (type SliceInt has no field
    or method Sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // write your code in Go 1.4\n    return lst\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmprj82yhbn_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmprj82yhbn_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmprj82yhbn_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmprj82yhbn_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmprj82yhbn_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmprj82yhbn_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    res := []int{}\n    for len(lst) > 0 {\n        minimum\
    \ := lst[0]\n        maximum := lst[0]\n        for _, i := range lst {\n    \
    \        if i < minimum {\n                minimum = i\n            }\n      \
    \      if i > maximum {\n                maximum = i\n            }\n        }\n\
    \        res = append(res, minimum)\n        res = append(res, maximum)\n    \
    \    lst = RemoveFirst(lst, minimum)\n        lst = RemoveFirst(lst, maximum)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcypquyu_test.go:33:15: undefined: RemoveFirst

    /tmp/tmpzcypquyu_test.go:34:15: undefined: RemoveFirst

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tswitch len(lst) {\n\tcase 0:\n\t\treturn lst\n\tcase 1:\n\t\
    \treturn lst\n\tdefault:\n\t\tnewLst := []int{}\n\t\tfor i := 0; i < len(lst)\
    \ / 2; i++ {\n\t\t\tnewLst = append(newLst, lst[i])\n\t\t\tnewLst = append(newLst,\
    \ lst[len(lst) - 1 - i])\n\t\t}\n\t\tif len(lst) % 2 != 0 {\n\t\t\tnewLst = append(newLst,\
    \ lst[len(lst) / 2])\n\t\t}\n\t\treturn newLst\n\t}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp13ialkxj_test.go:58: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmp13ialkxj_test.go:58: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    new_lst\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i\
    \ % 2 == 0 {\n            val, _ := min_max(lst, i)\n            new_lst[i] =\
    \ val\n        } else {\n            val, _ := max_min(lst, i)\n            new_lst[i]\
    \ = val\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgd9ptnp2_test.go:25:23: undefined: min_max

    /tmp/tmpgd9ptnp2_test.go:28:23: undefined: max_min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tif lst == nil {\n\t\tpanic(\"PATCH list\")\n\t}\n\tif len(lst)\
    \ == 0 {\n\t\treturn lst\n\t}\n\tres := make([]int, len(lst))\n\tcopy(res, lst)\n\
    \tsort(res)\n\treturn res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw75ikgo_test.go:27:2: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpvjrone7h_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpvjrone7h_test.go:47: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpvjrone7h_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpvjrone7h_test.go:47: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpvjrone7h_test.go:47: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpvjrone7h_test.go:47: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpvjrone7h_test.go:47: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvjrone7h_test.go:47:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx5j3x5mv_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx5j3x5mv_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpx5j3x5mv_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ make([]int, len(lst))\n    max_i := len(lst) - 1\n    min_i := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            res[i] = lst[min_i]\n\
    \            min_i++\n        } else {\n            res[i] = lst[max_i]\n    \
    \        max_i--\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpldey1l89_test.go:58: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpldey1l89_test.go:58: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    sorted := make([]int, len(lst))\n    if len(lst) < 2 {\n\
    \        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0] < lst[1]\
    \ {\n            return []int{lst[0], lst[1]}\n        } else {\n            return\
    \ []int{lst[1], lst[0]}\n        }\n    }\n    max_num := lst[0]\n    max_num_idx\
    \ := 0\n    for idx, num := range lst {\n        if num > max_num {\n        \
    \    max_num = num\n            max_num_idx = idx\n        }\n    }\n    for i\
    \ := 0; i < len(lst); i += 2 {\n        // odd\n        if i > 0 {\n         \
    \   sorted[i] = lst[i-1]\n        }\n        // even\n        if i+1 < len(lst)\
    \ {\n            sorted[i+1] = lst[i]\n        }\n    }\n    return sorted\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq6ggozio_test.go:31:5: max_num_idx declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var (\n\
    \        min       int\n        max       int\n        res       []int\n     \
    \   minIndex  int\n        maxIndex  int\n        mins      []int\n        maxs\
    \      []int\n    )\n    for i, v := range lst {\n        if v < min {\n     \
    \       min = v\n            minIndex = i\n        }\n        if v > max {\n \
    \           max = v\n            maxIndex = i\n        }\n    }\n    lst = append(lst[:minIndex],\
    \ lst[minIndex+1:]...)\n    lst = append(lst[:maxIndex], lst[maxIndex+1:]...)\n\
    \    if len(lst) > 1 {\n        min, minIndex = minMaxIndex(lst)\n        max,\
    \ maxIndex = maxMinIndex(lst)\n        lst = append(lst[:minIndex], lst[minIndex+1:]...)\n\
    \        lst = append(lst[:maxIndex], lst[maxIndex+1:]...)\n        maxs = strange_sort_list(lst)\n\
    \        maxs = append(maxs, max)\n        lst = append(lst[:minIndex], lst[minIndex+1:]...)\n\
    \        lst = append(lst[:maxIndex], lst[maxIndex+1:]...)\n        mins = strange_sort_list(lst)\n\
    \        mins = append(mins, min)\n        res = append(maxs, mins...)\n    }\
    \ else {\n        return append(lst, max, min)\n    }\n    return res\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp69m29xlh_test.go:44:25: undefined: minMaxIndex

    /tmp/tmp69m29xlh_test.go:45:25: undefined: maxMinIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 1 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    m := lst[0]\n    for _, v := range lst {\n   \
    \     if v < m {\n            m = v\n        }\n    }\n    result[0] = m\n   \
    \ for i := 1; i < len(lst); i++ {\n        j := i\n        for j < len(lst) &&\
    \ lst[j] < result[i-1] {\n            j++\n        }\n        if j < len(lst)\
    \ {\n            result[i] = lst[j]\n            lst = append(lst[:j], lst[j+1:]...)\n\
    \        } else {\n            j = i\n            for j < len(lst) && lst[j] >\
    \ result[i-1] {\n                j++\n            }\n            if j < len(lst)\
    \ {\n                result[i] = lst[j]\n                lst = append(lst[:j],\
    \ lst[j+1:]...)\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_eyap8ck_test.go:73: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_eyap8ck_test.go:73: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=8) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_eyap8ck_test.go:73: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_eyap8ck_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=6) %!s(int=8) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp_eyap8ck_test.go:73:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmp_eyap8ck_test.go:73: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp_eyap8ck_test.go:73: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tvar newLst []int\n\tfor i := 0; i < len(lst); i++ {\n\t\t\
    if i % 2 == 0 {\n\t\t\tvar min = lst[0]\n\t\t\tvar minIndex = 0\n\t\t\tfor j :=\
    \ 0; j < len(lst); j++ {\n\t\t\t\tif lst[j] < min {\n\t\t\t\t\tmin = lst[j]\n\t\
    \t\t\t\tminIndex = j\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewLst = append(newLst, min)\n\
    \t\t\tlst = append(lst[:minIndex], lst[minIndex+1:]...)\n\t\t} else {\n\t\t\t\
    var max = lst[0]\n\t\t\tvar maxIndex = 0\n\t\t\tfor j := 0; j < len(lst); j++\
    \ {\n\t\t\t\tif lst[j] > max {\n\t\t\t\t\tmax = lst[j]\n\t\t\t\t\tmaxIndex = j\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tnewLst = append(newLst, max)\n\t\t\tlst = append(lst[:maxIndex],\
    \ lst[maxIndex+1:]...)\n\t\t}\n\t}\n\treturn newLst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpe1jg8238_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpe1jg8238_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpe1jg8238_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpe1jg8238_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpe1jg8238_test.go:69: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpe1jg8238_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpe1jg8238_test.go:69:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    min := min(lst)\n    max := max(lst)\n    idx\
    \ := 0\n    odd := true\n    for idx < len(lst) {\n        switch odd {\n    \
    \    case true:\n            sorted[idx] = min\n            odd = false\n    \
    \    case false:\n            sorted[idx] = max\n            odd = true\n    \
    \    }\n        idx++\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxz7gfijr_test.go:23:12: undefined: min

    /tmp/tmpxz7gfijr_test.go:24:12: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  // if list length is an odd number, put the biggest number in the middle\n\
    \    if len(lst) % 2 != 0 {\n        for i := range lst {\n            if lst[i]\
    \ == find_max(lst) {\n                lst[i] = lst[len(lst)/2]\n             \
    \   lst[len(lst)/2] = find_max(lst)\n            }\n        }\n    }\n\n    var\
    \ result []int\n    left_index := 0\n    right_index := len(lst) - 1\n    for\
    \ i := range lst {\n        if i % 2 == 0 {\n            result = append(result,\
    \ find_min(lst[left_index:right_index+1]))\n            left_index++\n       \
    \ } else {\n            result = append(result, find_max(lst[left_index:right_index+1]))\n\
    \            right_index--\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4kh62ge_test.go:26:26: undefined: find_max

    /tmp/tmpd4kh62ge_test.go:28:35: undefined: find_max

    /tmp/tmpd4kh62ge_test.go:38:37: undefined: find_min

    /tmp/tmpd4kh62ge_test.go:41:37: undefined: find_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n\n  \
    \  var res []int\n    for {\n        if len(lst) == 0 {\n            break\n \
    \       }\n        maxVal := lst[0]\n        maxValPos := 0\n        minVal :=\
    \ lst[0]\n        minValPos := 0\n        for pos, val := range lst {\n      \
    \      if val > maxVal {\n                maxVal = val\n                maxValPos\
    \ = pos\n            }\n            if val < minVal {\n                minVal\
    \ = val\n                minValPos = pos\n            }\n        }\n        res\
    \ = append(res, minVal)\n        lst = append(lst[:minValPos], lst[minValPos+1:]...)\n\
    \        if len(lst) == 0 {\n            break\n        }\n        res = append(res,\
    \ maxVal)\n        lst = append(lst[:maxValPos], lst[maxValPos+1:]...)\n    }\n\
    \    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc00014e000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000109c90?, 0x4?,\
    \ 0x4?})\n\t/tmp/tmptp2p7kq3_test.go:48 +0x398\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmptp2p7kq3_test.go:60 +0x93\ntesting.tRunner(0xc00011aea0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpdvppwy8z_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpdvppwy8z_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpdvppwy8z_test.go:43:\
    \ expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074573
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\t// int_list -> part_list -> part_list \n\t// \t\t\t\t|\t\t\
    \t  |\n\t// \t\t\t\t|\t\t\t  |\n\t// \t\t\t\t\\\t\t\t  /\n\t// \t\t\t\t  part_list\n\
    \tif len(lst) <= 1 {\n\t\treturn lst\n\t}\n\tif len(lst) == 2 {\n\t\tif lst[0]\
    \ > lst[1] {\n\t\t\treturn []int{lst[1], lst[0]}\n\t\t}\n\t\treturn lst\n\t}\n\
    \tleft := strange_sort_list(lst[:len(lst)/2])\n\tright := strange_sort_list(lst[len(lst)/2:])\n\
    \treturn merge(left, right)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp42e97noq_test.go:35:9: undefined: merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    odd_lst\
    \ := []int{}\n    even_lst := []int{}\n    findMin := func(lst []int) int {\n\
    \        if len(lst) == 0 {\n            return 0\n        }\n        min := lst[0]\n\
    \        for _, i := range lst {\n            if i < min {\n                min\
    \ = i\n            }\n        }\n        return min\n    }\n    findMax := func(lst\
    \ []int) int {\n        if len(lst) == 0 {\n            return 0\n        }\n\
    \        max := lst[0]\n        for _, i := range lst {\n            if i > max\
    \ {\n                max = i\n            }\n        }\n        return max\n \
    \   }\n    removeEl := func(lst []int, el int) []int {\n        lst_len := len(lst)\n\
    \        for i := 0; i < lst_len; i++ {\n            if lst[i] == el {\n     \
    \           lst = append(lst[:i], lst[i+1:]...)\n                break\n     \
    \       }\n        }\n        return lst\n    }\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            min := findMin(lst)\n          \
    \  odd_lst = append(odd_lst, min)\n            lst = removeEl(lst, min)\n    \
    \    } else {\n            max := findMax(lst)\n            even_lst = append(even_lst,\
    \ max)\n            lst = removeEl(lst, max)\n        }\n    }\n    return append(odd_lst,\
    \ even_lst...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate :=\
    \ strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpe58e7s8z_test.go:93: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpe58e7s8z_test.go:93: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=9)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpe58e7s8z_test.go:93: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpe58e7s8z_test.go:93: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=9)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpe58e7s8z_test.go:93: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpe58e7s8z_test.go:93:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=8) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpe58e7s8z_test.go:93:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{1, 4, 2, 3}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpg9jxndje_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpg9jxndje_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpg9jxndje_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpg9jxndje_test.go:43:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__5 (0.00s)\n\
    \        tmpg9jxndje_test.go:43: expected '[]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=111111)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // PATCH: check input list\n    if len(lst) == 0 {\n   \
    \     return lst\n    }\n    // PATCH: init auxiliary list\n    lst1 := make([]int,\
    \ len(lst))\n    // PATCH: run loop\n    var start int\n    var stop int\n   \
    \ for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            start\
    \ = 0\n            stop = len(lst) - 1\n        } else {\n            start =\
    \ len(lst) - 1\n            stop = 0\n        }\n        var k int\n        if\
    \ start < stop {\n            k = start\n        } else {\n            k = stop\n\
    \        }\n        lst1[k] = lst[i]\n        if start < stop {\n            start++\n\
    \        } else {\n            stop--\n        }\n    }\n    return lst1\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpa6f4vk7k_test.go:73: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpa6f4vk7k_test.go:73: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpa6f4vk7k_test.go:73: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpa6f4vk7k_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpa6f4vk7k_test.go:73:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpa6f4vk7k_test.go:73: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpa6f4vk7k_test.go:73: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{1, 4, 2, 3}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpg9jxndje_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpg9jxndje_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpg9jxndje_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpg9jxndje_test.go:43:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__5 (0.00s)\n\
    \        tmpg9jxndje_test.go:43: expected '[]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=111111)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    ln := len(lst)\n    if ln == 0 {\n        return []int{}\n\
    \    }\n    b, e := 0, ln - 1\n    var res []int\n    for b <= e {\n        res\
    \ = append(res, lst[b])\n        if b != e {\n            res = append(res, lst[e])\n\
    \        }\n        b++\n        e--\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpibt3r041_test.go:57: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpibt3r041_test.go:57: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        panic(\"PATCH list\")\n    }\n\
    \    var new_lst []int\n    var max int\n    var min int\n    for i := range lst\
    \ {\n        if i == 0 {\n            max = lst[i]\n            min = lst[i]\n\
    \        } else {\n            if lst[i] > max {\n                max = lst[i]\n\
    \            }\n            if lst[i] < min {\n                min = lst[i]\n\
    \            }\n        }\n    }\n    new_lst = append(new_lst, min)\n    if len(lst)\
    \ > 1 {\n        index := 0\n        for len(new_lst) < len(lst) {\n         \
    \   if lst[index] != max && lst[index] != min {\n                new_lst = append(new_lst,\
    \ lst[index])\n            }\n            index++\n        }\n        new_lst\
    \ = append(new_lst, max)\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000fdc90, 0x4, 0x450329?})\n\
    \t/tmp/tmpndnwe_vo_test.go:42 +0x1b0\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpndnwe_vo_test.go:59 +0x93\ntesting.tRunner(0xc00019a680, 0x5290f0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n\tif len(lst) == 0 {\n\t\treturn lst\n\t}\n\tmin_idx := 0\n\t\
    var tmp int\n\tfor {\n\t\tif lst[min_idx] == min(lst) {\n\t\t\ttmp = lst[0]\n\t\
    \t\tlst[0] = lst[min_idx]\n\t\t\tlst[min_idx] = tmp\n\t\t\tbreak\n\t\t}\n\t\t\
    min_idx++\n\t}\n\tif len(lst) == 1 {\n\t\treturn lst\n\t}\n\tvar list []int\n\t\
    for i := 1; i < len(lst)-1; i += 2 {\n\t\tlist = append(list, lst[i])\n\t}\n\t\
    for i := 2; i < len(lst); i += 2 {\n\t\tlist = append(list, lst[i])\n\t}\n\treturn\
    \ list\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprgpu1pti_test.go:25:22: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // TODO implement me\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpzpr4aqfz_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpzpr4aqfz_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpzpr4aqfz_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpzpr4aqfz_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpzpr4aqfz_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpzpr4aqfz_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    return []int{1, 4, 2, 3}\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpg9jxndje_test.go:43: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpg9jxndje_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=4) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpg9jxndje_test.go:43: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpg9jxndje_test.go:43:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__5 (0.00s)\n\
    \        tmpg9jxndje_test.go:43: expected '[]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpg9jxndje_test.go:43: expected '[%!s(int=111111)]', got '[%!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    min, max\
    \ := minmax(lst)\n    res := []int{}\n    for i, j := min, max; len(res) < len(lst);\
    \ {\n        res = append(res, i)\n        if len(res) < len(lst) {\n        \
    \    res = append(res, j)\n        }\n        i, j = nextMinMax(lst, i, j)\n \
    \   }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimedvwu__test.go:22:17: undefined: minmax

    /tmp/tmpimedvwu__test.go:29:16: undefined: nextMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    var result []int\n    // Add you code here\n    sortList(lst)\n\
    \    for len(lst) > 0 {\n        result = append(result, popFirst(&lst), popLast(&lst))\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4oja7yb0_test.go:21:5: undefined: sortList

    /tmp/tmp4oja7yb0_test.go:23:33: undefined: popFirst

    /tmp/tmp4oja7yb0_test.go:23:49: undefined: popLast

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
