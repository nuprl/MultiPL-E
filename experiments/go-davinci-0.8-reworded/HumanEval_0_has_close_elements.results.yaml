language: go_test.go
name: HumanEval_0_has_close_elements
results:
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num := range numbers {\n        for j, other_num\
    \ := range numbers {\n            if i != j && abs(num - other_num) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszkb3wzt_test.go:17:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for _, n := range numbers {\n        for _, p := range\
    \ numbers {\n            if n == p {\n                continue\n            }\n\
    \            if float64(int(n * 100) - int(p * 100)) < threshold * 100 {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpa0kp_o_z_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpa0kp_o_z_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpa0kp_o_z_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp04tee7v6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp04tee7v6_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp04tee7v6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp04tee7v6_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var prev float64 = 0\n    var dist float64 = 0\n    var\
    \ dist_prev float64 = 0\n    for i, elem := range numbers {\n        if i > 0\
    \ {\n            dist = elem - prev\n            if dist < threshold {\n     \
    \           return true\n            } else if i > 1 {\n                dist_prev\
    \ = elem - numbers[i-2]\n                if dist < dist_prev {\n             \
    \       return true\n                }\n            }\n        }\n        prev\
    \ = elem\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpcbqdcaqp_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpcbqdcaqp_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpcbqdcaqp_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // Compute distances between each pair of numbers\n   \
    \ distances := make([]float64, 0)\n    for i := 0; i < len(numbers); i++ {\n \
    \       for j := i + 1; j < len(numbers); j++ {\n            distance := numbers[i]\
    \ - numbers[j]\n            if distance < 0 {\n                distance = -distance\n\
    \            }\n            distances = append(distances, distance)\n        }\n\
    \    }\n\n    // Check if any of distances is smaller than threshold\n    for\
    \ _, distance := range distances {\n        if distance < threshold {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074471
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, n := range numbers {\n        for _, m := range\
    \ numbers[i+1:] {\n            diff := n - m\n            if diff < 0 {\n    \
    \            diff = -diff\n            }\n            if diff < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if diff := numbers[i] - numbers[j];\
    \ diff > 0 {\n                if diff < threshold {\n                    return\
    \ true\n                }\n            } else {\n                if -diff < threshold\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074471
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            diff := numbers[i] - numbers[j]\n\
    \            if diff < 0 {\n                diff = -diff\n            }\n    \
    \        if diff < threshold {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var l int = len(numbers)\n    for i := 0; i < l; i++ {\n\
    \        for j := i+1; j < l; j++ {\n            if numbers[i] > numbers[j] {\n\
    \                if numbers[i] - numbers[j] < threshold {\n                  \
    \  return true\n                }\n            } else {\n                if numbers[j]\
    \ - numbers[i] < threshold {\n                    return true\n              \
    \  }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var result bool = false\n    var minDistance float64 =\
    \ threshold\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            if minDistance > numbers[j] - numbers[i]\
    \ {\n                minDistance = numbers[j] - numbers[i]\n                result\
    \ = true\n            }\n        }\n    }\n    return result\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpq3649iuw_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpq3649iuw_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i == j {\n                continue\n            }\n      \
    \      if numbers[i] - numbers[j] <= threshold {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp63p6na8c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp63p6na8c_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp63p6na8c_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if  abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppt8qldp7_test.go:17:17: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, n := range numbers {\n        for j, m := range\
    \ numbers {\n            if i == j {\n                continue\n            }\n\
    \            if (n - m) < threshold {\n                return true\n         \
    \   }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_dcpdzi3_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_dcpdzi3_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp_dcpdzi3_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) <= 1 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[i] + threshold >= numbers[j] {\n             \
    \   return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp0pl9p4yt_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp0pl9p4yt_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, value := range numbers {\n        for _, inner_value\
    \ := range numbers[i+1:] {\n            if inner_value - value < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpf2r4g8mu_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpf2r4g8mu_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkrzlf2ey_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkrzlf2ey_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkrzlf2ey_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // For each element in given numbers, check if there is\
    \ at least one more\n    // element in numbers which is closer to current than\
    \ threshold.\n    for _, n := range numbers {\n        for _, n2 := range numbers\
    \ {\n            if n != n2 && (n - n2) < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbxhe34l5_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbxhe34l5_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbxhe34l5_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen4ip57w_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    size := len(numbers)\n    for i := 0; i < size; i++ {\n\
    \        for j := i + 1; j < size; j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmbevwqmm_test.go:18:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, val := range numbers {\n        for j, val2 := range\
    \ numbers {\n            if i != j && val2 - val < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpr5lxbn7e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpr5lxbn7e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpr5lxbn7e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if Abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzegpqv2_test.go:17:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, v := range numbers {\n        if i == 0 {\n    \
    \        continue\n        }\n        if numbers[i - 1] > v {\n            panic(\"\
    numbers are not sorted\")\n        }\n        if numbers[i - 1] + threshold >\
    \ v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\npanic: numbers are not sorted\
    \ [recovered]\n\tpanic: numbers are not sorted\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fde40,\
    \ 0x549cd0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fde40, 0x549cd0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.has_close_elements(...)\n\t/tmp/tmpnke1ojqw_test.go:20\n\
    command-line-arguments_test.TestHas_Close_Elements(0x0?)\n\t/tmp/tmpnke1ojqw_test.go:37\
    \ +0x7de\ntesting.tRunner(0xc0001a01a0, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, n := range numbers {\n        for _, n2 := range\
    \ numbers[i+1:] {\n            if n2 - n < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp1b7r6gqp_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp1b7r6gqp_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num := range numbers {\n        for j, other_num\
    \ := range numbers {\n            if i == j {\n                continue\n    \
    \        }\n            if other_num-num < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpfs4k32p2_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpfs4k32p2_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpfs4k32p2_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n         \
    \       return true\n            }\n        }\n    }\n\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm36tbo_l_test.go:21:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            diff := numbers[i] - numbers[j]\n\
    \            if diff < 0 {\n                diff = -diff\n            }\n    \
    \        if diff < threshold {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff :=\
    \ numbers[i + 1] - numbers[i]\n        if diff > 0 && diff < threshold {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmpsd6845ug_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmpsd6845ug_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] + threshold > numbers[j]\
    \ && numbers[i] - threshold < numbers[j] {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    var last float64 = numbers[0]\n    for _, element := range numbers[1:] {\n\
    \        if (element - last) < threshold {\n            return true\n        }\n\
    \        last = element\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4ugw5z7b_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4ugw5z7b_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        // We are\
    \ using float64 here because we are checking between float64\n        // numbers.\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            // If we found two\
    \ numbers that are closer than threshold, then\n            // return true.\n\
    \            if (numbers[i] - numbers[j]) < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp13zhsqhw_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp13zhsqhw_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp13zhsqhw_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var i, j int\n    var result bool\n    for i = 0; i < len(numbers);\
    \ i++ {\n        for j = i+1; j < len(numbers); j++ {\n            if numbers[i]\
    \ - numbers[j] < threshold &&\n                numbers[i] - numbers[j] > -threshold\
    \ {\n                result = true\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074474
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number := range numbers {\n        for j, other\
    \ := range numbers {\n            if i == j {\n                continue\n    \
    \        }\n            diff := other - number\n            if diff < 0 {\n  \
    \              diff = -diff\n            }\n            if diff < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    maxValue := numbers[0]\n    maxIndex := 0\n    minValue\
    \ := numbers[0]\n    minIndex := 0\n    count := len(numbers)\n    for i := 1;\
    \ i < count; i++ {\n        if numbers[i] > maxValue {\n            maxValue =\
    \ numbers[i]\n            maxIndex = i\n        } else if numbers[i] < minValue\
    \ {\n            minValue = numbers[i]\n            minIndex = i\n        }\n\
    \    }\n    fmt.Println(\"maxValue:\", maxValue, \"maxIndex:\", maxIndex)\n  \
    \  fmt.Println(\"minValue:\", minValue, \"minIndex:\", minIndex)\n    if maxIndex\
    \ < minIndex {\n        maxIndex, minIndex = minIndex, maxIndex\n    }\n    for\
    \ i := minIndex; i < maxIndex; i++ {\n        if numbers[i+1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "maxValue: 5 maxIndex: 4\nminValue: 1 minIndex: 0\nmaxValue: 5 maxIndex:\
    \ 4\nminValue: 1 minIndex: 0\nmaxValue: 5.9 maxIndex: 2\nminValue: 1 minIndex:\
    \ 0\nmaxValue: 5.9 maxIndex: 2\nminValue: 1 minIndex: 0\nmaxValue: 5 maxIndex:\
    \ 4\nminValue: 1 minIndex: 0\nmaxValue: 5.1 maxIndex: 4\nminValue: 1.1 minIndex:\
    \ 0\nmaxValue: 5.1 maxIndex: 4\nminValue: 1.1 minIndex: 0\n--- FAIL: TestHas_Close_Elements\
    \ (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp0wsnxv74_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp0wsnxv74_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    previous_number := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if float64(number - previous_number) < threshold {\n\
    \            return true\n        }\n        previous_number = number\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmps4ukg2r8_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmps4ukg2r8_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i != j && (numbers[i] - numbers[j]) < threshold {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpif9wc_bi_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpif9wc_bi_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpif9wc_bi_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        n1 := numbers[i]\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            n2 := numbers[j]\n\
    \            if Abs(n1 - n2) < threshold {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfquf2fxu_test.go:19:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var lo, hi, diff float64\n\n    // sort numbers by value\n\
    \    for index, number := range numbers {\n        index_lo := index - 1\n   \
    \     index_hi := index + 1\n\n        if index_lo >= 0 {\n            lo = numbers[index_lo]\n\
    \        } else {\n            lo = number\n        }\n\n        if index_hi <\
    \ len(numbers) {\n            hi = numbers[index_hi]\n        } else {\n     \
    \       hi = number\n        }\n\n        diff = hi - lo\n\n        if diff <\
    \ threshold {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpv69sq_gs_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpv69sq_gs_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpv69sq_gs_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    // the absolute distance between two numbers must be smaller than threshold\n\
    \    dabs := func(x, y float64) float64 {\n        if x > y {\n            return\
    \ x - y\n        } else {\n            return y - x\n        }\n    }\n\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if dabs(numbers[i], numbers[j]) < threshold {\n         \
    \       return true\n            }\n        }\n    }\n\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    var distance float64 = 0\n    var previous_distance float64 = 0\n    for\
    \ i := 0; i < len(numbers); i++ {\n        distance = numbers[i+1] - numbers[i]\n\
    \        if distance < threshold {\n            return true\n        }\n     \
    \   previous_distance = distance\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sop71qs_test.go:20:9: previous_distance declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    length := len(numbers)\n    for i := 0; i < length - 1;\
    \ i++ {\n        for j := i + 1; j < length; j++ {\n            if Abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqjito9z2_test.go:18:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if numbers[i] - numbers[j] > threshold || numbers[j] - numbers[i]\
    \ > threshold {\n                continue\n            }\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number := range numbers {\n        for j, k := range\
    \ numbers {\n            if i == j {\n                continue\n            }\n\
    \            if number - k < threshold {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp9z5no2eo_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp9z5no2eo_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp9z5no2eo_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number1 := range numbers {\n        for _, number2\
    \ := range numbers[i+1:] {\n            if (number1 - number2) < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpi2io5ku0_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpi2io5ku0_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpi2io5ku0_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074474
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    min_diff := threshold\n    for i := range numbers {\n \
    \       for j := range numbers {\n            if i != j {\n                diff\
    \ := numbers[i] - numbers[j]\n                if diff < 0 {\n                \
    \    diff = -diff\n                }\n                if diff < min_diff {\n \
    \                   min_diff = diff\n                }\n            }\n      \
    \  }\n    }\n    if min_diff < threshold {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // @TODO: implement\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpsztz3bo3_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpsztz3bo3_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpsztz3bo3_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpsztz3bo3_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number := range numbers {\n        for j, number2\
    \ := range numbers {\n            if i != j && number-number2 < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_ngu9kdj_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_ngu9kdj_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp_ngu9kdj_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: implement!\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9tmbhokl_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9tmbhokl_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9tmbhokl_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9tmbhokl_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074475
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    var closest, distance float64 = 1.0, 2.0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ = numbers[i] - numbers[j]\n            if distance < 0 {\n                distance\
    \ = -distance\n            }\n            if distance < closest {\n          \
    \      closest = distance\n            }\n        }\n    }\n\n    if closest <\
    \ threshold {\n        return true\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var has_it bool\n    var prev float64\n\n    prev = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        has_it = has_it || (numbers[i]\
    \ - prev < threshold)\n        prev = numbers[i]\n    }\n\n    return has_it\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpz4o5ly80_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpz4o5ly80_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    size := len(numbers)\n    for i := 0; i < size; i++ {\n\
    \        for j := i + 1; j < size; j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmbevwqmm_test.go:18:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var result bool = false\n    var diff float64\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff = numbers[i] - numbers[j]\n            if diff < 0 {\n\
    \                diff = -diff\n            }\n            if diff < threshold\
    \ {\n                result = true\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    first_number := numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if (numbers[i] - first_number) < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpy1frxfw9_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpy1frxfw9_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpy1frxfw9_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpy1frxfw9_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotv01lby_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, x := range numbers {\n        for j, y := range\
    \ numbers {\n            if i != j && y - x < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpk69jy8br_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpk69jy8br_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpk69jy8br_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i, a := range numbers {\n        for j, b := range numbers {\n      \
    \      if i != j && abs(a - b) < threshold {\n                return true\n  \
    \          }\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zjvhad4_test.go:21:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var result bool = false\n    length := len(numbers)\n \
    \   for i := 0; i < length; i++ {\n        for j := i+1; j < length; j++ {\n \
    \           if numbers[i] != numbers[j] && abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                result = true\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8uc_ubs2_test.go:19:44: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, item := range numbers {\n        for j, other :=\
    \ range numbers {\n            if i != j && item - other < threshold {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp26mtbpdl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp26mtbpdl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp26mtbpdl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number := range numbers {\n        for j, number2\
    \ := range numbers {\n            if i != j && number - number2 < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpy8uutuab_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpy8uutuab_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpy8uutuab_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var prev float64 = numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number - prev < threshold {\n            return true\n\
    \        }\n        prev = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbzaa4o41_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbzaa4o41_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var closest_distance float64 = 2*threshold\n    var closest_index\
    \ int = -1\n    var i int = 0\n    for i < len(numbers) {\n        var j int =\
    \ i + 1\n        for j < len(numbers) {\n            var distance float64 = numbers[j]\
    \ - numbers[i]\n            if distance < closest_distance {\n               \
    \ closest_distance = distance\n                closest_index = i\n           \
    \ }\n            j++\n        }\n        i++\n    }\n    return closest_distance\
    \ < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate :=\
    \ has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1e2co016_test.go:16:9: closest_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            delta := numbers[i] - numbers[j]\n\
    \            if delta < 0 {\n                delta = -delta\n            }\n \
    \           if delta < threshold {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i != j && math.Abs(numbers[i] - numbers[j]) < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfq_h6sqt_test.go:17:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] >\
    \ threshold {\n                if numbers[i] - numbers[j] < threshold {\n    \
    \                return true\n                }\n            }\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp493rvr7w_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp493rvr7w_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp493rvr7w_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp493rvr7w_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: rewrite this to not use a brute force approach\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if (numbers[i] - numbers[j]) * (numbers[i] - numbers[j])\
    \ < threshold * threshold {\n                return true\n            }\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number := range numbers {\n        for j, other_number\
    \ := range numbers {\n            if i != j && number - other_number < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp24yoyemc_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp24yoyemc_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp24yoyemc_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i, num := range numbers {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if float64(num - numbers[j]) < float64(threshold) {\n   \
    \             return true\n            }\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpqbyq2uwb_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpqbyq2uwb_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpqbyq2uwb_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    index := 0\n    for index < len(numbers) - 1 {\n        difference := numbers[index\
    \ + 1] - numbers[index]\n        if difference < threshold {\n            return\
    \ true\n        }\n        index += 1\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp_tezgdi2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp_tezgdi2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    l := len(numbers)\n    for i := 0; i < l; i++ {\n     \
    \   for j := i + 1; j < l; j++ {\n            delta := numbers[i] - numbers[j]\n\
    \            if delta < 0 {\n                delta = -delta\n            }\n \
    \           if delta < threshold {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: add your code here\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpv6lueqyh_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpv6lueqyh_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpv6lueqyh_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpv6lueqyh_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] == numbers[j] {\n  \
    \              return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphupi32ts_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphupi32ts_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmphupi32ts_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    // sort the numbers first\n    sorted := make([]float64, len(numbers))\n\
    \    copy(sorted, numbers)\n    quick_sort(sorted)\n\n    for i := 0; i < len(sorted)\
    \ - 1; i++ {\n        if (sorted[i + 1] - sorted[i]) < threshold {\n         \
    \   return true\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7kgymtun_test.go:22:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ || numbers[j] - numbers[i] < threshold {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmphro2ols6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmphro2ols6_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmphro2ols6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpmjlaln66_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpmjlaln66_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpmjlaln66_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // We ignore the first number because we can't check if\
    \ it's close to any other number\n    for i := 1; i < len(numbers); i++ {\n  \
    \      // We check if this number is close to any number before this number\n\
    \        for j := 0; j < i; j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp66hy4_3k_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp66hy4_3k_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if float64(j) == float64(i) {\n                continue\n\
    \            }\n\n            if numbers[j] - numbers[i] < threshold {\n     \
    \           return true\n            }\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp1yetwwqe_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp1yetwwqe_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074476
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    size := len(numbers)\n    for i:=0; i<size; i++ {\n   \
    \     for j:=i+1; j<size; j++ {\n            if numbers[i] + threshold > numbers[j]\
    \ && numbers[i] - threshold < numbers[j] {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: Implement solution here\n    return false\n}\n\
    \nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpe0fed0yg_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpe0fed0yg_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpe0fed0yg_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpe0fed0yg_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for index, value := range numbers {\n        for inner_index, inner_value\
    \ := range numbers {\n            if index == inner_index {\n                continue\n\
    \            }\n\n            if value - inner_value < threshold {\n         \
    \       return true\n            }\n        }\n    }\n\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpq95od60__test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpq95od60__test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpq95od60__test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, x := range numbers {\n        for j, y := range\
    \ numbers {\n            if j > i {\n                if y - x < threshold {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpvpbblgw__test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpvpbblgw__test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i != j && numbers[i] > numbers[j] {\n                if numbers[i]\
    \ - numbers[j] < threshold {\n                    return true\n              \
    \  }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpi5han3h1_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, current := range numbers {\n        for j, other\
    \ := range numbers {\n            if i == j {\n                continue\n    \
    \        }\n            if current - other <= threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpgr5gsqso_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpgr5gsqso_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpgr5gsqso_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // Write your code here.\n    if len(numbers) < 2 {\n \
    \       return false\n    }\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] -\
    \ numbers[j]) < threshold {\n                return true\n            }\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjc97lapa_test.go:21:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    sorted := bubble_sort(numbers)\n    for i := 0; i < len(sorted)\
    \ - 1; i++ {\n        if sorted[i+1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn2nzr30_test.go:15:15: undefined: bubble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) <= 1 {\n        return false\n    }\n\n\
    \    // Sort numbers.\n    sorted := quicksort(numbers)\n\n    // Iterate over\
    \ sorted list and compare difference between\n    // neighbouring elements.\n\
    \    for i := 0; i < len(sorted) - 1; i++ {\n        difference := sorted[i +\
    \ 1] - sorted[i]\n        if difference < threshold {\n            return true\n\
    \        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnu3x_1tx_test.go:20:15: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i == j {\n                continue\n            }\n      \
    \      if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvfdp102q_test.go:20:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for idx, val := range numbers {\n        // check if any\
    \ number is within threshold distance\n        for subIdx, subVal := range numbers\
    \ {\n            if idx != subIdx && within_threshold(val, subVal, threshold)\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb1kkl0wg_test.go:18:33: undefined: within_threshold

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // Sort the list, so that number can be compared to next\
    \ number.\n    // Note: sort() will change the input array.\n    // sort.Float64s(numbers)\n\
    \    // Instead, sort and make a copy.\n    numbers_sorted := make([]float64,\
    \ len(numbers))\n    copy(numbers_sorted, numbers)\n    sort.Float64s(numbers_sorted)\n\
    \n    // Compare each number with next number.\n    for i := 0; i < len(numbers_sorted)\
    \ - 1; i++ {\n        difference := numbers_sorted[i+1] - numbers_sorted[i]\n\
    \        if difference < threshold {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1g67cj4p_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i == j {\n                continue\n            }\n      \
    \      if diff := numbers[i] - numbers[j]; diff < 0 {\n                diff =\
    \ -diff\n            } else {\n                diff = diff\n            }\n  \
    \          if diff < threshold {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v8y5gwl_test.go:25:16: undefined: diff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, value := range numbers {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := value - numbers[j]\n          \
    \  if diff < 0 {\n                diff = -diff\n            }\n            if\
    \ diff < threshold {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n \
    \ candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074478
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] < numbers[j] {\n   \
    \             if numbers[j] - numbers[i] < threshold {\n                    return\
    \ true\n                }\n            } else {\n                if numbers[i]\
    \ - numbers[j] < threshold {\n                    return true\n              \
    \  }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpmjlaln66_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpmjlaln66_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpmjlaln66_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    numbers_len := len(numbers)\n    if numbers_len <= 1 {\n\
    \        return false\n    }\n\n    for i, _ := range numbers {\n        for j\
    \ := i + 1; j < numbers_len; j++ {\n            if numbers[i] < numbers[j] {\n\
    \                if numbers[j] - numbers[i] < threshold {\n                  \
    \  return true\n                }\n            } else {\n                if numbers[i]\
    \ - numbers[j] < threshold {\n                    return true\n              \
    \  }\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    max := numbers[0]\n    min := numbers[0]\n    for _, num\
    \ := range numbers {\n        if num > max {\n            max = num\n        }\n\
    \        if num < min {\n            min = num\n        }\n    }\n    return (max\
    \ - min) < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp151wrd9t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp151wrd9t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp151wrd9t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp151wrd9t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // !!! Add implementation here\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpheup8knr_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpheup8knr_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpheup8knr_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpheup8knr_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    fmt.Println(numbers)\n    var i, j int\n    var a, b float64\n\
    \    for i = 0; i < len(numbers); i++ {\n        a = numbers[i]\n        for j\
    \ = i + 1; j < len(numbers); j++ {\n            b = numbers[j]\n            if\
    \ (a - b < threshold) || (b - a < threshold) {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 2 3.9 4 5 2.2]\n[1 2 3.9 4 5 2.2]\n[1 2 5.9 4 5]\n[1 2 5.9 4 5]\n[1\
    \ 2 3 4 5 2]\n[1.1 2.2 3.1 4.1 5.1]\n[1.1 2.2 3.1 4.1 5.1]\n--- FAIL: TestHas_Close_Elements\
    \ (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1 (0.00s)\n        tmpshvijs74_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__3\
    \ (0.00s)\n        tmpshvijs74_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__6 (0.00s)\n        tmpshvijs74_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // Corner case\n    if len(numbers) < 2 {\n        return\
    \ false\n    }\n\n    // Brute force\n    // O(n^2)\n\n    // We have to compare\
    \ all numbers with each other\n    for i, n1 := range numbers {\n        for j,\
    \ n2 := range numbers {\n            // Do not compare with itself\n         \
    \   if i == j {\n                continue\n            }\n\n            // Check\
    \ if two numbers are closer than threshold\n            if math.Abs(n1 - n2) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ylgyht5_test.go:32:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, x := range numbers {\n        for j, y := range\
    \ numbers {\n            if j == i {\n                continue\n            }\n\
    \            if x - y < threshold {\n                return true\n           \
    \ }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp98njhjsa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp98njhjsa_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp98njhjsa_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, v := range numbers {\n        for j, w := range\
    \ numbers {\n            if i != j && (v - w) < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp37encyzv_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp37encyzv_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp37encyzv_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for index, number := range numbers {\n        if (index\
    \ + 1) < len(numbers) {\n            next_number := numbers[index + 1]\n     \
    \       if (number - next_number) < threshold {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpxdk9winz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpxdk9winz_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpxdk9winz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen4ip57w_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: implement the function so that it passes the test\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmppbb65va__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmppbb65va__test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmppbb65va__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmppbb65va__test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, n := range numbers {\n        for j, m := range\
    \ numbers {\n            if i != j && n - m <= threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpsulcv_qw_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpsulcv_qw_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpsulcv_qw_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if threshold < 0 {\n        panic(\"Threshold is negative.\"\
    )\n    }\n    last_value := numbers[0]\n    for i := 1; i < len(numbers); i++\
    \ {\n        if numbers[i] - last_value < threshold {\n            return true\n\
    \        }\n        last_value = numbers[i]\n    }\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp50lsdch6_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp50lsdch6_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    last_n := len(numbers) - 1\n    // Walk over all numbers,\
    \ except the last one\n    for i := 0; i < last_n; i++ {\n        // Check distance\
    \ from current to next. \n        // If it is closer than the threshold, return\
    \ True\n        if numbers[i+1] - numbers[i] < threshold {\n            return\
    \ true\n        }\n    }\n    // If we haven't found any close pair, return False\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp1i24ja7f_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp1i24ja7f_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] > threshold\
    \ || numbers[j] - numbers[i] > threshold {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmplhqzg7ft_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmplhqzg7ft_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmplhqzg7ft_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    current := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] - current < threshold {\n            return true\n        }\n   \
    \     current = numbers[i]\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp6cfbg46t_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp6cfbg46t_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp5akx6xa1_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp5akx6xa1_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp5akx6xa1_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp5akx6xa1_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen4ip57w_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if Abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb8ypqyg_test.go:17:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for index, number := range numbers {\n        for _, next\
    \ := range numbers[index + 1:] {\n            if compare_float64(number, next,\
    \ threshold) {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8d4lxdkr_test.go:17:16: undefined: compare_float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for _, v := range numbers {\n        for _, v2 := range\
    \ numbers {\n            if v == v2 {\n                continue\n            }\n\
    \            if v > v2 {\n                if v - v2 < threshold {\n          \
    \          return true\n                }\n            } else {\n            \
    \    if v2 - v < threshold {\n                    return true\n              \
    \  }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp4x5wpths_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i, _ := range numbers {\n        for j := i + 1; j < len(numbers); j++\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8q1o4j1k_test.go:21:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for idx, num := range numbers {\n        if idx == 0 {\n\
    \            continue\n        }\n        if abs(num - numbers[idx-1]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vqkkwue_test.go:19:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen4ip57w_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    return true\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpqc_lbvcy_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpqc_lbvcy_test.go:37:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpqc_lbvcy_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var i, j int\n\n    for i = 0; i < len(numbers) - 1; i++\
    \ {\n        for j = i + 1; j < len(numbers); j++ {\n            if numbers[i]\
    \ - numbers[j] < threshold {\n                return true\n            }\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpo8_z4qiz_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpo8_z4qiz_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpo8_z4qiz_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074479
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    list_length := len(numbers)\n    if list_length == 0 {\n\
    \        return false\n    }\n    var previous_number float64 = numbers[0]\n \
    \   for i := 1; i < list_length; i++ {\n        current_number := numbers[i]\n\
    \        if current_number > previous_number &&\n           current_number - previous_number\
    \ < threshold {\n            return true\n        }\n        previous_number =\
    \ current_number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmpe3hl73p6_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmpe3hl73p6_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, a := range numbers {\n        for j, b := range\
    \ numbers {\n            if i != j && a > b && a - b < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpm2tdnbtu_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074480
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num := range numbers {\n        for j, num2 := range\
    \ numbers {\n            if i == j {\n                continue\n            }\n\
    \            if abs(num - num2) < threshold {\n                return true\n \
    \           }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0sejr4kp_test.go:20:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, x := range numbers {\n        for j, y := range\
    \ numbers {\n            if i != j && y - x < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpk69jy8br_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpk69jy8br_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpk69jy8br_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074475
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            diff := numbers[i] - numbers[j]\n\
    \            if diff < 0 {\n                diff = -diff\n            }\n    \
    \        if diff < threshold {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074471
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    currentMin := threshold\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            diff :=\
    \ numbers[i] - numbers[j]\n            if diff < 0 {\n                diff = -diff\n\
    \            }\n            if diff < currentMin {\n                currentMin\
    \ = diff\n            }\n        }\n    }\n    return currentMin < threshold\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074480
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 1; i < len(numbers); i++ {\n        for j := 0; j < i; j++ {\n \
    \           diff := numbers[i] - numbers[j]\n            if diff < 0 {\n     \
    \           diff = -diff\n            }\n            if diff < threshold {\n \
    \               return true\n            }\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, n := range numbers {\n        if i > 0 {\n     \
    \       diff := n - numbers[i-1]\n            if diff > 0 && diff < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmpage_clca_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmpage_clca_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074480
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] <\
    \ threshold && numbers[i] - numbers[j] > -threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074325
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    size := len(numbers)\n    for i := 0; i < size; i++ {\n\
    \        for j := i + 1; j < size; j++ {\n            diff := numbers[i] - numbers[j]\n\
    \            if diff < 0 {\n                diff = -diff\n            }\n    \
    \        if diff < threshold {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var num float64 = 0.0\n    var result bool = false\n  \
    \  for _, num = range numbers {\n        fmt.Println(num)\n        for _, secondNum\
    \ := range numbers {\n            if secondNum != num {\n                if secondNum\
    \ - num < threshold {\n                    result = true\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1\n2\n3.9\n4\n5\n2.2\n1\n2\n3.9\n4\n5\n2.2\n1\n2\n5.9\n4\n5\n1\n2\n5.9\n\
    4\n5\n1\n2\n3\n4\n5\n2\n1.1\n2.2\n3.1\n4.1\n5.1\n1.1\n2.2\n3.1\n4.1\n5.1\n---\
    \ FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp1lo0lhxi_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp1lo0lhxi_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp1lo0lhxi_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    i := 0\n    for i < len(numbers) - 1 {\n        j := i\
    \ + 1\n        for j < len(numbers) {\n            if numbers[i] - numbers[j]\
    \ <= threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpkphw__jj_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpkphw__jj_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpkphw__jj_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074480
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var hasClose bool\n    for i := range numbers {\n     \
    \   for j := range numbers {\n            if i != j && numbers[i] - numbers[j]\
    \ < threshold {\n                hasClose = true\n            }\n        }\n \
    \   }\n    return hasClose\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n\
    \  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpc54ow22e_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpc54ow22e_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpc54ow22e_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // we can't have closer elements if numbers are smaller\
    \ than 2\n    if len(numbers) < 2 {\n        return false\n    }\n\n    // start\
    \ looping over slice with second element\n    for i := 1; i < len(numbers); i++\
    \ {\n        // iterate over all previous elements and check how far they are\n\
    \        for j := 0; j < i; j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp611bj099_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp611bj099_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if Abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb8ypqyg_test.go:17:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074479
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] < numbers[j] {\n   \
    \             if numbers[j] - numbers[i] < threshold {\n                    return\
    \ true\n                }\n            } else {\n                if numbers[i]\
    \ - numbers[j] < threshold {\n                    return true\n              \
    \  }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    var prev float64\n    var first_time bool = true\n    for _, n := range numbers\
    \ {\n        if first_time {\n            first_time = false\n            prev\
    \ = n\n            continue\n        }\n\n        diff := n - prev\n        if\
    \ diff < 0 {\n            diff = prev - n\n        }\n\n        if diff < threshold\
    \ {\n            return true\n        }\n\n        prev = n\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmpxcssjcnd_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmpxcssjcnd_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ && numbers[i] - numbers[j] > -threshold {\n                return true\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074397
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var length = len(numbers)\n    for i := 0; i < length;\
    \ i++ {\n        for j := i + 1; j < length; j++ {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt91zbmgy_test.go:18:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, _ := range numbers {\n        for j, _ := range\
    \ numbers {\n            if i == j {\n                continue\n            }\n\
    \            if (numbers[i] - numbers[j]) <= threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp6hkpga_1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp6hkpga_1_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp6hkpga_1_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotv01lby_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpgqf27f6p_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmpgqf27f6p_test.go:37:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) <= 1 {\n        return false\n    }\n\n\
    \    // TODO\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmplbcs3vl5_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmplbcs3vl5_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmplbcs3vl5_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmplbcs3vl5_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[i] - numbers[j]\n            if diff < 0\
    \ {\n                diff = diff * -1\n            }\n            if diff < threshold\
    \ {\n                return true\n            }\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074481
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, n := range numbers {\n        for j, m := range\
    \ numbers {\n            if i == j {\n                continue\n            }\n\
    \            if abs(n - m) < threshold {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptihyqxe6_test.go:20:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if (numbers[i] - numbers[j]) < threshold && (numbers[i] -\
    \ numbers[j]) > -threshold {\n                return true\n            }\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    minDistance := -1.0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ := numbers[i] - numbers[j]\n            if distance < 0 {\n                distance\
    \ = -distance\n            }\n            if distance < threshold {\n        \
    \        return true\n            }\n            if minDistance == -1.0 || distance\
    \ < minDistance {\n                minDistance = distance\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074481
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) <= 1 {\n        return false\n    }\n\n\
    \    head := numbers[0]\n    for _, number := range numbers[1:] {\n        if\
    \ number-head < threshold {\n            return true\n        }\n        head\
    \ = number\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp8sl7hk_f_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp8sl7hk_f_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ && numbers[i] - numbers[j] > -threshold {\n                return true\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num1 := range numbers {\n        for _, num2 :=\
    \ range numbers[i+1:] {\n            if num1 > num2 {\n                num1, num2\
    \ = num2, num1\n            }\n            if num2 - num1 < threshold {\n    \
    \            return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmphzju9ki6_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, first := range numbers {\n        for _, second\
    \ := range numbers[i+1:] {\n            if (first - second < threshold) {\n  \
    \              return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmplxk1lbur_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmplxk1lbur_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmplxk1lbur_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    length := len(numbers)\n    for i := 0; i < length; i++\
    \ {\n        for j := i + 1; j < length; j++ {\n            diff := numbers[i]\
    \ - numbers[j]\n            if diff < 0 {\n                diff = -diff\n    \
    \        }\n            if diff < threshold {\n                return true\n \
    \           }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074481
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var has_close_elements bool\n    for i, number1 := range\
    \ numbers {\n        for j, number2 := range numbers {\n            if i != j\
    \ && !has_close_elements {\n                has_close_elements = true\n      \
    \          diff := number1 - number2\n                if diff < 0 {\n        \
    \            diff = -diff\n                }\n                if diff > threshold\
    \ {\n                    has_close_elements = false\n                }\n     \
    \       }\n        }\n    }\n    return has_close_elements\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074482
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotv01lby_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, j := 0, 0; i < len(numbers); i++ {\n        for\
    \ j = i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] >\
    \ -threshold && numbers[i] - numbers[j] < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, a := range numbers {\n        for j, b := range\
    \ numbers {\n            if i != j && (a - b) < threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpatq75enb_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpatq75enb_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpatq75enb_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var length = len(numbers)\n    for i:=0; i<length; i++\
    \ {\n        for j:=i+1; j<length; j++ {\n            if numbers[i] == numbers[j]\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmpk2haator_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmpk2haator_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmpk2haator_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num := range numbers {\n        for j, num2 := range\
    \ numbers {\n            if (i == j) {\n                continue\n           \
    \ }\n            if (fmt.Sprintf(\"%.3f\", num) == fmt.Sprintf(\"%.3f\", num2))\
    \ {\n                continue\n            }\n            if (num > num2) {\n\
    \                // num2 is smaller than num\n                // use threshold\
    \ for num2\n                if (num - num2 < threshold) {\n                  \
    \  return true\n                }\n            } else {\n                // num\
    \ is smaller than num2\n                // use threshold for num\n           \
    \     if (num2 - num < threshold) {\n                    return true\n       \
    \         }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpmnjlulwl_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, j := 0, 1; j < len(numbers); i, j = i+1, j+1 {\n\
    \        d := numbers[j] - numbers[i]\n        if d <= threshold {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpluh62ukx_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpluh62ukx_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: Copy the implementation from the slides.\n   \
    \ return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmp9m8_nxkk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmp9m8_nxkk_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmp9m8_nxkk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmp9m8_nxkk_test.go:38:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, v := range numbers {\n        for j, w := range\
    \ numbers {\n            if i == j {\n                continue\n            }\n\
    \            if float64(int((v - w) * 10000)) / 10000 <= threshold {\n       \
    \         return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpln7w6a3h_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpln7w6a3h_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpln7w6a3h_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i]\
    \ > numbers[i + 1] {\n            return false\n        }\n        if numbers[i\
    \ + 1] - numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__2\
    \ (0.00s)\n        tmpr37weti9_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__4 (0.00s)\n        tmpr37weti9_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074482
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, _ := range numbers {\n        for j, _ := range\
    \ numbers {\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hejpl8p_test.go:17:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074482
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, _ := range numbers {\n        for j, _ := range\
    \ numbers {\n            if i != j && numbers[i] - numbers[j] < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpb1i3xaow_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpb1i3xaow_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpb1i3xaow_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := range numbers {\n        for j := range numbers\
    \ {\n            if i != j && numbers[i] - numbers[j] < threshold {\n        \
    \        return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp51wukw_g_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp51wukw_g_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp51wukw_g_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotv01lby_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var min float64 = 1.0\n    var i, j int = 0, 0\n    var\
    \ has_closer bool = false\n\n    for i = 0; i < len(numbers) - 1; i++ {\n    \
    \    for j = i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j]\
    \ > 0.0 {\n                min = numbers[j] - numbers[i]\n            } else {\n\
    \                min = numbers[i] - numbers[j]\n            }\n            if\
    \ min < threshold {\n                has_closer = true\n                break\n\
    \            }\n        }\n        if has_closer {\n            break\n      \
    \  }\n    }\n    return has_closer\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpbnuh9u7y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpbnuh9u7y_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpbnuh9u7y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var has_close_elements bool\n    for i, number := range\
    \ numbers {\n        if i == 0 {\n            continue\n        }\n        if\
    \ number - numbers[i-1] < threshold {\n            has_close_elements = true\n\
    \            break\n        }\n    }\n    return has_close_elements\n}\n\nfunc\
    \ TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpuonahh3o_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpuonahh3o_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] <=\
    \ threshold && numbers[i] - numbers[j] >= -threshold {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] - numbers[j] < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpzpj2l0a9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpzpj2l0a9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) <= 1 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        number1 := numbers[i]\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            number2 := numbers[j]\n\
    \            if Abs(number1 - number2) < threshold {\n                return true\n\
    \            }\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9377wyiu_test.go:23:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074483
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen4ip57w_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j]) <\
    \ threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotv01lby_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    // Sort the given list.\n    sort.Float64s(numbers)\n\n    for i := 0; i\
    \ < len(numbers) - 1; i++ {\n        d := numbers[i+1] - numbers[i]\n        if\
    \ d < threshold {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8qs59ah_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num1 := range numbers {\n        for _, num2 :=\
    \ range numbers[i+1:] {\n            if float64(num1 - num2) < float64(threshold)\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp7bwyxn9k_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp7bwyxn9k_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp7bwyxn9k_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for _, num1 := range numbers {\n        for _, num2 :=\
    \ range numbers {\n            if num1 != num2 && num1 - num2 < threshold {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmps_2rqz88_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmps_2rqz88_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmps_2rqz88_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if diff := numbers[i] - numbers[j];\
    \ diff < 0 {\n                diff = -diff\n            }\n            if diff\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqdj030r_test.go:20:16: undefined: diff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074483
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, number1 := range numbers {\n        for _, number2\
    \ := range numbers[i+1:] {\n            if number1 > number2 {\n             \
    \   if number1 - number2 < threshold {\n                    return true\n    \
    \            }\n            } else {\n                if number2 - number1 < threshold\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074483
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var j float64\n    var i float64\n    var l int = len(numbers)\n\
    \    var diff float64\n    for i = 0; i < l - 1; i++ {\n        j = i + 1\n  \
    \      for j < l {\n            diff = numbers[i] - numbers[j]\n            if\
    \ diff < 0 {\n                diff = -diff\n            }\n            if diff\
    \ < threshold {\n                return true\n            }\n            j++\n\
    \        }\n    }\n    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkmfo04o_test.go:19:20: invalid operation: i < l - 1 (mismatched types
    float64 and int)

    /tmp/tmpzkmfo04o_test.go:21:17: invalid operation: j < l (mismatched types float64
    and int)

    /tmp/tmpzkmfo04o_test.go:22:28: invalid argument: index i (variable of type float64)
    must be integer

    /tmp/tmpzkmfo04o_test.go:22:41: invalid argument: index j (variable of type float64)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    // TODO: Return true if any two numbers in list have distance\
    \ between them <= threshold,\n    // otherwise return false\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__0\
    \ (0.00s)\n        tmphr29ifwi_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__2 (0.00s)\n        tmphr29ifwi_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmphr29ifwi_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__5 (0.00s)\n        tmphr29ifwi_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n         \
    \       return true\n            }\n        }\n    }\n\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm36tbo_l_test.go:21:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, v := range numbers {\n        for j, w := range\
    \ numbers {\n            if i < j && math.Abs(v - w) < threshold {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\
    func TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsk07_65_test.go:17:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i, num := range numbers {\n        for j, num2 := range\
    \ numbers {\n            if (i != j) && (num2 > num) && (num2 - num) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__4\
    \ (0.00s)\n        tmpgfbdffur_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if (numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpmjlaln66_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpmjlaln66_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpmjlaln66_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    minDiff := float64(1)\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            if diff := numbers[i] - numbers[j];\
    \ diff < 0 {\n                diff = -diff\n            }\n            if diff\
    \ < minDiff {\n                minDiff = diff\n            }\n        }\n    }\n\
    \n    return minDiff < threshold\n}\n\nfunc TestHas_Close_Elements(t *testing.T)\
    \ {\n  candidate := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpktlitq34_test.go:25:16: undefined: diff

    /tmp/tmpktlitq34_test.go:26:27: undefined: diff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074483
- exit_code: 0
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[i] - numbers[j]\n            if diff < 0\
    \ {\n                diff = -diff\n            }\n            if diff < threshold\
    \ {\n                return true\n            }\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074483
- exit_code: 2
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate\
    \ := has_close_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpen4ip57w_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    if len(numbers) < 2 {\n        return false\n    }\n\n\
    \    // at this point we're sure that numbers is at least 2 elements long\n\n\
    \    for i, n := range numbers {\n        for j, n2 := range numbers {\n     \
    \       if i != j && n - n2 < threshold {\n                return true\n     \
    \       }\n        }\n    }\n\n    return false\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmpn3ts3270_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmpn3ts3270_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmpn3ts3270_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[i] > numbers[j] {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp96nf0x5s_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp96nf0x5s_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__5\
    \ (0.00s)\n        tmp96nf0x5s_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    l := len(numbers)\n    for i := 0; i < l; i++ {\n     \
    \   for j := i + 1; j < l; j++ {\n            if (numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestHas_Close_Elements(t *testing.T) {\n  candidate := has_close_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), expected: true },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.95), expected: true },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp4cbmspic_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp4cbmspic_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestHas_Close_Elements/test_num__6\
    \ (0.00s)\n        tmp4cbmspic_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074483
- exit_code: 1
  program: "package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0,\
    \ 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold\
    \ float64) bool {\n    var current_diff float64\n    var smallest_diff float64\
    \ = 1.7976931348623157e+308\n\n    for i, number := range numbers {\n        if\
    \ i > 0 {\n            current_diff = number - numbers[i-1]\n            if current_diff\
    \ < smallest_diff {\n                smallest_diff = current_diff\n          \
    \  }\n        }\n    }\n\n    return smallest_diff < threshold\n}\n\nfunc TestHas_Close_Elements(t\
    \ *testing.T) {\n  candidate := has_close_elements\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), expected:\
    \ true },\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05),\
    \ expected: false },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.95), expected: true },\n     { actual: candidate([]float64{1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), expected: false },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 1.0), expected: true },\n     { actual: candidate([]float64{1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHas_Close_Elements (0.00s)\n    --- FAIL: TestHas_Close_Elements/test_num__1\
    \ (0.00s)\n        tmp6390s7br_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestHas_Close_Elements/test_num__3 (0.00s)\n        tmp6390s7br_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074483
