language: go_test.go
name: HumanEval_131_digits
results:
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Write the body\
    \ of the function here\n    var odd_digits []int\n    for _, value := range(fmt.Sprintf(\"\
    %d\", n)) {\n        digit := int(value) - 48\n        if digit % 2 != 0 {\n \
    \           odd_digits = append(odd_digits, digit)\n        }\n    }\n    if len(odd_digits)\
    \ == 0 {\n        return 0\n    }\n    product := 1\n    for _, value := range(odd_digits)\
    \ {\n        product *= value\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    r := 1\n    for\
    \ n > 0 {\n        d := n % 10\n        if d % 2 == 1 {\n            r *= d\n\
    \        }\n        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz8yib3_6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res int = 1\n\
    \    var tmp int\n    for n > 0 {\n        tmp = n % 10\n        if tmp % 2 !=\
    \ 0 {\n            res *= tmp\n        }\n        n /= 10\n    }\n    return res\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpvy60pfnt_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n    product := 1\n    for n > 0 {\n        last_digit\
    \ := n % 10\n        if last_digit % 2 != 0 {\n            product *= last_digit\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmptw3kmp09_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for ; n > 0; n /= 10 {\n        d := n % 10\n        if d % 2 == 1\
    \ {\n            product *= d\n        }\n    }\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpp8_t2znt_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    last := n % 10\n    if last % 2 == 1 {\n        return\
    \ last * digits(n / 10)\n    }\n    return digits(n / 10)\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpfakgyrse_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpfakgyrse_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpfakgyrse_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpfakgyrse_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpfakgyrse_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpfakgyrse_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    r := 1\n    for\
    \ n > 0 {\n        d := n % 10\n        if d % 2 == 1 {\n            r *= d\n\
    \        }\n        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz8yib3_6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 1\n    for\
    \ n > 0 {\n        d := n % 10\n        if d % 2 == 1 {\n            p *= d\n\
    \        }\n        n /= 10\n    }\n    return p\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmphm6skaj8_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    fmt.Println(n)\n\
    \    if n < 10 {\n        if n % 2 == 1 {\n            return n\n        } else\
    \ {\n            return 0\n        }\n    } else {\n        return n % 10 * digits(n\
    \ / 10)\n    }\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "5\n54\n5\n120\n12\n1\n5014\n501\n50\n5\n98765\n9876\n987\n98\n9\n5576543\n\
    557654\n55765\n5576\n557\n55\n5\n2468\n246\n24\n2\n--- FAIL: TestDigits (0.00s)\n\
    \    --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp2hthalu3_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=20)'\n    --- FAIL: TestDigits/test_num__2\
    \ (0.00s)\n        tmp2hthalu3_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp2hthalu3_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4\
    \ (0.00s)\n        tmp2hthalu3_test.go:49: expected '%!s(int=315)', got '%!s(int=15120)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp2hthalu3_test.go:49:\
    \ expected '%!s(int=2625)', got '%!s(int=63000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    //return n * n\
    \ //1\n    //return n % 2 //3\n    return n % 4 //4\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp637bor06_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp637bor06_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp637bor06_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp637bor06_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp637bor06_test.go:42: expected '%!s(int=315)', got '%!s(int=1)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp637bor06_test.go:42:\
    \ expected '%!s(int=2625)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    const eol = 10\
    \ // end of line\n\n    if n == 0 {\n        return 0\n    }\n\n    product :=\
    \ 1\n    for n > 0 {\n        //\n        // Calculate the remainder, i.e. the\
    \ next lowest order digit\n        //\n        digit := n % eol\n\n        //\n\
    \        // If digit is odd, append to the product\n        //\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n\n        //\n        //\
    \ We've handled the lowest order digit, so divide by 10 to\n        // drop it\
    \ from n\n        //\n        n /= eol\n    }\n\n    return product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpmq6nypeu_test.go:67: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    return 0\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpw1rlw9sn_test.go:40:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\ntype test \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdmaqs0gg_test.go:29:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074570
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\ntype testpair \n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7d65rtdf_test.go:28:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074570
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n <= 0 {\n \
    \       return 0\n    }\n    result := 1\n    for n > 0 {\n        d := n % 10\n\
    \        if d % 2 != 0 {\n            result *= d\n        }\n        n /= 10\n\
    \    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmphare4bqo_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    for\
    \ n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum\
    \ *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_j5_0yil_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        mod := n % 10\n        if mod % 2 != 0 {\n   \
    \         product *= mod\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpkwceufmw_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    prod := 1\n   \
    \ for n > 0 {\n        if n % 2 == 1 {\n            prod *= n % 10\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpn4fn1jhj_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz2ob9n4x_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // start := time.Now()\n\
    \    nums := []int{}\n    for n > 0 {\n        nums = append(nums, n % 10)\n \
    \       n /= 10\n    }\n    for i := 0; i < len(nums); i++ {\n        if nums[i]\
    \ % 2 == 0 {\n            nums[i] = 0\n        }\n    }\n    var result int\n\
    \    for _, num := range nums {\n        result *= 10\n        result += num\n\
    \    }\n    // fmt.Println(time.Since(start))\n    return result\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpcet1rinw_test.go:57: expected '%!s(int=5)', got '%!s(int=105)'\n \
    \   --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpcet1rinw_test.go:57:\
    \ expected '%!s(int=315)', got '%!s(int=50709)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmpcet1rinw_test.go:57: expected '%!s(int=2625)', got '%!s(int=3050755)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var odd int\n \
    \   var even int\n    for n > 0 {\n        digit := n % 10\n        if digit %\
    \ 2 == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        n /= 10\n    }\n    return odd * even\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp4nd5d33b_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp4nd5d33b_test.go:51: expected\
    \ '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp4nd5d33b_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp4nd5d33b_test.go:51: expected\
    \ '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4nd5d33b_test.go:51: expected '%!s(int=315)', got '%!s(int=6)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4nd5d33b_test.go:51:\
    \ expected '%!s(int=2625)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    nums := make([]int,\
    \ 0)\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            nums = append(nums, digit)\n        }\n        n /= 10\n    }\n \
    \   fmt.Println(nums)\n    prod := 1\n    for _, num := range nums {\n       \
    \ prod *= num\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[5]\n[5]\n[1]\n[1 5]\n[5 7 9]\n[3 5 7 5 5]\n[]\n--- FAIL: TestDigits (0.00s)\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp2_wwz3g4_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    prod := 1\n   \
    \ for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n        \
    \    prod *= digit\n        }\n        n /= 10\n    }\n    return prod\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp4wx3zv2e_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // +++your code\
    \ here+++\n    return n\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmph7oq89q2_test.go:41: expected '%!s(int=5)', got '%!s(int=54)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmph7oq89q2_test.go:41: expected\
    \ '%!s(int=1)', got '%!s(int=120)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmph7oq89q2_test.go:41: expected '%!s(int=5)', got '%!s(int=5014)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmph7oq89q2_test.go:41:\
    \ expected '%!s(int=315)', got '%!s(int=98765)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmph7oq89q2_test.go:41: expected '%!s(int=2625)', got '%!s(int=5576543)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmph7oq89q2_test.go:41:\
    \ expected '%!s(int=0)', got '%!s(int=2468)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    result := 1\n    for n > 0 {\n        digit := n %\
    \ 10\n        if digit % 2 != 0 {\n            result *= digit\n        }\n  \
    \      n /= 10\n    }\n    return result\n}\n\ntype digitsTest \nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwe1xr4_1_test.go:32:17: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074570
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        d :=\
    \ n % 10\n        if d % 2 == 0 {\n            even += 1\n        } else {\n \
    \           odd += 1\n        }\n        n /= 10\n    }\n    if even == 0 {\n\
    \        return 1\n    }\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpteev8xg__test.go:56: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpteev8xg__test.go:56: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpteev8xg__test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpteev8xg__test.go:56: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpteev8xg__test.go:56: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpteev8xg__test.go:56:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074574
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz2ob9n4x_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp4_9ybvht_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp4_9ybvht_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp4_9ybvht_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp4_9ybvht_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4_9ybvht_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4_9ybvht_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    if n == 0 {\n        return 0\n    }\n    for ; n > 0; n /= 10 {\n      \
    \  digit := n % 10\n        if digit % 2 == 1 {\n            product *= digit\n\
    \        }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp169fqv_l_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074574
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz2ob9n4x_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        m := n % 10\n        if m % 2 == 1 {\n            product\
    \ *= m\n        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp3q0lk8kj_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074574
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        r := n % 10\n        if r % 2 != 0 {\n            product\
    \ *= r\n        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpfbtyutpj_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Insert your\
    \ code here\n    a := 0\n    b := 1\n    for n > 0 {\n        temp := n % 10\n\
    \        if temp % 2 != 0 {\n            a = a + temp\n        } else {\n    \
    \        b = 0\n        }\n        n = n / 10\n    }\n    return a * b\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpqqmtdbtd_test.go:52: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpqqmtdbtd_test.go:52: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpqqmtdbtd_test.go:52: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpqqmtdbtd_test.go:52: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpqqmtdbtd_test.go:52: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 1\n    for\
    \ n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n            p\
    \ *= digit\n        }\n        n /= 10\n    }\n    return p\n}\n\ntype digitsCase\
    \ \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcxnzlg3x_test.go:29:17: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074575
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    var p int = 1\n    for ; n > 0; n /= 10 {\n     \
    \   d := n % 10\n        if d % 2 == 1 {\n            p *= d\n        }\n    }\n\
    \    return p\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmprfslzsgc_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       if n % 2 == 1 {\n            return n\n        } else {\n            return\
    \ 0\n        }\n    }\n    if n % 2 == 1 {\n        return n % 10 * digits(n /\
    \ 10)\n    } else {\n        return digits(n / 10)\n    }\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074454
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       if n % 2 == 1 {\n            return n\n        } else {\n            return\
    \ 0\n        }\n    }\n    m := n % 10\n    if m % 2 == 1 {\n        return m\
    \ * digits(n / 10)\n    } else {\n        return digits(n / 10)\n    }\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\n\
    \    result = 1\n    var i int\n    i = n\n    for i > 0 {\n        if i % 2 !=\
    \ 0 {\n            result *= i % 10\n        }\n        i /= 10\n    }\n    return\
    \ result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpbhf_x_yw_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    prod := 1\n   \
    \ for n > 0 {\n        if n % 2 == 1 {\n            prod *= n % 10\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpn4fn1jhj_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res int = 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       res *= digit\n        }\n        n /= 10\n    }\n    return res\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp792d0u11_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    digit := 1\n  \
    \  if n > 0 {\n        digit = n % 10\n        n = n / 10\n        if digit %\
    \ 2 == 0 {\n            digit = 0\n        }\n        return digits(n) * digit\n\
    \    }\n    return digit\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpc9fxdpiv_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpc9fxdpiv_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpc9fxdpiv_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpc9fxdpiv_test.go:49: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpc9fxdpiv_test.go:49: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Write your code\
    \ here\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpx6aeh0eg_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpx6aeh0eg_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpx6aeh0eg_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpx6aeh0eg_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpx6aeh0eg_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpx6aeh0eg_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var p int = 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n     \
    \       p *= digit\n        }\n        n /= 10\n    }\n    return p\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpj6c6c9qc_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpvyw6h5c9_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    for\
    \ n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum\
    \ *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_j5_0yil_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n   \
    \     }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpl4bl68hg_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Initialize the\
    \ result to 1, since the product of no numbers is 1.\n    result := 1\n    //\
    \ Store the rest of the number in a temporary variable.\n    t := n\n    // Iterate\
    \ through the digits of the number until there are no more digits.\n    for t\
    \ > 0 {\n        // Get the last digit and remove it from the number.\n      \
    \  lastDigit := t % 10\n        t = t / 10\n        // If the digit is odd, update\
    \ the result.\n        if lastDigit % 2 == 1 {\n            result = result *\
    \ lastDigit\n        }\n    }\n    return result\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpgiwl0cxl_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res int = 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       res *= digit\n        }\n        n /= 10\n    }\n    return res\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp792d0u11_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result = 1\n\
    \    for n > 0 {\n        remainder := n % 10\n        if remainder % 2 != 0 {\n\
    \            result *= remainder\n        }\n        n /= 10\n    }\n    return\
    \ result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmptrrobhkt_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // TODO - Add your\
    \ code here\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp816lugwk_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp816lugwk_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp816lugwk_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp816lugwk_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp816lugwk_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp816lugwk_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\n\
    \    var divider int\n    var remainder int\n    if n == 0 {\n        return 0\n\
    \    }\n    divider = n/10\n    remainder = n%10\n    if remainder%2 != 0 {\n\
    \        result = remainder\n    }\n    for {\n        if divider == 0 {\n   \
    \         break\n        }\n        remainder = divider%10\n        if remainder%2\
    \ != 0 {\n            result *= remainder\n        }\n        divider /= 10\n\
    \    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmpzf24ns5q_test.go:61: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmpzf24ns5q_test.go:61: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpzf24ns5q_test.go:61: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var r int = 1\n\
    \    var d int\n    for n > 0 {\n        d = n % 10\n        if d % 2 == 1 {\n\
    \            r *= d\n        }\n        n /= 10\n    }\n    return r\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp6vmyqvuq_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc6vgk2h6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n <= 0 {\n \
    \       return 0\n    }\n    res := 1\n    odd := false\n    for n > 0 {\n   \
    \     if n % 2 == 1 {\n            res *= n % 10\n            odd = true\n   \
    \     }\n        n /= 10\n    }\n    if odd {\n        return res\n    }\n   \
    \ return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n <= 0 {\n \
    \       return 0\n    }\n\n    result := 1\n    for n > 0 {\n        d := n %\
    \ 10\n        if d % 2 != 0 {\n            result *= d\n        }\n        n /=\
    \ 10\n    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp0ervgn55_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code goes\
    \ here\n    var result int\n    for ; n != 0; n /= 10 {\n        if n % 2 != 0\
    \ {\n            result *= n % 10\n        }\n    }\n    return result\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpdy52ks8x_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpdy52ks8x_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpdy52ks8x_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpdy52ks8x_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpdy52ks8x_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpdy52ks8x_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n\n    result := 1\n    for n > 0 {\n        d := n %\
    \ 10\n        if d % 2 != 0 {\n            result *= d\n        }\n        n /=\
    \ 10\n    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp8du98aod_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    for\
    \ n > 0 {\n        t := n % 10\n        if t % 2 == 1 {\n            sum *= t\n\
    \        }\n        n /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpfwhsj8cg_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    return 0\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpw1rlw9sn_test.go:40:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n\n    out := 1\n    for n > 0 {\n        digit := n %\
    \ 10\n        if digit % 2 != 0 {\n            out *= digit\n        }\n     \
    \   n /= 10\n    }\n    return out\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpvsh736k__test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var prod int =\
    \ 1\n    for n > 0 {\n        dig := n % 10\n        if dig % 2 != 0 {\n     \
    \       prod *= dig\n        }\n        n /= 10\n    }\n    return prod\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpnn5lnoxu_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       if n % 2 == 1 {\n            return n\n        } else {\n            return\
    \ 0\n        }\n    }\n    if n % 2 == 1 {\n        return n % 10 * digits(n /\
    \ 10)\n    } else {\n        return digits(n / 10)\n    }\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var prod int =\
    \ 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n \
    \           prod *= digit\n        }\n        n /= 10\n    }\n    return prod\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpb5j9slp5_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    if n == 0 {\n        return 0\n    }\n\n    for n > 0 {\n        digit :=\
    \ n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n\
    \        n /= 10\n    }\n\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpnaw36tpa_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074577
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       if n % 2 == 1 {\n            return n\n        } else {\n            return\
    \ 0\n        }\n    } else {\n        if n % 2 == 1 {\n            return (n %\
    \ 10) * digits(n / 10)\n        } else {\n            return digits(n / 10)\n\
    \        }\n    }\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    var prod, digit int\n    prod = 1\n    for n > 0\
    \ {\n        digit = n % 10\n        if digit % 2 != 0 {\n            prod *=\
    \ digit\n        }\n        n /= 10\n    }\n    return prod\n}\n\ntype test \n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq392jwcq_test.go:33:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\n\
    \    result = 1\n    for n > 0 {\n        x := n % 10\n        if x % 2 != 0 {\n\
    \            result *= x\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmplk0z5xct_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n\n    digit := n % 10\n    if digit % 2 == 0 {\n    \
    \    return digits(n / 10)\n    }\n\n    rest := digits(n / 10)\n    if rest ==\
    \ 0 {\n        return digit\n    }\n    return digit * rest\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n\tproduct := 1\n\t\
    for n > 0 {\n\t\tdigit := n % 10\n\t\tif digit % 2 != 0 {\n\t\t\tproduct *= digit\n\
    \t\t}\n\t\tn /= 10\n\t}\n\treturn product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp5bck9kaf_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Fill in the\
    \ missing code, do not change anything else\n    if n == 0 {\n        return 0\n\
    \    }\n\n    if n % 2 == 0 {\n        return digits(n / 10)\n    }\n\n    return\
    \ (n % 10) * digits(n / 10)\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpppce17nb_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpppce17nb_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpppce17nb_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpppce17nb_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpppce17nb_test.go:49: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpppce17nb_test.go:49:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        m := n % 10\n        if m % 2 == 1 {\n            product\
    \ *= m\n        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp3q0lk8kj_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074574
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    result := 1\n \
    \   for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n      \
    \      result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc0sefe5q_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    m := n % 10\n    if m % 2 == 1 {\n        return\
    \ m * digits(n / 10)\n    }\n    return digits(n / 10)\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp03gbz83h_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp03gbz83h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp03gbz83h_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp03gbz83h_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp03gbz83h_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp03gbz83h_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp4sihpo_l_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp4sihpo_l_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp4sihpo_l_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp4sihpo_l_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4sihpo_l_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4sihpo_l_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    n2 := n\n    var\
    \ product int = 1\n    for n > 0 {\n        if n % 2 != 0 {\n            product\
    \ *= n % 10\n        }\n        n /= 10\n    }\n    if product == 1 {\n      \
    \  return 0\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoo0vuf0b_test.go:18:5: n2 declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    for\
    \ n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum\
    \ *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_j5_0yil_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res int = 1\n\
    \    for n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n            res\
    \ *= d\n        }\n        n /= 10\n    }\n    return res\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_lfaxiom_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var r int = 1\n\
    \    for n > 0 {\n        if (n % 2 == 1) {\n            r *= n % 10\n       \
    \ }\n        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp64ley1k4_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    digit := n % 10\n    if digit % 2 == 0 {\n      \
    \  return digits(n / 10)\n    }\n    return digits(n / 10) * digit\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpe50xk78a_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpe50xk78a_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpe50xk78a_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpe50xk78a_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpe50xk78a_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpe50xk78a_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // 1) declare an\
    \ odd_digits variable\n    // 2) declare a variable to represent the \"current\"\
    \ digit you are on\n    // 3) move from left to right, getting each digit:\n \
    \   //    3a) check if digit % 2 != 0, if so, add to odd_digits variable\n   \
    \ // 4) return odd_digits\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp5phv77fj_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp5phv77fj_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp5phv77fj_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp5phv77fj_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp5phv77fj_test.go:45: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp5phv77fj_test.go:45:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Fill me in!\n\
    \    return n\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp1lw34d5p_test.go:41: expected '%!s(int=5)', got '%!s(int=54)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp1lw34d5p_test.go:41: expected\
    \ '%!s(int=1)', got '%!s(int=120)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp1lw34d5p_test.go:41: expected '%!s(int=5)', got '%!s(int=5014)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp1lw34d5p_test.go:41:\
    \ expected '%!s(int=315)', got '%!s(int=98765)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmp1lw34d5p_test.go:41: expected '%!s(int=2625)', got '%!s(int=5576543)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp1lw34d5p_test.go:41:\
    \ expected '%!s(int=0)', got '%!s(int=2468)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    res := 1\n    for\
    \ n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            res\
    \ *= digit\n        }\n        n /= 10\n    }\n    return res\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpkqmxi3ug_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n       \
    \     product *= d\n        }\n        n /= 10\n    }\n    return product\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpd41c0pde_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    product := 1\n    for n > 0 {\n        lastDigit :=\
    \ n % 10\n        if lastDigit % 2 != 0 {\n            product *= lastDigit\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpkon13qlf_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n\tstr := fmt.Sprintf(\"\
    %d\", n)\n\tproduct := 1\n\tfor _, c := range str {\n\t\td := int(c) - '0'\n\t\
    \tif d % 2 == 1 {\n\t\t\tproduct *= d\n\t\t}\n\t}\n\treturn product\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpo76p063l_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n <= 0 {\n \
    \       return 0\n    }\n\n    result := 1\n    for n > 0 {\n        digit :=\
    \ n % 10\n        if digit % 2 != 0 {\n            result *= digit\n        }\n\
    \        n /= 10\n    }\n    return result\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmptsiscvbl_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var prod int =\
    \ 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n \
    \           prod *= digit\n        }\n        n /= 10\n    }\n    return prod\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpb5j9slp5_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n\tvar product int =\
    \ 1\n\tfor n > 0 {\n\t\tdigit := n % 10\n\t\tif digit % 2 != 0 {\n\t\t\tproduct\
    \ *= digit\n\t\t}\n\t\tn /= 10\n\t}\n\treturn product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpmxye8uo6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product = 1\n\
    \    for n > 0 {\n        var digit = n % 10\n        if digit % 2 == 1 {\n  \
    \          product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpvxgoiu96_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n\tvar result int\n\t\
    for n != 0 {\n\t\tdigit := n % 10\n\t\tif digit % 2 != 0 {\n\t\t\tresult *= digit\n\
    \t\t}\n\t\tn /= 10\n\t}\n\treturn result\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp9ol79010_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp9ol79010_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp9ol79010_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp9ol79010_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp9ol79010_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp9ol79010_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    currentProduct := 1\n    remainder := n\n    for remainder\
    \ > 0 {\n        nextDigit := remainder % 10\n        if nextDigit % 2 == 1 {\n\
    \            currentProduct *= nextDigit\n        }\n        remainder /= 10\n\
    \    }\n    return currentProduct\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp2a52gu27_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    return 0\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpw1rlw9sn_test.go:40:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    r := 1\n    for\
    \ n > 0 {\n        if d := n % 10; d % 2 != 0 {\n            r *= d\n        }\n\
    \        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmptkiafoqo_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    result := 1\n \
    \   for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n      \
    \      result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc0sefe5q_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    oddProduct := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n     \
    \       oddProduct *= digit\n        }\n        n /= 10\n    }\n    return oddProduct\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmplepaye4a_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    for\
    \ n > 0 {\n        d := n % 10\n        if d % 2 == 1 {\n            sum *= d\n\
    \        }\n        n /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpt1ukxhjf_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    if n % 2 == 1 {\n        return (n % 10) * digits(n\
    \ / 10)\n    }\n    return digits(n / 10)\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpc39y7hfh_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpc39y7hfh_test.go:46: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpc39y7hfh_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpc39y7hfh_test.go:46: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpc39y7hfh_test.go:46: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpc39y7hfh_test.go:46:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    prod := 1\n   \
    \ temp := n\n    for temp > 0 {\n        digit := temp % 10\n        if digit\
    \ % 2 != 0 {\n            prod *= digit\n        }\n        temp /= 10\n    }\n\
    \    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpbqd5d9cg_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp4sihpo_l_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp4sihpo_l_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp4sihpo_l_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp4sihpo_l_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4sihpo_l_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4sihpo_l_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz2ob9n4x_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var r int = 1\n\
    \    for n > 0 {\n        d := n % 10\n        if d % 2 == 1 {\n            r\
    \ *= d\n        }\n        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpxip7ba9c_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    odd_digits := []int{}\n\
    \    for n > 0 {\n        if (n % 10) % 2 != 0 {\n            odd_digits = append(odd_digits,\
    \ n % 10)\n        }\n        n /= 10\n    }\n    prod := 1\n    for _, val :=\
    \ range odd_digits {\n        prod *= val\n    }\n    return prod\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmphcfoou6l_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Replace the\
    \ code below\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpoe2wv00j_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpoe2wv00j_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpoe2wv00j_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpoe2wv00j_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpoe2wv00j_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpoe2wv00j_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    nStr := fmt.Sprintf(\"\
    %d\", n)\n    prod := 1\n    for _, char := range nStr {\n        digit := char\
    \ - '0'\n        if digit & 1 == 1 {\n            prod *= int(digit)\n       \
    \ }\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmppxdneohy_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        i := n % 10\n        if i % 2 != 0 {\n       \
    \     product *= i\n        }\n        n /= 10\n    }\n    return product\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpyjna1q9v_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n\n    digit := n % 10\n    if digit % 2 == 0 {\n    \
    \    return digits(n / 10)\n    }\n\n    return digit * digits(n / 10)\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpowi5cpmv_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpowi5cpmv_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpowi5cpmv_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpowi5cpmv_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpowi5cpmv_test.go:49: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpowi5cpmv_test.go:49:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    out := 1\n    for\
    \ n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            out\
    \ *= digit\n        }\n        n /= 10\n    }\n    return out\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp1cb1cns3_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    count := 0\n  \
    \  sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 !=\
    \ 0 {\n            count++\n            sum *= digit\n        }\n        n /=\
    \ 10\n    }\n    if count == 0 {\n        return 0\n    }\n    return sum\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var (\n       \
    \ result, digit int\n    )\n    for n > 0 {\n        digit = n % 10\n        if\
    \ digit % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n\
    \    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp7vukgnzu_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp7vukgnzu_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp7vukgnzu_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp7vukgnzu_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp7vukgnzu_test.go:50: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp7vukgnzu_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n\n    var product int = 1\n    for n > 0 {\n        last\
    \ := n % 10\n        if last % 2 != 0 {\n            product *= last\n       \
    \ }\n        n /= 10\n    }\n\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpm8zefs39_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result = 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpns92a78v_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc6vgk2h6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpubnnef74_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    result := 1\n \
    \   for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n      \
    \      result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc0sefe5q_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    return n\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp0m8f67qu_test.go:40: expected '%!s(int=5)', got '%!s(int=54)'\n  \
    \  --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp0m8f67qu_test.go:40: expected\
    \ '%!s(int=1)', got '%!s(int=120)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp0m8f67qu_test.go:40: expected '%!s(int=5)', got '%!s(int=5014)'\n\
    \    --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp0m8f67qu_test.go:40:\
    \ expected '%!s(int=315)', got '%!s(int=98765)'\n    --- FAIL: TestDigits/test_num__5\
    \ (0.00s)\n        tmp0m8f67qu_test.go:40: expected '%!s(int=2625)', got '%!s(int=5576543)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp0m8f67qu_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=2468)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code here\n\
    \    var val int\n    for i := range(n) {\n        if(n[i] % 2 != 0) {\n     \
    \       val = val * n[i]\n        }\n    }\n    return val\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpidrjurnf_test.go:20:19: cannot range over (n) (variable of type int)

    /tmp/tmpidrjurnf_test.go:21:13: invalid operation: cannot index n (variable of
    type int)

    /tmp/tmpidrjurnf_test.go:22:26: invalid operation: cannot index n (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpvyw6h5c9_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // TODO: implement\
    \ this function\n    n_remainder := 0\n    n_quotient := 0\n    product := 1\n\
    \    for n > 0 {\n        n_remainder = n % 10\n        n = n / 10\n        if\
    \ n_remainder % 2 != 0 {\n            product = product * n_remainder\n      \
    \  }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mgdfero_test.go:20:5: n_quotient declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpvyw6h5c9_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n\treturn 0\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpqg0l1had_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpqg0l1had_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpqg0l1had_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpqg0l1had_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpqg0l1had_test.go:40: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpqg0l1had_test.go:40:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    return 1\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpn26f54pa_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpn26f54pa_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=1)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpn26f54pa_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpn26f54pa_test.go:40: expected\
    \ '%!s(int=315)', got '%!s(int=1)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpn26f54pa_test.go:40: expected '%!s(int=2625)', got '%!s(int=1)'\n\
    \    --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpn26f54pa_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n / 10 == 0\
    \ {\n        if n % 2 == 1 {\n            return n\n        } else {\n       \
    \     return 0\n        }\n    } else {\n        if n % 2 == 1 {\n           \
    \ return n % 10 * digits(n / 10)\n        } else {\n            return digits(n\
    \ / 10)\n        }\n    }\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var odd = 0\n \
    \   for n > 0 {\n        var d = n % 10\n        if d % 2 == 1 {\n           \
    \ odd *= 10\n            odd += d\n        }\n        n /= 10\n    }\n    var\
    \ result = 1\n    for odd > 0 {\n        result *= odd % 10\n        odd /= 10\n\
    \    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpr6guv1kc_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // >>> for i in\
    \ range(1,6):\n    // ...     print(i)\n    // ...\n    // 1\n    // 2\n    //\
    \ 3\n    // 4\n    // 5\n    product := 1\n    for n > 0 {\n        digit := n\
    \ % 10\n        if digit % 2 == 1 {\n            product *= digit\n        }\n\
    \        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpby5mbw0x_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    odd_digits := []int{1,\
    \ 3, 5, 7, 9}\n    product := 1\n    for n > 0 {\n        digit := n % 10\n  \
    \      n /= 10\n        if contains(odd_digits, digit) {\n            product\
    \ *= digit\n        }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_pyugq6_test.go:23:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n\n    }\n\n    result := digits(n / 10)\n    if n % 2 == 1 {\n\
    \        result *= n % 10\n    }\n    return result\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpg7zfxnrh_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      n = -n\n    }\n    if n < 10 {\n        return 0\n    }\n    m := 1\n \
    \   for n > 0 {\n        a := n % 10\n        if a % 2 == 1 {\n            m *=\
    \ a\n        }\n        n /= 10\n    }\n    return m\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpmjsy0lpe_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpmjsy0lpe_test.go:54: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var prod int =\
    \ 1\n    for {\n        digit := n % 10\n        if digit % 2 == 1 {\n       \
    \     prod *= digit\n        }\n        n /= 10\n        if n == 0 {\n       \
    \     break\n        }\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp4nvuc8vm_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // --- Place code\
    \ between here... ---\n    digits := []int{}\n    for n > 0 {\n        digits\
    \ = append(digits, n % 10)\n        n /= 10\n    }\n    product := 1\n    for\
    \ _, num := range digits {\n        if num % 2 != 0 {\n            product *=\
    \ num\n        }\n    }\n    if product == 1 {\n        return 0\n    }\n    return\
    \ product\n    // --- ...and here ---\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp05d740e9_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res int = 1\n\
    \    for n > 0 {\n        tmp := n % 10\n        if tmp % 2 != 0 {\n         \
    \   res *= tmp\n        }\n        n /= 10\n    }\n    return res\n}\n\ntype testCase\
    \ \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7b_t_erc_test.go:29:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // YOUR CODE HERE\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpugj2_yh8_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpugj2_yh8_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpugj2_yh8_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpugj2_yh8_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpugj2_yh8_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpugj2_yh8_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    digits := make([]int,\
    \ 0)\n    product := 1\n    for n > 0 {\n        last_digit := n % 10\n      \
    \  digits = append(digits, last_digit)\n        n = n / 10\n    }\n    for _,\
    \ digit := range digits {\n        if digit % 2 != 0 {\n            product *=\
    \ digit\n        }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp94n75aip_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var r int = 1\n\
    \    for n > 0 {\n        if n % 2 == 1 {\n            r *= n % 10\n        }\n\
    \        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpqdmgt68d_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    var prod int = 1\n    for n > 0 {\n        d := n\
    \ % 10\n        if d % 2 == 1 {\n            prod *= d\n        }\n        n /=\
    \ 10\n    }\n    return prod\n}\n\ntype testpair \nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt9sivnyh_test.go:32:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        r := n % 10\n        if r % 2 != 0 {\n       \
    \     product *= r\n        }\n        n /= 10\n    }\n    return product\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpmof92s2s_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code goes\
    \ here\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp5elos9zt_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp5elos9zt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp5elos9zt_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp5elos9zt_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp5elos9zt_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp5elos9zt_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    res := 1\n    for\
    \ n > 0 {\n        n, d := n/10, n%10\n        if d%2 != 0 {\n            res\
    \ *= d\n        }\n    }\n    return res\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5t1c685_test.go:20:9: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    divisor := 1\n\
    \    ret := 1\n    for {\n        cur_digit := (n / divisor) % 10\n        if\
    \ cur_digit == 0 {\n            break\n        } else if cur_digit % 2 == 1 {\n\
    \            ret *= cur_digit\n        }\n        divisor *= 10\n    }\n    return\
    \ ret\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpk_fg_m3r_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmpk_fg_m3r_test.go:51: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    if n == 0 {\n        return 0\n    }\n    for n > 0 {\n        remainder\
    \ := n % 10\n        if remainder % 2 != 0 {\n            product *= remainder\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpenqxcz65_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    return 0\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpw1rlw9sn_test.go:40: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpw1rlw9sn_test.go:40: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpw1rlw9sn_test.go:40:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc6vgk2h6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    odd_digits := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n     \
    \       odd_digits *= digit\n        }\n        n /= 10\n    }\n    return odd_digits\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpa96xkur7_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    total := 1\n  \
    \  for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n       \
    \     total *= digit\n        }\n        n /= 10\n    }\n    return total\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpgvd27gi1_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpz2ob9n4x_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    res := 1\n    for\
    \ n > 0 {\n        if n % 2 == 1 {\n            res *= n % 10\n        }\n   \
    \     n /= 10\n    }\n    return res\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp7_bq125x_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\ntype Test \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmdctm3iq_test.go:29:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    odd := true\n \
    \   product := 1\n    for n > 0 {\n        digit := n % 10\n        if odd {\n\
    \            product *= digit\n        }\n        odd = !odd\n        n /= 10\n\
    \    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp5tnq4i8t_test.go:50: expected '%!s(int=5)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp5tnq4i8t_test.go:50: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp5tnq4i8t_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp5tnq4i8t_test.go:50: expected\
    \ '%!s(int=2625)', got '%!s(int=525)'\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp5tnq4i8t_test.go:50: expected '%!s(int=0)', got '%!s(int=32)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res int\n \
    \   for n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n            res\
    \ = res * 10 + d\n        }\n        n /= 10\n    }\n    return res\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpusw5yqv8_test.go:48: expected '%!s(int=5)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpusw5yqv8_test.go:48: expected\
    \ '%!s(int=315)', got '%!s(int=579)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpusw5yqv8_test.go:48: expected '%!s(int=2625)', got '%!s(int=35755)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    prod := 1\n   \
    \ for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n        \
    \    prod *= digit\n        }\n        n /= 10\n    }\n    return prod\n}\n\n\
    type TestCase \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqbtmil4h_test.go:29:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Fill in your\
    \ code here.\n    var product int = 1\n    for n > 0 {\n        rem := n % 10\n\
    \        if rem % 2 != 0 {\n            product *= rem\n        }\n        n /=\
    \ 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpmef3z6qm_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpvyw6h5c9_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpvyw6h5c9_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpvyw6h5c9_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    r := 1\n    for\
    \ n > 0 {\n        m := n % 10\n        if m % 2 == 1 {\n            r *= m\n\
    \        }\n        n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmplytjz1t2_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        if (n % 2) == 1 {\n            product *= n % 10\n \
    \       }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmphol61py7_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n   \
    \     }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpl4bl68hg_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var val int\n \
    \   for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n      \
    \      val *= digit\n        }\n        n /= 10\n    }\n    return val\n}\n\n\
    func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpkm21xfdo_test.go:48: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpkm21xfdo_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpkm21xfdo_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpkm21xfdo_test.go:48: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpkm21xfdo_test.go:48: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpkm21xfdo_test.go:48:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    prod := 1\n   \
    \ for n > 0 {\n        if n % 2 == 1 {\n            prod *= n % 10\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpn4fn1jhj_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074572
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    res := 1\n    for\
    \ n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n            res *= d\n\
    \        }\n        n /= 10\n    }\n    return res\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmppcsnknj6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    for\
    \ n > 0 {\n        a := n % 10\n        if a % 2 != 0 {\n            sum *= a\n\
    \        }\n        n /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp3jpn9bcq_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    // if the current digit is odd, multiply it with\
    \ the product of odd digits\n    // in the number remaining after removing the\
    \ current digit\n    if n % 2 != 0 {\n        return (n % 10) * digits(n / 10)\n\
    \    }\n    // if the current digit is even, just return the product of odd digits\n\
    \    // in the number remaining after removing the current digit\n    return digits(n\
    \ / 10)\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp1q9bqogj_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp1q9bqogj_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp1q9bqogj_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp1q9bqogj_test.go:50: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp1q9bqogj_test.go:50: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp1q9bqogj_test.go:50:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    out := 1\n    if\
    \ n == 0 {\n        return 0\n    }\n    for n > 0 {\n        digit := n % 10\n\
    \        if digit % 2 != 0 {\n            out *= digit\n        }\n        n /=\
    \ 10\n    }\n    return out\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpnf36lff0_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    if n % 2 == 1 {\n        return n % 10 * digits(n\
    \ / 10)\n    }\n    return digits(n / 10)\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmplcpfegs3_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmplcpfegs3_test.go:46: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmplcpfegs3_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmplcpfegs3_test.go:46: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmplcpfegs3_test.go:46: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmplcpfegs3_test.go:46:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    digit := n % 10\n\
    \    product := digit\n    if digit % 2 == 0 {\n        product = 0\n    }\n \
    \   quotient := n / 10\n    if quotient > 0 {\n        product *= digits(quotient)\n\
    \    }\n    return product\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__1 (0.00s)\n\
    \        tmp1k52aq6d_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__2 (0.00s)\n        tmp1k52aq6d_test.go:49: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmp1k52aq6d_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmp1k52aq6d_test.go:49: expected\
    \ '%!s(int=315)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmp1k52aq6d_test.go:49: expected '%!s(int=2625)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    sum := 1\n    num\
    \ := n\n    for num > 0 {\n        if num % 2 != 0 {\n            sum *= num %\
    \ 10\n        }\n        num /= 10\n    }\n    return sum\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp3cm6svva_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 0 {\n  \
    \      return 0\n    }\n    result := 1\n    for ; n > 0; n /= 10 {\n        if\
    \ n % 2 == 1 {\n            result *= n % 10\n        }\n    }\n    return result\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp2hjguwpl_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    var remainder = n % 10\n    if remainder % 2 == 0\
    \ {\n        return digits(n / 10)\n    }\n    return remainder * digits(n / 10)\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpzr564194_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpzr564194_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpzr564194_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpzr564194_test.go:47: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpzr564194_test.go:47: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpzr564194_test.go:47:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    count := 0\n  \
    \  prod := 1\n    for n > 0 {\n        cur := n % 10\n        if cur % 2 != 0\
    \ {\n            prod *= cur\n            count++\n        }\n        n /= 10\n\
    \    }\n    if count > 0 {\n        return prod\n    }\n    return 0\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    r := 1\n    for\
    \ n > 0 {\n        if n % 2 == 1 {\n            r *= n % 10\n        }\n     \
    \   n /= 10\n    }\n    return r\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpa6te8sok_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Insert your\
    \ code here //\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate\
    \ := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp61g59ky3_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp61g59ky3_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp61g59ky3_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp61g59ky3_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp61g59ky3_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp61g59ky3_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // iterate through\
    \ the numbers\n    // create a string to hold values \n    var s string\n    s\
    \ = \"\"\n    // create a string of the numbers inputed\n    for i := n; i > 0;\
    \ i = i / 10 {\n        s = string(i % 10) + s\n    }\n    return s\n}\n\nfunc\
    \ TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgwmkr1e_test.go:26:12: cannot use s (variable of type string) as type
    int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    fmt.Println(n)\n\
    \    odd_digits := []int{}\n    if n / 10 == 0 {\n        if n % 2 == 1 {\n  \
    \          return n\n        } else {\n            return 0\n        }\n    }\n\
    \    for i := 10; i <= n; i *= 10 {\n        digit := (n / i) % 10\n        if\
    \ digit % 2 == 1 {\n            odd_digits = append(odd_digits, digit)\n     \
    \   }\n    }\n    fmt.Println(odd_digits)\n    if len(odd_digits) == 0 {\n   \
    \     return 0\n    }\n    sum := 1\n    for _, v := range odd_digits {\n    \
    \    sum *= v\n    }\n    return sum\n}\n\nfunc TestDigits(t *testing.T) {\n \
    \ candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "5\n54\n[5]\n120\n[1]\n5014\n[1 5]\n98765\n[7 9]\n5576543\n[5 7 5 5]\n2468\n\
    []\n--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp4xix9zw6_test.go:63: expected '%!s(int=315)', got '%!s(int=63)'\n\
    \    --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp4xix9zw6_test.go:63:\
    \ expected '%!s(int=2625)', got '%!s(int=875)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n       \
    \     product *= d\n        }\n        n /= 10\n    }\n    return product\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpd41c0pde_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n\tr := 1\n\tfor n >\
    \ 0 {\n\t\tm := n % 10\n\t\tif m % 2 == 1 {\n\t\t\tr *= m\n\t\t}\n\t\tn /= 10\n\
    \t}\n\treturn r\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpqcgkk5xf_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpc6vgk2h6_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for ; n > 0; n /= 10 {\n        if n % 2 == 1 {\n            product *= n\
    \ % 10\n        }\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpear6coo__test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Create a variable\
    \ for the odd numbers\n    var odds int\n    // Loop through all the digits\n\
    \    for n > 0 {\n        // Find the value of the current digit\n        remainder\
    \ := n % 10\n        // Determine if the digit is odd\n        if remainder %\
    \ 2 != 0 {\n            // If the digit is odd, add the digit to the odd numbers\
    \ variable\n            odds = odds * 10 + remainder\n        }\n        // Remove\
    \ the current digit from the number\n        n = n / 10\n    }\n    // Return\
    \ the value of the odd numbers variable\n    return odds\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__3 (0.00s)\n\
    \        tmpzjiu_miv_test.go:55: expected '%!s(int=5)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestDigits/test_num__4 (0.00s)\n        tmpzjiu_miv_test.go:55: expected\
    \ '%!s(int=315)', got '%!s(int=579)'\n    --- FAIL: TestDigits/test_num__5 (0.00s)\n\
    \        tmpzjiu_miv_test.go:55: expected '%!s(int=2625)', got '%!s(int=35755)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       return n % 2\n    }\n    prod := 1\n    for n > 0 {\n        digit :=\
    \ n % 10\n        if digit % 2 == 1 {\n            prod *= digit\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n\nfunc TestDigits(t *testing.T) {\n\
    \  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual: candidate(120),\
    \ expected: 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual:\
    \ candidate(98765), expected: 315 },\n     { actual: candidate(5576543), expected:\
    \ 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp5smqk363_test.go:51: expected '%!s(int=5)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestDigits/test_num__6 (0.00s)\n        tmp5smqk363_test.go:51: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n\n    digit := n % 10\n    if digit % 2 == 0 {\n    \
    \    return digits(n / 10)\n    } else {\n        return digit * digits(n / 10)\n\
    \    }\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmp_n8ffzjx_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmp_n8ffzjx_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmp_n8ffzjx_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmp_n8ffzjx_test.go:49: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmp_n8ffzjx_test.go:49: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmp_n8ffzjx_test.go:49:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n / 10 == 0\
    \ {\n        if n % 2 == 1 {\n            return n\n        } else {\n       \
    \     return 0\n        }\n    } else {\n        if n % 2 == 1 {\n           \
    \ return digits(n / 10) * (n % 10)\n        } else {\n            return digits(n\
    \ / 10)\n        }\n    }\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Write your code\
    \ here\n    // Good luck!\n    var res int = 1\n    for n > 0 {\n        if (n\
    \ % 10) % 2 != 0 {\n            res *= n % 10\n        }\n        n /= 10\n  \
    \  }\n    return res\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmppqjlisxt_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n   \
    \     }\n        n /= 10\n    }\n    return product\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpl4bl68hg_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\
    \ = 1\n    for n > 0 {\n        r := n % 10\n        if r % 2 != 0 {\n       \
    \     product *= r\n        }\n        n /= 10\n    }\n    return product\n}\n\
    \nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpmof92s2s_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    var prod int = 1\n    var m int = n\n    var digit\
    \ int\n    for m > 0 {\n        digit = m % 10\n        if digit % 2 == 1 {\n\
    \            prod *= digit\n        }\n        m /= 10\n    }\n    return prod\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp9eceyng9_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var res, rem int\n\
    \    var oddDigits, evenDigits bool\n    for n > 0 {\n        rem = n % 10\n \
    \       if rem % 2 == 0 {\n            evenDigits = true\n        } else {\n \
    \           oddDigits = true\n            res *= rem\n        }\n        n /=\
    \ 10\n    }\n    if oddDigits && evenDigits {\n        return res\n    }\n   \
    \ return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54),\
    \ expected: 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual:\
    \ candidate(5014), expected: 5 },\n     { actual: candidate(98765), expected:\
    \ 315 },\n     { actual: candidate(5576543), expected: 2625 },\n     { actual:\
    \ candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpmpazk0y1_test.go:55: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpmpazk0y1_test.go:55: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpmpazk0y1_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpmpazk0y1_test.go:55: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpmpazk0y1_test.go:55: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpmpazk0y1_test.go:55:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    p := 1\n    for\
    \ ; n > 0; n /= 10 {\n        if d := n % 10; d % 2 != 0 {\n            p *= d\n\
    \        }\n    }\n    return p\n}\n\ntype Test \nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ho09c7i_test.go:27:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var digits []int\n\
    \    var result int = 1\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            digits = append(digits, digit)\n        }\n  \
    \      n /= 10\n    }\n    for _, digit := range digits {\n        result *= digit\n\
    \    }\n    return result\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate :=\
    \ digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     {\
    \ actual: candidate(54), expected: 5 },\n     { actual: candidate(120), expected:\
    \ 1 },\n     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmpe40bxprm_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    // Write your solution\
    \ here.\n    return 0\n}\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 5 },\n     { actual:\
    \ candidate(54), expected: 5 },\n     { actual: candidate(120), expected: 1 },\n\
    \     { actual: candidate(5014), expected: 5 },\n     { actual: candidate(98765),\
    \ expected: 315 },\n     { actual: candidate(5576543), expected: 2625 },\n   \
    \  { actual: candidate(2468), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmphhai_psg_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmphhai_psg_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmphhai_psg_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmphhai_psg_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmphhai_psg_test.go:41: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmphhai_psg_test.go:41:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n == 0 {\n \
    \       return 0\n    }\n    return (n % 10) * digits(n / 10)\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__0 (0.00s)\n\
    \        tmpz7pa4bt4_test.go:43: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__1 (0.00s)\n        tmpz7pa4bt4_test.go:43: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__2 (0.00s)\n\
    \        tmpz7pa4bt4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestDigits/test_num__3 (0.00s)\n        tmpz7pa4bt4_test.go:43: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestDigits/test_num__4 (0.00s)\n\
    \        tmpz7pa4bt4_test.go:43: expected '%!s(int=315)', got '%!s(int=0)'\n \
    \   --- FAIL: TestDigits/test_num__5 (0.00s)\n        tmpz7pa4bt4_test.go:43:\
    \ expected '%!s(int=2625)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 0
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    if n < 10 {\n \
    \       if n % 2 == 1 {\n            return n\n        } else {\n            return\
    \ 0\n        }\n    }\n    digit := n % 10\n    if digit % 2 == 1 {\n        return\
    \ digit * digits(n / 10)\n    } else {\n        return digits(n / 10)\n    }\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        n, r := n/10, n%10\n        if r%2 == 1 {\n        \
    \    product *= r\n        }\n    }\n    return product\n}\n\nfunc TestDigits(t\
    \ *testing.T) {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9i9bj1ds_test.go:20:9: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    res := 1\n    for\
    \ n > 0 {\n        if (n % 10) % 2 != 0 {\n            res *= n % 10\n       \
    \ }\n        n /= 10\n    }\n    return res\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp5naw9znx_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    product := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n\nfunc TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
    \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
    \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
    \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp_oy9gcjr_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer n, return the product of the odd digits.\n// Return\
    \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
    // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var result int\
    \ = 1\n    for ; n > 0; n /= 10 {\n        if n % 2 == 1 {\n            result\
    \ *= n % 10\n        }\n    }\n    return result\n}\n\nfunc TestDigits(t *testing.T)\
    \ {\n  candidate := digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 5 },\n     { actual: candidate(54), expected: 5 },\n     { actual:\
    \ candidate(120), expected: 1 },\n     { actual: candidate(5014), expected: 5\
    \ },\n     { actual: candidate(98765), expected: 315 },\n     { actual: candidate(5576543),\
    \ expected: 2625 },\n     { actual: candidate(2468), expected: 0 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDigits (0.00s)\n    --- FAIL: TestDigits/test_num__6 (0.00s)\n\
    \        tmp3ffp39ym_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074598
