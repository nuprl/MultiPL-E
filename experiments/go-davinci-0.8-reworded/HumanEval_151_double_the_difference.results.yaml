language: go_test.go
name: HumanEval_151_double_the_difference
results:
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, n := range lst {\n        if int(n)\
    \ != n || n < 0 {\n            continue\n        }\n        sum += int(n) * int(n)\n\
    \    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsmy4h_9_test.go:22:22: invalid operation: int(n) != n (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum float64\n    for _, x := range lst {\n       \
    \ if x == int(x) && x > 0 {\n            sum += x*x\n        }\n    }\n    return\
    \ int(sum)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl0f9vg__test.go:22:17: invalid operation: x == int(x) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return -1\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__0\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__1 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=25)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__2\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=165)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    var oddsum\
    \ int\n    for _, v := range lst {\n        if (int(v) % 2 != 0) && (v >= 0) {\n\
    \            oddsum += int(v) * int(v)\n        }\n    }\n    return oddsum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp10ydhbbt_test.go:51: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp10ydhbbt_test.go:51:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp10ydhbbt_test.go:51: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // write a body for this function.\n    return 0\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmptpo2o5kv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmptpo2o5kv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmptpo2o5kv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpzmz0hx2x_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpzmz0hx2x_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpzmz0hx2x_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum, total int\n    for _, value := range lst {\n\
    \        if (value % 2 == 1 && value > 0) {\n            sum += value * value\n\
    \        }\n    }\n    total = sum * 2\n    return total\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcq7w3xbr_test.go:22:13: invalid operation: operator % not defined on value
    (variable of type float64)

    /tmp/tmpcq7w3xbr_test.go:23:13: invalid operation: sum += value * value (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    squares, sum := make([]int, 0), 0\n    for _, num := range\
    \ lst {\n        if num > 0 && num == float64(int(num)) {\n            squares\
    \ = append(squares, int(num * num))\n        }\n    }\n    for _, val := range\
    \ squares {\n        sum += val\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkrnw6x47_test.go:51: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpkrnw6x47_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var squared_sum int = 0\n    for _, num := range lst {\n\
    \        if num > 0 && num == float64(int(num)) {\n            if int(num) % 2\
    \ == 1 {\n                squared_sum += int(num) * int(num)\n            }\n\
    \        }\n    }\n    return squared_sum * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmptx8j101t_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmptx8j101t_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmptx8j101t_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ int(num) > 0 && float64(int(num)) == num {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmprca3zqf8_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmprca3zqf8_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmprca3zqf8_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return -1\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__0\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__1 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=25)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__2\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=165)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return -1\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__0\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__1 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=25)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__2\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpue6g0wq__test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=-1)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpue6g0wq__test.go:42: expected '%!s(int=165)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\treturn 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpc9djiskl_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpc9djiskl_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpc9djiskl_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, i := range lst {\n        if i\
    \ > 0 && float64(int(i)) == i {\n            if int(i) % 2 == 1 {\n          \
    \      sum += int(i) * int(i)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmponc07fvr_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmponc07fvr_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmponc07fvr_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, val := range lst {\n        if val\
    \ > 0 && int(val) == val {\n            sum += int(val) * int(val)\n        }\n\
    \    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpja_o2bru_test.go:22:35: invalid operation: int(val) == val (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if float64(int(num))\
    \ == num && num > 0 {\n            sum += int(num) * int(num)\n        }\n   \
    \ }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpg_ggsyry_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpg_ggsyry_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpg_ggsyry_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpg_ggsyry_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // REPLACE pass with your code\n    return 0\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp_1sss3vv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp_1sss3vv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp_1sss3vv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    /* Your code goes here */\n    var pos, neg float64\n\
    \    for _, x := range lst {\n        switch {\n        case x > 0:\n        \
    \    pos += x\n        case x < 0:\n            neg += x\n        }\n    }\n \
    \   return int(2 * (pos + neg))\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmmbcjy7d_test.go:52: expected '%!s(int=25)', got '%!s(int=18)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__2 (0.00s)\n        tmpmmbcjy7d_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestDouble_The_Difference/test_num__3\
    \ (0.00s)\n        tmpmmbcjy7d_test.go:52: expected '%!s(int=0)', got '%!s(int=-120)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpmmbcjy7d_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpmmbcjy7d_test.go:52: expected '%!s(int=34)', got '%!s(int=16)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpmmbcjy7d_test.go:52:\
    \ expected '%!s(int=165)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    var ret int = 0\n    for _,v :=\
    \ range lst {\n        if v >= 0 && v == float64(int(v)) {\n            if int(v)\
    \ % 2 == 1 {\n                ret += int(v * v)\n            }\n        }\n  \
    \  }\n    return ret\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result float64 = 0\n    for _, v := range lst {\n\
    \        if int(v) % 2 != 0 && v > 0 {\n            result += v * v\n        }\n\
    \    }\n    return int(result)\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var (\n        total int\n        length int\n    )\n\
    \    length = len(lst)\n    if length == 0 {\n        return 0\n    }\n    for\
    \ i := 0; i < length; i++ {\n        if lst[i] >= 0 && lst[i] == float64(int(lst[i]))\
    \ {\n            if int(lst[i]) % 2 == 1 {\n                total += int(lst[i])\n\
    \            }\n        }\n    }\n    return total * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmphy8y7nqt_test.go:57: expected '%!s(int=25)', got '%!s(int=10)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmphy8y7nqt_test.go:57:\
    \ expected '%!s(int=34)', got '%!s(int=16)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmphy8y7nqt_test.go:57: expected '%!s(int=165)', got '%!s(int=50)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n            \
    \    sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp4558c8ai_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return int(float64(3) * float64(3))\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__0\
    \ (0.00s)\n        tmprtx0pkbc_test.go:42: expected '%!s(int=0)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__1 (0.00s)\n        tmprtx0pkbc_test.go:42:\
    \ expected '%!s(int=25)', got '%!s(int=9)'\n    --- FAIL: TestDouble_The_Difference/test_num__2\
    \ (0.00s)\n        tmprtx0pkbc_test.go:42: expected '%!s(int=0)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmprtx0pkbc_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=9)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmprtx0pkbc_test.go:42: expected '%!s(int=0)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmprtx0pkbc_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=9)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmprtx0pkbc_test.go:42: expected '%!s(int=165)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result float64\n    for _, v := range lst {\n    \
    \    fmt.Println(v)\n        if v > 0 && v%1 == 0 {\n            result += v *\
    \ v\n        }\n    }\n    return int(result)\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1c_bxgk_test.go:23:21: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7y2p2rl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var total int = 0\n    for _, num := range lst {\n   \
    \     if int(num)%2 == 1 {\n            total += int(num*num)\n        }\n   \
    \ }\n    return total*2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmplxu48w04_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmplxu48w04_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmplxu48w04_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7y2p2rl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, f := range lst {\n        if f\
    \ >= 0 && float64(int(f)) == f {\n            if int(f) % 2 == 1 {\n         \
    \       sum += int(f) * int(f)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp_1385v9j_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp_1385v9j_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp_1385v9j_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if int(num)\
    \ % 2 == 1 {\n            sum += int(num) * int(num)\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpde72llt7_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpde72llt7_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpde72llt7_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num != 0 && (num-math.Floor(num)) == 0 && num > 0 {\n            sum +=\
    \ (int(num)*int(num))\n        }\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwizk63dd_test.go:22:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, x := range lst {\n        if x ==\
    \ float64(int(x)) && x > 0 {\n            if x % 2 == 1 {\n                sum\
    \ += int(x * x)\n            }\n        }\n    }\n    return sum * 2\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkcr5fg5t_test.go:23:16: invalid operation: operator % not defined on x
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // ints := make([]int, len(lst))\n    // for i, v := range\
    \ lst {\n    //     ints[i] = int(v)\n    // }\n    ints := toInt(lst)\n    sum\
    \ := 0\n    for _, v := range ints {\n        if v > 0 && isOdd(v) {\n       \
    \     sum += v*v\n        }\n    }\n    return 2*sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpli52j6tm_test.go:24:13: undefined: toInt

    /tmp/tmpli52j6tm_test.go:27:21: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // * Your code here *\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmptwsbp527_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmptwsbp527_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmptwsbp527_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    res := 0\n    for _, x := range lst {\n        if x >\
    \ 0 && x == float64(int(x)) {\n            res += int(x) * int(x)\n        }\n\
    \    }\n    return res * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmplswhwni4_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmplswhwni4_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmplswhwni4_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmplswhwni4_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, n := range lst {\n        n =\
    \ n * n\n        fmt.Println(n)\n        if int(n) % 2 == 1 {\n            sum\
    \ += int(n)\n        }\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "25\n16\n0.010000000000000002\n0.04000000000000001\n0.09\n100\n400\n900\n\
    1\n4\n64\n0.04000000000000001\n9\n25\n81\n49\n25\n9\n1\n1\n9\n25\n49\n81\n---\
    \ FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpcwm5u3hs_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpcwm5u3hs_test.go:50:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // How do you check if a number is odd or even?\n    //\
    \ If you divide it by 2 and the remainder is 1, it's odd.\n    // Use the modulo\
    \ operator to find the remainder.\n    // So for example, 1 % 2 == 1, so 1 is\
    \ odd.\n    // 2 % 2 == 0, so 2 is even.\n    // 3 % 2 == 1, so 3 is odd.\n  \
    \  // 4 % 2 == 0, so 4 is even.\n    // 5 % 2 == 1, so 5 is odd.\n    // To check\
    \ if a number is not an integer, check if its\n    // absolute value is less than\
    \ 0.000001 away from an integer.\n    // If a list is empty, its length is 0.\n\
    \    // Use a \"for\" loop to loop through the list.\n    return 0\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpy7ynwnt8_test.go:54: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpy7ynwnt8_test.go:54:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpy7ynwnt8_test.go:54: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\tvar sum, diff int = 0, 0\n\tfor _,v := range lst {\n\t\t\
    if v - float64(int(v)) == 0 {\n\t\t\tif v > 0 {\n\t\t\t\tif int(v) % 2 == 1 {\n\
    \t\t\t\t\tsum += int(v) * int(v)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdiff = sum\
    \ - int(lst[0])\n\treturn diff * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\npanic: runtime error: index\
    \ out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out\
    \ of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.double_the_difference(...)\n\t/tmp/tmpq1_wbmmv_test.go:30\n\
    command-line-arguments_test.TestDouble_The_Difference(0x0?)\n\t/tmp/tmpq1_wbmmv_test.go:41\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\treturn 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpc9djiskl_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpc9djiskl_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpc9djiskl_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum_squares int = 0\n    for _, e := range lst {\n\
    \        if int(e) % 2 == 1 {\n            sum_squares += int(e) * int(e)\n  \
    \      }\n    }\n    return sum_squares * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp06q6ozah_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp06q6ozah_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp06q6ozah_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    res := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            res += int(v) * int(v)\n        }\n\
    \    }\n    return res * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmplhaax6ui_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmplhaax6ui_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmplhaax6ui_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmplhaax6ui_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if int(num)\
    \ == num && num > 0 {\n            if int(num) % 2 == 1 {\n                sum\
    \ += int(num) * int(num)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpld5c2e_test.go:22:24: invalid operation: int(num) == num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, n := range lst {\n       \
    \ if n > 0 && int(n) == n {\n            if int(n) % 2 == 1 {\n              \
    \  sum += int(n) * int(n)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9w8n9ei__test.go:22:31: invalid operation: int(n) == n (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // YOUR CODE HERE\n    res := 0\n    for _, v := range\
    \ lst {\n        if v > 0 && int(v) == v {\n            if int(v) % 2 == 1 {\n\
    \                res += int(v * v)\n            }\n        }\n    }\n    return\
    \ res * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpciqfv4br_test.go:23:31: invalid operation: int(v) == v (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, x := range lst {\n        i := int(x)\n\
    \        if x == float64(i) && i >= 0 && i % 2 == 1 {\n            sum += i *\
    \ i\n        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp89yqhcid_test.go:49: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp89yqhcid_test.go:49:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp89yqhcid_test.go:49: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var odd_squares float64 = 0\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            continue\n        }\n        var v_mod float64\
    \ = v % 2\n        if v_mod == 1 || v_mod == -1 {\n            odd_squares +=\
    \ v*v\n        }\n    }\n    return int(odd_squares * 2)\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzog89m_test.go:25:29: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, value := range lst {\n       \
    \ if int(value) % 2 != 0 && value > 0 {\n            sum += int(value) * int(value)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpbdek82lz_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpbdek82lz_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpbdek82lz_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    total := 0\n\n    for _, n := range lst {\n        if\
    \ n > 0 && n == float64(int(n)) {\n            if n % 2 == 1 {\n             \
    \   total += int(n * n)\n            }\n        }\n    }\n\n    return total *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqmshr7u_test.go:24:16: invalid operation: operator % not defined on n
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, n := range lst {\n        if n >\
    \ 0 && n == float64(int(n)) {\n            if n % 2 == 1 {\n                sum\
    \ += int(n) * int(n)\n            }\n        }\n    }\n    return sum * 2\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4b726y0_test.go:23:16: invalid operation: operator % not defined on n
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v !=\
    \ 0 && v != int(v) {\n            continue\n        }\n        if v != 0 && v\
    \ < 0 {\n            continue\n        }\n        sum += int(v) * int(v)\n   \
    \ }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6wuz05mz_test.go:22:27: invalid operation: v != int(v) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < 0\
    \ {\n            lst[i] = 0\n        }\n    }\n    odd_sum := 0\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] == float64(int(lst[i])) {\n      \
    \      if int(lst[i]) % 2 == 1 {\n                odd_sum += int(lst[i]) * int(lst[i])\n\
    \            }\n        }\n    }\n    return odd_sum * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpzj953k1a_test.go:55: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpzj953k1a_test.go:55:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpzj953k1a_test.go:55: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\tvar squares, sum int\n\tfor _, num := range lst {\n\t\t\
    if num >= 0 && num == float64(int(num)) {\n\t\t\tsum += int(num)\n\t\t\tsquares\
    \ += int(num) * int(num)\n\t\t}\n\t}\n\treturn 2 * (squares - sum)\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmptdtiotdx_test.go:49: expected '%!s(int=25)', got '%!s(int=64)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmptdtiotdx_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=112)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmptdtiotdx_test.go:49: expected '%!s(int=34)', got '%!s(int=52)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmptdtiotdx_test.go:49:\
    \ expected '%!s(int=165)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum float64 = 0\n    var square float64 = 0\n    for\
    \ _, value := range lst {\n        if (value % 2 != 0) && (value > 0) {\n    \
    \        square = value * value\n            sum += square\n        }\n    }\n\
    \    return int(sum * 2)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31glgch4_test.go:23:13: invalid operation: operator % not defined on value
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    l_len := len(lst)\n    for i := 0; i < l_len;\
    \ i++ {\n        num := lst[i]\n        if num > 0 && num == float64(int(num))\
    \ {\n            sum += int(num) * int(num)\n        }\n    }\n    return 2 *\
    \ sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmphsplzjct_test.go:50: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmphsplzjct_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmphsplzjct_test.go:50: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmphsplzjct_test.go:50:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum_squares_odd int\n    for _, i := range lst {\n\
    \        if is_odd(i) && is_not_negative(i) && is_integer(i) {\n            sum_squares_odd\
    \ += square(int(i))\n        }\n    }\n    if len(lst) >= 2 {\n        return\
    \ (2 * (sum_squares_odd))\n    }\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa02cmwf7_test.go:22:12: undefined: is_odd

    /tmp/tmpa02cmwf7_test.go:22:25: undefined: is_not_negative

    /tmp/tmpa02cmwf7_test.go:22:47: undefined: is_integer

    /tmp/tmpa02cmwf7_test.go:23:32: undefined: square

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var odd_square_sum = 0\n    for _, i := range lst {\n\
    \        if i > 0 && i == float64(int(i)) {\n            if int(i) % 2 == 1 {\n\
    \                odd_square_sum += int(i) * int(i)\n            }\n        }\n\
    \    }\n    return 2 * odd_square_sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmplv8wb5e0_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmplv8wb5e0_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmplv8wb5e0_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    diff_double := 0\n    for _, elt := range lst {\n    \
    \    if elt > 0 && elt == float64(int(elt)) {\n            diff_double += int(elt)\
    \ * int(elt)\n        }\n    }\n    return diff_double\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp7p64_q5t_test.go:48: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp7p64_q5t_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7y2p2rl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var squares []float64\n    for _, i := range lst {\n \
    \       if i >= 0 && i == float64(int(i)) {\n            squares = append(squares,\
    \ i * i)\n        }\n    }\n    if len(squares) > 0 {\n        return int(squares[0]\
    \ - squares[len(squares) - 1])\n    }\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpgtbjq7ld_test.go:51: expected '%!s(int=25)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpgtbjq7ld_test.go:51:\
    \ expected '%!s(int=34)', got '%!s(int=-16)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpgtbjq7ld_test.go:51: expected '%!s(int=165)', got '%!s(int=-80)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int = 0\n    for _, value := range lst {\n\
    \        if value > 0 && float64(int(value)) == value {\n            if int(value)\
    \ % 2 == 1 {\n                result += int(value) * int(value)\n            }\n\
    \        }\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpzl5j4s7r_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpzl5j4s7r_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpzl5j4s7r_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\t\n\tvar odd_squares []float64\n\t\n\tfor _, num := range\
    \ lst {\n\t\tif num >= 0 && num == float64(int(num)) {\n\t\t\tif num % 2 == 1\
    \ {\n\t\t\t\todd_squares = append(odd_squares, num * num)\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\treturn int(Sum(odd_squares))\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjjqjpig_test.go:25:7: invalid operation: operator % not defined on num
    (variable of type float64)

    /tmp/tmpyjjqjpig_test.go:31:13: undefined: Sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    if lst == nil {\n        return 0\n    }\n    val := 0\n\
    \    for _, x := range lst {\n        if int(x)%2 == 1 {\n            val += int(x*x)\n\
    \        }\n    }\n    return val\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    if len(lst) == 0 {\n        return 0\n    }\n\n    var\
    \ total float64\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v))\
    \ {\n            total += v * v\n        }\n    }\n\n    return int(total * 2)\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpm2qmrokz_test.go:53: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpm2qmrokz_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpm2qmrokz_test.go:53: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpm2qmrokz_test.go:53:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // TODO: complete the function body\n    return 0\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpfnl7ykhy_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpfnl7ykhy_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpfnl7ykhy_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var res int\n    for _, num := range lst {\n        if\
    \ num == float64(int(num)) && num > 0 {\n            res += int(num * num)\n \
    \       }\n    }\n    return res * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpd5c3in8q_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpd5c3in8q_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpd5c3in8q_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpd5c3in8q_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\treturn 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpc9djiskl_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpc9djiskl_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpc9djiskl_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Start coding here\n    var n int\n    for _, x := range\
    \ lst {\n        if int(x) == x && x > 0 {\n            n += (int(x) * int(x))\n\
    \        }\n    }\n    return n * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_vlgu05_test.go:23:22: invalid operation: int(x) == x (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum = 0\n    var square = 0\n    for _, v := range\
    \ lst {\n        if float64(int(v)) == v && v >= 0 {\n            sum += int(v)\n\
    \            square += int(v * v)\n        }\n    }\n    return 2 * (sum * sum\
    \ - square)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp9i_cdcd1_test.go:50: expected '%!s(int=25)', got '%!s(int=80)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp9i_cdcd1_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=60)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp9i_cdcd1_test.go:50: expected '%!s(int=165)', got '%!s(int=920)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, i := range lst {\n        if i\
    \ > 0 && int(i) == i {\n            if int(i) % 2 == 1 {\n                sum\
    \ += int(i) * int(i)\n            }\n        }\n    }\n    return sum * 2\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp556y7rqk_test.go:22:31: invalid operation: int(i) == i (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    result := 0\n    for _, val := range lst {\n        if\
    \ int(val) == val && val >= 0 {\n            if int(val) % 2 == 1 {\n        \
    \        result += int(val * val)\n            }\n        }\n    }\n    return\
    \ result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vh2kjl4_test.go:22:24: invalid operation: int(val) == val (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, n := range lst {\n        if int(n)\
    \ % 2 == 1 {\n            sum += int(n) * int(n)\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp4myfd2fy_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp4myfd2fy_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp4myfd2fy_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    res := 0\n    for _, val := range lst {\n        if val\
    \ < 0 || float64(int(val)) != val {\n            continue\n        }\n       \
    \ if int(val) % 2 == 1 {\n            res += int(val * val)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var total int\n    for _, value := range lst {\n     \
    \   if value > 0 && value == float64(int(value)) {\n            if value % 2 !=\
    \ 0 {\n                total += int(value) * int(value)\n            }\n     \
    \   }\n    }\n    return total * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0b4vghzi_test.go:23:16: invalid operation: operator % not defined on value
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return sum_of_squares_of_odds(lst) * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplxo5rq7r_test.go:20:12: undefined: sum_of_squares_of_odds

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _,n := range lst {\n        if n ==\
    \ 0 { continue }\n        if int(n) == n && n > 0 {\n            sum += 2 * int(n)\
    \ * int(n)\n        }\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqsvu4f4_test.go:23:22: invalid operation: int(n) == n (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, num := range lst {\n      \
    \  if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                result += int(num) * int(num)\n            }\n        }\n\
    \    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpfxjg077g_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpfxjg077g_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpfxjg077g_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var i float64\n    var sum float64\n    for i = 0; i <\
    \ float64(len(lst)); i++ {\n        if lst[int(i)] < 0 || lst[int(i)] != float64(int(lst[int(i)]))\
    \ {\n            continue\n        }\n        if int(lst[int(i)]) % 2 == 1 {\n\
    \            sum += lst[int(i)] * lst[int(i)]\n        }\n    }\n    return int(sum\
    \ * 2)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpe8n_nuh9_test.go:52: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpe8n_nuh9_test.go:52:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpe8n_nuh9_test.go:52: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, f := range lst {\n        if f <\
    \ 0 {\n            continue\n        }\n        // One possible incorrect solution:\n\
    \        // if int(f) % 2 == 1 {\n        //     sum += int(f * f)\n        //\
    \ }\n        i := int(f)\n        if i % 2 == 1 {\n            sum += i * i\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var diff int = 0\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            continue\n        }\n        if num != float64(int(num))\
    \ {\n            continue\n        }\n        if int(num) % 2 == 0 {\n       \
    \     continue\n        }\n        diff += int(num) * int(num)\n    }\n    return\
    \ diff * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpeyji9rcn_test.go:55: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpeyji9rcn_test.go:55:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpeyji9rcn_test.go:55: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    total := 0\n    for _, elem := range lst {\n        if\
    \ elem > 0 && elem == float64(int(elem)) {\n            if int(elem) % 2 == 1\
    \ {\n                total += int(elem) * int(elem)\n            }\n        }\n\
    \    }\n    return total * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp_zsvwh4b_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp_zsvwh4b_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp_zsvwh4b_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, num := range lst {\n      \
    \  if num < 0 || float64(int(num)) != num {\n            continue\n        }\n\
    \        result += int(num)\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkp0snmnq_test.go:49: expected '%!s(int=25)', got '%!s(int=18)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpkp0snmnq_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=16)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpkp0snmnq_test.go:49: expected '%!s(int=34)', got '%!s(int=16)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpkp0snmnq_test.go:49:\
    \ expected '%!s(int=165)', got '%!s(int=50)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            sum += int(v*v)\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp6bduvj_w_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp6bduvj_w_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp6bduvj_w_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp6bduvj_w_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, x := range lst {\n        if x >\
    \ 0 && int(x) == x {\n            if x % 2 == 1 {\n                sum += int(x\
    \ * x)\n            }\n        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52l_d5gx_test.go:22:31: invalid operation: int(x) == x (mismatched types
    int and float64)

    /tmp/tmp52l_d5gx_test.go:23:16: invalid operation: operator % not defined on x
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            continue\n        }\n        var tmp = int(i) % 2\n   \
    \     if tmp == 1 {\n            result += int(i) * int(i)\n        }\n    }\n\
    \    return result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpclfe0j4h_test.go:52: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpclfe0j4h_test.go:52:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpclfe0j4h_test.go:52: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Implement me\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpanoqxcvi_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpanoqxcvi_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpanoqxcvi_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, n := range lst {\n        i :=\
    \ int(n)\n        if i > 0 && float64(i) == n {\n            sum += i * i\n  \
    \      }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp6j41bt5b_test.go:49: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp6j41bt5b_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp6j41bt5b_test.go:49: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp6j41bt5b_test.go:49:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    ret := 0\n    for _, v := range lst {\n        if int(v)\
    \ < 0 {\n            continue\n        }\n\n        if int(v) % 2 == 1 {\n   \
    \         ret += int(v) * int(v)\n        }\n    }\n\n    return ret * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpgcp51fu6_test.go:53: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpgcp51fu6_test.go:53:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpgcp51fu6_test.go:53: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, x := range lst {\n        if x\
    \ > 0 && int(x) == x {\n            sum += int(x)\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph761nwsc_test.go:22:31: invalid operation: int(x) == x (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var res int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            res += int(v) * int(v)\n   \
    \     }\n    }\n    return res * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpfcrh9brb_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpfcrh9brb_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpfcrh9brb_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpfcrh9brb_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    double_sum := 0\n    return double_sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpw4nz6qcj_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpw4nz6qcj_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpw4nz6qcj_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\tvar result float64 = 0\n\tfor _, n := range lst {\n\t\t\
    if n > 0 && n == float64(int(n)) {\n\t\t\tresult += (n*n)\n\t\t}\n\t}\n\treturn\
    \ int(result)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8le_fh0z_test.go:48: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp8le_fh0z_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Insert your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8t2adzur_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp8t2adzur_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp8t2adzur_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, value := range lst {\n    \
    \    if value > 0 && value == float64(int(value)) {\n            result += int(value)\
    \ * int(value)\n        }\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp1d7b_sm6_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp1d7b_sm6_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp1d7b_sm6_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp1d7b_sm6_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    res := 0\n    for _, x := range lst {\n        if x >=\
    \ 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n            \
    \    res += int(x) * int(x)\n            }\n        }\n    }\n    return res *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmps_fhazfd_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmps_fhazfd_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmps_fhazfd_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum float64 = 0.0\n    for _, x := range lst {\n \
    \       if x > 0 && float64(int(x)) == x {\n            if x % 2 != 0 {\n    \
    \            sum += x * x\n            }\n        }\n    }\n    return int(sum\
    \ * 2)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0qbitjr_test.go:23:16: invalid operation: operator % not defined on x
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int = 0\n    for _, value := range lst {\n\
    \        if value == float64(int(value)) && value > 0 {\n            result +=\
    \ int(value) * int(value)\n        }\n    }\n    return result * 2\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpj78haur1_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpj78haur1_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpj78haur1_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpj78haur1_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    result\
    \ := 0\n    for _, i := range lst {\n        if int(i) % 2 == 1 {\n          \
    \  result += int(i) * int(i)\n        }\n    }\n    return result * 2\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp9cle14nd_test.go:51: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp9cle14nd_test.go:51:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp9cle14nd_test.go:51: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    count := 0\n\n    for _, v := range lst {\n        if\
    \ v < 0 || v != float64(int(v)) {\n            continue\n        }\n        if\
    \ v % 2 == 1 {\n            count += int(v * v)\n        }\n    }\n\n    return\
    \ count * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2o5dkmyk_test.go:26:12: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7y2p2rl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7y2p2rl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int = 0\n    for _, number := range lst {\n\
    \        if int(number) == number && number >= 0 {\n            result += int(number)\
    \ * int(number)\n        }\n    }\n    return result\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwppx5ay2_test.go:22:27: invalid operation: int(number) == number (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var s int\n    var square float64\n    for _, num := range\
    \ lst {\n        square = num * num\n        s += int(square)\n    }\n    return\
    \ s\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpzysexk7o_test.go:48: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmpzysexk7o_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1400)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpzysexk7o_test.go:48: expected '%!s(int=0)', got '%!s(int=69)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpzysexk7o_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int = 0\n    var square int\n    for _, value\
    \ := range lst {\n        if value > 0 && value == float64(int(value)) {\n   \
    \         square = int(value) * int(value)\n            if square % 2 == 1 {\n\
    \                result += square\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, e := range lst {\n        if\
    \ e > 0 && float64(int(e)) == e {\n            if int(e) % 2 == 1 {\n        \
    \        result += int(e * e)\n            }\n        }\n    }\n    return result\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp0j3k0_44_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp0j3k0_44_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp0j3k0_44_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, x := range lst {\n        if x >\
    \ 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n            \
    \    sum += int(x) * int(x)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpl32_i_xu_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpl32_i_xu_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpl32_i_xu_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if int(num)\
    \ == num && num > 0 {\n            sum += int(num) * int(num)\n        }\n   \
    \ }\n    return 2 * sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzmhlxdt_test.go:22:24: invalid operation: int(num) == num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if int(v) % 2 == 1 {\n            sum += int(v) * int(v)\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpzl08nj_b_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpzl08nj_b_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpzl08nj_b_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v <\
    \ 0 || float64(int(v)) != v {\n            continue\n        }\n        if int(v)\
    \ % 2 == 1 {\n            sum += int(v) * int(v)\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkqng984n_test.go:51: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkqng984n_test.go:51:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkqng984n_test.go:51: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if int(num) % 2 == 1 {\n            sum += int(num) * int(num)\n        }\n\
    \    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpbfech2je_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpbfech2je_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpbfech2je_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // >>> double_the_difference([]int{9, -2})\n    // 81\n\
    \    // YOUR CODE HERE\n    sum := 0.0\n    for _, n := range lst {\n        if\
    \ int(n) % 2 == 1 {\n            sum += n\n        }\n    }\n    return int(sum\
    \ * sum)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpxhe1gr1k_test.go:51: expected '%!s(int=34)', got '%!s(int=64)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpxhe1gr1k_test.go:51:\
    \ expected '%!s(int=165)', got '%!s(int=625)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var output float64\n    for _, item := range lst {\n \
    \       if item%2 == 1 && item >= 0 {\n            output += item * item\n   \
    \     }\n    }\n    return int(output)\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptd9q34qu_test.go:22:12: invalid operation: operator % not defined on item
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    total := 0\n    for _, n := range lst {\n        if n\
    \ > 0 && n == float64(int(n)) {\n            total += int(n * n)\n        }\n\
    \    }\n    return total * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpz6otc9ac_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpz6otc9ac_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpz6otc9ac_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpz6otc9ac_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var s int\n    for _, v := range lst {\n        if v >=\
    \ 0 {\n            if v == int(v) {\n                if v%2 == 1 {\n         \
    \           s += int(v) * int(v)\n                }\n            }\n        }\n\
    \    }\n    return s * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2cqh_u64_test.go:23:21: invalid operation: v == int(v) (mismatched types
    float64 and int)

    /tmp/tmp2cqh_u64_test.go:24:20: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    double_diff := 0\n\n    for _, num := range lst {\n  \
    \      if num < 0 {\n            continue\n        }\n\n        if num == 0 {\n\
    \            continue\n        }\n\n        remainder := num - float64(int(num))\n\
    \        if remainder != 0 {\n            continue\n        }\n\n        if num\
    \ % 2 == 0 {\n            double_diff += int(num)\n        } else {\n        \
    \    double_diff += int(num) * int(num)\n        }\n    }\n\n    return double_diff\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm866pk3a_test.go:36:12: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Insert your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8t2adzur_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp8t2adzur_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp8t2adzur_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, v := range lst {\n        if\
    \ (v > 0) && (v == float64(int(v))) {\n            if int(v) % 2 == 1 {\n    \
    \            result += int(v*v)\n            }\n        }\n    }\n    return result\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpi5qwstna_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpi5qwstna_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpi5qwstna_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    lstLen := len(lst)\n    if lstLen == 0 {\n        return\
    \ 0\n    }\n\n    var sum int\n    for i := 0; i < lstLen; i++ {\n        if int(lst[i])\
    \ % 2 != 0 {\n            sum += int(lst[i]) * int(lst[i])\n        }\n    }\n\
    \n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpied5_y_z_test.go:54: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpied5_y_z_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpied5_y_z_test.go:54: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpied5_y_z_test.go:54:\
    \ expected '%!s(int=165)', got '%!s(int=660)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if int(v)%2\
    \ == 1 {\n            sum += int(v) * int(v)\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpevvdfw14_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpevvdfw14_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpevvdfw14_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum float64 = 0.0\n    for _, i := range lst {\n \
    \       if int(i)%2 == 1 {\n            sum += i*i\n        }\n    }\n    return\
    \ int(sum)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int = 0\n    for _, i := range lst {\n    \
    \    if i > 0 && i % 1 == 0 {\n            result += int(i * i)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv20bw99c_test.go:22:21: invalid operation: operator % not defined on i
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var square float64 = 0\n    var square_square float64\
    \ = 0\n    var sum float64 = 0\n    var count int = 0\n    var double_diff int\
    \ = 0\n    for _, n := range lst {\n        square = n * n\n        if square\
    \ > 0 {\n            sum += square\n            count++\n        }\n    }\n  \
    \  for _, n := range lst {\n        square_square = n * n * n * n\n        if\
    \ square_square > 0 {\n            sum += square_square\n            count++\n\
    \        }\n    }\n    // If there are any numbers in the list,\n    // double\
    \ the difference between the sum of squares and the sum of cubes.\n    if count\
    \ > 0 {\n        double_diff = 2 * int(sum)\n    }\n    return double_diff\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpe53tgxgo_test.go:66: expected '%!s(int=25)', got '%!s(int=1844)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmpe53tgxgo_test.go:66:\
    \ expected '%!s(int=0)', got '%!s(int=1962800)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpe53tgxgo_test.go:66: expected '%!s(int=0)', got '%!s(int=8364)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpe53tgxgo_test.go:66:\
    \ expected '%!s(int=34)', got '%!s(int=1480)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpe53tgxgo_test.go:66: expected '%!s(int=165)', got '%!s(int=39336)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    output := 0\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            output += int(num) * int(num)\n\
    \        }\n    }\n    return output\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpyhm9aaes_test.go:48: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpyhm9aaes_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, i := range lst {\n        if i ==\
    \ 0 {\n            continue\n        }\n        if i < 0 {\n            continue\n\
    \        }\n        if i != float64(int(i)) {\n            continue\n        }\n\
    \        sum += (int(i) * int(i))\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmtacqoe2_test.go:55: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpmtacqoe2_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpmtacqoe2_test.go:55: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpmtacqoe2_test.go:55:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    fmt.Println(lst)\n    return 10\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[5 4]\n[0.1 0.2 0.3]\n[-10 -20 -30]\n[-1 -2 8]\n[0.2 3 5]\n[-9 -7 -5\
    \ -3 -1 1 3 5 7 9]\n--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL:\
    \ TestDouble_The_Difference/test_num__0 (0.00s)\n        tmpg0c43yng_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpg0c43yng_test.go:43: expected '%!s(int=25)', got '%!s(int=10)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__2 (0.00s)\n        tmpg0c43yng_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestDouble_The_Difference/test_num__3\
    \ (0.00s)\n        tmpg0c43yng_test.go:43: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpg0c43yng_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpg0c43yng_test.go:43: expected '%!s(int=34)', got '%!s(int=10)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpg0c43yng_test.go:43:\
    \ expected '%!s(int=165)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    if lst == nil {\n        return 0\n    }\n    var result\
    \ int\n    for _, n := range lst {\n        if n >= 0 && n == float64(int(n))\
    \ {\n            if n % 2 == 1 {\n                result += int(n * n)\n     \
    \       }\n        }\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8fri9ka7_test.go:26:16: invalid operation: operator % not defined on n
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var squared_odds []float64\n    for _, number := range\
    \ lst {\n        if (int(number) % 2 != 0) && (number > 0) {\n            squared_odds\
    \ = append(squared_odds, number*number)\n        }\n    }\n    var total float64\n\
    \    for _, number := range squared_odds {\n        total += number\n    }\n \
    \   return int(total)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n \
    \ candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code goes here\n    total := 0\n    for _, item\
    \ := range lst {\n        if item % 2 != 0 && item > 0 {\n            total +=\
    \ int(item * item)\n        }\n    }\n    return total\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8_cnvqe_test.go:23:12: invalid operation: operator % not defined on item
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, value := range lst {\n        if\
    \ value > 0 && int(value) == value {\n            if int(value) % 2 == 1 {\n \
    \               sum += int(value) * int(value)\n            }\n        }\n   \
    \ }\n    sum *= 2\n    return sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_58m79a_test.go:22:39: invalid operation: int(value) == value (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ isOdd(num) {\n            sum += int(num) * int(num)\n        }\n    }\n   \
    \ return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzkmq1r7_test.go:22:12: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpzmz0hx2x_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpzmz0hx2x_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpzmz0hx2x_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    squares := 0\n    for _, x := range lst {\n        if\
    \ x > 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n        \
    \        squares += int(x) * int(x)\n            }\n        }\n    }\n    return\
    \ squares\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var res float64\n    for _, v := range lst {\n       \
    \ if v >= 0 && float64(int(v)) == v {\n            res += (v * v)\n        }\n\
    \    }\n    return int(res)\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp7q8j5oy6_test.go:48: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp7q8j5oy6_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, number := range lst {\n   \
    \     if int(number) == number && number > 0 {\n            result += int(number\
    \ * number)\n        }\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyml1q63q_test.go:22:27: invalid operation: int(number) == number (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, value := range lst {\n       \
    \ var square_value int\n        square_value = int(value) * int(value)\n     \
    \   if square_value % 2 == 1 {\n            sum += square_value\n        }\n \
    \   }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp3bxaj2mx_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp3bxaj2mx_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp3bxaj2mx_test.go:50: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp3bxaj2mx_test.go:50:\
    \ expected '%!s(int=165)', got '%!s(int=660)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v >= 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n    \
    \            sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8akjmgdq_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp8akjmgdq_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp8akjmgdq_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0.0\n    // Make a copy of lst so we don't modify\
    \ it.\n    cpy := make([]float64, len(lst))\n    copy(cpy, lst)\n    for _, val\
    \ := range cpy {\n        if val > 0 {\n            if int(val) % 2 == 1 {\n \
    \               sum += val * val\n            }\n        }\n    }\n    return\
    \ int(sum)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, x := range lst {\n        if x >\
    \ 0 && x == float64(int(x)) {\n            sum += int(x) * int(x)\n        }\n\
    \    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp_5uyywe5_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp_5uyywe5_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp_5uyywe5_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp_5uyywe5_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    total := 0\n    for _, v := range lst {\n        if int(v)\
    \ % 2 == 1 {\n            total += int(v) * int(v)\n        }\n    }\n    return\
    \ total * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph098kggs_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph098kggs_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph098kggs_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    diff_sum := 0\n    for _, num := range lst {\n       \
    \ if num > 0 && int(num) == num {\n            // The number is a positive integer\n\
    \            sqr := num * num\n            if sqr % 2 == 1 {\n               \
    \ // The square is odd\n                diff_sum += int(sqr)\n            }\n\
    \        }\n    }\n    return diff_sum * 2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuphl876o_test.go:22:35: invalid operation: int(num) == num (mismatched
    types int and float64)

    /tmp/tmpuphl876o_test.go:25:16: invalid operation: operator % not defined on sqr
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    odd := 0\n    even := 0\n    for _, val := range lst {\n\
    \        if int(val) % 2 == 0 {\n            even += int(val)\n        } else\
    \ {\n            odd += int(val)\n        }\n    }\n    return (odd - even) *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp_73z8396_test.go:51: expected '%!s(int=25)', got '%!s(int=2)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmp_73z8396_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=120)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmp_73z8396_test.go:51: expected '%!s(int=0)', got '%!s(int=-14)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp_73z8396_test.go:51:\
    \ expected '%!s(int=34)', got '%!s(int=16)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp_73z8396_test.go:51: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, value := range lst {\n        if\
    \ value > 0 && float64(int(value)) == value {\n            if value % 2 == 1 {\n\
    \                sum += int(value * value)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlrd25oq_test.go:23:16: invalid operation: operator % not defined on value
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum,count int\n    var min,max float64\n    for _,v\
    \ := range lst {\n        if v < 0 {\n            continue\n        }\n      \
    \  f,i := modf(v)\n        if f != 0 {\n            continue\n        }\n    \
    \    count++\n        if count == 1 {\n            min = v\n            max =\
    \ v\n        } else {\n            if v < min {\n                min = v\n   \
    \         }\n            if v > max {\n                max = v\n            }\n\
    \        }\n        sum += int(v)\n    }\n    if count == 0 {\n        return\
    \ 0\n    }\n    return (sum-min-max)*2\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf0snadb6_test.go:26:16: undefined: modf

    /tmp/tmpf0snadb6_test.go:47:13: invalid operation: sum - min (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, el := range lst {\n        if el\
    \ < 0 || el != float64(int(el)) {\n            continue\n        }\n        if\
    \ int(el) % 2 == 1 {\n            sum += int(el) * int(el)\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpahrf4qq8_test.go:51: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpahrf4qq8_test.go:51:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpahrf4qq8_test.go:51: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var ret float64 = 0.0\n    for _, x := range lst {\n \
    \       if x > 0 && float64(int(x)) == x {\n            x *= x\n            if\
    \ x % 2 == 1 {\n                ret += x\n            }\n        }\n    }\n  \
    \  return int(ret)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsy17teh_test.go:24:16: invalid operation: operator % not defined on x
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\tvar sum int\n\tfor _, v := range lst {\n\t\tif v >= 0 &&\
    \ v == float64(int(v)) {\n\t\t\tsum += int(v) * int(v)\n\t\t}\n\t}\n\treturn sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmphmxgm9mn_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmphmxgm9mn_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmphmxgm9mn_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmphmxgm9mn_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 42\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__0\
    \ (0.00s)\n        tmpe5s_vo0n_test.go:42: expected '%!s(int=0)', got '%!s(int=42)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__1 (0.00s)\n        tmpe5s_vo0n_test.go:42:\
    \ expected '%!s(int=25)', got '%!s(int=42)'\n    --- FAIL: TestDouble_The_Difference/test_num__2\
    \ (0.00s)\n        tmpe5s_vo0n_test.go:42: expected '%!s(int=0)', got '%!s(int=42)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__3 (0.00s)\n        tmpe5s_vo0n_test.go:42:\
    \ expected '%!s(int=0)', got '%!s(int=42)'\n    --- FAIL: TestDouble_The_Difference/test_num__4\
    \ (0.00s)\n        tmpe5s_vo0n_test.go:42: expected '%!s(int=0)', got '%!s(int=42)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpe5s_vo0n_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=42)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpe5s_vo0n_test.go:42: expected '%!s(int=165)', got '%!s(int=42)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, value := range lst {\n       \
    \ if int(value)%2 == 1 {\n            sum += int(value)*int(value)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    total := 0\n    for _, n := range lst {\n        if n\
    \ == int(n) && n > 0 {\n            if n%2 == 1 {\n                total += int(n)\
    \ * int(n)\n            }\n        }\n    }\n    return 2 * total\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x1ailjx_test.go:22:17: invalid operation: n == int(n) (mismatched types
    float64 and int)

    /tmp/tmp4x1ailjx_test.go:23:16: invalid operation: operator % not defined on n
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, i := range lst {\n        if\
    \ i > 0 && float64(int(i)) == i {\n            result += int(i) * int(i)\n   \
    \     }\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjm69_1cv_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpjm69_1cv_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpjm69_1cv_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpjm69_1cv_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, val := range lst {\n        if (val\
    \ < 0) {\n            continue\n        }\n        if (val == 0) {\n         \
    \   continue\n        }\n        if (val != float64(int(val))) {\n           \
    \ continue\n        }\n        if (val % 2 == 0) {\n            continue\n   \
    \     }\n        sum += int(val * val)\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpms2z1_d3_test.go:31:13: invalid operation: operator % not defined on val
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n\tresult := 0\n\tfor _, n := range lst {\n\t\tif int(n) %\
    \ 2 == 1 {\n\t\t\tresult += int(n * n)\n\t\t}\n\t}\n\treturn result * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpuutpy6wi_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpuutpy6wi_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpuutpy6wi_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Returns the given number squared\n    square := func(x\
    \ float64) float64 {\n        return x * x\n    }\n\n    // check for empty list\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    // check for odd numbers,\
    \ square them and add to sum\n    sum := 0.0\n    for _, num := range lst {\n\
    \        if (num - 1) % 2 == 0 {\n            sum += square(num)\n        }\n\
    \    }\n\n    // return twice the sum of squares of odd numbers\n    return int(sum\
    \ * 2)\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0rukwq3g_test.go:33:12: invalid operation: operator % not defined on (num
    - 1) (value of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, num := range lst {\n      \
    \  if int(num) % 2 != 0 && num >= 0 {\n            result += int(num) * int(num)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var n int\n    n = 0\n    for _, v := range lst {\n  \
    \      if v > 0 && v == float64(int(v)) {\n            n += int(v * v)\n     \
    \   }\n    }\n    return n\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp0d8zi6uu_test.go:49: expected '%!s(int=25)', got '%!s(int=41)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp0d8zi6uu_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, n := range lst {\n        n = n *\
    \ n\n        if n < 0 {\n            n = 0 - n\n        }\n        n = n - n %\
    \ 2\n        sum += int(n)\n    }\n    return sum\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hnxgo0i_test.go:26:17: invalid operation: operator % not defined on n
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // YOUR CODE HERE\n    var result int = 0\n    for _,\
    \ value := range lst {\n        if (value > 0 && value % 1 == 0) {\n         \
    \   result += int(value) * int(value)\n        }\n    }\n    return result\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2qdo1r6_test.go:23:26: invalid operation: operator % not defined on value
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var n int\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            n += (int(v) * int(v))\n        }\n\
    \    }\n    return 2 * n\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu31y61gd_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpu31y61gd_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpu31y61gd_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpu31y61gd_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if int(v)%2\
    \ == 1 {\n            sum += int(v)*int(v)\n        }\n    }\n    return sum*2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpav45rw1c_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpav45rw1c_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpav45rw1c_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if int(num)\
    \ % 2 == 1 {\n            sum += int(num * num)\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp3a42ei44_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp3a42ei44_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp3a42ei44_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var diff_total int\n    var even_total int\n    var odd_total\
    \ int\n    for _, num := range lst {\n        if num % 2 == 0 {\n            even_total\
    \ += int(num)\n        } else {\n            odd_total += int(num)\n        }\n\
    \    }\n    diff_total = even_total - odd_total\n    return diff_total * 2\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0iwj1uye_test.go:24:12: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var total int\n    for _, num := range lst {\n       \
    \ if num > 0 && num - float64(int(num)) == 0 {\n            if int(num) % 2 ==\
    \ 1 {\n                total += int(num) * int(num)\n            }\n        }\n\
    \    }\n    return total * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpoy9i562y_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpoy9i562y_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpoy9i562y_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
