language: go_test.go
name: HumanEval_150_x_or_y
results:
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if(isPrime(n)) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaf05jkvp_test.go:16:8: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Return the value of x if n is a prime number\n    if is_prime(n)\
    \ {\n        return x\n    }\n\n    // Return the value of y if n is not a prime\
    \ number\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga0smefk_test.go:17:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (is_prime(n)) {\n        return x\n    }\n    return y\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwp6fgz8h_test.go:16:9: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\t// if n is a prime number, we return the value of x\n\tif ( is_prime(n)\
    \ ) {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n \
    \ candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 34, 12),\
    \ expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n     {\
    \ actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadvfw4nj_test.go:17:7: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif isPrime(n) {\n\t\treturn x\n\t} else {\n\t\treturn y\n\t}\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa542_6y9_test.go:16:5: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (is_prime(n)) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vyrl9ic_test.go:16:9: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if(n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0) {\n    \
    \    return y\n    } else {\n        return x\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp0f1yq4_p_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp0f1yq4_p_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp0f1yq4_p_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp0f1yq4_p_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n < 2 {\n        return y\n    }\n\n    for i := 2; i <= n / 2;\
    \ i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n\n \
    \   return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Write your code here\n    if n % 2 == 0 {\n        return y\n\
    \    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpnsbqztqe_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpnsbqztqe_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpnsbqztqe_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpnsbqztqe_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpnsbqztqe_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpdlbwza06_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 0 {\n        panic(\"n must be greater than 0\")\n    }\n\
    \    if n == 1 {\n        return y\n    }\n    if n == 2 {\n        return x\n\
    \    }\n    if n == 3 {\n        return x\n    }\n    if n % 2 == 0 {\n      \
    \  return y\n    }\n    if n % 3 == 0 {\n        return y\n    }\n    for i :=\
    \ 5; i * i <= n; i += 6 {\n        if n % i == 0 {\n            return y\n   \
    \     }\n        if n % (i + 2) == 0 {\n            return y\n        }\n    }\n\
    \    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return 0\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpflmd7_nh_test.go:41:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpflmd7_nh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n < 1) {\n        return 0\n    }\n    if (n % 2 == 0) {\n  \
    \      return y\n    }\n    for i := 3; i * i <= n; i += 2 {\n        if (n %\
    \ i == 0) {\n            return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp67y7d596_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp67y7d596_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    }\n    for i := 3; i < n;\
    \ i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n   \
    \ return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpgiorgbtu_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpgiorgbtu_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n % 2 == 0 {\n     \
    \   return y\n    }\n    i := 3\n    for i < n {\n        if n % i == 0 {\n  \
    \          return y\n        }\n        i += 2\n    }\n    return x\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpneqz2upa_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n % 2 == 0) || (n % 3 == 0) {\n        return y\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpwugfqy9e_test.go:44: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpwugfqy9e_test.go:44:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpwugfqy9e_test.go:44: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpwugfqy9e_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn y\n\t\t\
    }\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpo1ugmktc_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 || n % 3 == 0 {\n        return y\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp2u4_yms4_test.go:44: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2u4_yms4_test.go:44:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp2u4_yms4_test.go:44: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2u4_yms4_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Check if n is prime\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmptm0o9xph_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 1 {\n        return 0\n    }\n\n    if n == 2 {\n       \
    \ return x\n    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           return y\n        }\n    }\n\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var r int\n    for d := 2; d <= n - 1; d++ {\n        if n % d ==\
    \ 0 {\n            r = y\n            return r\n        }\n    }\n    r = x\n\
    \    return r\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpmvi143u0_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // (1)\n    // Implement the following function.\n    return 0\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp8hlda3f9_test.go:43: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp8hlda3f9_test.go:43: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp8hlda3f9_test.go:43: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmp8hlda3f9_test.go:43: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmp8hlda3f9_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp8hlda3f9_test.go:43: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp8hlda3f9_test.go:43: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp8hlda3f9_test.go:43:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp8hlda3f9_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 1 {\n        return 0\n    }\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if x_or_y_prime(n) {\n        return x\n    }\n    return y\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyx9fwq7n_test.go:16:8: undefined: x_or_y_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp9m4i7an6_test.go:44: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp9m4i7an6_test.go:44: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp9m4i7an6_test.go:44: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp9m4i7an6_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp9m4i7an6_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return x\n    } else {\n        return y\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp6a_wm0_s_test.go:45: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmp6a_wm0_s_test.go:45:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp6a_wm0_s_test.go:45: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp6a_wm0_s_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmp6a_wm0_s_test.go:45: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n < 2 {\n        return y\n    }\n\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return y\n        }\n    }\n\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return 0\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpflmd7_nh_test.go:41:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpflmd7_nh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    } else {\n        i := 3\n\
    \        for i * i <= n {\n            if n % i == 0 {\n                return\
    \ y\n            }\n            i += 2\n        }\n        return x\n    }\n}\n\
    \nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpaucu9me3_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpaucu9me3_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073759
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    } else if n == 1 {\n        return\
    \ y\n    } else if n < 1 {\n        return y\n    } else {\n        i := 2\n \
    \       for ; i < n; i++ {\n            if n % i == 0 {\n                return\
    \ y\n            }\n        }\n        return x\n    }\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    // If n is even, it cannot\
    \ be prime.\n    if n % 2 == 0 {\n        return y\n    }\n    // Try to divide\
    \ n by every odd number smaller than it.\n    for i := 3; i < n; i += 2 {\n  \
    \      if n % i == 0 {\n            return y\n        }\n    }\n    return x\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp7n0ynftx_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n % 2 == 0) {\n        return y\n    }\n    return x\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpdfwt0m9w_test.go:44: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpdfwt0m9w_test.go:44: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpdfwt0m9w_test.go:44: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpdfwt0m9w_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpdfwt0m9w_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if(n < 2) {\n        return y\n    }\n    var i int = 2\n    for\
    \ ; i < n; i += 1 {\n        if(n % i == 0) {\n            return y\n        }\n\
    \    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    switch {\n    case n < 2:\n        return y\n    }\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return y\n        }\n\
    \    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif n < 1 {\n\t\treturn -1\n\t}\n\tfor i := 2; i < n; i++ {\n\t\tif\
    \ n % i == 0 {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp4jrm0705_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpxu2x8vj1_test.go:41: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpxu2x8vj1_test.go:41: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpxu2x8vj1_test.go:41: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpxu2x8vj1_test.go:41:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpxu2x8vj1_test.go:41: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 1 {\n        return y\n    }\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // TODO: implementation goes here\n    return 0\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp0fu9xa0e_test.go:42: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp0fu9xa0e_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp0fu9xa0e_test.go:42: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmp0fu9xa0e_test.go:42: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmp0fu9xa0e_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp0fu9xa0e_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp0fu9xa0e_test.go:42: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp0fu9xa0e_test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp0fu9xa0e_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    isPrime := true\n    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            isPrime = false\n            break\n        }\n    }\n    if\
    \ isPrime {\n        return x\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp3zy_delk_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073760
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Define the algorithm here.\n    prime := []int{2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    found := false\n    for _, p := range prime {\n        if p == n {\n\
    \            found = true\n            break\n        }\n    }\n    if found {\n\
    \        return x\n    } else {\n        return y\n    }\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n\
    \        tmp9jrqe2ig_test.go:54: expected '%!s(int=3)', got '%!s(int=52)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp9jrqe2ig_test.go:54: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073759
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n < 2 {\n        return 0\n    }\n\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return y\n        }\n    }\n\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\t\n\tvar isPrime bool = true\n\t\n\tfor i := 2; i < n; i++ {\n\t\tif\
    \ n % i == 0 {\n\t\t\tisPrime = false\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\tif isPrime\
    \ {\n\t\treturn x\n\t}\n\t\n\treturn y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n\
    \  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 34, 12),\
    \ expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n     {\
    \ actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpmufmgl77_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 || n % 3 == 0 {\n        return y\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp2u4_yms4_test.go:44: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2u4_yms4_test.go:44:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp2u4_yms4_test.go:44: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2u4_yms4_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // \n    // fill in your code here\n    //\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmsujoaa_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // if n is a prime number, return x.\n    return y\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpt6jqdiyu_test.go:42: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpt6jqdiyu_test.go:42:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpt6jqdiyu_test.go:42: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpt6jqdiyu_test.go:42:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpt6jqdiyu_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return 0\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpflmd7_nh_test.go:41: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpflmd7_nh_test.go:41: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpflmd7_nh_test.go:41:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpflmd7_nh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            count++\n        }\n    }\n    if count == 2 {\n        return\
    \ x\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate :=\
    \ x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    }\n    for i := 3; i * i <=\
    \ n; i += 2 {\n        if n % i == 0 {\n            return y\n        }\n    }\n\
    \    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp_k98tuvp_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp_k98tuvp_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073760
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif n < 2 {\n\t\treturn y\n\t}\n\tfor i := 2; i < n; i++ {\n\t\tif n\
    \ % i == 0 {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif n % 2 == 0 {\n\t\treturn y\n\t} else {\n\t\treturn x\n\t}\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpatdit1qu_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpatdit1qu_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpatdit1qu_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpatdit1qu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpatdit1qu_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ y\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpmag17zsm_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpmag17zsm_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpmag17zsm_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpmag17zsm_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpmag17zsm_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var z int\n    if n % 2 == 0 {\n        z = y\n    } else {\n   \
    \     z = x\n    }\n    return z\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp82dd0rrx_test.go:47: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp82dd0rrx_test.go:47: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp82dd0rrx_test.go:47: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp82dd0rrx_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp82dd0rrx_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // FILL IN YOUR CODE HERE\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n\
    \  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 34, 12),\
    \ expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n     {\
    \ actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbu21fpwh_test.go:17:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073761
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    switch (n % 3) {\n        case 0:\n            return x\n       \
    \ case 1:\n            return y\n        case 2:\n            return y\n    }\n\
    \    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpjol8jz0f_test.go:49: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpjol8jz0f_test.go:49:\
    \ expected '%!s(int=5)', got '%!s(int=8)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpjol8jz0f_test.go:49: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpjol8jz0f_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmpjol8jz0f_test.go:49: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpjol8jz0f_test.go:49:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpjol8jz0f_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073761
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // If a number is divisible by any number between\n    // 2 and sqrt(n),\
    \ n is composite. \n    if n <= 3 {\n        return x\n    }\n    for i := 2;\
    \ i*i <= n; i++ {\n        if n % i == 0 {\n            return y\n        }\n\
    \    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpv__l_j29_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073761
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var result int\n    if is_prime(n) {\n        result = x\n    } else\
    \ {\n        result = y\n    }\n    return result\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpjoyu0o_test.go:17:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073761
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 2 {\n        return y\n    }\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n\
    \        tmpvabkunv1_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073761
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    /*\n    if n is prime, return x\n    else if n is not prime, return\
    \ y\n    */\n    return 0\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate :=\
    \ x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp0pjv0egy_test.go:45: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp0pjv0egy_test.go:45: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp0pjv0egy_test.go:45: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmp0pjv0egy_test.go:45: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmp0pjv0egy_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp0pjv0egy_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp0pjv0egy_test.go:45: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp0pjv0egy_test.go:45:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp0pjv0egy_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073761
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // You're welcome to implement your own solution here.\n    if isPrime(n)\
    \ {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nbxfhj7_test.go:17:8: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073761
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpxu2x8vj1_test.go:41: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpxu2x8vj1_test.go:41: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpxu2x8vj1_test.go:41: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpxu2x8vj1_test.go:41:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpxu2x8vj1_test.go:41: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073759
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n % 2 == 0) {\n        return y\n    } else {\n        return\
    \ x\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp18ej6t6o_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp18ej6t6o_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp18ej6t6o_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp18ej6t6o_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp18ej6t6o_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp9m4i7an6_test.go:44: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp9m4i7an6_test.go:44: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp9m4i7an6_test.go:44: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp9m4i7an6_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp9m4i7an6_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if(n % 2 == 0) {\n        return y\n    } else {\n        return\
    \ x\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpzvjxk6gy_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpzvjxk6gy_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpzvjxk6gy_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpzvjxk6gy_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpzvjxk6gy_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if(n%2 == 0) {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpi3i1m1jv_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpi3i1m1jv_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpi3i1m1jv_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpi3i1m1jv_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpi3i1m1jv_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Missing implementation!\n    return 0\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpy33ma844_test.go:42: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpy33ma844_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpy33ma844_test.go:42: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpy33ma844_test.go:42: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpy33ma844_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpy33ma844_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpy33ma844_test.go:42: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpy33ma844_test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpy33ma844_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Quick and dirty prime check\n    if n <= 1 {\n        return y\n\
    \    }\n    if n <= 3 {\n        return x\n    }\n    if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return y\n    }\n    i := 5\n    for i * i <= n {\n        if n\
    \ % i == 0 || n % (i + 2) == 0 {\n            return y\n        }\n        i +=\
    \ 6\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate :=\
    \ x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    prime := true\n    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            prime = false\n            break\n        }\n    }\n    if\
    \ prime {\n        return x\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpr1zbz_ps_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpdlbwza06_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Simple prime number function.\n    is_prime := func(n int) bool\
    \ {\n        if n < 2 {\n            return false\n        }\n        for i :=\
    \ 2; i < n; i++ {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n\n    // Check if n is\
    \ a prime number.\n    if is_prime(n) {\n        return x\n    }\n    return y\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    prime := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for _, primeNum := range prime\
    \ {\n        if n == primeNum {\n            return x\n        }\n    }\n    return\
    \ y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n\
    \        tmpjih0lr4q_test.go:47: expected '%!s(int=3)', got '%!s(int=52)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpjih0lr4q_test.go:47: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n % 2 == 0) {\n        return y\n    } else {\n        return\
    \ x\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp18ej6t6o_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp18ej6t6o_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp18ej6t6o_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp18ej6t6o_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp18ej6t6o_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn y\n\t\t\
    }\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpo1ugmktc_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif isPrime(n) {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7i3f0kh_test.go:16:5: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073762
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif isPrime(n) {\n\t\treturn x\n\t} else {\n\t\treturn y\n\t}\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa542_6y9_test.go:16:5: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // your code here\n    // ...\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8uxt5h6_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073762
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return n\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp40o_qmtl_test.go:41: expected '%!s(int=34)', got '%!s(int=7)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp40o_qmtl_test.go:41: expected\
    \ '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp40o_qmtl_test.go:41: expected '%!s(int=33)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmp40o_qmtl_test.go:41: expected\
    \ '%!s(int=3)', got '%!s(int=1259)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmp40o_qmtl_test.go:41: expected '%!s(int=-1)', got '%!s(int=7919)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp40o_qmtl_test.go:41:\
    \ expected '%!s(int=583)', got '%!s(int=3609)'\n    --- FAIL: TestX_Or_Y/test_num__6\
    \ (0.00s)\n        tmp40o_qmtl_test.go:41: expected '%!s(int=129)', got '%!s(int=91)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp40o_qmtl_test.go:41:\
    \ expected '%!s(int=1234)', got '%!s(int=6)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp40o_qmtl_test.go:41: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpdlbwza06_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 2 {\n        return x\n    }\n    if n == 3 {\n        return\
    \ x\n    }\n    if n == 5 {\n        return x\n    }\n    if n == 7 {\n      \
    \  return x\n    }\n    if n == 11 {\n        return x\n    }\n    if n == 13\
    \ {\n        return x\n    }\n    if n == 17 {\n        return x\n    }\n    if\
    \ n == 19 {\n        return x\n    }\n    if n == 23 {\n        return x\n   \
    \ }\n    if n == 29 {\n        return x\n    }\n    if n == 31 {\n        return\
    \ x\n    }\n    if n == 37 {\n        return x\n    }\n    if n == 41 {\n    \
    \    return x\n    }\n    if n == 43 {\n        return x\n    }\n    if n == 47\
    \ {\n        return x\n    }\n    if n == 53 {\n        return x\n    }\n    if\
    \ n == 59 {\n        return x\n    }\n    if n == 61 {\n        return x\n   \
    \ }\n    if n == 67 {\n        return x\n    }\n    if n == 71 {\n        return\
    \ x\n    }\n    if n == 73 {\n        return x\n    }\n    if n == 79 {\n    \
    \    return x\n    }\n    if n == 83 {\n        return x\n    }\n    if n == 89\
    \ {\n        return x\n    }\n    if n == 97 {\n        return x\n    }\n    return\
    \ y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n\
    \        tmpt61rw9h7_test.go:116: expected '%!s(int=3)', got '%!s(int=52)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpt61rw9h7_test.go:116:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tswitch {\n\tcase n < 2:\n\t\treturn x\n\tcase n % 2 == 0:\n\t\treturn\
    \ y\n\tdefault:\n\t\t// Check the odds.\n\t\tfor i := 3; i * i <= n; i += 2 {\n\
    \t\t\tif n % i == 0 {\n\t\t\t\treturn y\n\t\t\t}\n\t\t}\n\t\treturn x\n\t}\n}\n\
    \nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp1m0_r81u_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp1m0_r81u_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    if n < 2 {\n        return\
    \ y\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpu7em2bvg_test.go:52: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpu7em2bvg_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=8)'\n    --- FAIL: TestX_Or_Y/test_num__5\
    \ (0.00s)\n        tmpu7em2bvg_test.go:52: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpu7em2bvg_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpu7em2bvg_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n <= 1 {\n        return y\n    }\n    // n > 1\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return y\n        }\n\
    \    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    i := 2\n\n    for i <= n/2 {\n        if n%i == 0 {\n           \
    \ return y\n        }\n        i++\n    }\n\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp0bsecaz3_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073762
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n == 0 {\n        return y\n    } else if n == 1 {\n        return\
    \ x\n    }\n    i := 2\n    for i < n {\n        if n % i == 0 {\n           \
    \ return y\n        }\n        i += 1\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpbxrnwqw3_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmps1ecmywe_test.go:42: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmps1ecmywe_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmps1ecmywe_test.go:42: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmps1ecmywe_test.go:42: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmps1ecmywe_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmps1ecmywe_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmps1ecmywe_test.go:42: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmps1ecmywe_test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmps1ecmywe_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tvar z int\n\tif (n % 2) == 0 {\n\t\tz = n / 2\n\t} else {\n\t\tz =\
    \ (n + 1) / 2\n\t}\n\treturn y + (x - y) * ((z % 2) + (z % 3) + (z % 5) + (z %\
    \ 7))\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp2iko8m_a_test.go:47: expected '%!s(int=34)', got '%!s(int=210)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp2iko8m_a_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=23)'\n    --- FAIL: TestX_Or_Y/test_num__2\
    \ (0.00s)\n        tmp2iko8m_a_test.go:47: expected '%!s(int=33)', got '%!s(int=-25862)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmp2iko8m_a_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmp2iko8m_a_test.go:47: expected '%!s(int=-1)', got '%!s(int=-53)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp2iko8m_a_test.go:47:\
    \ expected '%!s(int=583)', got '%!s(int=6541)'\n    --- FAIL: TestX_Or_Y/test_num__6\
    \ (0.00s)\n        tmp2iko8m_a_test.go:47: expected '%!s(int=129)', got '%!s(int=-309)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp2iko8m_a_test.go:47:\
    \ expected '%!s(int=1234)', got '%!s(int=-7166)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp2iko8m_a_test.go:47: expected '%!s(int=0)', got '%!s(int=8)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2iko8m_a_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // x_or_y(n, x, y)\n    i := 0\n    for i < n {\n        i = i +\
    \ 1\n        if i % 2 == 0 {\n            continue\n        }\n        j := i\
    \ - 1\n        for j > 1 {\n            j = j - 1\n            if i % j == 0 {\n\
    \                return y\n            }\n        }\n    }\n    return x\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpap8vpdzg_test.go:56: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpap8vpdzg_test.go:56:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpap8vpdzg_test.go:56: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpap8vpdzg_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpap8vpdzg_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (is_prime(n)) {\n        return x\n    }\n    return y\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwp6fgz8h_test.go:16:9: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpu_e53de1_test.go:41: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpu_e53de1_test.go:41:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpu_e53de1_test.go:41: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpu_e53de1_test.go:41:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpu_e53de1_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var prime = true\n    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            prime = false\n            break\n        }\n    }\n   \
    \ if prime {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp8cqhjbtx_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // TODO: replace with your own logic\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp__1zv9l__test.go:42: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp__1zv9l__test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp__1zv9l__test.go:42: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmp__1zv9l__test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp__1zv9l__test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Check if n is prime. If it is, return x. Otherwise, return y.\n\
    \    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvql_rc3a_test.go:17:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Is it prime?\n    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmph9gbg5nz_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n%2 == 0 || n%3 == 0 {\n        return y\n    }\n    for i :=\
    \ 5; i*i <= n; i += 6 {\n        if n%i == 0 || n%(i+2) == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmplc3kz8w3_test.go:49: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmplc3kz8w3_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmplc3kz8w3_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var i int\n    // check whether n is a prime number\n    for i =\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n   \
    \ }\n    if i == n {\n        return x\n    } else {\n        return y\n    }\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // If n is divisible by 2 or 3\n    if n % 2 == 0 || n % 3 == 0 {\n\
    \        return y\n    }\n\n    // Returns x if n is a prime number\n    // 1\
    \ is not a prime number\n    if n <= 1 {\n        return y\n    }\n\n    for i\
    \ := 3; i <= n / 2; i++ {\n        if n % i == 0 {\n            return y\n   \
    \     }\n    }\n\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpv2v2rnue_test.go:58: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpv2v2rnue_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // assume an integer is prime if it is not divisible by the first\
    \ 1000 integers\n    for i := 2; i < 1000; i++ {\n        if n % i == 0 {\n  \
    \          return y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpd4aj18xm_test.go:47: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpd4aj18xm_test.go:47:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpd4aj18xm_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpd4aj18xm_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if IsPrime(n) {\n        return x\n    } else {\n        return y\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp4_9dzxa_test.go:16:8: undefined: IsPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpu_e53de1_test.go:41: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n        tmpu_e53de1_test.go:41:\
    \ expected '%!s(int=33)', got '%!s(int=5212)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmpu_e53de1_test.go:41: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpu_e53de1_test.go:41:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpu_e53de1_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Simple check for the prime number\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpfadnf28o_test.go:47: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif(n < 2) {\n\t\treturn y\n\t}\n\tfor i := 2; i < n; i++ {\n\t\tif(n\
    \ % i == 0) {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073765
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // TODO: implement your solution here and change this line\n    return\
    \ 0\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpk1srlb69_test.go:42: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpk1srlb69_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpk1srlb69_test.go:42: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpk1srlb69_test.go:42: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpk1srlb69_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpk1srlb69_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpk1srlb69_test.go:42: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpk1srlb69_test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpk1srlb69_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n % 2 == 0) || (n % 3 == 0) {\n        return y\n    } else {\n\
    \        return x\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate :=\
    \ x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmplinj_fa6_test.go:45: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmplinj_fa6_test.go:45:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmplinj_fa6_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmplinj_fa6_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if IsPrime(n) {\n        return x\n    } else {\n        return y\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp4_9dzxa_test.go:16:8: undefined: IsPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    primeNumbers := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for _, primeNumber\
    \ := range primeNumbers {\n        if n == primeNumber {\n            return x\n\
    \        }\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n\
    \        tmpkpqq4k25_test.go:47: expected '%!s(int=3)', got '%!s(int=52)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpkpqq4k25_test.go:47: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // >>> your code here <<<\n    return 0\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpubmopcfr_test.go:42: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpubmopcfr_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpubmopcfr_test.go:42: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpubmopcfr_test.go:42: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpubmopcfr_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpubmopcfr_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpubmopcfr_test.go:42: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpubmopcfr_test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpubmopcfr_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Given a number n, determine whether it is prime or not.\n    //\
    \ If it is prime, return x; otherwise, return y.\n    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpfpzot9o3_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif n == 1 {\n\t\treturn x\n\t}\n\tif n == 2 {\n\t\treturn y\n\t}\n\t\
    var i int\n\tfor i = 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn x\n\t\t\
    }\n\t}\n\treturn y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpkfil3unx_test.go:53: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpkfil3unx_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=8)'\n    --- FAIL: TestX_Or_Y/test_num__2\
    \ (0.00s)\n        tmpkfil3unx_test.go:53: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpkfil3unx_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmpkfil3unx_test.go:53: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpkfil3unx_test.go:53:\
    \ expected '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6\
    \ (0.00s)\n        tmpkfil3unx_test.go:53: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpkfil3unx_test.go:53:\
    \ expected '%!s(int=1234)', got '%!s(int=34)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpkfil3unx_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpkfil3unx_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (is_prime(n)) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vyrl9ic_test.go:16:9: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073757
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // isPrime() function finds out whether the given number is a prime\
    \ number\n    isPrime := func(num int) bool {\n        if num == 2 {\n       \
    \     return true\n        }\n        if num < 2 || num % 2 == 0 {\n         \
    \   return false\n        }\n        for i := 3; i * i <= num; i += 2 {\n    \
    \        if num % i == 0 {\n                return false\n            }\n    \
    \    }\n        return true\n    }\n\n    if isPrime(n) {\n        return x\n\
    \    }\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073765
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var ret int\n    if is_prime(n) {\n        ret = x\n    } else {\n\
    \        ret = y\n    }\n    return ret\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n\
    \  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 34, 12),\
    \ expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n     {\
    \ actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjskd69oh_test.go:17:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073764
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn y\n\t\t\
    }\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpo1ugmktc_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073757
- exit_code: 0
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // A basic implementation of the Sieve of Eratosthenes\n    isPrime\
    \ := make([]bool, n+1)\n    for i := 2; i <= n; i++ {\n        isPrime[i] = true\n\
    \    }\n    for i := 2; i*i <= n; i++ {\n        if isPrime[i] {\n           \
    \ for j := i; i*j <= n; j++ {\n                isPrime[i*j] = false\n        \
    \    }\n        }\n    }\n    if isPrime[n] {\n        return x\n    } else {\n\
    \        return y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate :=\
    \ x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n\tif n%2==0 {\n\t\treturn y\n\t}\n\treturn x\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpt48jbnzu_test.go:44: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpt48jbnzu_test.go:44: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpt48jbnzu_test.go:44: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpt48jbnzu_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpt48jbnzu_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmp9m4i7an6_test.go:44: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmp9m4i7an6_test.go:44: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmp9m4i7an6_test.go:44: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp9m4i7an6_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmp9m4i7an6_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var (\n        j int\n        k int\n    )\n    k = 0\n    for j\
    \ = 2; j < n; j++ {\n        if n % j == 0 {\n            k = 1\n            break\n\
    \        }\n    }\n    if k == 0 {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmppl25lppx_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // Create a slice to hold all the primes found\n    primes := []int{}\n\
    \    // The first prime number is 2, begin\n    // checking from 3 onwards\n \
    \   for check_num := 3; check_num <= n; check_num += 2 {\n        for i := 0;\
    \ i < len(primes); i++ {\n            if check_num % primes[i] == 0 {\n      \
    \          break\n            }\n            if i == len(primes) - 1 {\n     \
    \           primes = append(primes, check_num)\n            }\n        }\n   \
    \ }\n    fmt.Println(primes)\n    if n % 2 == 0 {\n        return y\n    }\n \
    \   for i := 0; i < len(primes); i++ {\n        if n == primes[i] {\n        \
    \    return x\n        }\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n--- FAIL: TestX_Or_Y (0.00s)\n\
    \    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n        tmpnt3f7ath_test.go:64:\
    \ expected '%!s(int=34)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__2\
    \ (0.00s)\n        tmpnt3f7ath_test.go:64: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpnt3f7ath_test.go:64:\
    \ expected '%!s(int=3)', got '%!s(int=52)'\n    --- FAIL: TestX_Or_Y/test_num__4\
    \ (0.00s)\n        tmpnt3f7ath_test.go:64: expected '%!s(int=-1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpnt3f7ath_test.go:64:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % 2 == 0 || n % 3 == 0 {\n        return y\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmp2u4_yms4_test.go:44: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmp2u4_yms4_test.go:44:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmp2u4_yms4_test.go:44: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmp2u4_yms4_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073602
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % x == 0 || n % y == 0 {\n        return y\n    }\n    return\
    \ x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\n\
    testing.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.x_or_y(...)\n\t/tmp/tmp8zlqce7v_test.go:16\n\
    command-line-arguments_test.TestX_Or_Y(0x0?)\n\t/tmp/tmp8zlqce7v_test.go:37 +0x12\n\
    testing.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // write code here.\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ y\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate :=\
    \ x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpfiql07nk_test.go:45: expected '%!s(int=33)', got '%!s(int=5212)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpfiql07nk_test.go:45:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__8\
    \ (0.00s)\n        tmpfiql07nk_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmpfiql07nk_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    var sum int = 0\n\n    for i := 1; i < n; i++ {\n        if n % i\
    \ == 0 {\n            sum += i\n        }\n    }\n\n    if sum > 1 {\n       \
    \ return y\n    } else {\n        return x\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmpg36o7a77_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // TODO: Write code for this function\n    return 0\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmpuks245ww_test.go:42: expected '%!s(int=34)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmpuks245ww_test.go:42: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__2 (0.00s)\n\
    \        tmpuks245ww_test.go:42: expected '%!s(int=33)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__3 (0.00s)\n        tmpuks245ww_test.go:42: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n\
    \        tmpuks245ww_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpuks245ww_test.go:42: expected\
    \ '%!s(int=583)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpuks245ww_test.go:42: expected '%!s(int=129)', got '%!s(int=0)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__7 (0.00s)\n        tmpuks245ww_test.go:42:\
    \ expected '%!s(int=1234)', got '%!s(int=0)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpuks245ww_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    // return the value of x if n is a prime number and return the value\
    \ of y otherwise\n    if n % 2 == 0 {\n        fmt.Println(\"x_or_y(\", n, \"\
    ,\", x, \",\", y, \")\")\n        return y\n    }\n    fmt.Println(\"x_or_y(\"\
    , n, \",\", x, \",\", y, \")\")\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T)\
    \ {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x_or_y( 7 , 34 , 12 )\nx_or_y( 15 , 8 , 5 )\nx_or_y( 3 , 33 , 5212 )\n\
    x_or_y( 1259 , 3 , 52 )\nx_or_y( 7919 , -1 , 12 )\nx_or_y( 3609 , 1245 , 583 )\n\
    x_or_y( 91 , 56 , 129 )\nx_or_y( 6 , 34 , 1234 )\nx_or_y( 1 , 2 , 0 )\nx_or_y(\
    \ 2 , 2 , 0 )\n--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1\
    \ (0.00s)\n        tmpf2dkte89_test.go:47: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpf2dkte89_test.go:47:\
    \ expected '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6\
    \ (0.00s)\n        tmpf2dkte89_test.go:47: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpf2dkte89_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpf2dkte89_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ y\n        }\n    }\n    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate\
    \ := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n\
    \     { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmp95x96zwx_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    res := x\n    if n % 2 == 0 {\n        res = y\n    }\n    return\
    \ res\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpcodqsu_u_test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n        tmpcodqsu_u_test.go:45: expected\
    \ '%!s(int=583)', got '%!s(int=1245)'\n    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n\
    \        tmpcodqsu_u_test.go:45: expected '%!s(int=129)', got '%!s(int=56)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpcodqsu_u_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpcodqsu_u_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if n % x == 0 {\n        return y\n    } else {\n        return x\n\
    \    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n\
    \        tmpi1gx5dc__test.go:45: expected '%!s(int=5)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmpi1gx5dc__test.go:45: expected\
    \ '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__5 (0.00s)\n\
    \        tmpi1gx5dc__test.go:45: expected '%!s(int=583)', got '%!s(int=1245)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__6 (0.00s)\n        tmpi1gx5dc__test.go:45:\
    \ expected '%!s(int=129)', got '%!s(int=56)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmpi1gx5dc__test.go:45: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmpi1gx5dc__test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestX_Or_Y/test_num__9\
    \ (0.00s)\n        tmpi1gx5dc__test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    fmt.Println(\"You called function x_or_y with n =\", n, \"x =\",\
    \ x, \"y =\", y)\n    // Do something with the parameters to get the result.\n\
    \    if is_prime(n) {\n        return x\n    } else {\n        return y\n    }\n\
    }\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpro6ytuf__test.go:18:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    }\n    return y\n}\n\nfunc\
    \ TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf_ox0s__test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    for n % 3 == 0 {\n\
    \        n = n / 3\n    }\n    for n % 5 == 0 {\n        n = n / 5\n    }\n  \
    \  if n == 1 {\n        return x\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp5j0mswjm_test.go:53: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp5j0mswjm_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=8)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp5j0mswjm_test.go:53: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp5j0mswjm_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmp5j0mswjm_test.go:53: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp5j0mswjm_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if prime_number(n) {\n        return x\n    }\n    return y\n}\n\n\
    func TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual: candidate(15,\
    \ 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212), expected: 33 },\n\
    \     { actual: candidate(1259, 3, 52), expected: 3 },\n     { actual: candidate(7919,\
    \ -1, 12), expected: -1 },\n     { actual: candidate(3609, 1245, 583), expected:\
    \ 583 },\n     { actual: candidate(91, 56, 129), expected: 129 },\n     { actual:\
    \ candidate(6, 34, 1234), expected: 1234 },\n     { actual: candidate(1, 2, 0),\
    \ expected: 0 },\n     { actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmel3mb_7_test.go:16:8: undefined: prime_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073766
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if (n % 2 == 0) {\n        return y\n    }\n    for i := 3; i < n;\
    \ i += 2 {\n        if (n % i == 0) {\n            return y\n        }\n    }\n\
    \    return x\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n \
    \    { actual: candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3,\
    \ 33, 5212), expected: 33 },\n     { actual: candidate(1259, 3, 52), expected:\
    \ 3 },\n     { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual:\
    \ candidate(3609, 1245, 583), expected: 583 },\n     { actual: candidate(91, 56,\
    \ 129), expected: 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234\
    \ },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2,\
    \ 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n\
    \        tmptuiqptg5_test.go:49: expected '%!s(int=0)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestX_Or_Y/test_num__9 (0.00s)\n        tmptuiqptg5_test.go:49: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073766
- exit_code: 2
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    if is_prime(n) {\n        return x\n    } else {\n        return\
    \ y\n    }\n}\n\nfunc TestX_Or_Y(t *testing.T) {\n  candidate := x_or_y\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7, 34, 12), expected: 34 },\n     { actual:\
    \ candidate(15, 8, 5), expected: 5 },\n     { actual: candidate(3, 33, 5212),\
    \ expected: 33 },\n     { actual: candidate(1259, 3, 52), expected: 3 },\n   \
    \  { actual: candidate(7919, -1, 12), expected: -1 },\n     { actual: candidate(3609,\
    \ 1245, 583), expected: 583 },\n     { actual: candidate(91, 56, 129), expected:\
    \ 129 },\n     { actual: candidate(6, 34, 1234), expected: 1234 },\n     { actual:\
    \ candidate(1, 2, 0), expected: 0 },\n     { actual: candidate(2, 2, 0), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqh5n13q_test.go:16:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073601
- exit_code: 1
  program: "package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ A simple program which should return the value of x if n is \n// a prime number\
    \ and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
    \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int)\
    \ int {\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    for n % 3 == 0 {\n\
    \        n = n / 3\n    }\n    for n % 5 == 0 {\n        n = n / 5\n    }\n  \
    \  if n == 1 {\n        return x\n    }\n    return y\n}\n\nfunc TestX_Or_Y(t\
    \ *testing.T) {\n  candidate := x_or_y\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7,\
    \ 34, 12), expected: 34 },\n     { actual: candidate(15, 8, 5), expected: 5 },\n\
    \     { actual: candidate(3, 33, 5212), expected: 33 },\n     { actual: candidate(1259,\
    \ 3, 52), expected: 3 },\n     { actual: candidate(7919, -1, 12), expected: -1\
    \ },\n     { actual: candidate(3609, 1245, 583), expected: 583 },\n     { actual:\
    \ candidate(91, 56, 129), expected: 129 },\n     { actual: candidate(6, 34, 1234),\
    \ expected: 1234 },\n     { actual: candidate(1, 2, 0), expected: 0 },\n     {\
    \ actual: candidate(2, 2, 0), expected: 2 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestX_Or_Y (0.00s)\n    --- FAIL: TestX_Or_Y/test_num__0 (0.00s)\n\
    \        tmp5j0mswjm_test.go:53: expected '%!s(int=34)', got '%!s(int=12)'\n \
    \   --- FAIL: TestX_Or_Y/test_num__1 (0.00s)\n        tmp5j0mswjm_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=8)'\n    --- FAIL: TestX_Or_Y/test_num__3\
    \ (0.00s)\n        tmp5j0mswjm_test.go:53: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__4 (0.00s)\n        tmp5j0mswjm_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestX_Or_Y/test_num__7\
    \ (0.00s)\n        tmp5j0mswjm_test.go:53: expected '%!s(int=1234)', got '%!s(int=34)'\n\
    \    --- FAIL: TestX_Or_Y/test_num__8 (0.00s)\n        tmp5j0mswjm_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073766
