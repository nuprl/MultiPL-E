language: go_test.go
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your solution\
    \ here\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpucr2w1b4_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpucr2w1b4_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpucr2w1b4_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    list := []int{}\n    for\
    \ _, value := range x {\n        if (hasEvenDigit(value)) {\n            list\
    \ = append(list, value)\n        }\n    }\n    return list\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfczjg0e_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    results := []int{}\n \
    \   for _, v := range x {\n        if hasEvenDigit(v) {\n            continue\n\
    \        }\n        results = append(results, v)\n    }\n    return results\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjq2t0kjh_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO\n    return []int{}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpg40mba8b_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpg40mba8b_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpg40mba8b_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    fmt.Println(\"Given list:\
    \ \", x)\n    ret := []int{}\n    s := \"\"\n    for _, i := range x {\n     \
    \   s = fmt.Sprintf(\"%d\", i)\n        if string(s[len(s)-1]) == \"2\" ||\n \
    \          string(s[len(s)-1]) == \"4\" ||\n           string(s[len(s)-1]) ==\
    \ \"6\" ||\n           string(s[len(s)-1]) == \"8\" {\n            continue\n\
    \        }\n        ret = append(ret, i)\n    }\n    fmt.Println(\"Return list:\
    \ \", ret)\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Given list:  [15 33 1422 1]\nReturn list:  [15 33 1]\nGiven list:  [152\
    \ 323 1422 10]\nReturn list:  [323 10]\nGiven list:  [12345 2033 111 151]\nReturn\
    \ list:  [12345 2033 111 151]\nGiven list:  [135 103 31]\nReturn list:  [135 103\
    \ 31]\n--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp9noro17t_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp9noro17t_test.go:50: expected '[]', got '[%!s(int=323) %!s(int=10)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9noro17t_test.go:50:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp9noro17t_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]int)\n\
    \    for _, v := range x {\n        if odd(v) {\n            m[v] = 1\n      \
    \  }\n    }\n    r := make([]int, len(m))\n    i := 0\n    for k, _ := range m\
    \ {\n        r[i] = k\n        i++\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk01yn1n1_test.go:19:12: undefined: odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    for i, v := range x {\n        for v > 0 {\n      \
    \      if v % 2 == 0 {\n                x = append(x[:i], x[i+1:]...)\n      \
    \          break\n            }\n            v /= 10\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513760, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513760,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique_digits(...)\n\t/tmp/tmpa68mxfpd_test.go:23\n\
    command-line-arguments_test.TestUnique_Digits(0x0?)\n\t/tmp/tmpa68mxfpd_test.go:40\
    \ +0x965\ntesting.tRunner(0xc0001a01a0, 0x529080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _,v := range x {\n        if !is_even_digits(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpgvto2p_test.go:19:13: undefined: is_even_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        t := v\n        for t != 0 {\n            if t %\
    \ 2 == 0 {\n                y = append(y, v)\n                break\n        \
    \    }\n            t /= 10\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpypo2eifs_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpypo2eifs_test.go:47: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpypo2eifs_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n     \
    \   tmpypo2eifs_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=103)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if x == nil {\n      \
    \  return nil\n    }\n    set := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _,v := range x {\n        if isContain(v) {\n            set[v]\
    \ = v\n        }\n    }\n    for _,v := range set {\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp295awklt_test.go:23:12: undefined: isContain

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return []int{}\n    }\n    var y []int\n    // check each int in x\n   \
    \ for _, i := range x {\n        j := i\n        // check each digit\n       \
    \ for j > 0 {\n            // even digit\n            if j % 2 == 0 {\n      \
    \          break\n            }\n            j /= 10\n        }\n        // zero\
    \ after last digit\n        if j == 0 {\n            y = append(y, i)\n      \
    \  }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpgfose4pq_test.go:56: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpgfose4pq_test.go:56: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, e := range x {\n        if !hasEvenDigit(e) {\n            result = append(result,\
    \ e)\n        }\n    }\n    //result = sort.Ints(result)\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5don5bso_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,v\
    \ := range x {\n        for v != 0 {\n            if v % 2 == 0 {\n          \
    \      break\n            }\n            v /= 10\n        }\n        if v == 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp_obohhg6_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp_obohhg6_test.go:48: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmp_obohhg6_test.go:48: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, n := range x {\n        if !hasEvenDigit(n) {\n            res = append(res,\
    \ n)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2orxfpxa_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]bool)\n\
    \    r := make([]int, 0)\n    for _, v := range x {\n        t := v\n        f\
    \ := true\n        for t > 0 {\n            if t % 2 == 0 {\n                f\
    \ = false\n                break\n            }\n            t /= 10\n       \
    \ }\n        if f {\n            m[v] = true\n        }\n    }\n    for k, _ :=\
    \ range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp0bwt_17j_test.go:55: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp0bwt_17j_test.go:55: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=151) %!s(int=111)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp0bwt_17j_test.go:55: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ v := range x {\n        if has_even_digit(v) {\n            continue\n     \
    \   }\n        r = append(r, v)\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46gk6p10_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := []int{}\n    for\
    \ _,v := range x {\n        if has_even_digit(v) {\n            continue\n   \
    \     }\n        ret = append(ret, v)\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_reph2q_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ v := range x {\n        if isUnique(v) {\n            r = append(r, v)\n   \
    \     }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83wphpmu_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique := make([]int,\
    \ len(x))\n    count := 0\n    // change to range x\n    for i := 0; i < len(x);\
    \ i++ {\n        isUnique := true\n        // change to range x[i] to loop over\
    \ each digit\n        for _, digit := range x[i] {\n            // replace ==\
    \ 0 with % 2 == 0\n            if digit % 2 == 0 {\n                isUnique =\
    \ false\n                break\n            }\n        }\n        if isUnique\
    \ {\n            unique[count] = x[i]\n            count++\n        }\n    }\n\
    \    return unique[:count]\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9az7rnh_test.go:23:31: cannot range over x[i] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // write your code here\n\
    \    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp5nbvl_y1_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp5nbvl_y1_test.go:37: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp5nbvl_y1_test.go:37: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp5nbvl_y1_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]bool)\n\
    \    n := make([]int, 0)\n    for _, i := range x {\n        if !contains_even_digit(i)\
    \ {\n            if _, ok := m[i]; !ok {\n                m[i] = true\n      \
    \          n = append(n, i)\n            }\n        }\n    }\n    return n\n}\n\
    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwrsozt79_test.go:20:13: undefined: contains_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique := make([]int,\
    \ 0)\n    for _, number := range x {\n        if is_odd(number) {\n          \
    \  unique = append(unique, number)\n        }\n    }\n    return unique\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2gcbv9su_test.go:19:12: undefined: is_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Implement me!\n\
    \    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpfuky2m1s_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpfuky2m1s_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpfuky2m1s_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // PATCH START\n    res\
    \ := []int{}\n    for _, i := range x {\n        if ! hasEvenDigit(i) {\n    \
    \        res = append(res, i)\n        }\n    }\n    return res\n    // PATCH\
    \ END\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvl2wf4gn_test.go:20:14: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, i := range x {\n        if has_even_digit(i) {\n            continue\n  \
    \      }\n        y = append(y, i)\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsu8l2nrr_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, n := range x {\n        if n < 10 {\n            y = append(y, n)\n     \
    \   } else {\n            var iseven bool\n            for m := n; m != 0; m /=\
    \ 10 {\n                if m % 2 == 0 {\n                    iseven = true\n \
    \                   break\n                }\n            }\n            if !iseven\
    \ {\n                y = append(y, n)\n            }\n        }\n    }\n    return\
    \ y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpu680svid_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpu680svid_test.go:53: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        } else {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0525xowa_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    for\
    \ _, i := range x {\n        if !hasEvenDigit(i) {\n            ret = append(ret,\
    \ i)\n        }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3rmjzhzv_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    temp := make([]int, 0)\n\
    \    for _, n := range x {\n        if !hasEvenDigit(n) {\n            temp =\
    \ append(temp, n)\n        }\n    }\n    return temp\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf6gx0fi5_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tresult := []int{}\n\tfor\
    \ _, v := range x {\n\t\tok := true\n\t\tfor v > 0 {\n\t\t\tif (v % 10) % 2 ==\
    \ 0 {\n\t\t\t\tok = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tv /= 10\n\t\t}\n\t\t\
    if ok {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpspr2xyoc_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpspr2xyoc_test.go:50: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpspr2xyoc_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tvar unique []int\n\tfor\
    \ _, n := range x {\n\t\tif contains_even_digit(n) {\n\t\t\tcontinue\n\t\t} else\
    \ {\n\t\t\tunique = append(unique, n)\n\t\t}\n\t}\n\treturn unique\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzs103fqw_test.go:19:6: undefined: contains_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        if is_unique(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0ei9zym_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    //\
    \ loop through list of int\n    for _, v := range x {\n        // convert to string\n\
    \        s := fmt.Sprintf(\"%d\", v)\n        // check if any char is even in\
    \ string\n        even := false\n        for _, n := range s {\n            if\
    \ n % 2 == 0 {\n                even = true\n                break\n         \
    \   }\n        }\n        // if not even, append to result\n        if !even {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpvhlrvn0c_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpvhlrvn0c_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    res := make([]int, 0)\n    for _, v := range x {\n\
    \        d := v\n        flag := true\n        for d > 0 {\n            if d %\
    \ 2 == 0 {\n                flag = false\n                break\n            }\n\
    \            d /= 10\n        }\n        if flag {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphn063u18_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmphn063u18_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := []int{}\n    for\
    \ _, v := range x {\n        if containsOddDigit(v) {\n            ret = append(ret,\
    \ v)\n        }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgaq9avur_test.go:19:12: undefined: containsOddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    c := make(chan int)\n\
    \    for _, i := range x {\n        go func(j int) {\n            c <- j\n   \
    \     }(i)\n    }\n    var arr []int\n    for i := 0; i < len(x); i++ {\n    \
    \    arr = append(arr, <-c)\n    }\n    return arr\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpfuvu457x_test.go:46: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1) %!s(int=1422) %!s(int=15) %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpfuvu457x_test.go:46: expected '[]', got '[%!s(int=10) %!s(int=323)\
    \ %!s(int=1422) %!s(int=152)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpfuvu457x_test.go:46: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=151)\
    \ %!s(int=12345) %!s(int=2033) %!s(int=111)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpfuvu457x_test.go:46: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=31) %!s(int=135) %!s(int=103)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    fmt.Println(\"Given:\"\
    , x)\n    y := []int{}\n    for _, val := range x {\n        has_even := false\n\
    \        for _, dig := range fmt.Sprintf(\"%d\", val) {\n            if dig ==\
    \ '2' || dig == '4' || dig == '6' || dig == '8' {\n                has_even =\
    \ true\n                break\n            }\n        }\n        if !has_even\
    \ {\n            y = append(y, val)\n        }\n    }\n    for i := 0; i < len(y)\
    \ - 1; i++ {\n        for j := i + 1; j < len(y); j++ {\n            if y[i] >\
    \ y[j] {\n                y[i], y[j] = y[j], y[i]\n            }\n        }\n\
    \    }\n    fmt.Println(\"Return:\", y)\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Given: [15 33 1422 1]\nReturn: [1 15 33]\nGiven: [152 323 1422 10]\nReturn:\
    \ [10]\nGiven: [12345 2033 111 151]\nReturn: [111 151]\nGiven: [135 103 31]\n\
    Return: [31 103 135]\n--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpxiw7zup7_test.go:58: expected '[]', got '[%!s(int=10)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpxiw7zup7_test.go:58:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=31) %!s(int=103) %!s(int=135)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 0
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tvar result []int\n\tfor\
    \ _, v := range x {\n\t\tstr := fmt.Sprintf(\"%d\", v)\n\t\thasEven := false\n\
    \t\tfor _, c := range str {\n\t\t\tif int(c - '0') % 2 == 0 {\n\t\t\t\thasEven\
    \ = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !hasEven {\n\t\t\tresult = append(result,\
    \ v)\n\t\t}\n\t}\n\tfor i := 0; i < len(result) - 1; i++ {\n\t\tfor j := i + 1;\
    \ j < len(result); j++ {\n\t\t\tif result[i] > result[j] {\n\t\t\t\tresult[i],\
    \ result[j] = result[j], result[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    idx := 0\n    result :=\
    \ make([]int, len(x))\n    for _, i := range x {\n        if !hasEvenDigit(i)\
    \ {\n            result[idx] = i\n            idx++\n        }\n    }\n    return\
    \ result[:idx]\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y6eyauj_test.go:20:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Your code here\n  \
    \  var res []int\n    for _, v := range x {\n        if v == 1 {\n           \
    \ res = append(res, v)\n        }\n        for v > 0 {\n            t := v % 10\n\
    \            if t % 2 == 0 {\n                break\n            }\n         \
    \   v /= 10\n            if v == 0 {\n                res = append(res, v)\n \
    \           }\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpexw0e5l2_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpexw0e5l2_test.go:53: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpexw0e5l2_test.go:53: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var patch []int\n    for\
    \ _, val := range x {\n        patch = append(patch, val)\n    }\n    return patch\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpyr9_z_l9_test.go:40: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpyr9_z_l9_test.go:40: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpyr9_z_l9_test.go:40: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpyr9_z_l9_test.go:40: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // for _, v := range x\
    \ {\n    //     fmt.Println(v)\n    // }\n    return []int{}\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpsuopt8jk_test.go:39: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpsuopt8jk_test.go:39:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpsuopt8jk_test.go:39: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,v\
    \ := range x {\n        d := v\n        found := false\n        for d > 0 {\n\
    \            if d % 2 == 0 {\n                found = true\n                break\n\
    \            }\n            d /= 10\n        }\n        if !found {\n        \
    \    y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpatv9k10__test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpatv9k10__test.go:51: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073272
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := []int{}\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        ret = append(ret, v)\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptrmbguma_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if is_unique(v) {\n            y = append(y, v)\n  \
    \      }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n \
    \ candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbw30j201_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, i := range x {\n        if i % 2 != 0 {\n            y = append(y, i)\n \
    \       }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpndz1dx5__test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpndz1dx5__test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpndz1dx5__test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpndz1dx5__test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    r := []int{}\n    for\
    \ _, e := range x {\n        if !has_even_digit(e) {\n            r = append(r,\
    \ e)\n        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1eixf49x_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digit(v) {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_xv6kp6_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  for _, i := range x {\n        if isUnique(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9u_zpw_j_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _,v := range x {\n        if v % 2 != 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp_4fmyqsf_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp_4fmyqsf_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp_4fmyqsf_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp_4fmyqsf_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var sortedList []int\n\
    \    for _, element := range x {\n        if hasEvenDigit(element) {\n       \
    \     continue\n        }\n        sortedList = insertElement(sortedList, element)\n\
    \    }\n    return sortedList\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n \
    \ candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8saggw4_test.go:19:12: undefined: hasEvenDigit

    /tmp/tmpi8saggw4_test.go:22:22: undefined: insertElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, num := range x {\n        res = append(res, unique_digits_helper(num))\n\
    \    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1efh0kvn_test.go:19:27: undefined: unique_digits_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    r := []int{}\n    for\
    \ _, v := range x {\n        if checkEven(v) {\n            r = append(r, v)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxqosymi__test.go:19:12: undefined: checkEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    output := []int{}\n  \
    \  for _, i := range x {\n        if unique_digit(i) {\n            output = append(output,\
    \ i)\n        }\n    }\n    return output\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9de79ra_test.go:19:12: undefined: unique_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, num := range x {\n        if !isAnyEvenDigit(num) {\n            res = append(res,\
    \ num)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjue3d99_test.go:19:13: undefined: isAnyEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ v := range x {\n        if has_even_digit(v) {\n            r = append(r, v)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3b33sg5_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpumfvu9us_test.go:17:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ n := range x {\n        if n < 10 {\n            r = append(r, n)\n        \
    \    continue\n        }\n        m := n\n        if m < 0 {\n            m =\
    \ -m\n        }\n        if m % 2 == 0 {\n            continue\n        }\n  \
    \      m /= 10\n        flag := true\n        for m > 0 {\n            if m %\
    \ 2 == 0 {\n                flag = false\n                break\n            }\n\
    \            m /= 10\n        }\n        if flag {\n            r = append(r,\
    \ n)\n        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpx_c34dv5_test.go:62: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpx_c34dv5_test.go:62: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // PATCH list\n    return\
    \ []int{1, 15, 33}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpgxfx9gaf_test.go:37: expected '[]', got '[%!s(int=1) %!s(int=15)\
    \ %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpgxfx9gaf_test.go:37: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpgxfx9gaf_test.go:37: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ // Store whether digits in x have an even number\n    isEven := make(map[int]bool)\n\
    \    for _, num := range x {\n        // Convert to array\n        digits := make([]int,\
    \ 0)\n        for num > 0 {\n            digit := num % 10\n            digits\
    \ = append(digits, digit)\n            num /= 10\n        }\n        // Check\
    \ even\n        var hasEven bool\n        for _, digit := range digits {\n   \
    \         if digit % 2 == 0 {\n                hasEven = true\n              \
    \  break\n            }\n        }\n        if hasEven {\n            isEven[num]\
    \ = true\n        }\n    }\n    // Sort x\n    sort.Ints(x)\n    // Print only\
    \ digits that have no even number\n    for _, num := range x {\n        if !isEven[num]\
    \ {\n            result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6y2a8wyd_test.go:41:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // write code here\n\n\
    \    var result []int\n    var temp []int\n    var temp2 []int\n    var isEven\
    \ = false\n    for i := 0; i < len(x); i++ {\n        temp = intSlice(x[i])\n\
    \        for j := 0; j < len(temp); j++ {\n            if temp[j] % 2 == 0 {\n\
    \                isEven = true\n                break\n            }\n       \
    \ }\n        if !isEven {\n            result = append(result, x[i])\n       \
    \ }\n        isEven = false\n    }\n    temp2 = mergeSort(result)\n    return\
    \ temp2\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33k4fdz3_test.go:24:16: undefined: intSlice

    /tmp/tmp33k4fdz3_test.go:36:13: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return []int{}\n    }\n    result := []int{}\n    for _, val := range x\
    \ {\n        if !even_digit(val) {\n            result = append(result, val)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm49k23zk_test.go:22:13: undefined: even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, 0)\n\
    \    for _, n := range x {\n        if n < 10 {\n            y = append(y, n)\n\
    \        } else {\n            m := n\n            for m > 0 {\n             \
    \   r := m % 10\n                if r % 2 == 0 {\n                    break\n\
    \                }\n                m = m / 10\n            }\n            if\
    \ m == 0 {\n                y = append(y, n)\n            }\n        }\n    }\n\
    \    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpbb5zjr_1_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpbb5zjr_1_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := []int{}\n    for\
    \ _, i := range x {\n        if is_unique(i) {\n            ret = append(ret,\
    \ i)\n        }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4v8aqnly_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var unique []int\n\n \
    \   for _, num := range x {\n        if !isEvenDigit(num) {\n            unique\
    \ = append(unique, num)\n        }\n    }\n\n    sort(unique)\n    return unique\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvmclfsgz_test.go:20:13: undefined: isEvenDigit

    /tmp/tmpvmclfsgz_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if noEven(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygcvblw7_test.go:19:12: undefined: noEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implementation\n\
    \    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp2aqeo2pr_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp2aqeo2pr_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp2aqeo2pr_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    patch := []int{}\n   \
    \ res := []int{}\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            patch = append(patch, v)\n        } else {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprivxqfua_test.go:20:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ a := range x {\n        flag := false\n        b := a\n        for a != 0 {\n\
    \            if a % 2 == 0 {\n                flag = true\n                break\n\
    \            }\n            a /= 10\n        }\n        if !flag {\n         \
    \   y = append(y, b)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpc_la6qdm_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpc_la6qdm_test.go:51: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ i := range x {\n        if IsUnique(i) {\n            r = append(r, i)\n   \
    \     }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkiqp4193_test.go:19:12: undefined: IsUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    s := make([]int, 0)\n\
    \    unique_digits_map := make(map[int]bool)\n    for _, v := range x {\n    \
    \    unique_digits_map[v] = has_odd_digits(v)\n    }\n    for k, v := range unique_digits_map\
    \ {\n        if v {\n            s = append(s, k)\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0rwyyho_test.go:20:32: undefined: has_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Your code here\n  \
    \  return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpcrrlq4zh_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpcrrlq4zh_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpcrrlq4zh_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, e := range x {\n        if noEvenDigit(e) {\n            result = append(result,\
    \ e)\n        }\n    }\n    for i := 0; i < len(result) - 1; i++ {\n        for\
    \ j := i + 1; j < len(result); j++ {\n            if result[i] > result[j] {\n\
    \                result[i], result[j] = result[j], result[i]\n            }\n\
    \        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ywp1_bm_test.go:19:12: undefined: noEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\ty := []int{}\n\tfor _, num\
    \ := range x {\n\t\tvar even bool\n\t\tfor num > 0 {\n\t\t\tif num % 2 == 0 {\n\
    \t\t\t\teven = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tnum /= 10\n\t\t}\n\t\tif !even\
    \ {\n\t\t\ty = append(y, num)\n\t\t}\n\t}\n\treturn y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpuzykbye5_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpuzykbye5_test.go:50: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpuzykbye5_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var processed []int\n    for _, value := range x {\n        if !is_even_digit(value)\
    \ {\n            processed = append(processed, value)\n        }\n    }\n    for\
    \ {\n        var smallest int\n        var is_first = true\n        for _, value\
    \ := range processed {\n            if is_first {\n                smallest =\
    \ value\n                is_first = false\n            } else {\n            \
    \    if value < smallest {\n                    smallest = value\n           \
    \     }\n            }\n        }\n        result = append(result, smallest)\n\
    \        processed = remove_element(processed, smallest)\n        if len(processed)\
    \ == 0 {\n            break\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyc00ypzn_test.go:20:13: undefined: is_even_digit

    /tmp/tmpyc00ypzn_test.go:38:21: undefined: remove_element

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var (\n        n, r int\n\
    \        has_even_digit bool\n        result []int\n    )\n    for _, v := range\
    \ x {\n        has_even_digit = false\n        for n = v; n > 0; n /= 10 {\n \
    \           r = n % 10\n            if r % 2 == 0 {\n                has_even_digit\
    \ = true\n                break\n            }\n        }\n        if !has_even_digit\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpv79p1hbt_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpv79p1hbt_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073275
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ num := range x {\n        if !hasEvenDigit(num) {\n            y = append(y,\
    \ num)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wgawb1r_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return []int{}\n    }\n    ud := x[0]\n    for _, v := range x {\n     \
    \   d := v\n        for d > 0 {\n            if d % 2 == 0 {\n               \
    \ break\n            }\n            d /= 10\n        }\n        if d == 0 {\n\
    \            ud = v\n            break\n        }\n    }\n    if len(x) == 1 {\n\
    \        return []int{ud}\n    }\n    return append([]int{ud}, unique_digits(x[1:])...)\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp_r5otigh_test.go:56: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp_r5otigh_test.go:56: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp_r5otigh_test.go:56: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=111)\
    \ %!s(int=111) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp_r5otigh_test.go:56: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2csefaz_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if !even(v) {\n            y = append(y, v)\n      \
    \  }\n    }\n    return sorted(y)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfe_5gzbs_test.go:19:13: undefined: even

    /tmp/tmpfe_5gzbs_test.go:23:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    y := make([]int, 0)\n    for _, v := range x {\n  \
    \      var even bool\n        v := v\n        for v > 0 {\n            r := v\
    \ % 10\n            if r % 2 == 0 {\n                even = true\n           \
    \     break\n            }\n            v = v / 10\n        }\n        if !even\
    \ {\n            y = append(y, v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp0ijgao4c_test.go:55: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp0ijgao4c_test.go:55: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmp0ijgao4c_test.go:55: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, 0)\n\
    \    for _, v := range x {\n        if v % 2 != 0 {\n            y = append(y,\
    \ v)\n        }\n    }\n    // The sort package implements sorting for builtins\
    \ and user-defined types.\n    // https://golang.org/pkg/sort/\n    // https://golang.org/pkg/sort/#Ints\n\
    \    sort.Ints(y)\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzoojxz2s_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, a := range x {\n        //if there is no even digit in the number, add\
    \ it to the result\n        if !hasEvenDigit(a) {\n            result = append(result,\
    \ a)\n        }\n    }\n    return sort(result)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9iwjuwa_test.go:20:13: undefined: hasEvenDigit

    /tmp/tmpu9iwjuwa_test.go:24:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    //\n    // even_digits\
    \ = []int{}\n    // loop over nums\n    //   if num % 2 == 0\n    //     even_digits.append(num)\n\
    \    //\n    // return even_digits\n    //\n    even_digits := []int{}\n    for\
    \ _, num := range x {\n        if num % 2 == 0 {\n            even_digits = append(even_digits,\
    \ num)\n        }\n    }\n    // now return everything that is not in even_digits\n\
    \    //\n    //\n    return even_digits\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpfn25qulq_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpfn25qulq_test.go:53: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpfn25qulq_test.go:53: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfn25qulq_test.go:53:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO\n    return []int{}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpg40mba8b_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpg40mba8b_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpg40mba8b_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        if v < 10 {\n            y = append(y, v)\n     \
    \   } else {\n            even := false\n            for t := v; t > 0; t /= 10\
    \ {\n                if t % 2 == 0 {\n                    even = true\n      \
    \              break\n                }\n            }\n            if !even {\n\
    \                y = append(y, v)\n            }\n        }\n    }\n    return\
    \ y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpttsdbv63_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpttsdbv63_test.go:53: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073276
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, n := range x {\n        if !hasEvenDigit(n) {\n            res = append(res,\
    \ n)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi40ur9rj_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO\n    var result\
    \ []int\n    var is_unique bool\n\n    for _, n := range x {\n        is_unique\
    \ = true\n        for n > 0 {\n            digit := n % 10\n            if digit\
    \ % 2 == 0 {\n                is_unique = false\n                break\n     \
    \       }\n            n /= 10\n        }\n        if is_unique {\n          \
    \  result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpw7j7dvpr_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpw7j7dvpr_test.go:54: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpw7j7dvpr_test.go:54: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, v := range x {\n        if v < 0 {\n            v = -v\n        }\n     \
    \   odd := true\n        for v > 0 {\n            if v % 2 == 0 {\n          \
    \      odd = false\n                break\n            }\n            v /= 10\n\
    \        }\n        if odd {\n            res = append(res, v)\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp26d4ures_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp26d4ures_test.go:53: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmp26d4ures_test.go:53: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // your code here\n  \
    \  var uniq []int\n\n    for _, val := range x {\n        if check_digits(val)\
    \ {\n            uniq = append(uniq, val)\n        }\n    }\n\n    return uniq\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6596kiim_test.go:21:12: undefined: check_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    for _, i := range x {\n\
    \        for _, j := range fmt.Sprintf(\"%d\", i) {\n            if j%2 == 0 {\n\
    \                continue\n            }\n        }\n    }\n    return []int{}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpclarvda6_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpclarvda6_test.go:43:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpclarvda6_test.go:43: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, val := range x {\n        k := val\n        even := false\n        for k\
    \ > 0 {\n            digit := k % 10\n            if digit % 2 == 0 {\n      \
    \          even = true\n                break\n            }\n            k =\
    \ k / 10\n        }\n        if !even {\n            y = append(y, val)\n    \
    \    }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpo438uqc2_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpo438uqc2_test.go:52: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073276
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ud := []int{}\n    for\
    \ _, num := range x {\n        if is_unique_digits(num) {\n            ud = append(ud,\
    \ num)\n        }\n    }\n    return ud\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp998t2c1w_test.go:19:12: undefined: is_unique_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO\n    return nil\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp99_aw01u_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp99_aw01u_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp99_aw01u_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    r := []int{}\n    for\
    \ _, y := range x {\n        has_even := false\n        for _, d := range fmt.Sprintf(\"\
    %d\", y) {\n            if d - '0' % 2 == 0 {\n                has_even = true\n\
    \                break\n            }\n        }\n        if !has_even {\n   \
    \         r = append(r, y)\n        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp6wiredwa_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp6wiredwa_test.go:49: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp6wiredwa_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp6wiredwa_test.go:49: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var unique []int\n   \
    \ for _, element := range x {\n        if len(fmt.Sprintf(\"%d\", element)) ==\
    \ 1 {\n            unique = append(unique, element)\n        } else {\n      \
    \      // var lst []int\n            var a int\n            for _, j := range\
    \ fmt.Sprintf(\"%d\", element) {\n                a, _ = strconv.Atoi(string(j))\n\
    \                // lst = append(lst, a)\n                if a % 2 == 0 {\n  \
    \                  break\n                }\n            }\n            if a %\
    \ 2 != 0 {\n                unique = append(unique, element)\n            }\n\
    \        }\n    }\n    // if element > 1 {\n    //     for _, j := range fmt.Sprintf(\"\
    %d\", element) {\n    //         a, _ = strconv.Atoi(string(j))\n    //      \
    \   lst = append(lst, a)\n    //     }\n    // }\n    // sort.Sort(lst)\n    //\
    \ fmt.Println(lst)\n    return unique\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp79hsxt0n_test.go:25:24: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, n := range x {\n        if hasEvenDigit(n) {\n            continue\n    \
    \    }\n        res = append(res, n)\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo2qkbut_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, i := range x {\n        if isUnique(i) {\n            res = append(res, i)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3du7p6l_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // x = []int{15, 33, 1422,\
    \ 1}\n    // x = []int{152, 323, 1422, 10}\n    unique_digits := []int{}\n   \
    \ for _, i := range x {\n        fmt.Println(i)\n        digit := i % 10\n   \
    \     fmt.Println(digit)\n        if digit % 2 != 0 {\n            unique_digits\
    \ = append(unique_digits, i)\n        }\n    }\n    return unique_digits\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "15\n5\n33\n3\n1422\n2\n1\n1\n152\n2\n323\n3\n1422\n2\n10\n0\n12345\n5\n\
    2033\n3\n111\n1\n151\n1\n135\n5\n103\n3\n31\n1\n--- FAIL: TestUnique_Digits (0.00s)\n\
    \    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp1zrceb_m_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33)\
    \ %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp1zrceb_m_test.go:47:\
    \ expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp1zrceb_m_test.go:47: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL:\
    \ TestUnique_Digits/test_num__3 (0.00s)\n        tmp1zrceb_m_test.go:47: expected\
    \ '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        if has_odd_digits(v) {\n            y = append(y,\
    \ v)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7f9rfkdm_test.go:19:12: undefined: has_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, val := range x {\n        if hasNoEvenDigit(val) {\n            y = append(y,\
    \ val)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecrt4tip_test.go:19:12: undefined: hasNoEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if IsEvenDigit(i) {\n            continue\n        }\n\
    \        y = append(y, i)\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1r7plovx_test.go:19:12: undefined: IsEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        d := i\n        for ; d > 0; d /= 10 {\n           \
    \ if d % 2 == 0 {\n                break\n            }\n        }\n        if\
    \ d == 0 {\n            y = append(y, i)\n        }\n    }\n    sort(y)\n    return\
    \ y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhq6ad81_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var odd_x []int\n    for\
    \ _, value := range x {\n        if (value % 2 != 0) {\n            odd_x = append(odd_x,\
    \ value)\n        }\n    }\n    return odd_x\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpl_ciypog_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpl_ciypog_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpl_ciypog_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpl_ciypog_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, val := range x {\n        if len(unique_digits_helper(val)) > 0 {\n \
    \           result = append(result, val)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_h7bfn__test.go:19:16: undefined: unique_digits_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique := make([]int,\
    \ 0)\n    for _, num := range x {\n        var is_even_digit bool = false\n  \
    \      var num_str string = fmt.Sprintf(\"%d\", num)\n        for _, char := range\
    \ num_str {\n            if char == '2' || char == '4' || char == '6' || char\
    \ == '8' {\n                is_even_digit = true\n                break\n    \
    \        }\n        }\n        if !is_even_digit {\n            unique = append(unique,\
    \ num)\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpb0tmza35_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpb0tmza35_test.go:50: expected '[]', got '[%!s(int=10)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpb0tmza35_test.go:50:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    //Write your code here\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp2mfjpa_p_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp2mfjpa_p_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp2mfjpa_p_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{1, 15, 33}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpfjnxa_43_test.go:36: expected '[]', got '[%!s(int=1) %!s(int=15)\
    \ %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpfjnxa_43_test.go:36: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpfjnxa_43_test.go:36: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    res := make([]int, 0)\n    for _, val := range x {\n\
    \        if val < 0 {\n            continue\n        }\n        if val / 10 ==\
    \ 0 {\n            res = append(res, val)\n            continue\n        }\n \
    \       for val > 0 {\n            if val % 10 % 2 == 0 {\n                break\n\
    \            }\n            val /= 10\n        }\n        if val == 0 {\n    \
    \        res = append(res, val)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpvx1fk_mt_test.go:58: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpvx1fk_mt_test.go:58: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpvx1fk_mt_test.go:58: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        if IsOdd(v) {\n            y = append(y, v)\n   \
    \     }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjmhir5w6_test.go:19:12: undefined: IsOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, len(x))\n\
    \    i := 0\n    for _, k := range x {\n        if is_unique(k) {\n          \
    \  y[i] = k\n            i++\n        }\n    }\n    return y[:i]\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpefabr8oq_test.go:20:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ v := range x {\n        if hasEvenDigit(v) {\n            continue\n       \
    \ }\n        r = append(r, v)\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadmkw_tu_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // PATCH\n    var result\
    \ []int\n    for _, v := range x {\n        if v <= 9 {\n            result =\
    \ append(result, v)\n        } else {\n            if v % 2 != 0 {\n         \
    \       for i := v; i > 0; i /= 10 {\n                    if i % 2 == 0 {\n  \
    \                      break\n                    }\n                    if i\
    \ / 10 == 0 {\n                        result = append(result, v)\n          \
    \          }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp_kt5a0fw_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp_kt5a0fw_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    x = filter_sort(x)\n \
    \   return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp98_tzpys_test.go:17:9: undefined: filter_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  even_digits := []int{0, 2, 4, 6, 8}\n    for _, num := range x {\n        digits\
    \ := []int{}\n        for num > 0 {\n            digits = append(digits, num %\
    \ 10)\n            num /= 10\n        }\n        flag := true\n        for _,\
    \ digit := range digits {\n            for _, even_digit := range even_digits\
    \ {\n                if digit == even_digit {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if !flag\
    \ {\n                break\n            }\n        }\n        if flag {\n    \
    \        result = append(result, num)\n        }\n    }\n    return result\n}\n\
    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpj3_6ks71_test.go:60: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpj3_6ks71_test.go:60: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpj3_6ks71_test.go:60: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, i := range x {\n        if is_unique(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz1nqsjqy_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if !isEven(i) {\n            y = append(y, i)\n    \
    \    }\n    }\n    sortInts(y)\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1j7fkmnw_test.go:19:13: undefined: isEven

    /tmp/tmp1j7fkmnw_test.go:23:5: undefined: sortInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, n := range x {\n        if n < 0 {\n            n = n * -1\n        }\n\
    \        if n < 10 {\n            result = append(result, n)\n            continue\n\
    \        }\n        if !containsEvenDigit(n) {\n            result = append(result,\
    \ n)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3tfgudjo_test.go:26:13: undefined: containsEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique := []int{}\n  \
    \  for _, elem := range x {\n        if elem % 2 != 0 {\n            fmt.Println(elem)\n\
    \            unique = append(unique, elem)\n        }\n    }\n    return unique\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "15\n33\n1\n323\n12345\n2033\n111\n151\n135\n103\n31\n--- FAIL: TestUnique_Digits\
    \ (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpj61xwt5l_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33)\
    \ %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpj61xwt5l_test.go:43:\
    \ expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpj61xwt5l_test.go:43: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL:\
    \ TestUnique_Digits/test_num__3 (0.00s)\n        tmpj61xwt5l_test.go:43: expected\
    \ '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{1, 15, 33}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpfjnxa_43_test.go:36: expected '[]', got '[%!s(int=1) %!s(int=15)\
    \ %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpfjnxa_43_test.go:36: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpfjnxa_43_test.go:36: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) < 1 {\n    \
    \    return x\n    }\n    ret := make([]int, 0)\n    for _, v := range x {\n \
    \       if unique(v) {\n            ret = append(ret, v)\n        }\n    }\n \
    \   return ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxcizh8a7_test.go:22:12: undefined: unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073279
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\t// initialize the result\
    \ slice\n\tresult := make([]int, 0)\n\t// iterate through the input list\n\tfor\
    \ _, v := range x {\n\t\t// convert the integer v to string\n\t\ttemp_str := fmt.Sprintf(\"\
    %d\", v)\n\t\t// initialize an empty bool flag\n\t\tflag := false\n\t\t// iterate\
    \ through the string temp_str by character\n\t\tfor _, w := range temp_str {\n\
    \t\t\t// convert the character w to integer\n\t\t\ttemp_int := int(w) - int('0')\n\
    \t\t\t// if there exists an even digit in temp_str, break the loop\n\t\t\tif temp_int\
    \ % 2 == 0 {\n\t\t\t\tflag = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// if there\
    \ does not exist any even digit in temp_str, append v to the result slice\n\t\t\
    if flag == false {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\t// sort the\
    \ slice result\n\tsort.Ints(result)\n\t// return the sorted slice result\n\treturn\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9inoe_tp_test.go:41:2: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here...\n\
    \    // You can add as many functions as you like\n    // Do not change the signature\
    \ of this function\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp6ktf1vzd_test.go:39: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp6ktf1vzd_test.go:39:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp6ktf1vzd_test.go:39: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var has_even bool\n\n    for _, v := range x {\n        has_even = false\n \
    \       for v > 0 {\n            if v % 2 == 0 {\n                has_even = true\n\
    \                break\n            }\n\n            v /= 10\n        }\n\n  \
    \      if !has_even {\n            result = append(result, v)\n        }\n   \
    \ }\n\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpns4cbx50_test.go:55: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpns4cbx50_test.go:55: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpns4cbx50_test.go:55: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return x\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpc97hlv1c_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpc97hlv1c_test.go:36: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpc97hlv1c_test.go:36: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpc97hlv1c_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp29kgcrz5_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp29kgcrz5_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp29kgcrz5_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Your code here\n\
    \    return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpghjfnqgz_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpghjfnqgz_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpghjfnqgz_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, v := range x {\n        if is_unique(v) {\n            y = append(y, v)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0ei9zym_test.go:19:12: undefined: is_unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    for\
    \ _, i := range x {\n        // fmt.Println(i)\n        var found bool\n     \
    \   for _, j := range x {\n            if i == j {\n                continue\n\
    \            }\n            if i % j == 0 {\n                // fmt.Println(i,\
    \ \" : \", j)\n                found = true\n                break\n         \
    \   }\n        }\n        if !found {\n            ret = append(ret, i)\n    \
    \    }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n \
    \ candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpniq2n7kv_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n  \
    \      tmpniq2n7kv_test.go:54: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpniq2n7kv_test.go:54: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpniq2n7kv_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        res = append(res, v)\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2g0s_ve_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073279
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if !has_even_digits(v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa2dk5gx_test.go:19:13: undefined: has_even_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ v := range x {\n        if hasEvenDigit(v) {\n            continue\n       \
    \ }\n        r = append(r, v)\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadmkw_tu_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, n := range x {\n        if n % 10 == 0 || is_even(n) {\n            continue\n\
    \        }\n        res = append(res, n)\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyb71p3_d_test.go:19:27: undefined: is_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    result := make([]int, 0)\n    for _, item := range\
    \ x {\n        if checkNum(item) {\n            result = append(result, item)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnvad_wyf_test.go:22:12: undefined: checkNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  for _, v := range x {\n        flag := true\n        for v > 0 {\n        \
    \    if v % 2 == 0 {\n                flag = false\n                break\n  \
    \          }\n            v /= 10\n        }\n        if flag {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmposv0cte5_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmposv0cte5_test.go:50: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmposv0cte5_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ n := range x {\n        if hasOddDigit(n) {\n            y = append(y, n)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy7ru2tp3_test.go:19:12: undefined: hasOddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    sorted_list := make([]int,\
    \ 0)\n    for _, num := range x {\n        if hasEvenDigit(num) {\n          \
    \  continue\n        } else {\n            sorted_list = append(sorted_list, num)\n\
    \        }\n    }\n    return sorted_list\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv0lpm22_test.go:19:12: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tuniqueDigits := []int{}\n\
    \tcontainsEvenDigit := false\n\t\n\tfor _, i := range x {\n\t\tfor j := i; j >\
    \ 0; j = j / 10 {\n\t\t\tif (j % 10) % 2 == 0 {\n\t\t\t\tcontainsEvenDigit = true\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !containsEvenDigit {\n\t\t\tuniqueDigits\
    \ = append(uniqueDigits, i)\n\t\t}\n\t\tcontainsEvenDigit = false\n\t}\n\t\n\t\
    return uniqueDigits\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpt2z46z60_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpt2z46z60_test.go:52: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, elem := range x {\n        if 0 == elem % 2 {\n            continue\n   \
    \     }\n        y = append(y, elem)\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprz1_i9f6_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmprz1_i9f6_test.go:43: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprz1_i9f6_test.go:43:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmprz1_i9f6_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tvar res []int\n\tfor _,i\
    \ := range x {\n\t\td := []int{i%10, (i/10)%10, (i/100)%10, (i/1000)%10}\n\t\t\
    if d[0]%2 == 1 && d[1]%2 == 1 && d[2]%2 == 1 && d[3]%2 == 1 {\n\t\t\tres = append(res,\
    \ i)\n\t\t}\n\t}\n\treturn res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp46et3b3u_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp46et3b3u_test.go:43:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp46et3b3u_test.go:43: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, v := range x {\n        if check(v) {\n            res = append(res, v)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcrvj9mw_test.go:19:12: undefined: check

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    uniqueDigits := make([]int,\
    \ 0)\n    for _, digit := range x {\n        digitString := fmt.Sprintf(\"%d\"\
    , digit)\n        uniqueDigit := true\n        for _, d := range digitString {\n\
    \            if (d == '2' || d == '4' || d == '6' || d == '8' || d == '0') {\n\
    \                uniqueDigit = false\n                break\n            }\n \
    \       }\n        if uniqueDigit {\n            uniqueDigits = append(uniqueDigits,\
    \ digit)\n        }\n    }\n    return uniqueDigits\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpaybim213_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpaybim213_test.go:50: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\treturn x\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpm3epfm_i_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpm3epfm_i_test.go:36: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpm3epfm_i_test.go:36: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpm3epfm_i_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO\n    return []int{}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpg40mba8b_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpg40mba8b_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpg40mba8b_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Your code here\n  \
    \  var ans []int\n    for _, i := range x {\n        if !hasEvenDigit(i) {\n \
    \           ans = append(ans, i)\n        }\n    }\n    return ans\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrhv37pp_test.go:20:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Check all digits in\
    \ x are odd\n    var is_odd_digit = func(x int) bool {\n        for ; x > 0; x\
    \ /= 10 {\n            if x % 2 == 0 {\n                return false\n       \
    \     }\n        }\n        return true\n    }\n\n    var unique []int\n    for\
    \ _, v := range x {\n        if is_odd_digit(v) {\n            unique = append(unique,\
    \ v)\n        }\n    }\n    return unique\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpn60186f2_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpn60186f2_test.go:52: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    sort.Ints(x)\n    return\
    \ x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql2yy82y_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    // PATCH\n\
    \    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpmdd79s5u_test.go:38: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmdd79s5u_test.go:38:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpmdd79s5u_test.go:38: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, i := range x {\n        if i % 2 != 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpg7nvc69p_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpg7nvc69p_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpg7nvc69p_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpg7nvc69p_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, a := range x {\n        if has_even_digit(a) {\n            m[a] =\
    \ true\n        }\n    }\n    if len(m) == 0 {\n        return x\n    }\n    var\
    \ y []int\n    for _, a := range x {\n        if _, ok := m[a]; !ok {\n      \
    \      y = append(y, a)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeq37mem9_test.go:19:12: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtur1nr1_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073152
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]int)\n\
    \    for _, i := range x {\n        if _, ok := m[i]; !ok {\n            m[i]\
    \ = 0\n        }\n        m[i] += num_digits(i)\n    }\n    a := make([]int, 0)\n\
    \    for k, v := range m {\n        if v%2 != 0 {\n            a = append(a, k)\n\
    \        }\n    }\n    return a\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9m5pynu_test.go:22:17: undefined: num_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    for\
    \ _,i := range x {\n        if !unique_digits_has_even_digit(i) {\n          \
    \  ret = append(ret, i)\n        }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3z_i9r40_test.go:19:13: undefined: unique_digits_has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, v := range x {\n        if !check(v) {\n            res = append(res, v)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6d63399_test.go:19:13: undefined: check

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // use map to remove duplicate\
    \ and sort\n    unique := make(map[int]int)\n    var odd int\n    for _, e :=\
    \ range x {\n        // find odd num\n        odd = 0\n        for e > 0 {\n \
    \           if e%2 == 0 {\n                odd = 1\n                break\n  \
    \          }\n            e /= 10\n        }\n        if odd == 0 {\n        \
    \    unique[e]++\n        }\n    }\n    unique2 := make([]int, len(unique))\n\
    \    var i int\n    for k, _ := range unique {\n        unique2[i] = k\n     \
    \   i++\n    }\n    return unique2\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpb182xq14_test.go:59: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n  \
    \      tmpb182xq14_test.go:59: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpb182xq14_test.go:59:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    res := make([]int, len(x))\n    counter := 0\n    for\
    \ _, v := range x {\n        if !checkEvenDigit(v) {\n            res[counter]\
    \ = v\n            counter++\n        }\n    }\n    return res[:counter]\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ceqd3n9_test.go:23:13: undefined: checkEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n\n \
    \   // Fill in the code\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpj73u9jw6_test.go:39: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpj73u9jw6_test.go:39:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpj73u9jw6_test.go:39: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    var result []int\n    for _, i := range x {\n        if !hasEven(i) {\n \
    \           result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7ssy2w6_test.go:20:13: undefined: hasEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, i := range x {\n        if i % 2 != 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpg7nvc69p_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpg7nvc69p_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpg7nvc69p_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpg7nvc69p_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // YOUR CODE HERE\n  \
    \  return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpkwa9ekbs_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkwa9ekbs_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpkwa9ekbs_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tfmt.Println(\"unique_digits.\"\
    )\n\tfmt.Println(x)\n\treturn x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "unique_digits.\n[15 33 1422 1]\nunique_digits.\n[152 323 1422 10]\nunique_digits.\n\
    [12345 2033 111 151]\nunique_digits.\n[135 103 31]\n--- FAIL: TestUnique_Digits\
    \ (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp7_esxe75_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33)\
    \ %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmp7_esxe75_test.go:38: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp7_esxe75_test.go:38: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp7_esxe75_test.go:38: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, i := range x {\n        if isUniqueDigits(i) {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptwgnqjw6_test.go:19:12: undefined: isUniqueDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    even_digit := \"2468\"\
    \n    odd_digit := \"13579\"\n    var odd_list []int\n    for _, v := range x\
    \ {\n        str := fmt.Sprintf(\"%d\", v)\n        flag := false\n        for\
    \ _, w := range str {\n            fmt.Println(w)\n            for _, odd := range\
    \ odd_digit {\n                if w == odd {\n                    flag = true\n\
    \                    break\n                }\n            }\n            if flag\
    \ {\n                break\n            }\n        }\n        if flag {\n    \
    \        odd_list = append(odd_list, v)\n        }\n    }\n    return odd_list\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfqgm2x1_test.go:17:5: even_digit declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\treturn []int{}\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprb6edyqt_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprb6edyqt_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprb6edyqt_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmptd5_9a60_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmptd5_9a60_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmptd5_9a60_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var found bool\n    var\
    \ y = make([]int, len(x))\n    var k = 0\n    for _, v := range x {\n        found\
    \ = false\n        for v != 0 {\n            if (v % 10) % 2 == 0 {\n        \
    \        found = true\n                break\n            }\n            v /=\
    \ 10\n        }\n        if !found {\n            y[k] = v\n            k++\n\
    \        }\n    }\n    return y[:k]\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp9roba17z_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp9roba17z_test.go:53: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmp9roba17z_test.go:53: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ i := range x {\n        if !has_even_digit(i) {\n            y = append(y, i)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihx4oypt_test.go:19:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if _, ok := even_in_number(v); !ok {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqaw7pmxv_test.go:19:21: undefined: even_in_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, n := range x {\n        if IsUniqueDigits(n) {\n            res = append(res,\
    \ n)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ovytbny_test.go:19:12: undefined: IsUniqueDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: implement the\
    \ function\n    m := make(map[int]int)\n    for _, v := range x {\n        key\
    \ := 0\n        for v != 0 {\n            y := v % 10\n            if y % 2 ==\
    \ 0 {\n                m[key] = 1\n                break\n            }\n    \
    \        v = v / 10\n        }\n        if m[key] != 1 {\n            m[key] =\
    \ 0\n        }\n        key++\n    }\n    result := make([]int, 0)\n    for i,\
    \ v := range m {\n        if v == 0 {\n            result = append(result, x[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpm1zso21r_test.go:59: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm1zso21r_test.go:59:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpm1zso21r_test.go:59: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{}\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprxk7f0u9_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmprxk7f0u9_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, n := range x {\n        if !hasEvenDigit(n) {\n            res = append(res,\
    \ n)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi40ur9rj_test.go:19:13: undefined: hasEvenDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    newSlice := make([]int,\
    \ 0)\n    for _, val := range x {\n        digits := []int{}\n        tmp := val\n\
    \        for tmp > 0 {\n            digits = append(digits, tmp % 10)\n      \
    \      tmp /= 10\n        }\n        if len(digits) > 1 {\n            hasEven\
    \ := false\n            for _, digit := range digits {\n                if digit\
    \ % 2 == 0 {\n                    hasEven = true\n                    break\n\
    \                }\n            }\n            if !hasEven {\n               \
    \ newSlice = append(newSlice, val)\n            }\n        } else {\n        \
    \    newSlice = append(newSlice, val)\n        }\n    }\n    return newSlice\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpxst5_uo7_test.go:59: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpxst5_uo7_test.go:59: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ n := range x {\n        //fmt.Println(n)\n        if !has_even_digit(n) {\n\
    \            y = append(y, n)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpptzvv35u_test.go:20:13: undefined: has_even_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    xs := []int{}\n    for\
    \ _,v := range x {\n        if isUnique(v) {\n            xs = append(xs, v)\n\
    \        }\n    }\n    return xs\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhujpx0i_test.go:19:12: undefined: isUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n\tvar l []int\n\tfor _, v\
    \ := range x {\n\t\tif v%2 != 0 {\n\t\t\tl = append(l, v)\n\t\t}\n\t}\n\treturn\
    \ l\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpifd4_0z0_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpifd4_0z0_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpifd4_0z0_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpifd4_0z0_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ n := range x {\n        if unique_digit(n) {\n            y = append(y, n)\n\
    \        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wskp2rb_test.go:19:12: undefined: unique_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y = make([]int, 0)\n\
    \    for _, num := range x {\n        if(num % 2 != 0) {\n            y = append(y,\
    \ num)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpc90eti_s_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpc90eti_s_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpc90eti_s_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpc90eti_s_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // PATCH\n    return nil\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpuarig_hd_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpuarig_hd_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpuarig_hd_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var myMap map[int]int\
    \ = make(map[int]int)\n    var result []int\n    for _, value := range x {\n \
    \       if isOddDigit(value) {\n            myMap[value] = value\n        }\n\
    \    }\n    for _, value := range myMap {\n        result = append(result, value)\n\
    \    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmeyx35te_test.go:20:12: undefined: isOddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    f := func(i int) bool {\n        s := fmt.Sprintf(\"%d\", i)\n        for\
    \ _, j := range s {\n            if j - '0' % 2 == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return filter(x,\
    \ f)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8807maok_test.go:27:12: undefined: filter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Write your code\
    \ here\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmppjbidzxs_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmppjbidzxs_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmppjbidzxs_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Fill this in.\n   \
    \ return []int{}\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpjk6_cave_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpjk6_cave_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpjk6_cave_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return nil\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpa2v415av_test.go:36:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpa2v415av_test.go:36: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    panic(\"Not Implemented\"\
    )\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\npanic: Not Implemented [recovered]\n\
    \tpanic: Not Implemented\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique_digits(...)\n\t/tmp/tmpi6vkb3vb_test.go:17\n\
    command-line-arguments_test.TestUnique_Digits(0x0?)\n\t/tmp/tmpi6vkb3vb_test.go:27\
    \ +0x27\ntesting.tRunner(0xc000103380, 0x527d50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073283
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return []int{1, 15, 33}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpfjnxa_43_test.go:36: expected '[]', got '[%!s(int=1) %!s(int=15)\
    \ %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpfjnxa_43_test.go:36: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpfjnxa_43_test.go:36: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=1)\
    \ %!s(int=15) %!s(int=33)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
