name: HumanEval_134_check_if_last_char_is_a_letter
language: go_test.go
prompt: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n\
  \    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
  // of a given string is an alphabetical character and is not\n// a part of a word,\
  \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
  \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n//\
  \ false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
  \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
  \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n"
tests: "func TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
  \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
  eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true },\n\
  \     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
  \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"\
  ), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n\
  \     { actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
  apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ >= 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n", "    for i, _ := range txt {\n        if i == len(txt) - 1 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n", "    return false\n\
    }\n", "    if len(txt) < 1 {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == ' ' {\n        return false\n    }\n    for i, _ := range txt {\n       \
    \ if i == len(txt)-1 {\n            return true\n        }\n        if txt[i]\
    \ != ' ' && txt[i+1] == ' ' {\n            return true\n        }\n    }\n   \
    \ return false\n}\n", "    for i, char := range txt {\n        if char == ' '\
    \ {\n            if i == len(txt) - 1 {\n                return false\n      \
    \      } else if i == len(txt) - 2 {\n                return true\n          \
    \  } else if unicode.IsLetter(rune(txt[i + 1])) {\n                return false\n\
    \            }\n        }\n    }\n    return false\n}\n", "    // your code here\n\
    \    return true\n}\n", "    if txt == \"\" { return false }\n    if len(txt)\
    \ == 1 { return true }\n    if !isLetter(txt[len(txt)-1]) { return false }\n \
    \   if isLetter(txt[len(txt)-2]) { return false }\n    return true\n}\n", "  \
    \  var runes = []rune(txt)\n    var last rune = runes[len(runes)-1]\n    return\
    \ last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z'\n}\n", "    for i :=\
    \ len(txt) - 1; i >= 0; i-- {\n        if txt[i] == ' ' {\n            return\
    \ false\n        } else if txt[i] < 'A' || (txt[i] > 'Z' && txt[i] < 'a') || txt[i]\
    \ > 'z' {\n            return false\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    return true\n}\n", "    if txt\
    \ == \"\" {\n        return false\n    }\n    var result bool\n    for i := len(txt)\
    \ - 1; i >= 0; i-- {\n        if txt[i] == ' ' {\n            continue\n     \
    \   }\n        if txt[i] >= 'a' && txt[i] <= 'z' || txt[i] >= 'A' && txt[i] <=\
    \ 'Z' {\n            result = true\n        } else {\n            result = false\n\
    \        }\n        break\n    }\n    return result\n}\n", "\tl := len(txt) -\
    \ 1\n\tfor i := l; i >= 0; i-- {\n\t\tif txt[i] == ' ' {\n\t\t\tcontinue\n\t\t\
    }\n\t\tif (txt[i] >= 'a' && txt[i] <= 'z') || (txt[i] >= 'A' && txt[i] <= 'Z')\
    \ {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\treturn false\n}\n", " \
    \   // binary search\n    // return strings.LastIndex(txt, \" \") != -1\n    //\
    \ one liner\n    // return strings.Contains(txt, \" \") && len(txt) > 0 && txt[len(txt)-1]\
    \ != ' '\n    return strings.Contains(txt, \" \") && len(txt) > 0 && txt[len(txt)-1]\
    \ != ' '\n}\n", "    for i := len(txt) - 1; i >= 0; i-- {\n        if txt[i] ==\
    \ ' ' {\n            continue\n        } else if txt[i] >= 'a' && txt[i] <= 'z'\
    \ || txt[i] >= 'A' && txt[i] <= 'Z' {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n    return false\n}\n", "   \
    \ if len(txt) > 0 {\n        last_char := txt[len(txt)-1]\n        if last_char\
    \ >= 'a' && last_char <= 'z' {\n            return last_char == ' ' || last_char\
    \ == '\\t' || last_char == '\\n'\n        }\n    }\n    return false\n}\n", " \
    \   a := len(txt)\n    if a == 0 { return false }\n    b := txt[a-1]\n    c :=\
    \ b <= 'z' && b >= 'a' || b <= 'Z' && b >= 'A'\n    d := len(txt) > 1 && (txt[a-2]\
    \ == ' ' || txt[a-2] == '.')\n    return c && d\n}\n", "    // your code here\n\
    \    last_char := string(txt[len(txt)-1])\n    if last_char != \" \" {\n     \
    \   return true\n    }\n    return false\n}\n", "    for _, char := range txt\
    \ {\n        if char == rune(' ') {\n            txt = txt[1:]\n        }\n  \
    \  }\n    if len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n\
    \    if lastChar >= 'a' && lastChar <= 'z' {\n        return true\n    }\n   \
    \ if lastChar >= 'A' && lastChar <= 'Z' {\n        return true\n    }\n    return\
    \ false\n}\n", "    // your code goes here\n    return false\n}\n", "    txtLen\
    \ := len(txt)\n    if txtLen == 0 {\n        return false\n    }\n\n    lastChar\
    \ := txt[txtLen-1]\n    // check if lastChar is not a space\n    if lastChar !=\
    \ 32 {\n        // check if lastChar is alphabetical character\n        if lastChar\
    \ >= 97 && lastChar <= 122 {\n            for i := txtLen - 2; i >= 0; i-- {\n\
    \                if txt[i] == 32 {\n                    return true\n        \
    \        } else if txt[i] != 32 {\n                    return false\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
