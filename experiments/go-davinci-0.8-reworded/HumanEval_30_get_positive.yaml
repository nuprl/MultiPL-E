name: HumanEval_30_get_positive
language: go_test.go
prompt: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4,\
  \ 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int\
  \ {\n"
tests: "func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
  \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
  \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
  \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var r []int\n    for _, v := range l {\n        if v > 0 {\n  \
    \          r = append(r, v)\n        }\n    }\n    return r\n}\n", "    // Implement\
    \ me!\n    return []int{}\n}\n", "    res := make([]int, 0)\n    for _, e := range\
    \ l {\n        if e > 0 {\n            res = append(res, e)\n        }\n    }\n\
    \    return res\n}\n", "    var res []int\n    for _, n := range l {\n       \
    \ if n > 0 {\n            res = append(res, n)\n        }\n    }\n    return res\n\
    }\n", "    res := make([]int, 0)\n    for _, v := range l {\n        if v > 0\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    var r []int\n    for _, v := range l {\n        if v > 0 {\n            r =\
    \ append(r, v)\n        }\n    }\n    return r\n}\n", "    result := []int{}\n\
    \    for _, v := range l {\n        if v > 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, number := range l {\n        if number > 0 {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n", "    var positive []int\n\
    \    for _, v := range l {\n        if v > 0 {\n            positive = append(positive,\
    \ v)\n        }\n    }\n    return positive\n}\n", "    var result []int\n   \
    \ for _, n := range l {\n        if n > 0 {\n            result = append(result,\
    \ n)\n        }\n    }\n    return result\n}\n", "    positives := []int{}\n \
    \   for _, n := range l {\n        if n > 0 {\n            positives = append(positives,\
    \ n)\n        }\n    }\n    return positives\n}\n", "    return l\n}\n", "   \
    \ r := []int{}\n    for _, n := range l {\n        if n > 0 {\n            r =\
    \ append(r, n)\n        }\n    }\n    return r\n}\n", "    r := []int{}\n    for\
    \ _, i := range l {\n        if i > 0 {\n            r = append(r, i)\n      \
    \  }\n    }\n    return r\n}\n", "    // Implementation here.\n    return nil\n\
    }\n", "    // First, find the number of positive numbers.\n    // This way, we\
    \ will know the size of the list for the result.\n    n := 0\n    for _, v :=\
    \ range l {\n        if v > 0 {\n            n += 1\n        }\n    }\n\n    res\
    \ := make([]int, n)\n    n = 0\n    for _, v := range l {\n        if v > 0 {\n\
    \            res[n] = v\n            n += 1\n        }\n    }\n\n    return res\n\
    }\n", "    var res []int\n    for _, x := range l {\n        if x > 0 {\n    \
    \        res = append(res, x)\n        }\n    }\n    return res\n}\n", "    var\
    \ res []int\n    for _, i := range l {\n        if i > 0 {\n            res =\
    \ append(res, i)\n        }\n    }\n    return res\n}\n", "    var ret []int\n\
    \    for _, v := range l {\n        if v > 0 {\n            ret = append(ret,\
    \ v)\n        }\n    }\n    return ret\n}\n", "    return l\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
