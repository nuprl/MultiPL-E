name: HumanEval_146_specialFilter
language: go_test.go
prompt: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Write a function that takes a list of numbers as input and returns \n// the\
  \ number of elements in the list that are greater than 10 and both \n// first and\
  \ last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15,\
  \ -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n//\
  \ 2\nfunc specialFilter(nums []int) int {\n"
tests: "func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n  \
  \   { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
  \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
  \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2,\
  \ -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
  \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    res := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ isOdd(num / 10) && isOdd(num % 10) {\n            res++\n        }\n    }\n\
    \    return res\n}\n", "    count := 0\n    var l, r int\n    for _, v := range\
    \ nums {\n        l = v\n        r = v\n        if l < 0 {\n            l = -l\n\
    \        }\n        if l > 10 {\n            for r > 10 {\n                r =\
    \ r % 10\n            }\n            if l % 2 != 0 && r % 2 != 0 {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count\n}\n", " \
    \   return 0\n}\n", "    cnt := 0\n    for _, n := range nums {\n        if abs(n)\
    \ >= 10 && isFirstAndLastDigitOdd(n) {\n            cnt++\n        }\n    }\n\
    \    return cnt\n}\n", "    count := 0\n    for _, num := range nums {\n     \
    \   if num > 10 && isOdd(num % 10) && isOdd(num / int(pow(10, int(log10(float64(num))))))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num % 2 == 0 {\n            continue\n        }\n     \
    \   if num < 0 {\n            num = -num\n        }\n        if num % 10 % 2 ==\
    \ 0 {\n            continue\n        }\n        count += 1\n    }\n    return\
    \ count\n}\n", "    count := 0\n    for _, n := range nums {\n        if n > 10\
    \ && (n % 10 % 2 != 0) && (n / 10 % 2 != 0) {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    var f, l int\n    var count int\n    for\
    \ _, v := range nums {\n        if v > 10 {\n            f = v / 10\n        \
    \    for f >= 10 {\n                f = f / 10\n            }\n            l =\
    \ v % 10\n            if f % 2 != 0 && l % 2 != 0 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    cnt := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            cnt++\n        }\n    }\n    return cnt\n}\n", "    count := 0\n\
    \    for _, x := range nums {\n        if x < 10 {\n            continue\n   \
    \     }\n\n        num := x\n        last := x % 10\n        first := x\n\n  \
    \      for first > 10 {\n            first /= 10\n        }\n\n        if first\
    \ % 2 == 1 && last % 2 == 1 {\n            count++\n        }\n    }\n\n    return\
    \ count\n}\n", "    cnt := 0\n    for _, v := range nums {\n        if v > 10\
    \ && isFirstLastDigitOdd(v) {\n            cnt++\n        }\n    }\n    return\
    \ cnt\n}\n", "    count := 0\n    for _, num := range nums {\n        if abs(num)\
    \ > 10 && abs(num) % 10 % 2 != 0 && abs(num) / 10 % 10 % 2 != 0 {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n", "    /*for _, value :=\
    \ range nums {\n        fmt.Println(value)\n    }*/\n    return 0\n}\n", "   \
    \ count := 0\n    for _, num := range nums {\n        if abs(num) > 10 && isOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    var m\
    \ int\n    for _, v := range nums {\n        if v > 10 && (v/10)%2 != 0 && v%2\
    \ != 0 {\n            m++\n        }\n    }\n    return m\n}\n", "    count :=\
    \ 0\n    // loop over input\n    for _, num := range nums {\n        // check\
    \ if the number is greater than 10\n        if num > 10 {\n            // get\
    \ the first and last digits\n            firstDigit := num / 10\n            lastDigit\
    \ := num % 10\n            // check if both are odd\n            if firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0 {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n", "    // Write your code here\n}\n",
  "    var count int\n    for _, n := range nums {\n        if n > 10 && firstDigit(n)\
    \ % 2 != 0 && lastDigit(n) % 2 != 0 {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var sum int\n    for _, num := range nums {\n  \
    \      if (num > 10) && (num/10%2 != 0) && (num%10%2 != 0) {\n            sum++\n\
    \        }\n    }\n    return sum\n}\n", "    cnt := 0\n    for _, num := range\
    \ nums {\n        if num > 10 && (num/10)%2 != 0 && num%2 != 0 {\n           \
    \ cnt++\n        }\n    }\n    return cnt\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
