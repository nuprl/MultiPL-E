name: HumanEval_146_specialFilter
language: go_test.go
prompt: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Write a function that takes a list of numbers as input and returns \n// the\
  \ number of elements in the list that are greater than 10 and both \n// first and\
  \ last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15,\
  \ -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n//\
  \ 2\nfunc specialFilter(nums []int) int {\n"
tests: "func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n  \
  \   { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
  \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
  \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2,\
  \ -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
  \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    res := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ isOdd(num / 10) && isOdd(num % 10) {\n            res++\n        }\n    }\n\
    \    return res\n}\n", "    count := 0\n    var l, r int\n    for _, v := range\
    \ nums {\n        l = v\n        r = v\n        if l < 0 {\n            l = -l\n\
    \        }\n        if l > 10 {\n            for r > 10 {\n                r =\
    \ r % 10\n            }\n            if l % 2 != 0 && r % 2 != 0 {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count\n}\n", " \
    \   return 0\n}\n", "    cnt := 0\n    for _, n := range nums {\n        if abs(n)\
    \ >= 10 && isFirstAndLastDigitOdd(n) {\n            cnt++\n        }\n    }\n\
    \    return cnt\n}\n", "    count := 0\n    for _, num := range nums {\n     \
    \   if num > 10 && isOdd(num % 10) && isOdd(num / int(pow(10, int(log10(float64(num))))))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num % 2 == 0 {\n            continue\n        }\n     \
    \   if num < 0 {\n            num = -num\n        }\n        if num % 10 % 2 ==\
    \ 0 {\n            continue\n        }\n        count += 1\n    }\n    return\
    \ count\n}\n", "    count := 0\n    for _, n := range nums {\n        if n > 10\
    \ && (n % 10 % 2 != 0) && (n / 10 % 2 != 0) {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    var f, l int\n    var count int\n    for\
    \ _, v := range nums {\n        if v > 10 {\n            f = v / 10\n        \
    \    for f >= 10 {\n                f = f / 10\n            }\n            l =\
    \ v % 10\n            if f % 2 != 0 && l % 2 != 0 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    cnt := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n\
    \            cnt++\n        }\n    }\n    return cnt\n}\n", "    count := 0\n\
    \    for _, x := range nums {\n        if x < 10 {\n            continue\n   \
    \     }\n\n        num := x\n        last := x % 10\n        first := x\n\n  \
    \      for first > 10 {\n            first /= 10\n        }\n\n        if first\
    \ % 2 == 1 && last % 2 == 1 {\n            count++\n        }\n    }\n\n    return\
    \ count\n}\n", "    cnt := 0\n    for _, v := range nums {\n        if v > 10\
    \ && isFirstLastDigitOdd(v) {\n            cnt++\n        }\n    }\n    return\
    \ cnt\n}\n", "    count := 0\n    for _, num := range nums {\n        if abs(num)\
    \ > 10 && abs(num) % 10 % 2 != 0 && abs(num) / 10 % 10 % 2 != 0 {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n", "    /*for _, value :=\
    \ range nums {\n        fmt.Println(value)\n    }*/\n    return 0\n}\n", "   \
    \ count := 0\n    for _, num := range nums {\n        if abs(num) > 10 && isOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    var m\
    \ int\n    for _, v := range nums {\n        if v > 10 && (v/10)%2 != 0 && v%2\
    \ != 0 {\n            m++\n        }\n    }\n    return m\n}\n", "    count :=\
    \ 0\n    // loop over input\n    for _, num := range nums {\n        // check\
    \ if the number is greater than 10\n        if num > 10 {\n            // get\
    \ the first and last digits\n            firstDigit := num / 10\n            lastDigit\
    \ := num % 10\n            // check if both are odd\n            if firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0 {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n", "    // Write your code here\n}\n",
  "    var count int\n    for _, n := range nums {\n        if n > 10 && firstDigit(n)\
    \ % 2 != 0 && lastDigit(n) % 2 != 0 {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var sum int\n    for _, num := range nums {\n  \
    \      if (num > 10) && (num/10%2 != 0) && (num%10%2 != 0) {\n            sum++\n\
    \        }\n    }\n    return sum\n}\n", "    cnt := 0\n    for _, num := range\
    \ nums {\n        if num > 10 && (num/10)%2 != 0 && num%2 != 0 {\n           \
    \ cnt++\n        }\n    }\n    return cnt\n}\n", "    count := 0\n    for _, v\
    \ := range nums {\n        if v > 10 && (v % 10 == 1 || v % 10 == 3 || v % 10\
    \ == 5 || v % 10 == 7 || v % 10 == 9) {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    // check if first and last digits are odd.\n   \
    \ // Find the first and last digits of the number\n    // check if odd\n    //\
    \ if odd, add to count\n    count := 0\n    for _, num := range nums {\n     \
    \   if num > 10 {\n            if (num % 10) % 2 != 0 && num / 10 % 2 != 0 {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    //\n    for _, num := range nums {\n        if isGreaterThan10(num)\
    \ && isFirstLastDigitOdd(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    return 0\n}\n", "    var greaterThan10 int\n    for _, num\
    \ := range nums {\n        if num > 10 {\n            str := fmt.Sprintf(\"%d\"\
    , num)\n            if str[0] % 2 != 0 && str[len(str) - 1] % 2 != 0 {\n     \
    \           greaterThan10++\n            }\n        }\n    }\n    return greaterThan10\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num < 10 {\n\
    \            continue\n        }\n\n        // check the first digit\n       \
    \ first_digit := num\n        for first_digit >= 10 {\n            first_digit\
    \ /= 10\n        }\n        if first_digit % 2 == 0 {\n            continue\n\
    \        }\n\n        // check the last digit\n        last_digit := num % 10\n\
    \        if last_digit % 2 == 0 {\n            continue\n        }\n\n       \
    \ count++\n    }\n    return count\n}\n", "    var count int\n    for _, num :=\
    \ range nums {\n        if num > 10 && isOdd(num) {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    n := 0\n    for _, num := range nums\
    \ {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n            n++\n \
    \       }\n    }\n    return n\n}\n", "    count := 0\n    for _, v := range nums\
    \ {\n        if v > 10 && checkFirstLast(v) {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    // TODO: Implement this function\n    return\
    \ 0\n}\n", "    var count int\n    for _, num := range nums {\n        if num\
    \ > 10 && num % 2 == 1 {\n            fmt.Println(num)\n            count += 1\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for _, value :=\
    \ range nums {\n        if value > 10 && isFirstLastDigitOdd(value) {\n      \
    \      count++\n        }\n    }\n    return count\n}\n", "    return 0\n}\n",
  "    // write your code here\n    return 0\n}\n", "    // your code goes here\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ num % 2 == 1 && num / 10 % 2 == 1 {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var count int\n    for _, v := range nums {\n  \
    \      if v < 10 {\n            continue\n        }\n        digits := []int{}\n\
    \        for v > 0 {\n            digits = append(digits, v % 10)\n          \
    \  v /= 10\n        }\n        if len(digits) == 1 {\n            continue\n \
    \       }\n        if digits[0] % 2 == 1 && digits[len(digits) - 1] % 2 == 1 {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 && num/10%2 != 0 &&\
    \ num%10%2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for _, n := range nums {\n        if n < 10 {\n           \
    \ continue\n        }\n        if n % 2 == 0 {\n            continue\n       \
    \ }\n        f, l := n / 10, n % 10\n        if f % 2 == 0 || l % 2 == 0 {\n \
    \           continue\n        }\n        count++\n    }\n    return count\n}\n",
  "    return 0\n}\n", "\tcount := 0\n\tfor _, num := range nums {\n\t\tif num > 10\
    \ && hasOddDigits(num) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", " \
    \   filtered := 0\n    for _, n := range nums {\n        if n > 10 && isOdd(n)\
    \ {\n            filtered++\n        }\n    }\n    return filtered\n}\n", "  \
    \  var result []int\n    for _, num := range nums {\n        if num > 10 && (num\
    \ % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 ==\
    \ 9) {\n            result = append(result, num)\n        }\n    }\n    return\
    \ len(result)\n}\n", "    return 0\n}\n", "    counter := 0\n    for _, num :=\
    \ range nums {\n        if num > 10 && isFirstLastOdd(num) {\n            counter++\n\
    \        }\n    }\n    return counter\n}\n", "    m := make(map[int]bool)\n  \
    \  for _, num := range nums {\n        if num >= 10 {\n            tens, units\
    \ := num / 10, num % 10\n            if tens % 2 != 0 && units % 2 != 0 {\n  \
    \              m[num] = true\n            }\n        }\n    }\n    return len(m)\n\
    }\n", "    result := 0\n    for _, value := range nums {\n        if value > 10\
    \ && isFirstAndLastOdd(value) {\n            result++\n        }\n    }\n    return\
    \ result\n}\n", "    var cnt int\n    for _, n := range nums {\n        // TODO:\
    \ implement me!\n    }\n    return cnt\n}\n", "    return 0\n}\n", "    count\
    \ := 0\n    for _, n := range nums {\n        num := n\n        if n < 0 {\n \
    \           num = -n\n        }\n        if num > 10 && num%2 == 1 {\n       \
    \     // check first and last digit\n            lastDigit := num % 10\n     \
    \       firstDigit := num\n            for ; firstDigit >= 10; firstDigit /= 10\
    \ {\n            }\n            if firstDigit%2 == 1 && lastDigit%2 == 1 {\n \
    \               count += 1\n            }\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ isFirstAndLastOdd(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var final, count int\n    for i := 0; i < len(nums); i++ {\n\
    \        final = nums[i]\n        if nums[i] < 10 {\n            continue\n  \
    \      } else {\n            for final > 0 {\n                if final%10%2 ==\
    \ 0 {\n                    count = 0\n                    break\n            \
    \    } else {\n                    count++\n                    final /= 10\n\
    \                }\n            }\n        }\n        if count > 1 {\n       \
    \     final = 1\n        } else {\n            final = 0\n        }\n    }\n \
    \   return final\n}\n", "    count := 0\n    if len(nums) == 0 {\n        return\
    \ count\n    }\n    for _, n := range nums {\n        if n > 10 && n % 2 == 1\
    \ {\n            sn := fmt.Sprintf(\"%d\", n)\n            if sn[0] % 2 == 1 &&\
    \ sn[len(sn) - 1] % 2 == 1 {\n                count += 1\n            }\n    \
    \    }\n    }\n    return count\n}\n", "    return 0\n}\n", "    var count int\
    \ = 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 {\n \
    \           num2 := num\n            num1 := num\n            for num1 > 10 {\n\
    \                num1 /= 10\n            }\n            for num2 > 10 {\n    \
    \            num2 %= 10\n            }\n            if num1 == num2 {\n      \
    \          count++\n            }\n        }\n    }\n    return count\n}\n", " \
    \   count := 0\n    for _, num := range nums {\n        if num > 10 && \n    \
    \       num%2 == 1 && \n           (num/10)%2 == 1 && \n           num%10 == 1\
    \ || num%10 == 3 || num%10 == 5 || num%10 == 7 || num%10 == 9 {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    //counting the numbers in nums\
    \ that are > 10\n    //and the first digit and last digit are both odd\n    count\
    \ := 0\n    for _, num := range nums {\n        // a number is > 10\n        if\
    \ num > 10 {\n            //we separate out digits\n            lastDigit := num\
    \ % 10\n            firstDigit := num\n            for firstDigit >= 10 {\n  \
    \              firstDigit = firstDigit / 10\n            }\n            //we check\
    \ if they are odd\n            if (lastDigit % 2 != 0) && (firstDigit % 2 != 0)\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    return 0\n}\n", "    cnt := 0\n    for _, v := range nums {\n     \
    \   if v < 10 {\n            continue\n        }\n        if v % 2 == 0 {\n  \
    \          continue\n        }\n        if v % 2 == 0 {\n            continue\n\
    \        }\n        if (v % 10) % 2 == 0 {\n            continue\n        }\n\
    \        cnt++\n    }\n    return cnt\n}\n", "    count := 0\n    for _, n :=\
    \ range nums {\n        if n > 10 && isOdd(n) {\n            count++\n       \
    \ }\n    }\n    return count\n}\n", "    var count int\n    for _, num := range\
    \ nums {\n        if num > 10 && checkIfOddEnds(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for _, num\
    \ := range nums {\n        if num > 10 && isOdd(num) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    return 0\n}\n", "    var cnt int\
    \ = 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n", "    return 0\n\
    }\n", "    var tmpInts []int\n    for _, num := range nums {\n        if num >\
    \ 10 && (num % 10 % 2 != 0) && (num / 10 % 2 != 0) {\n            tmpInts = append(tmpInts,\
    \ num)\n        }\n    }\n    return len(tmpInts)\n}\n", "    cnt := 0\n    for\
    \ _, val := range nums {\n        if (val > 10) && (val % 2 == 1) {\n        \
    \    tmp := val\n            for val > 0 {\n                val /= 10\n      \
    \      }\n            if (tmp % 10 == 1) || (tmp % 10 == 3) || (tmp % 10 == 5)\
    \ || (tmp % 10 == 7) || (tmp % 10 == 9) {\n                cnt++\n           \
    \ }\n        }\n    }\n    return cnt\n}\n", "    return -1\n}\n", "    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num < 0 {\n            num = -num\n        }\n        //\
    \ check first and last digits are odd\n        firstDigit := num / 10\n      \
    \  lastDigit := num % 10\n        if firstDigit % 2 == 0 || lastDigit % 2 == 0\
    \ {\n            continue\n        }\n        cnt++\n    }\n    return cnt\n}\n",
  "    var count int\n    for _,v := range nums {\n        if v > 10 && oddFirstAndLast(v)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "\tcount :=\
    \ 0\n\tfor _, num := range nums {\n\t\tif num > 10 && checkNum(num) {\n\t\t\t\
    count++\n\t\t}\n\t}\n\treturn count\n}\n", "    return 0\n}\n", "    var count\
    \ int\n    for _, n := range nums {\n        if n > 10 && isOdd(n) && isOdd(firstDigit(n))\
    \ && isOdd(lastDigit(n)) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n", "    r := 0\n    for _, v := range nums {\n        if v > 10 &&\
    \ v % 2 == 1 {\n            o, e := v, 0\n            for o > 0 {\n          \
    \      o /= 10\n                e += 1\n            }\n            if v / (1e(e-1))\
    \ % 2 == 1 {\n                r += 1\n            }\n        }\n    }\n    return\
    \ r\n}\n", "    var result int\n    for _, v := range nums {\n        if v > 10\
    \ && isOdd(v) {\n            result++\n        }\n    }\n    return result\n}\n",
  "    count := 0\n    for _, v := range nums {\n        if v >= 10 && isOdd(v % 10)\
    \ && isOdd(v / 10) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ (num/10)%2 != 0 && num%2 != 0 {\n            count++\n        }\n    }\n   \
    \ return count\n}\n", "    num_digits_greater_than_10 := 0\n    for _, number\
    \ := range nums {\n        if number > 10 {\n            if isNumberSpecial(number)\
    \ {\n                num_digits_greater_than_10++\n            }\n        }\n\
    \    }\n    return num_digits_greater_than_10\n}\n", "    count := 0\n    for\
    \ _, num := range nums {\n        if num > 10 && num % 2 == 1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    cnt := 0\n    for _, n := range\
    \ nums {\n        if n < 10 {\n            continue\n        }\n        ld :=\
    \ n % 10 //last digit\n        if ld % 2 == 0 {\n            continue\n      \
    \  }\n        fd := n\n        for fd > 10 {\n            fd /= 10\n        }\n\
    \        if fd % 2 == 0 {\n            continue\n        }\n        cnt++\n  \
    \  }\n    return cnt\n}\n", "\tcount := 0\n\tfor _, num := range nums {\n\t\t\
    if num > 10 && (num / 10) % 2 != 0 && num % 2 != 0 {\n\t\t\tcount += 1\n\t\t}\n\
    \t}\n\treturn count\n}\n", "    count := 0\n    for _, num := range nums {\n \
    \       if num > 10 && num % 2 == 1 {\n            if num / 10 % 2 == 1 && num\
    \ % 10 % 2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n", "    // Your code here\n}\n", "    num := 0\n    for\
    \ _, value := range nums {\n        if value > 10 && isFirstAndLastOdd(value)\
    \ {\n            num++\n        }\n    }\n    return num\n}\n", "    // Implement\
    \ here\n    var num, dig_1, dig_2 int\n    var cnt int\n    for _, num = range\
    \ nums {\n        dig_1 = num / 10\n        dig_2 = num % 10\n        if num >\
    \ 10 && dig_1 % 2 != 0 && dig_2 % 2 != 0 {\n            cnt++\n        }\n   \
    \ }\n    return cnt\n}\n", "    var result int\n    for _, num := range nums {\n\
    \        if num > 10 && (num/10)%2 != 0 && num%2 != 0 {\n            result++\n\
    \        }\n    }\n    return result\n}\n", "    cnt := 0\n    for _, v := range\
    \ nums {\n        if v <= 10 {\n            continue\n        }\n        n :=\
    \ v\n        a, b := n % 10, 0\n        for n > 0 {\n            b = n % 10\n\
    \            n /= 10\n        }\n        if a % 2 == 1 && b % 2 == 1 {\n     \
    \       cnt++\n        }\n    }\n    return cnt\n}\n", "    var rv int\n    for\
    \ _, v := range nums {\n        if (v > 10) && isFirstAndLastDigitOdd(v) {\n \
    \           rv++\n        }\n    }\n    return rv\n}\n", "    var result int\n\
    \    for _, n := range nums {\n        if n > 10 && ((n%10)%2 != 0) && ((n/10)%2\
    \ != 0) {\n            result++\n        }\n    }\n    return result\n}\n", " \
    \   c := 0\n    for _, n := range nums {\n        if abs(n) > 10 && isOdd(n) &&\
    \ isOdd(n/10) {\n            c++\n        }\n    }\n    return c\n}\n", "    count\
    \ := 0\n    for _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    // Write\
    \ your code here\n    res := 0\n    for _,n := range nums {\n        if n>10 &&\
    \ isSpecial(n) {\n            res += 1\n        }\n    }\n    return res\n}\n",
  "    // implementation here\n    var cnt int\n    for _, v := range nums {\n   \
    \     if v > 10 && v % 2 == 1 {\n            s := fmt.Sprintf(\"%d\", v)\n   \
    \         if int(s[0]) % 2 == 1 && int(s[len(s)-1]) % 2 == 1 {\n             \
    \   cnt++\n            }\n        }\n    }\n    return cnt\n}\n", "    var count\
    \ int\n    for _, n := range nums {\n        if n > 10 && n % 2 == 1 && (n / 10)\
    \ % 2 == 1 {\n            count += 1\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for _, num := range nums {\n        if num > 10 && (num % 10\
    \ % 2 == 1 && num / 10 % 2 == 1) {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    cnt := 0\n    for _, n := range nums {\n        if\
    \ n <= 10 {\n            continue\n        }\n        if n < 0 {\n           \
    \ n = -n\n        }\n        if n % 2 == 0 {\n            continue\n        }\n\
    \        for {\n            if n < 10 {\n                break\n            }\n\
    \            n /= 10\n        }\n        if n % 2 == 0 {\n            continue\n\
    \        }\n        cnt++\n    }\n    return cnt\n}\n", "    count := 0\n    for\
    \ _, v := range nums {\n        if v > 10 && (v%10)%2 != 0 && v/10%2 != 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var f, l,\
    \ count int\n    for _, value := range nums {\n        if value > 10 {\n     \
    \       f = value / 10\n            l = value % 10\n            if f % 2 != 0\
    \ && l % 2 != 0 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n", "    return 0\n}\n", "    var count int\n    for _, i\
    \ := range nums {\n        if i > 10 && isOddDigit(i) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for _, num :=\
    \ range nums {\n        if num > 10 && isOdd(num / 10) && isOdd(num % 10) {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    count :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && num > 0 {\n      \
    \      if num % 10 % 2 != 0 && num / 10 % 10 % 2 != 0 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    res := 0\n    for\
    \ _, n := range nums {\n        if n <= 10 {\n            continue\n        }\n\
    \        ld := n % 10\n        if ld % 2 == 0 {\n            continue\n      \
    \  }\n        fd := n\n        for fd >= 10 {\n            fd /= 10\n        }\n\
    \        if fd % 2 == 0 {\n            continue\n        }\n        res++\n  \
    \  }\n    return res\n}\n", "    cnt := 0\n    for _, num := range nums {\n  \
    \      if num > 10 && isOddDigit(num) {\n            cnt += 1\n        }\n   \
    \ }\n    return cnt\n}\n", "    // \u5947\u6570\u7684\u4E2A\u6570\n    oddCount\
    \ := 0\n    for _, value := range nums {\n        if value < 10 {\n          \
    \  continue\n        }\n\n        digits := 0\n        tmp := value\n        for\
    \ tmp > 0 {\n            tmp /= 10\n            digits++\n        }\n\n      \
    \  head := value / getPow10(digits - 1)\n        tail := value % 10\n        if\
    \ head % 2 == 1 && tail % 2 == 1 {\n            oddCount++\n        }\n    }\n\
    \n    return oddCount\n}\n", "    cnt := 0\n    for _, num := range nums {\n \
    \       if num > 10 && (num / 10) % 2 != 0 && num % 2 != 0 {\n            cnt++\n\
    \        }\n    }\n    return cnt\n}\n", "    return 0\n}\n", "    count := 0\n\
    \    for _, num := range nums {\n        if (num > 10) && (num % 2 != 0) && ((num\
    \ / 10) % 2 != 0) && (num % 10 != 0) {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    var ret, num int\n    for _, num = range nums {\n\
    \        if num > 10 && isFirstAndLastDigitOdd(num) {\n            ret++\n   \
    \     }\n    }\n    return ret\n}\n", "    count := 0\n    for _, num := range\
    \ nums {\n        if num < 10 {\n            continue\n        }\n        if num\
    \ % 2 == 0 {\n            continue\n        }\n        first := num % 10\n   \
    \     if first % 2 == 0 {\n            continue\n        }\n        last := 0\n\
    \        for num > 0 {\n            last = num % 10\n            num /= 10\n \
    \       }\n        if last % 2 == 0 {\n            continue\n        }\n     \
    \   count++\n    }\n    return count\n}\n", "    // Write your code here\n   \
    \ var count = 0\n    for _, value := range nums {\n        if value > 10 {\n \
    \           if value < 100 {\n                if value%2 == 1 {\n            \
    \        count += 1\n                }\n            } else {\n               \
    \ for value > 0 {\n                    if value%10%2 == 1 {\n                \
    \        if value < 10 {\n                            count += 1\n           \
    \             }\n                    } else {\n                        break\n\
    \                    }\n                    value /= 10\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n", "    var count int\n\
    \    for _, v := range nums {\n        if v > 10 && v%2 == 1 && firstDigit(v)%2\
    \ == 1 && lastDigit(v)%2 == 1 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    // replace the code below with your solution\n    return 0\n\
    }\n", "    count := 0\n    for _, n := range nums {\n        if n >= 10 && n %\
    \ 2 == 1 && n % 10 % 2 == 1 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n", "    var c int = 0\n    for _, n := range nums {\n        if n\
    \ > 10 && isFirstAndLastOdd(n) {\n            c += 1\n        }\n    }\n    return\
    \ c\n}\n", "    if len(nums) == 0 {\n        return 0\n    }\n    count := 0\n\
    \    for _,v := range nums {\n        if v > 10 && isFirstOdd(v) && isLastOdd(v)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    res :=\
    \ 0\n    for _, n := range nums {\n        var isFirst, isLast bool\n        _,\
    \ isFirst = getFirst(n)\n        _, isLast = getLast(n)\n        if isFirst &&\
    \ isLast && n > 10 {\n            res += 1\n        }\n    }\n    return res\n\
    }\n", "    size := len(nums)\n    total := 0\n    for i := 0; i < size; i++ {\n\
    \        if nums[i] > 10 {\n            // get the first and last digit of nums[i]\n\
    \            first := nums[i] / 10\n            last := nums[i] % 10\n       \
    \     if (first % 2 != 0) && (last % 2 != 0) {\n                total += 1\n \
    \           }\n        }\n    }\n    return total\n}\n", "    // return 0\n  \
    \  var result = 0\n    for _, v := range nums {\n        if v > 10 {\n       \
    \     // fmt.Println(v)\n            var isSpecial = false\n            vv :=\
    \ v\n            for vv >= 10 {\n                vv /= 10\n            }\n   \
    \         if vv%2 == 1 {\n                vv = v\n                for vv < 10\
    \ {\n                    vv *= 10\n                }\n                if vv%10%2\
    \ == 1 {\n                    isSpecial = true\n                }\n          \
    \  }\n            if isSpecial {\n                // fmt.Println(v)\n        \
    \        result += 1\n            }\n        }\n    }\n    return result\n}\n",
  "    count := 0\n    for _, num := range nums {\n        if num >= 10 && num % 2\
    \ == 1 {\n            digits := countDigits(num)\n            if digits[0] % 2\
    \ == 1 && digits[len(digits) - 1] % 2 == 1 {\n                count++\n      \
    \      }\n        }\n    }\n    return count\n}\n", "    cnt := 0\n    for _,\
    \ num := range nums {\n        if num <= 10 {\n            continue\n        }\n\
    \        if num % 2 == 0 {\n            continue\n        }\n        if num /\
    \ 10 % 2 == 0 {\n            continue\n        }\n        cnt++\n    }\n    return\
    \ cnt\n}\n", "    return len(nums)\n}\n", "    count := 0\n    for _, n := range\
    \ nums {\n        if n > 10 && isOdd(n%10) && isOdd(n/10) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n", "    ret := 0\n    for _, e\
    \ := range nums {\n        if e > 10 && isOdd(e) {\n            ret++\n      \
    \  }\n    }\n    return ret\n}\n", "    count := 0\n    for _, n := range nums\
    \ {\n        first := n / 10\n        last := n % 10\n        if n > 10 && first%2\
    \ == 1 && last%2 == 1 {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ num%2 != 0 && firstDigit(num)%2 != 0 && lastDigit(num)%2 != 0 {\n          \
    \  count++\n        }\n    }\n    return count\n}\n", "    res := 0\n    for _,\
    \ n := range nums {\n        if n > 10 && isOdd(n) {\n            res++\n    \
    \    }\n    }\n    return res\n}\n", "    count := 0\n    for _, num := range\
    \ nums {\n        if num > 10 && num > 0 {\n            if (num / 10) % 2 == 1\
    \ && num % 2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n", "    var cnt int = 0\n    for _, num := range nums {\n\
    \        if num > 10 && num % 2 == 1 {\n            unit := num % 10\n       \
    \     num /= 10\n            div := num % 10\n            if div % 2 == 1 && unit\
    \ % 2 == 1 {\n                cnt++\n            }\n        }\n    }\n    return\
    \ cnt\n}\n", "    cnt := 0\n    for _,num := range nums {\n        if num > 10\
    \ && isOddDigit(num) {\n            cnt++\n        }\n    }\n    return cnt\n\
    }\n", "    var v int\n    count := 0\n    for _, n := range nums {\n        //\
    \ If abs value of number is greater than 10 and its first and last\n        //\
    \ digits are odd, increase count by 1\n        if (abs(n) > 10) && (abs(n)%10%2\
    \ == 1) && (n/abs(n) == (n/abs(n)/10)*10) {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    var count int\n    for _, v := range nums\
    \ {\n        if v > 10 && (v/10)%2 != 0 && v%2 != 0 {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "\tcount := 0\n\tfor _, n := range nums\
    \ {\n\t\t// check all conditions\n\t\tif (n > 10) && (isFirstDigitOdd(n)) && (isLastDigitOdd(n))\
    \ {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", "    n := 0\n    for _,\
    \ num := range nums {\n        if num > 10 && isOdd(num) {\n            n++\n\
    \        }\n    }\n    return n\n}\n", "    // YOUR CODE HERE\n    return 0\n\
    }\n", "    var result int\n    for _, num := range nums {\n        if num > 10\
    \ && (num / 10) % 2 != 0 && num % 2 != 0 {\n            result++\n        }\n\
    \    }\n    return result\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   // write your code here\n    sum := 0\n    for _, i := range nums {\n    \
    \    if i > 10 && isFirstAndLastOdd(i) {\n            sum++\n        }\n    }\n\
    \    return sum\n}\n", "    res := 0\n    for _, num := range nums {\n       \
    \ if num > 10 && firstLastDigitOdd(num) {\n            res += 1\n        }\n \
    \   }\n    return res\n}\n", "    count := 0\n    for _, num := range nums {\n\
    \        if num > 10 && isOdd(num) {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    cnt := 0\n    for _, num := range nums {\n     \
    \   if num < 10 {\n            continue\n        }\n        if num%2 == 0 {\n\
    \            continue\n        }\n        if num/10%2 == 0 {\n            continue\n\
    \        }\n        if num%10%2 == 0 {\n            continue\n        }\n    \
    \    cnt++\n    }\n    return cnt\n}\n", "    var total int\n    for _,v := range\
    \ nums {\n        if v > 10 && isFirstLastOdd(v) {\n            total++\n    \
    \    }\n    }\n    return total\n}\n", "    return len(filter(nums, func(num int)\
    \ bool {\n        return (num > 10) && (firstAndLastDigitsAreOdd(num))\n    }))\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ isFirstAndLastDigitOdd(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var cnt int\n    for _, n := range nums {\n        if n <\
    \ 10 {\n            continue\n        }\n        fn := n % 10\n        n = n /\
    \ 10\n        ln := n % 10\n        if fn % 2 == 1 && ln % 2 == 1 {\n        \
    \    cnt += 1\n        }\n    }\n    return cnt\n}\n", "    // Implement your\
    \ solution here\n    count := 0\n    for _, v := range nums {\n        if v >\
    \ 10 && isFirstAndLastOdd(v) {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n", "    var result int\n    for _, num := range nums {\n  \
    \      if num > 10 && isEven(num) {\n            result++\n        }\n    }\n\
    \    return result\n}\n", "    cnt := 0\n    for _, num := range nums {\n    \
    \    if num > 10 && num%2 == 1 {\n            rev := 0\n            for num >\
    \ 0 {\n                rev = rev*10 + num%10\n                num /= 10\n    \
    \        }\n            if rev%2 == 1 {\n                cnt++\n            }\n\
    \        }\n    }\n    return cnt\n}\n", "    count := 0\n    for _, num := range\
    \ nums {\n        firstDigit := num / 10\n        lastDigit := num % 10\n    \
    \    if num > 10 && firstDigit % 2 != 0 && lastDigit % 2 != 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n", "    // This is your job. :)\n\
    \    return 0\n}\n", "    count := 0\n    for _, v := range nums {\n        if\
    \ v > 10 && (firstDigit(v) % 2 != 0) && (lastDigit(v) % 2 != 0) {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n", "    // Write your code\
    \ here\n}\n", "\tres := 0\n\tfor _, val := range nums {\n\t\tif val > 10 && val\
    \ % 2 == 1 {\n\t\t\tif val / 10 % 2 == 1 && val % 10 % 2 == 1 {\n\t\t\t\tres++\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n", "    length := len(nums)\n    var count\
    \ int = 0\n    for i := 0; i < length; i++ {\n        var num int = nums[i]\n\
    \        if num < 10 {\n            continue\n        }\n        if num % 2 ==\
    \ 0 {\n            continue\n        }\n        if nums[i] % 10 % 2 == 0 {\n \
    \           continue\n        }\n        count += 1\n    }\n    return count\n\
    }\n", "    var num int\n    for _, v := range nums {\n        if v > 10 && isOdd(v\
    \ % 10) && isOdd(v / 10) {\n            num += 1\n        }\n    }\n    return\
    \ num\n}\n", "    var count int\n    for _, i := range nums {\n        if i >\
    \ 10 && isFirstAndLastDigitOdd(i) {\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    return 0\n}\n", "    count := 0\n    for _, num :=\
    \ range nums {\n        if num > 10 && isOdd(num/10) && isOdd(num%10) {\n    \
    \        count++\n        }\n    }\n    return count\n}\n", "    count := 0\n\
    \    for _, num := range nums {\n        if num > 10 && isOddFirstDigit(num) &&\
    \ isOddLastDigit(num) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var count int = 0\n    for _,num := range nums {\n        if num >\
    \ 10 && isFirstDigitOdd(num) && isLastDigitOdd(num) {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "\tif len(nums) == 0 {\n\t\treturn 0\n\
    \t}\n\tcount := 0\n\tfor _, num := range nums {\n\t\tif num < 10 {\n\t\t\tcontinue\n\
    \t\t}\n\t\tlast := num % 10\n\t\tfirst := num\n\t\tfor first >= 10 {\n\t\t\tfirst\
    \ /= 10\n\t\t}\n\t\tif first % 2 == 1 && last % 2 == 1 {\n\t\t\tcount++\n\t\t\
    }\n\t}\n\treturn count\n}\n", "    var cnt int = 0\n    for _, v := range nums\
    \ {\n        if v > 10 && abs(v%10)%2 == 1 && abs(v/10)%2 == 1 {\n           \
    \ cnt++\n        }\n    }\n    return cnt\n}\n", "    count := 0\n    for _, num\
    \ := range nums {\n        if num > 10 && (num % 10 % 2 != 0) && num / 10 % 2\
    \ != 0 {\n            count += 1\n        }\n    }\n    return count\n}\n", " \
    \   cnt := 0\n    for _, v := range nums {\n        if v > 10 && firstDigitIsOdd(v)\
    \ && lastDigitIsOdd(v) {\n            cnt++\n        }\n    }\n    return cnt\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num >= 10 &&\
    \ isFirstLastOdd(num) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    // write your code here\n    return 0\n}\n", "    count := 0\n    for\
    \ _, num := range nums {\n        if num < 10 {\n            continue\n      \
    \  }\n        first := num % 10\n        last := num / 10 % 10\n        if first\
    \ % 2 == 1 && last % 2 == 1 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    return 0\n}\n", "    counter := 0\n    for _, num := range\
    \ nums {\n        if num > 10 && isOdd(first(num)) && isOdd(last(num)) {\n   \
    \         counter++\n        }\n    }\n    return counter\n}\n", "    count :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && ((num % 10 == 1) ||\
    \ (num % 10 == 3) || (num % 10 == 5) || (num % 10 == 7) || (num % 10 == 9)) {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var count\
    \ int = 0\n    for _,n := range nums {\n        if (n >= 10) && (n/10)%2 == 1\
    \ && n%10 == 1 || n%10 == 3 || n%10 == 5 || n%10 == 7 || n%10 == 9 {\n       \
    \     count++\n        }\n    }\n    return count\n}\n", "    count := 0\n   \
    \ for _, v := range nums {\n        if v > 10 && isFirstAndLastDigitOdd(v) {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var cnt int\n\
    \    var n int\n    for _, i := range nums {\n        n = i\n        if i < 0\
    \ {\n            n = -i\n        }\n        if i > 10 &&\n            (n%10)%2\
    \ != 0 &&\n            (n/10)%2 != 0 {\n            cnt++\n        }\n    }\n\
    \    return cnt\n}\n", "    return 0\n}\n", "    n := 0\n    for _, num := range\
    \ nums {\n        if num > 10 && isOdd(getFirstDigit(num)) && isOdd(getLastDigit(num))\
    \ {\n            n++\n        }\n    }\n    return n\n}\n", "    l := len(nums)\n\
    \    c := 0\n    for i := 0; i < l; i++ {\n        n := nums[i]\n        if n\
    \ < 10 {\n            continue\n        }\n        first := n % 10\n        last\
    \ := n / 10\n        if first % 2 == 1 && last % 2 == 1 {\n            c++\n \
    \       }\n    }\n    return c\n}\n", "    return \n}\n", "    count := 0\n  \
    \  for _, num := range nums {\n        if num > 10 && isLastDigitOdd(num) && isFirstDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstLastOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    var c\
    \ int\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            c++\n        }\n    }\n    return c\n}\n", "    cnt := 0\n  \
    \  for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n", "    var cnt int\n\
    \    for _, v := range nums {\n        if v > 10 && (v/10)%2 == 1 && v%2 == 1\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n", "    count :=\
    \ 0\n    for _, num := range nums {\n        num = int(num)\n        a := num/10\n\
    \        b := num%10\n        if a%2 != 0 && b%2 != 0 && num > 10 {\n        \
    \    count++\n        }\n    }\n    return count\n}\n\n//", "    // TODO\n   \
    \ return 0\n}\n", "    nums = append(nums, 0)\n    total := 0\n    for i, v :=\
    \ range nums {\n        for {\n            if (v % 10) % 2 == 0 {\n          \
    \      break\n            }\n            v /= 10\n            if v == 0 {\n  \
    \              break\n            }\n        }\n        if v != 0 {\n        \
    \    continue\n        }\n        if nums[i] > 10 {\n            total++\n   \
    \     }\n    }\n    return total\n}\n", "    cnt := 0\n    for _, v := range nums\
    \ {\n        if v <= 10 {\n            continue\n        }\n        if v % 2 ==\
    \ 0 {\n            continue\n        }\n        tmp := v\n        if tmp % 10\
    \ % 2 == 0 {\n            continue\n        }\n        for tmp / 10 != 0 {\n \
    \           tmp /= 10\n        }\n        if tmp % 2 == 0 {\n            continue\n\
    \        }\n        cnt++\n    }\n    return cnt\n}\n", "    return 0\n}\n", " \
    \   var count int\n    for _, val := range nums {\n        if val > 10 && isOdd(val/10)\
    \ && isOdd(val%10) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, num := range nums {\n        if num > 10 &&\
    \ isOdd(num) {\n            count++\n        }\n    }\n    return count\n}\n",
  "    num := 0\n    for _, i := range nums {\n        if i > 10 && isFirstLastOdd(i)\
    \ {\n            num += 1\n        }\n    }\n    return num\n}\n", "    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && isFirstAndLastDigitOdd(v)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n", "    numFiltered\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            numFiltered += 1\n        }\n    }\n    return numFiltered\n\
    }\n", "    // TODO implement me\n    return 0\n}\n", "    count := 0\n    // TODO\n\
    \    return count\n}\n", "    // write your code in Go 1.4\n    var count int\n\
    \    for _, num := range nums {\n        if num >= 10 && (num / 10) % 2 != 0 &&\
    \ num % 10 != 0 {\n            count++\n        }\n    }\n    return count\n}\n",
  "    var count int\n    for _, i := range nums {\n        a := i / 10\n        b\
    \ := i % 10\n        if a % 2 != 0 && b % 2 != 0 && i > 10 {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    // count = 0\n    // for each\
    \ number in nums:\n    //    if number is greater than 10 and number's first and\
    \ last digits are odd:\n    //         count = count + 1\n    // return count\n\
    \    count := 0\n    for _, num := range nums {\n        if num > 10 && num%2\
    \ == 1 && (num/10)%2 == 1 {\n            count = count + 1\n        }\n    }\n\
    \    return count\n}\n", "    return 0\n}\n", "    return 1\n}\n", "    var ret\
    \ int\n    for _, v := range nums {\n        if v > 10 && v/10%2 != 0 && v%10%2\
    \ != 0 {\n            ret++\n        }\n    }\n    return ret\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
