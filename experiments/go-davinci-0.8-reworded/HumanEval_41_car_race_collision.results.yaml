language: go_test.go
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // left, right are the indices of the cars that are yet to collide.\n\
    \    // right is decremented as we iterate over the cars moving right to left.\n\
    \    // left is incremented as we iterate over the cars moving left to right.\n\
    \    left, right := 0, n - 1\n    collisions := 0\n    for left < right {\n  \
    \      // We could potentially have a collision.\n        if left == right {\n\
    \            collisions += 1\n        }\n        left += 1\n        right -= 1\n\
    \    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpnbzbgi34_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpnbzbgi34_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpnbzbgi34_test.go:50: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpnbzbgi34_test.go:50:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpnbzbgi34_test.go:50: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    ncollisions := 0\n    for i := 1; i <= n; i++ {\n        for\
    \ j := 1; j <= n; j++ {\n            if i % j == 0 {\n                ncollisions++\n\
    \            }\n        }\n    }\n    return ncollisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpcwett95l_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpcwett95l_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpcwett95l_test.go:45: expected '%!s(int=16)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpcwett95l_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=20)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpcwett95l_test.go:45: expected '%!s(int=100)', got '%!s(int=27)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are all moving at the same speed.\n    // As such,\
    \ if we can determine the number of cars\n    // that the first car collides with,\
    \ we've solved the\n    // problem.\n    // Therefore, for a given car moving\
    \ left to right, let's\n    // find the number of cars it collides with.\n   \
    \ collisions := 0\n    for i := 0; i < n; i++ {\n        // For a given car moving\
    \ left to right, let's find\n        // the number of cars it collides with.\n\
    \        // This is done by finding the number of cars moving\n        // right\
    \ to left that are to the left of this car\n        // moving left to right\n\
    \        collisions += n - i - 1\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_b0tdmch_test.go:52: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_b0tdmch_test.go:52:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_b0tdmch_test.go:52: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_b0tdmch_test.go:52:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_b0tdmch_test.go:52: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // If n == 0, return 0.  If n == 1, return 0.  If n == 2, return\
    \ 1.\n    // If n >= 3, we know that the number of collisions is the same as\n\
    \    // the number of collisions that would result if only n-2 cars were left.\n\
    \    if n <= 2 {\n        return n - 1\n    }\n    return car_race_collision(n\
    \ - 2)\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_s55qf2m_test.go:43: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_s55qf2m_test.go:43:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_s55qf2m_test.go:43: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_s55qf2m_test.go:43:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_s55qf2m_test.go:43: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    initPos := make([]int, n)\n    for i := 0; i < n; i++ {\n  \
    \      initPos[i] = i\n    }\n    return car_race_collision_recur(initPos, 0,\
    \ 0)\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbfoqflk_test.go:21:12: undefined: car_race_collision_recur

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // 1.  E = i+1 , 1 <= i <= n - 1\n    // 2.  1 <= j <= n - 1\n\
    \    // 3.  1 <= j <= i - 1 --> i + 1 = j\n    // 4.  i + 1 <= j <= n - 1 -->\
    \ j + 1 = i\n\n    // 1 < i <= n - 1 --> i + 1 <= n <= 2 * i\n    // 3. i + 1\
    \ <= j <= 2 * i --> j - i <= i --> 2 * i <= 2 * j\n    // 4. 2 * i <= 2 * j -->\
    \ j <= i --> 1 <= j <= i - 1\n    // then i + 1 = j\n    // 1 < i <= n - 1\n \
    \   cnt := 0\n    for i := 2; i <= n - 1; i++ {\n        // 1 <= j <= i - 1\n\
    \        cnt += i - 1\n    }\n    return cnt\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0mvc2gu0_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0mvc2gu0_test.go:52:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0mvc2gu0_test.go:52: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0mvc2gu0_test.go:52:\
    \ expected '%!s(int=64)', got '%!s(int=21)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0mvc2gu0_test.go:52: expected '%!s(int=100)', got '%!s(int=36)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    num_collisions := 0\n    return num_collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmptsm_orho_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmptsm_orho_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmptsm_orho_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmptsm_orho_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmptsm_orho_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var index_for_left_cars [50000]int;\n    var index_for_right_cars\
    \ [50000]int;\n    var i, j, index int;\n    var collision_count int;\n\n    if\
    \ (n < 1) {\n        return 0;\n    }\n\n    // Initially, cars are very far away;\
    \ thus, their indexes are very high.\n    for i = 0; i < n; i++ {\n        index_for_left_cars[i]\
    \ = 50000 + i;\n        index_for_right_cars[i] = 50000 - i;\n    }\n\n    collision_count\
    \ = 0;\n    for i = 0; i < n; i++ {\n        for j = 0; j < n; j++ {\n       \
    \     index = index_for_left_cars[i] - index_for_right_cars[j];\n            if\
    \ (index > 0) {\n                collision_count = collision_count + 1;\n    \
    \        }\n        }\n    }\n\n    return collision_count;\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5vfgmiy5_test.go:62: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5vfgmiy5_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5vfgmiy5_test.go:62: expected '%!s(int=16)', got '%!s(int=15)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5vfgmiy5_test.go:62:\
    \ expected '%!s(int=64)', got '%!s(int=63)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5vfgmiy5_test.go:62: expected '%!s(int=100)', got '%!s(int=99)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return -1\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_iaz79fr_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_iaz79fr_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_iaz79fr_test.go:37: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_iaz79fr_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_iaz79fr_test.go:37: expected '%!s(int=100)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Allocate space for the n cars;  assign them their names in\
    \ a very simple manner\n    var cars_left []int = make([]int, n)\n    var cars_right\
    \ []int = make([]int, n)\n    for i := 0; i < n; i++ {\n        cars_left[i] =\
    \ i\n        cars_right[i] = i\n    }\n\n    // Sort the cars in increasing order\
    \ of their names,\n    // but in such a way that the names of cars going left\n\
    \    // and right are interleaved\n    var cars_all []int = make([]int, 2 * n)\n\
    \    for i := 0; i < n; i++ {\n        cars_all[2 * i] = cars_left[i]\n      \
    \  cars_all[2 * i + 1] = cars_right[i]\n    }\n    merge_sort(cars_all)\n\n  \
    \  // Two cars are said to collide if and only if they have the same name\n  \
    \  // and one car is moving left and the other is moving right\n    var collisions\
    \ int = 0\n    for i := 0; i < 2 * n - 1; i++ {\n        if cars_all[i] == cars_all[i\
    \ + 1] {\n            collisions++\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pypkmm7_test.go:33:5: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // return car_race_collision_rec(n)\n    return car_race_collision_it(n)\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd50ojbuy_test.go:18:12: undefined: car_race_collision_it

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // let's assume that both left to right and right to left starts\
    \ at 0\n    // so we can say a car is moving left to right when its position is\
    \ positive\n    // and it's moving right to left when its position is negative.\n\
    \    //\n    // The problem statement says that the cars started infinitely far\
    \ from each other\n    // so it's impossible for them to collide during the acceleration\
    \ phase\n    // (assuming they accelerate at the same rate).\n    // As a result,\
    \ we only need to start considering collision when they are traveling\n    //\
    \ at their full speed (and the distance between them is negligible).\n    //\n\
    \    // Assume that the left-to-right cars are indexed from 1 to n, and the right-to-left\n\
    \    // cars are indexed from n+1 to 2n.\n    //\n    // The question is how many\
    \ collisions will there be when the cars reach the end of the line.\n    //\n\
    \    // When car #1 reaches the end of the line, its position is n.\n    // And\
    \ car #(n+1) is at position -n, which means the car #1 will collide with car #(n+1)\n\
    \    //\n    // This is because, when the car #1 starts moving, the car #(n+1)\
    \ has already been moving for\n    // n steps and at the end of these n steps,\
    \ the car #(n+1) is still at position -n,\n    // so when the car #1 is at position\
    \ n, the car #(n+1) is at position -n.\n    //\n    // Similarly, when car #2\
    \ reaches the end of the line, its position is n-1.\n    // And car #(n+2) is\
    \ at position -(n-1), which means the car #2 will collide with car #(n+2)\n  \
    \  //\n    // When car #3 reaches the end of the line, its position is n-2.\n\
    \    // And car #(n+3) is at position -(n-2), which means the car #3 will collide\
    \ with car #(n+3)\n    //\n    // ...\n    //\n    // When car #n reaches the\
    \ end of the line, its position is 1.\n    // And car #(2n) is at position -1,\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp44em9q10_test.go:49:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n + 1) * n / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpd9za9i34_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpd9za9i34_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpd9za9i34_test.go:37: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpd9za9i34_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpd9za9i34_test.go:37: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // If cars are coming from two different directions, there will\
    \ be collision\n    // between cars of same speed. The worst case would be all\
    \ cars have same speed\n    // and driving toward each other.\n    return n *\
    \ (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbrwjg3ic_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbrwjg3ic_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbrwjg3ic_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbrwjg3ic_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbrwjg3ic_test.go:40: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    colliding := false\n    count := 0\n    for left:=0; left<n;\
    \ left++ {\n        for right:=0; right<n; right++ {\n            colliding =\
    \ (left-right)%n == 0\n            if colliding {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpis7rh1sx_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpis7rh1sx_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpis7rh1sx_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpis7rh1sx_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpis7rh1sx_test.go:47: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n\n    // A two-dimensional\
    \ matrix with dimension of (n,n)\n    // We assign a unique value to each cell.\
    \   In this case, cell (i,j)\n    // means the value of the cell is the total\
    \ number of collisions when\n    // there are i cars driving right to left and\
    \ j cars driving left to right.\n    // Note that (i,0) means the number of collisions\
    \ when there are i cars driving\n    // right to left and no cars driving left\
    \ to right.  (0,j) means the number of\n    // collisions when there are j cars\
    \ driving left to right and no cars driving\n    // right to left.\n    var m\
    \ = make([][]int, n+1)\n    for i := 0; i <= n; i++ {\n        m[i] = make([]int,\
    \ n+1)\n    }\n\n    // (i,0) means there are i cars driving right to left and\n\
    \    // no cars driving left to right.  Any of the i cars will collide with\n\
    \    // the left edge of the road.  As a result, it's (i-1) cars colliding with\n\
    \    // the left edge.  This can be computed recursively.\n    for i := 1; i <=\
    \ n; i++ {\n        m[i][0] = m[i-1][0] + (i-1)\n    }\n\n    // Similarly, (0,j)\
    \ means there are j cars driving left to right and\n    // no cars driving right\
    \ to left.  Any of the j cars will collide with\n    // the right edge of the\
    \ road.  As a result, it's (j-1) cars colliding with\n    // the right edge. \
    \ This can be computed recursively.\n    for j := 1; j <= n; j++ {\n        m[0][j]\
    \ = m[0][j-1] + (j-1)\n    }\n\n    // (i,j) means there are i cars driving right\
    \ to left and\n    // j cars driving left to right.\n    // When there are i+1\
    \ cars driving right to left and j cars driving left to right,\n    // we have\
    \ the following cases:\n    //  1.  Case\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4u8v3dqo_test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    travel_left_to_right := make(map[int]bool)\n    travel_right_to_left\
    \ := make(map[int]bool)\n    total_collision := 0\n    for i := 0; i < n; i++\
    \ {\n        travel_left_to_right[i] = true\n        travel_right_to_left[i] =\
    \ true\n    }\n    for pos := 0; pos < n; pos++ {\n        for car_id := 0; car_id\
    \ < n; car_id++ {\n            if travel_left_to_right[car_id] && travel_right_to_left[car_id]\
    \ {\n                total_collision++\n                travel_left_to_right[car_id]\
    \ = false\n                travel_right_to_left[car_id] = false\n            }\n\
    \        }\n    }\n    return total_collision\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp4glwupgj_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp4glwupgj_test.go:53:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp4glwupgj_test.go:53: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp4glwupgj_test.go:53:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp4glwupgj_test.go:53: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n\n    cars := make([]int,\
    \ n)\n\n    for i := 0; i < n; i++ {\n        cars[i] = i\n    }\n\n    collisions\
    \ := 0\n\n    // go through the cars from left to right.\n    for i := 0; i <\
    \ n; i++ {\n        // go through all the right to left cars again, to see if\
    \ there are any collisions.\n        for j := n - 1; j > i; j-- {\n          \
    \  if cars[i] == cars[j] {\n                collisions++\n            }\n    \
    \    }\n    }\n\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkf1vi_rq_test.go:59: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkf1vi_rq_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkf1vi_rq_test.go:59: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkf1vi_rq_test.go:59:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkf1vi_rq_test.go:59: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var i, j, k, count int\n    // k is the array length\n    k\
    \ = 2 * n\n    cars := make([]int, k)\n    // the cars from left to right\n  \
    \  for i = 0; i < n; i++ {\n        cars[i] = i\n    }\n    // the cars from right\
    \ to left\n    for j = 0; j < n; j++ {\n        cars[j + n] = j\n    }\n    for\
    \ i = 0; i < n; i++ {\n        for j = 0; j < n; j++ {\n            if cars[i]\
    \ == cars[j + n] {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5ga7z6ww_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5ga7z6ww_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5ga7z6ww_test.go:56: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5ga7z6ww_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5ga7z6ww_test.go:56: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n*(n-1))/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbac6w7bx_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbac6w7bx_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // assume n is a positive number\n    return n * (n - 1) / 2\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3wcpsq9y_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3wcpsq9y_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3wcpsq9y_test.go:38: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3wcpsq9y_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3wcpsq9y_test.go:38: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // If we keep track of the speeds of all the cars and the position\
    \ of each car,\n    // it is easy to simulate the collision.\n    // The speed\
    \ of all cars in the left to right and right to left direction can be modeled\n\
    \    // as a uniform distribution.\n    // To simulate a uniform distribution,\
    \ we will use the rand.Float64 function\n    // This function takes in a max value,\
    \ and outputs a value between 0 and the max value\n    // By subtracting the max\
    \ value, we can get a value between 0 and -max value\n    // In this code, the\
    \ max value is the length of the \"road\" (which is the distance between the\n\
    \    // cars)\n    // For each car, there is a chance that it will collide with\
    \ a car\n    // The function distance() calculates the distance between two cars\n\
    \    // If the distance between the cars is greater than 0, then the collision\
    \ is avoided\n    // If the distance between the cars is less than 0, then the\
    \ collision occurs\n    // If the collision occurs, the number of collisions increases\
    \ by 1\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j := 0;\
    \ j < n; j++ {\n            if distance(i, j) < 0 {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6cwaxovu_test.go:34:16: undefined: distance

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We ignore all cars that are ahead of others.  For example,\
    \ if we have\n    // 5 cars moving left to right and 5 cars moving right to left\
    \ and the cars\n    // that are moving left to right have the following positions:\n\
    \    //   10, 9, 8, 4, 3\n    // then we only need to consider the cars that are\
    \ moving right to left that\n    // are between positions 3 and 8.  Thus the positions\
    \ of the cars that are\n    // moving right to left can be any of:\n    //   3,\
    \ 4, 5, 6, 7, 8\n    //\n    // Algorithm:\n    // For each car moving left to\
    \ right, we find all the cars moving right to left\n    // that are between its\
    \ position and the position of the car ahead of it.\n    // We then sort the positions\
    \ of these cars in ascending order.\n    // If any two of these positions are\
    \ the same, we have a collision.\n\n    // position[i] = position of ith car that's\
    \ moving left to right\n    position := make([]int, n)\n    for i := 0; i < n;\
    \ i++ {\n        fmt.Scanf(\"%d\", &position[i])\n    }\n\n    // nextPosition[i]\
    \ = position of ith car that's moving left to right that's ahead of it\n    nextPosition\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        fmt.Scanf(\"%d\", &nextPosition[i])\n\
    \    }\n\n    collisions := 0\n    for i := 0; i < n; i++ {\n        // we only\
    \ need to look at positions that are between the current position and\n      \
    \  // the next position\n        positions := make([]int, 0)\n        for j :=\
    \ 0; j < n; j++ {\n            if position[i] < nextPosition[j] && nextPosition[j]\
    \ < position[j] {\n                positions = append(positions, nextPosition[j])\n\
    \            }\n        }\n\n        // sort the positions\n        for k := 0;\
    \ k < len(positions); k++ {\n            for l := k + 1; l < len(positions); l++\
    \ {\n                if positions[k] > positions[l] {\n                    tmp\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp73wk5_h__test.go:60:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 0
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    fmt.Printf(\"car_race_collision(%d)\\n\", n)\n    if n <= 1\
    \ {\n        return 0\n    }\n\n    left_cars := make([]bool, n)\n    right_cars\
    \ := make([]bool, n)\n    for i := 0; i < n; i++ {\n        left_cars[i] = true\n\
    \        right_cars[i] = true\n    }\n\n    var count int = 0\n    for i := 0;\
    \ i < n; i++ {\n        for j := 0; j < n; j++ {\n            if left_cars[i]\
    \ && right_cars[j] {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n\treturn 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n \
    \ candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphjz45bo__test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphjz45bo__test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    for i := 0; i < n; i++ {\n   \
    \     \n    }\n    return -1\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpnd9kutcj_test.go:41: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpnd9kutcj_test.go:41:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpnd9kutcj_test.go:41: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpnd9kutcj_test.go:41:\
    \ expected '%!s(int=64)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpnd9kutcj_test.go:41: expected '%!s(int=100)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n\n    lr_arr := make([]int,\
    \ n)\n    rl_arr := make([]int, n)\n\n    lr_ind := 0\n    rl_ind := 0\n\n   \
    \ lr_done := false\n    rl_done := false\n\n    count := 0\n\n    for {\n    \
    \    if lr_arr[lr_ind] == rl_arr[rl_ind] {\n            count++\n        }\n\n\
    \        if lr_done && rl_done {\n            break\n        }\n\n        if !lr_done\
    \ {\n            lr_arr[lr_ind]++\n            if lr_arr[lr_ind] == n - 1 {\n\
    \                lr_done = true\n            }\n        }\n\n        if !rl_done\
    \ {\n            rl_arr[rl_ind]--\n            if rl_arr[rl_ind] == n - 1 {\n\
    \                rl_done = true\n            }\n        }\n\n        if lr_arr[lr_ind]\
    \ == n {\n            lr_ind++\n        }\n\n        if rl_arr[rl_ind] == -1 {\n\
    \            rl_ind++\n        }\n    }\n\n    return count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.car_race_collision(0x2)\n\t/tmp/tmpf8v8udqc_test.go:33\
    \ +0x127\ncommand-line-arguments_test.TestCar_Race_Collision(0x0?)\n\t/tmp/tmpf8v8udqc_test.go:74\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The array `left_to_right` represents the number of cars\n\
    \    // that are moving left to right at position i.\n    // The value of `left_to_right[0]`\
    \ is the number of cars moving\n    // left to right at position 0, i.e. the left\
    \ end of the road.\n    // Similarly, `left_to_right[n-1]` represents the number\
    \ of cars\n    // moving left to right at position n-1, i.e. the right end of\
    \ the road.\n    left_to_right := make([]int, n)\n    for i := 0; i < n; i++ {\n\
    \        // Initially, all the cars are at the left end of the road.\n       \
    \ left_to_right[i] = 1\n    }\n\n    // `right_to_left` represents the number\
    \ of cars that are moving\n    // right to left at position i.\n    right_to_left\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        // Initially, all the\
    \ cars are at the right end of the road.\n        right_to_left[i] = 1\n    }\n\
    \n    var collisions int = 0\n    // Now, let's try simulating the movement of\
    \ cars.\n    // We assume that all cars move in the same speed.\n    // As a result,\
    \ the number of collisions at any moment\n    // is equal to the number of left\
    \ to right cars and\n    // the number of right to left cars.\n    for i := 0;\
    \ i < n; i++ {\n        collisions += left_to_right[i] * right_to_left[i]\n  \
    \  }\n\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpxbr57x_h_test.go:67: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpxbr57x_h_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpxbr57x_h_test.go:67: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpxbr57x_h_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpxbr57x_h_test.go:67: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return ((n - 1) * n) / 2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2u97nome_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2u97nome_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2u97nome_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2u97nome_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2u97nome_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    num_collisions := 0\n    return num_collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmptsm_orho_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmptsm_orho_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmptsm_orho_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmptsm_orho_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmptsm_orho_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    m := make(map[int]bool)\n\
    \    index := 0\n    count := 0\n    var i int\n    for i = 1; i <= n; i++ {\n\
    \        m[i] = true\n    }\n    for i = 1; i <= n; i++ {\n        index = i\n\
    \        for m[index] {\n            count += 1\n            index = index + n\n\
    \        }\n    }\n    return count - n\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpko390rde_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpko390rde_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpko390rde_test.go:54: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpko390rde_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpko390rde_test.go:54: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    return n-1 + car_race_collision(n-1)\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpo3ou7ab7_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpo3ou7ab7_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpo3ou7ab7_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpo3ou7ab7_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpo3ou7ab7_test.go:40: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: null
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n\tcollisions := 0\n\tout := make(chan int)\n\tout1 := make(chan\
    \ int)\n\tin := make(chan int)\n\tin1 := make(chan int)\n\t\n\tgo func() {\n\t\
    \tfor i := 0; i < n; i++ {\n\t\t\tout <- i\n\t\t}\n\t}()\n\t\n\tgo func() {\n\t\
    \tfor i := 0; i < n; i++ {\n\t\t\tout1 <- i\n\t\t}\n\t}()\n\t\n\tgo func() {\n\
    \t\tfor {\n\t\t\t<-in\n\t\t\tcollisions++\n\t\t}\n\t}()\n\t\n\tfor {\n\t\tselect\
    \ {\n\t\tcase _ = <-out:\n\t\t\tselect {\n\t\t\tcase _ = <-out1:\n\t\t\t\tin <-\
    \ 1\n\t\t\t\tin1 <- 1\n\t\t\tdefault:\n\t\t\t\tin <- 1\n\t\t\t}\n\t\tcase _ =\
    \ <-out1:\n\t\t\tselect {\n\t\t\tcase _ = <-out:\n\t\t\t\tin <- 1\n\t\t\t\tin1\
    \ <- 1\n\t\t\tdefault:\n\t\t\t\tin1 <- 1\n\t\t\t}\n\t\t}\n\t}\n\treturn collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073350
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var ret int\n    return ret\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpx8g3qbjy_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpx8g3qbjy_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpx8g3qbjy_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpx8g3qbjy_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpx8g3qbjy_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    m := n / 2\n    return\
    \ car_race_collision(m) + car_race_collision(n - m) + m\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2wup92my_test.go:41: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2wup92my_test.go:41:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2wup92my_test.go:41: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2wup92my_test.go:41:\
    \ expected '%!s(int=64)', got '%!s(int=12)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2wup92my_test.go:41: expected '%!s(int=100)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    // The cars that are moving left\
    \ to right are 1,2,3,...,n and the cars that are moving\n    // right to left\
    \ are 1,2,3,...,n.  \n    // For example, the first car that's moving left to\
    \ right and the first car that's\n    // moving right to left collide at the center.\n\
    \    // Therefore, we can figure out the number of collisions by placing all the\
    \ cars left to right\n    // and right to left at the center, and then figure\
    \ out how many pairs of cars\n    // are in each lane.\n\n    // Let's iterate\
    \ through all the cars that are moving left to right.\n    // Say the ith car\
    \ from the left is moving left to right.  Then the number of\n    // cars that\
    \ are moving right to left that collide with it is i - 1.  This is because\n \
    \   // the number of cars that are moving right to left is always bigger than\n\
    \    // the number of cars that are moving left to right.\n    // Therefore, the\
    \ number of collisions is the sum of i - 1, where i goes from 1 to n.\n    //\
    \ This sum is equal to 1 + 2 + 3 + ... + (n - 1).\n    // We can compute this\
    \ sum by noting that it is equal to (n - 1)(n - 2)/2.\n    return (n - 1) * (n\
    \ - 2) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp57g62f63_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp57g62f63_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp57g62f63_test.go:54: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp57g62f63_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=21)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp57g62f63_test.go:54: expected '%!s(int=100)', got '%!s(int=36)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This implementation uses a hash table (map) to track the\n\
    \    // cars that have been seen.  The keys are car ID numbers,\n    // which\
    \ are just integers from 1 to n.  The values are\n    // true if the car is moving\
    \ right to left and false otherwise.\n    // Note: We don't really need to store\
    \ the values, because we\n    // can figure out whether a car is moving right\
    \ to left or not\n    // just from the car ID number.  For example, if n = 4,\
    \ then\n    // cars 1 and 2 are moving right to left, while cars 3 and 4\n   \
    \ // are moving left to right.  But we keep them there anyway\n    // for this\
    \ exercise.\n    seen_cars := make(map[int]bool)\n\n    // The number of collisions\
    \ is initially 0.\n    collisions := 0\n\n    // For each car moving right to\
    \ left:\n    for car_id := 1; car_id <= n; car_id++ {\n        // If this car\
    \ is already in the hash table, then we've seen\n        // it before, so increment\
    \ collisions.\n        if _, ok := seen_cars[car_id]; ok {\n            collisions++\n\
    \        }\n        // Otherwise, add this car to the hash table.\n        else\
    \ {\n            seen_cars[car_id] = true\n        }\n    }\n\n    // For each\
    \ car moving left to right:\n    for car_id := n + 1; car_id <= 2 * n; car_id++\
    \ {\n        // If this car is already in the hash table, then we've seen\n  \
    \      // it before, so increment collisions.\n        if _, ok := seen_cars[car_id];\
    \ ok {\n            collisions++\n        }\n        // Otherwise, add this car\
    \ to the hash table.\n        else {\n            seen_cars[car_id] = false\n\
    \        }\n    }\n\n    // We're done, so return the number of collisions we\
    \ found.\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3tuzz5k5_test.go:40:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    return n + car_race_collision(n-1)\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmptno776kh_test.go:40: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmptno776kh_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmptno776kh_test.go:40: expected '%!s(int=16)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmptno776kh_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=35)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmptno776kh_test.go:40: expected '%!s(int=100)', got '%!s(int=54)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n - 1\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0vy21m_i_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0vy21m_i_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 0
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0;\
    \ j < n; j++ {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var i, ans int = 0, 0\n    for ; i < n; i++ {\n        ans =\
    \ ans + i\n    }\n    return ans\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpqdvrelv6_test.go:41: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpqdvrelv6_test.go:41:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpqdvrelv6_test.go:41: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpqdvrelv6_test.go:41:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpqdvrelv6_test.go:41: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Let's assume n is positive.\n    ret := 0\n    if n & 1 ==\
    \ 1 {\n        // If n is odd, then the first car in the left-to-right\n     \
    \   // moving cars is guaranteed to collide.\n        ret++\n    }\n    // The\
    \ rest of the cars in the left-to-right moving cars\n    // are alternating with\
    \ cars in the right-to-left moving cars.\n    // As a result, two consecutive\
    \ cars are guaranteed to collide.\n    return ret + (n/2)*2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpp792yxhc_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpp792yxhc_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpp792yxhc_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpp792yxhc_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpp792yxhc_test.go:47: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    cars := make([]*car, 0)\n    for i := 0; i < n; i++ {\n    \
    \    cars = append(cars, &car{i, true})\n    }\n    for i := 0; i < n; i++ {\n\
    \        cars = append(cars, &car{i, false})\n    }\n    for i := 0; i < len(cars);\
    \ i++ {\n        cars[i].other = cars[i].other.other\n    }\n    collisions :=\
    \ 0\n    for i := 0; i < len(cars); i++ {\n        if cars[i].moving_left_to_right\
    \ && cars[i].other.moving_left_to_right {\n            collisions++\n        }\n\
    \    }\n    return collisions\n}\n\ntype car \nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbry19qds_test.go:36:10: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 2 {\n        return 0\n    }\n\n    // The idea is to\
    \ simulate the motion of the cars by placing them in a\n    // linked list.  We\
    \ use a linked list because a car in the linked list\n    // can be swapped with\
    \ the car to its left without having to move all\n    // the rest of the cars\
    \ to the right.  We use a doubly linked list.\n    // Initially all the cars are\
    \ arranged in the linked list from left to right.\n    // We then swap the cars\
    \ in this linked list so that cars that are\n    // going right to left are moved\
    \ to the right.  We do so by selecting\n    // the first car in the linked list\
    \ and then finding the first car to its right\n    // that is moving right to\
    \ left.  We then swap the two and repeat this\n    // process until all cars are\
    \ moving left to right.\n    // The number of such swaps is the number of collisions.\n\
    \    // We implement the linked list below.\n\n    // This \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqwju89ej_test.go:35:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return car_race_collision_helper(n, true)\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkd6drl8d_test.go:17:12: undefined: car_race_collision_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n * (n-1)) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpqm49qcle_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpqm49qcle_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpqm49qcle_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpqm49qcle_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpqm49qcle_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // the left to right moving cars number from 0 to n-1, the right\
    \ to left moving cars\n    // number from n to 2n-1.  For example, if n = 5, the\
    \ left to right moving cars\n    // number 0 to 4, while the right to left moving\
    \ cars number 5 to 9.\n    // A car is a tuple of the form (int, int) = (car_number,\
    \ start_location)\n    // The start_location is the same number for all left to\
    \ right moving cars, and\n    // is the same number for all right to left moving\
    \ cars.  This number is equal to\n    // the number of miles away from the origin\
    \ both sets of cars started at.\n    left_to_right_cars := make([]int, n)\n  \
    \  right_to_left_cars := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  left_to_right_cars[i] = i\n        right_to_left_cars[i] = i + n\n    }\n \
    \   // this array is the left to right ordered cars, sorted by the start location.\n\
    \    sorted_left_to_right_cars := make([]int, n)\n    copy(sorted_left_to_right_cars,\
    \ left_to_right_cars)\n    // this array is the right to left ordered cars, sorted\
    \ by the start location.\n    sorted_right_to_left_cars := make([]int, n)\n  \
    \  copy(sorted_right_to_left_cars, right_to_left_cars)\n    // now sort the cars.\n\
    \    merge_sort(sorted_left_to_right_cars)\n    merge_sort(sorted_right_to_left_cars)\n\
    \    // now find the location of the first left to right moving car that collides\n\
    \    // with the first right to left moving car.\n    left_index := 0\n    right_index\
    \ := 0\n    for left_index < n && right_index < n {\n        if sorted_left_to_right_cars[left_index]\
    \ < sorted_right_to_left_cars[right_index] {\n            left_index++\n     \
    \   } else {\n            break\n        }\n    }\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmp5payuc_test.go:50:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // R is an array that stores the positions of the cars that\
    \ are moving right to left\n    R := make([]int, n)\n    var i int\n    for i\
    \ = 0; i < n; i++ {\n        R[i] = 1\n    }\n    // L is an array that stores\
    \ the positions of the cars that are moving left to right\n    L := make([]int,\
    \ n)\n    for i = 0; i < n; i++ {\n        L[i] = -1\n    }\n    // cnt counts\
    \ the number of collisions\n    var cnt int\n    for t := 0; t < 10000; t++ {\n\
    \        // Move all of the cars in R to the right by 1 unit\n        for i =\
    \ 0; i < n; i++ {\n            R[i] += 1\n        }\n        // Move all of the\
    \ cars in L to the left by 1 unit\n        for i = 0; i < n; i++ {\n         \
    \   L[i] -= 1\n        }\n        // Check for collision\n        for i = 0; i\
    \ < n; i++ {\n            if L[i] == R[i] {\n                cnt += 1\n      \
    \      }\n        }\n    }\n    return cnt\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp03qagr62_test.go:66: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp03qagr62_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp03qagr62_test.go:66: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp03qagr62_test.go:66:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp03qagr62_test.go:66: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp45rq99j8_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp45rq99j8_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp45rq99j8_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp45rq99j8_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp45rq99j8_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return count_collisions(make_left_to_right_cars(n), make_right_to_left_cars(n))\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqaadv8h7_test.go:17:12: undefined: count_collisions

    /tmp/tmpqaadv8h7_test.go:17:29: undefined: make_left_to_right_cars

    /tmp/tmpqaadv8h7_test.go:17:57: undefined: make_right_to_left_cars

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n\treturn 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n \
    \ candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphjz45bo__test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphjz45bo__test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    // leftCar := make(map[int]bool)\n\
    \    leftCar := map[int]bool{}\n    rightCar := map[int]bool{}\n    for i := 0;\
    \ i < n; i++ {\n        leftCar[i] = true\n        rightCar[i] = true\n    }\n\
    \    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++\
    \ {\n            if leftCar[i] && rightCar[j] {\n                count++\n   \
    \             leftCar[i] = false\n                rightCar[j] = false\n      \
    \      }\n        }\n    }\n    return count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpjd08ms35_test.go:57: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpjd08ms35_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpjd08ms35_test.go:57: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpjd08ms35_test.go:57:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpjd08ms35_test.go:57: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 0 {\n        return 0\n    }\n    num_cars := n * 2\n\
    \    sorted_cars := make([]int, num_cars)\n    for i:=0; i<n; i++ {\n        sorted_cars[i]\
    \ = i\n    }\n    for i:=n; i<num_cars; i++ {\n        sorted_cars[i] = i - n\n\
    \    }\n    sorted_cars = quick_sort(sorted_cars)\n    // We now have the two\
    \ sets of cars sorted, alternating their directions\n    // of travel.  Thus,\
    \ counting the number of collisions is trivial.\n    num_collisions := 0\n   \
    \ for i:=1; i<num_cars; i+=2 {\n        if sorted_cars[i] == sorted_cars[i-1]\
    \ {\n            num_collisions++\n        }\n    }\n    return num_collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ufw5eze_test.go:28:19: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var i, j, collisions int = 0, 0, 0\n    for i = 0; i < n; i++\
    \ {\n        for j = 0; j < n; j++ {\n            if i > j {\n               \
    \ collisions++\n            }\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpy8oyjqlg_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpy8oyjqlg_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpy8oyjqlg_test.go:45: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpy8oyjqlg_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpy8oyjqlg_test.go:45: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a hash table to solve this problem in O(n) time,\
    \ where n is the number of cars.\n    // A hash table keeps track of the number\
    \ of cars that have passed a given lane (x coordinate)\n    // going to the right.\
    \  In this way, we can check if there's a collision in O(1) time.\n    // For\
    \ example, if there's a car in the lane -3 going to the right and a car in the\
    \ lane 5\n    // going to the left, then there's a collision when the car in lane\
    \ -3 reaches lane 5.\n    // We store the lane index as the key and the number\
    \ of cars as the value.\n    // In this example, we would have (5, 1) as a key/value\
    \ pair.\n    collision_count := 0\n    collisions := make(map[int]int)\n    //\
    \ The cars moving to the right are in lanes 1, 2, 3, 4, ... n.\n    for lane :=\
    \ 1; lane <= n; lane++ {\n        // We update the collision table, and check\
    \ if there's a collision.\n        collisions[lane] += 1\n        if collisions[-lane]\
    \ > 0 {\n            collision_count += collisions[-lane]\n        }\n    }\n\
    \    return collision_count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpudll2xaj_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpudll2xaj_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpudll2xaj_test.go:54: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpudll2xaj_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpudll2xaj_test.go:54: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var numCollisions int = 0\n    var rowCounter int = 0\n    for\
    \ rowCounter <= n {\n        if rowCounter >= 0 {\n            numCollisions +=\
    \ rowCounter\n        }\n        rowCounter++\n    }\n    return numCollisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp83no9y1l_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp83no9y1l_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp83no9y1l_test.go:45: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp83no9y1l_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp83no9y1l_test.go:45: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The collision happens when there are two cars in the same\
    \ position.\n    // As a result, the first collision happens between the two cars\
    \ that are the\n    // closest to each other (and the second collision happens\
    \ between the two\n    // cars that are the next closest to each other and so\
    \ on).\n    // So, the collision happens when the two closest cars to each other\n\
    \    // are within one unit from each other.\n    // Since we can only move one\
    \ car by one unit at a time, the worst case\n    // scenario is that each car\
    \ will move one unit at a time.  This means that\n    // at each moment, the distance\
    \ between the two closest cars is at most\n    // 2 * n - 2.\n    // We start\
    \ all cars at position -n + 1, -n + 2, ..., -n + n.\n    // At each step, we move\
    \ one of the cars until it reaches position\n    // -1 or n.  We know that each\
    \ car will reach one of those positions\n    // in 2 * n - 1 steps.\n    //\n\
    \    // Another way to look at this problem is as follows:\n    // The cars are\
    \ distributed uniformly on the line [-n + 1, n] and\n    // one of the cars on\
    \ the left is trying to move to the left and\n    // one of the cars on the right\
    \ is trying to move to the right\n    // in their respective directions.  Since\
    \ the cars are distributed\n    // uniformly, the first collision happens when\
    \ the distance between\n    // the cars is 2 * n - 1.\n    //\n    // We define\
    \ the function s(d) which returns the number of collisions when\n    // the distance\
    \ between the two closest cars is equal to d.\n    //\n    // One may generalize\
    \ this problem to the case where the cars are distributed\n    // non-uniformly\
    \ and the cars may move any amount at a time (but they move\n    // continuously\
    \ and they move in the same speed).\n    //\n    // We have the recurrence\n \
    \   //      s(d) = 2 * (n - 1) * s(d - 1) + (n - 1)^2 * s(d - 2).\n    // This\
    \ is because the number of collisions is equal to the number of collisions\n \
    \   // that happen when the distance between the two closest cars\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphhwzmejy_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    i := 0\n    j := n - 1\n    count := 0\n    for i < n && j >=\
    \ 0 {\n        if i == j {\n            count += (n - i - 1)\n            break\n\
    \        }\n        if j < i {\n            break\n        }\n        if i < j\
    \ {\n            count += 1\n        }\n        i += 1\n        j -= 1\n    }\n\
    \    return count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpql_he444_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpql_he444_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpql_he444_test.go:54: expected '%!s(int=16)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpql_he444_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=4)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpql_he444_test.go:54: expected '%!s(int=100)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Starting from the leftmost car, write down the positions\
    \ of the cars.\n    // For example, if the leftmost car is at position 10, then\
    \ the second car is at position 10 + n,\n    // and the third car is at position\
    \ 10 + 2*n, etc.\n    // Similarly, rightmost car is at position 10 + (n-1)*n,\
    \ the second car is at position 10 + (n-2)*n,\n    // etc.\n    // For each car\
    \ that's moving right to left, check if it is at position 10 + x*n, where x is\
    \ a non-negative\n    // integer.  If this is the case, then this car will collide\
    \ with a car moving left to right.\n    // Therefore, we need to increment a counter\
    \ by 1.\n    count := 0\n    for i := 0; i < n; i++ {\n        if (10 + i*n) %\
    \ n == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphg0nd9nk_test.go:51: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphg0nd9nk_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphg0nd9nk_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphg0nd9nk_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphg0nd9nk_test.go:51: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // left to right cars\n    left2right := make([]int, n)\n  \
    \  for i := 0; i < n; i++ {\n        left2right[i] = i\n    }\n\n    // right\
    \ to left cars\n    right2left := make([]int, n)\n    for i := 0; i < n; i++ {\n\
    \        right2left[i] = n-i-1\n    }\n\n    left_cnt := 0\n    right_cnt := 0\n\
    \    collision_cnt := 0\n    // until all left to right cars are passed\n    for\
    \ left_cnt < n {\n        if left2right[left_cnt] == right2left[right_cnt] {\n\
    \            collision_cnt++\n            left_cnt++\n            right_cnt++\n\
    \        } else if left2right[left_cnt] < right2left[right_cnt] {\n          \
    \  left_cnt++\n        } else {\n            right_cnt++\n        }\n    }\n \
    \   return collision_cnt\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n \
    \ candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmprl4c4wkw_test.go:64: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmprl4c4wkw_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmprl4c4wkw_test.go:64: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmprl4c4wkw_test.go:64:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmprl4c4wkw_test.go:64: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Initialize car dictionary:\n    // The dictionary's keys\
    \ are the cars' starting positions.\n    // The dictionary's values are the cars'\
    \ directions (1 for right-to-left, -1 for left-to-right)\n    car_dir := make(map[int]int)\n\
    \    // Add left-to-right cars:\n    for i := 1; i <= n; i++ {\n        car_dir[i]\
    \ = -1\n    }\n    // Add right-to-left cars:\n    for i := -1; i >= -n; i-- {\n\
    \        car_dir[i] = 1\n    }\n    // For each car, check whether it's going\
    \ to collide with any other cars\n    var result int\n    for start_pos, dir :=\
    \ range car_dir {\n        // Check whether any other cars are on the same trajectory\
    \ and are close\n        for start_pos2, dir2 := range car_dir {\n           \
    \ if start_pos2 == start_pos {\n                continue\n            }\n    \
    \        if dir == dir2 {\n                continue\n            }\n         \
    \   if dir == -1 && dir2 == 1 && start_pos2 > start_pos {\n                result++\n\
    \            }\n            if dir == 1 && dir2 == -1 && start_pos2 < start_pos\
    \ {\n                result++\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_qyiuwfo_test.go:68: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_qyiuwfo_test.go:68:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_qyiuwfo_test.go:68: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_qyiuwfo_test.go:68:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_qyiuwfo_test.go:68: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // IMPLEMENT!\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp22tyirrz_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp22tyirrz_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp22tyirrz_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp22tyirrz_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp22tyirrz_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The main idea is to find the time of when the n-th car moving\
    \ left to right collides with\n    // a car moving right to left.  Suppose the\
    \ n-th car is one car length away from the starting\n    // point.  The car moving\
    \ from the right most position has a time of n to reach the starting\n    // point.\
    \  Also, the n-th car has a time of n to reach the starting point.  Therefore,\
    \ a collision\n    // occurrs at the starting point when n = n.  Now suppose the\
    \ n-th car is two car lengths away\n    // from the starting point.  Then the\
    \ car moving from the right most position has a time of (n-1)\n    // to reach\
    \ the starting point.  Again, the n-th car has a time of n to reach the starting\
    \ point.\n    // Therefore, a collision occurrs at the starting point when n =\
    \ n.  Continuing in this manner,\n    // we can see that the n-th car and the\
    \ (n-i)-th car moving right to left collide exactly when\n    // i = 0.  Therefore,\
    \ we can ignore the rest of the cars, and simply take the sum from 1 to n of i.\n\
    \    return (n * (n + 1)) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpsmvo0gy7_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpsmvo0gy7_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpsmvo0gy7_test.go:47: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpsmvo0gy7_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpsmvo0gy7_test.go:47: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We'll simulate the movement of the cars over a timeline.\n\
    \    // The variable timeline maps a time to a list of the cars that are at that\
    \ position at that time.\n    // Initially, each car is at its starting position,\
    \ so the timeline has two entries:\n    // Time 0, with list of cars that start\
    \ at position 0.\n    // Time n, with list of cars that start at position n.\n\
    \    timeline := make(map[int][]int)\n    timeline[0] = make([]int, n)\n    timeline[n]\
    \ = make([]int, n)\n    for i := 0; i < n; i++ {\n        timeline[0][i] = i\n\
    \        timeline[n][i] = i\n    }\n\n    // Do a simple simulation of the cars\
    \ moving.\n    collision_count := 0\n    for time := 0; time < n; time++ {\n \
    \       // There are two cases to consider.\n        // Case 1: cars start moving\
    \ left to right at the same time.\n        // Case 2: cars start moving right\
    \ to left at the same time.\n        // Case 3: a car starts moving right to left\
    \ at the same time that cars start moving left to right.\n        // Case 4: a\
    \ car starts moving left to right at the same time that cars start moving right\
    \ to left.\n        for _, car_id := range timeline[time] {\n            // Check\
    \ if the car already collided.\n            if timeline[time][car_id] == -1 {\n\
    \                continue\n            }\n\n            // Now check if the car\
    \ collides.\n            for _, other_car_id := range timeline[time] {\n     \
    \           if other_car_id != car_id && timeline[time][other_car_id] != -1 {\n\
    \                    // The two cars are in the same place at the same time.\n\
    \                    timeline[time][car_id] = -1\n                    timeline[time][other_car_id]\
    \ = -1\n                    collision_count++\n                }\n           \
    \ }\n        }\n\n        // Advance the cars.\n        for _, car_id := range\
    \ timeline[time] {\n            if timeline[time][car_id] != -1 {\n          \
    \      timeline[time + 1][car_id] = car_id\n            }\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_dnmyx99_test.go:60:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // let's simulate n cars moving left to right, and n cars moving\
    \ right to left.\n    // we will keep the cars sorted by the time of the collision.\n\
    \    var collisions [][]int\n    for i := 0; i < n; i++ {\n        // the i'th\
    \ car moving left to right, should collide with the n-i'th car moving right to\
    \ left.\n        // we may also have collisions among the cars moving right to\
    \ left (for example,\n        // the (n-1)'th car moving right to left, may collide\
    \ with the 1st car moving right to left.\n        // The (n-1)'th car moving right\
    \ to left, will collide at t = i.\n        // The 1st car moving right to left,\
    \ will collide at t = 2n-1 - i.\n        // Therefore, we can simply insert a\
    \ slice into a slice of collisions, containing\n        // two entries, first\
    \ entry is the time of the collision, second entry is the number of cars\n   \
    \     // that collide at that time.\n        collisions = append(collisions, []int{i,\
    \ 1})\n        collisions = append(collisions, []int{2*n-1 - i, 1})\n    }\n \
    \   // now let's sort by the time of the collision.\n    for i := 0; i < len(collisions);\
    \ i++ {\n        for j := i + 1; j < len(collisions); j++ {\n            if collisions[i][0]\
    \ > collisions[j][0] {\n                collisions[i], collisions[j] = collisions[j],\
    \ collisions[i]\n            }\n        }\n    }\n    sum := 0\n    for i := 0;\
    \ i < len(collisions); i++ {\n        if i == 0 {\n            sum += collisions[i][1]\n\
    \        } else {\n            sum += collisions[i][1] * collisions[i-1][1]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmp6utj2nas_test.go:68: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmp6utj2nas_test.go:68:\
    \ expected '%!s(int=16)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmp6utj2nas_test.go:68: expected '%!s(int=64)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmp6utj2nas_test.go:68:\
    \ expected '%!s(int=100)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var collisions int = 0\n    var current_car int = 1\n    var\
    \ expected_collisions int = 1\n    var previous_car int = 1\n    var next_car\
    \ int = 1\n    var previous_cars_ended int = 0\n    var next_cars_ended int =\
    \ 0\n    for current_car <= n {\n        if expected_collisions <= previous_cars_ended\
    \ {\n            expected_collisions = previous_cars_ended + 1\n        }\n  \
    \      collisions += expected_collisions\n        previous_car = current_car\n\
    \        current_car += previous_cars_ended\n        if current_car <= n {\n \
    \           current_car += next_cars_ended\n        }\n        next_car = current_car\
    \ + 1\n        if next_car <= n {\n            next_car += previous_cars_ended\n\
    \        }\n        previous_cars_ended = current_car - previous_car\n       \
    \ next_cars_ended = next_car - current_car\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmp6udt3he1_test.go:61: expected '%!s(int=9)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmp6udt3he1_test.go:61:\
    \ expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmp6udt3he1_test.go:61: expected '%!s(int=64)', got '%!s(int=12)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmp6udt3he1_test.go:61:\
    \ expected '%!s(int=100)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // a collision happens when the right-to-left cars on the left\
    \ has a position\n    // that's bigger than the left-to-right cars on the right.\n\
    \    // the left-to-right cars have positions of 1...n, the right-to-left cars\n\
    \    // have positions of 1...n.\n    // sort the positions of the left-to-right\
    \ cars in ascending order.\n    // sort the positions of the right-to-left cars\
    \ in descending order.\n    // then, if the position of the left-to-right car\
    \ is less than the position\n    // of the right-to-left car, there's a collision;\
    \ otherwise, there's no collision.\n    // so, we just need to do a merge sort\
    \ on the right-to-left cars, the left-to-right\n    // cars, and compare positions.\
    \  The running time is O(nlogn).\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpvszv9c2w_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpvszv9c2w_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpvszv9c2w_test.go:47: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpvszv9c2w_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpvszv9c2w_test.go:47: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    left_to_right := make([]int, n)\n    right_to_left := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = i\n    }\n    return merge_and_count(left_to_right, right_to_left)\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq1q2n7f_test.go:23:12: undefined: merge_and_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    count := 0\n    cars := make([]int, n)\n\n    // sort the cars;\
    \ this is O(n logn)\n    for i:=0; i<n; i++ {\n        cars[i] = n + n - i - 1\n\
    \    }\n\n    sort(cars)\n\n    // O(n)\n    for i:=0; i<n; i++ {\n        if\
    \ cars[i] == 2*n - 2*i - 1 {\n            count++\n        }\n    }\n\n    return\
    \ count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjicm26r_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := 0; j < n; j++ {\n            if i + j == (n - 1) {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp8e2tmaxg_test.go:45: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp8e2tmaxg_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp8e2tmaxg_test.go:45: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp8e2tmaxg_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp8e2tmaxg_test.go:45: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    cars_left := make([]bool, n)\n    cars_right := make([]bool,\
    \ n)\n    count := 0\n    for i := 0; i < n; i++ {\n        cars_left[i] = true\n\
    \        cars_right[i] = true\n    }\n    for i := 0; i < n; i++ {\n        if\
    \ cars_left[i] {\n            for j := 0; j < n; j++ {\n                if cars_right[j]\
    \ {\n                    cars_left[i] = false\n                    cars_right[j]\
    \ = false\n                    count++\n                    break\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpafc04p11_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpafc04p11_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpafc04p11_test.go:56: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpafc04p11_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpafc04p11_test.go:56: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Fill in the following\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0oo2sl61_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0oo2sl61_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0oo2sl61_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0oo2sl61_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0oo2sl61_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n    // If a car moving\
    \ left to right passes another car moving\n    // left to right, then it's a 'collision'\
    \ because we are simply\n    // overlapping moving cars.\n    n_overlaps := n\
    \ * (n - 1) / 2\n    // If a car moving left to right passes a car moving right\
    \ to left,\n    // then it's a 'collision' because we are actually passing each\
    \ other.\n    n_passes := n\n    return n_overlaps + n_passes\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbhj6qx0r_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbhj6qx0r_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbhj6qx0r_test.go:47: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbhj6qx0r_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbhj6qx0r_test.go:47: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    n_collisions := 0\n\n    // given n cars driving right to left,\
    \ and n cars driving left to right,\n    // the total number of pairs is n * n\n\
    \    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if\
    \ (i - j) == 0 {\n                n_collisions++\n            }\n        }\n \
    \   }\n\n    return n_collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpcfo7gsym_test.go:49: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpcfo7gsym_test.go:49:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpcfo7gsym_test.go:49: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpcfo7gsym_test.go:49:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpcfo7gsym_test.go:49: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // I'm assuming the cars are moving in the same speed, so I'm\
    \ also assuming\n    // that the number of collisions will be symmetric.\n   \
    \ // I've added two more cars;  one in the middle of each set of cars.\n    //\
    \ They won't collide with any of the other cars, but they will still provide\n\
    \    // a signal of the location of the cars.  In other words, they tell us\n\
    \    // where the midpoint of the n-2 cars is.\n    // The number of collisions\
    \ is the result of a sum:\n    // The first car hits the n-1st car.\n    // The\
    \ second car hits the n-2nd car.\n    // The third car hits the n-3rd car.\n \
    \   // This repeats until the (n-1)/2+1 car hits the (n-1)/2+1 car.\n    // This\
    \ is a general sum formula;  a triangular number.\n    // In other words, the\
    \ sum of all numbers from 1 to (n-1)/2+1.\n    // This sum is equal to the product\
    \ of the average of the first and last numbers\n    // in the series.  In this\
    \ case, (n-1)/2+1 + 1 = (n+1)/2.\n    // The product of the average and number\
    \ of items is (n-1)/2+1 * (n+1)/2 = (n^2 - 1)/4 + 1/2\n    // This can be factored\
    \ as ((n^2 - 1)/4 + 1/2) = (n^2 + 1)/4.\n    // Since n is an even number, n^2\
    \ is divisible by 4.\n    // So, we get:  ((n^2 - 1)/4 + 1/2) = (n^2 + 1)/4 =\
    \ (n^2/4 + 1/4) = (n/2)^2 + 1/4\n    // As a result, the number of collisions\
    \ is (n/2)^2 + 1/4.\n    // The number of collisions is therefore (n/2)^2 + 1/4.\n\
    \    // For example, given n = 4, the number of collisions is (2)^2 + 1/4 = 4\
    \ + 1/4 = 4.25\n    // If n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4fuypw9k_test.go:40:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // return car_race_collision_imp1(n)\n    return car_race_collision_imp2(n)\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2p7srt_k_test.go:18:12: undefined: car_race_collision_imp2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Edge cases.\n    if n <= 0 {\n        return 0\n    }\n\n\
    \    // The two cars will never collide if one is moving left to right and the\
    \ other is\n    // moving right to left.   This is because they are going in different\
    \ directions.\n    // The only way they collide is if they are both going left\
    \ to right or both going\n    // right to left.   As a result, we have to check\
    \ only 1/2 of the cars.\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmph8yl6xtk_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmph8yl6xtk_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmph8yl6xtk_test.go:46: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmph8yl6xtk_test.go:46:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmph8yl6xtk_test.go:46: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Fill in the function's implementation.\n    return 0\n}\n\
    \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5yg6jecg_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5yg6jecg_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5yg6jecg_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5yg6jecg_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5yg6jecg_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // It's hard to quantify this.  However, I will prove that the\
    \ answer is n.\n    // Let's say that A is the cars moving left to right, and\
    \ B is the cars moving\n    // right to left.\n    // Let's number the cars 0..n-1.\
    \  Say car i of A starts its journey at i, and car\n    // j of B starts its journey\
    \ at n-1-j.  Since they all move at the same speed, they\n    // all go at speed\
    \ 1; if they meet, they meet at time (n-1)/2.\n    // Hence, the collision happens\
    \ between car i of A and car j of B if and only if\n    // i+(n-1-j)=(n-1)/2.\
    \  This is equivalent to i+j=n/2-1/2, which happens for i=0, j=n-1,\n    // i=1,\
    \ j=n-2, i=2, j=n-3, ..., i=n-1, j=0.  This means exactly n collisions will happen.\n\
    \    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp84vtpayq_test.go:46: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp84vtpayq_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp84vtpayq_test.go:46: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp84vtpayq_test.go:46:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp84vtpayq_test.go:46: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a solution that runs in quadratic time.\n    left_to_right\
    \ := make([]int, n)\n    right_to_left := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        left_to_right[i] = i + 1\n        right_to_left[i] = n - i\n\
    \    }\n    collision_count := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := 0; j < n; j++ {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision_count++\n            }\n        }\n    }\n    return\
    \ collision_count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp7a6sqwn0_test.go:52: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp7a6sqwn0_test.go:52:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp7a6sqwn0_test.go:52: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp7a6sqwn0_test.go:52:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp7a6sqwn0_test.go:52: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 0 {\n        return 0\n    }\n    // Create a map[int]int\
    \ which is used to track the cars that are going left to right.\n    // key is\
    \ the starting position of the car.\n    // value is the time when the car arrives\
    \ at the destination.\n    // NOTE: since the destination is infinitely far away,\
    \ we count the number of collisions\n    // until now to simulate the time when\
    \ the car arrives at the destination.\n    left_to_right := make(map[int]int)\n\
    \    // Create a map[int]int which is used to track the cars that are going right\
    \ to left.\n    // key is the starting position of the car.\n    // value is the\
    \ time when the car arrives at the destination.\n    // NOTE: since the destination\
    \ is infinitely far away, we count the number of collisions\n    // until now\
    \ to simulate the time when the car arrives at the destination.\n    right_to_left\
    \ := make(map[int]int)\n    // Simulate a car race.\n    collision_count := 0\n\
    \    // NOTE: it is not necessary to continue the simulation when the left_to_right\
    \ map is empty.\n    // But, we continue to simulate because we want to know how\
    \ many collisions are caused by\n    // the cars that are going right to left.\n\
    \    for {\n        new_left_to_right := make(map[int]int)\n        for start_pos,\
    \ time := range left_to_right {\n            if time == collision_count {\n  \
    \              delete(left_to_right, start_pos)\n            } else {\n      \
    \          new_left_to_right[start_pos + time - collision_count] = time\n    \
    \        }\n        }\n        left_to_right = new_left_to_right\n        new_right_to_left\
    \ := make(map[int]int)\n        for start_pos, time := range right_to_left {\n\
    \            if time == collision_count {\n                delete(right_to_left,\
    \ start_pos)\n            } else {\n                new_right_to_left[start_pos\
    \ - time + collision_count] = time\n            }\n        }\n        right_to_left\
    \ = new_right_to_left\n        if len(left\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu26xlshs_test.go:56:20: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // FILL IN CODE HERE\n    fmt.Println(\"TODO: finish this function.\"\
    )\n    return -1\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "TODO: finish this function.\nTODO: finish this function.\nTODO: finish\
    \ this function.\nTODO: finish this function.\nTODO: finish this function.\n---\
    \ FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpqaoz7mho_test.go:39: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpqaoz7mho_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpqaoz7mho_test.go:39: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpqaoz7mho_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpqaoz7mho_test.go:39: expected '%!s(int=100)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // set up the array of integers representing each car's position\
    \ from the left\n    // the array is n*2 long;  n cars going left to right;  n\
    \ cars going right to left\n    // use a map to remember the leftmost position\
    \ of a car\n    // so we can check for collision\n    pos := make([]int, n*2)\n\
    \    posMap := make(map[int]int)\n    for i := 0; i < n; i++ {\n        pos[i]\
    \ = i\n        posMap[i] = i\n    }\n    // set up the array of booleans representing\
    \ each car's direction\n    // dir[i] == true means the car is going left to right\n\
    \    // dir[i] == false means the car is going right to left\n    dir := make([]bool,\
    \ n*2)\n    for i := 0; i < n; i++ {\n        dir[i] = true\n    }\n    for i\
    \ := n; i < n*2; i++ {\n        dir[i] = false\n    }\n    // now simulate the\
    \ car race\n    // cars move one unit at a time;  need to check for collision\
    \ every time\n    // cars' positions are sorted by position;  cars' directions\
    \ are sorted by direction\n    // after every move, cars' positions are sorted\
    \ by position;  cars' directions are sorted by direction\n    collisionCount :=\
    \ 0\n    for i := 0; i < n*2; i++ {\n        if dir[i] {\n            pos[i] +=\
    \ 1\n        } else {\n            pos[i] -= 1\n        }\n        if i == 0 {\n\
    \            continue\n        }\n        if (dir[i-1] == dir[i]) && (pos[i-1]\
    \ == pos[i]) {\n            collisionCount += 1\n        }\n        posMap[pos[i]]\
    \ = i\n    }\n    // before moving, merge sort the pos and dir arrays by position\n\
    \    // after moving, merge sort the pos and dir arrays by position\n    //fmt.Println(pos)\n\
    \    //fmt.Println(dir)\n    return collisionCount\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpzybz0_v1_test.go:80: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpzybz0_v1_test.go:80:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpzybz0_v1_test.go:80: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpzybz0_v1_test.go:80:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpzybz0_v1_test.go:80: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that cars coming left to right are labelled 0 ...\
    \ n-1, and\n    // cars coming right to left are labelled n ... 2n-1\n    // To\
    \ represent this, we'll have an array of 2n elements.\n    // cars_positions[i]\
    \ = j: the position of car i is j.\n    cars_positions := make([]int, 2*n)\n \
    \   cars_velocities := make([]int, 2*n)\n    for i := 0; i < n; i++ {\n      \
    \  cars_positions[i] = -1\n        cars_velocities[i] = 1\n        cars_positions[i+n]\
    \ = 1000000\n        cars_velocities[i+n] = -1\n    }\n    // Then the number\
    \ of collisions is the number of pairs (i, j) such that\n    // i < j and cars_positions[i]\
    \ > cars_positions[j]\n    ans := 0\n    for i := 0; i < 2*n; i++ {\n        for\
    \ j := i+1; j < 2*n; j++ {\n            if cars_positions[i] > cars_positions[j]\
    \ {\n                ans++\n            }\n        }\n    }\n    return ans\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpcw_gnwrw_test.go:59: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpcw_gnwrw_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpcw_gnwrw_test.go:59: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpcw_gnwrw_test.go:59:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpcw_gnwrw_test.go:59: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // YOUR SOLUTION GOES HERE\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n   \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmyfm6vz_test.go:186:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var collision_count int = 0\n    // car_count is n for both\
    \ left to right and right to left\n    for i := 0; i < n; i++ {\n        for j\
    \ := 0; j < n; j++ {\n            if i == j {\n                collision_count++\n\
    \            }\n        }\n    }\n    return collision_count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphn3p14tc_test.go:46: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphn3p14tc_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphn3p14tc_test.go:46: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphn3p14tc_test.go:46:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphn3p14tc_test.go:46: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We assume that there is at least one car.\n    if n < 1 {\n\
    \        return 0\n    }\n\n    // A car that is moving left to right is represented\
    \ by a +1 in the array;\n    // A car that is moving right to left is represented\
    \ by a -1 in the array.\n    cars := make([]int, n)\n    // Initialize cars[0]\
    \ as a car moving left to right.\n    cars[0] = 1\n    collisions := 0\n    //\
    \ For cars 1 to (n-1), randomly set the directions.\n    for i := 1; i < n; i++\
    \ {\n        if rand_f() < 0.5 {\n            cars[i] = 1\n        } else {\n\
    \            cars[i] = -1\n        }\n    }\n\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            if cars[i] + cars[j] == 0 {\n\
    \                collisions++\n            }\n        }\n    }\n\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwl_bmezg_test.go:30:12: undefined: rand_f

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // For example, if n = 6, the two rows of cars are:\n    //\
    \ Left-to-right cars:  [-3, -2, -1,  0,  1,  2]\n    // Right-to-left cars:  [\
    \ 2,  1,  0, -1, -2, -3]\n    // The cars in the same position on the left-to-right\
    \ row and the right-to-left row\n    // will collide with each other.  Therefore,\
    \ there are n collisions in this example.\n    //\n    // Another example: if\
    \ n = 5, the two rows of cars are:\n    // Left-to-right cars:  [-2, -1,  0, \
    \ 1,  2]\n    // Right-to-left cars:  [ 2,  1,  0, -1, -2]\n    // The cars in\
    \ the same position on the left-to-right row and the right-to-left row\n    //\
    \ will collide with each other.  Therefore, there are n collisions in this example.\n\
    \    //\n    //\n    // YOUR CODE HERE\n    //\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpg97jo72n_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpg97jo72n_test.go:52:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpg97jo72n_test.go:52: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpg97jo72n_test.go:52:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpg97jo72n_test.go:52: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    fmt.Printf(\"car_race_collision(%d)\\n\", n)\n    if n == 0\
    \ {\n        return 0\n    }\n    return n-1\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "car_race_collision(2)\ncar_race_collision(3)\ncar_race_collision(4)\ncar_race_collision(8)\n\
    car_race_collision(10)\n--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL:\
    \ TestCar_Race_Collision/test_num__0 (0.00s)\n        tmpefyouffn_test.go:41:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmpefyouffn_test.go:41: expected '%!s(int=9)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmpefyouffn_test.go:41:\
    \ expected '%!s(int=16)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmpefyouffn_test.go:41: expected '%!s(int=64)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmpefyouffn_test.go:41:\
    \ expected '%!s(int=100)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: null
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n\n    collsion_cars :=\
    \ make([]bool, n, n)\n\n    left_to_right_positions := make([]int, n, n)\n   \
    \ right_to_left_positions := make([]int, n, n)\n\n    for i := 0; i < n; i++ {\n\
    \        left_to_right_positions[i] = i\n        right_to_left_positions[i] =\
    \ n + i\n    }\n\n    for {\n        are_all_cars_arrived := true\n        for\
    \ i := 0; i < n; i++ {\n            for j := 0; j < n; j++ {\n               \
    \ if left_to_right_positions[i] == right_to_left_positions[j] {\n            \
    \        collsion_cars[i] = true\n                    collsion_cars[j] = true\n\
    \                }\n            }\n            if left_to_right_positions[i] <\
    \ n {\n                are_all_cars_arrived = false\n            }\n        }\n\
    \n        if are_all_cars_arrived {\n            break\n        }\n\n        for\
    \ i := 0; i < n; i++ {\n            if !collsion_cars[i] {\n                left_to_right_positions[i]++\n\
    \            }\n        }\n\n        for i := 0; i < n; i++ {\n            if\
    \ !collsion_cars[i] {\n                right_to_left_positions[i]--\n        \
    \    }\n        }\n    }\n\n    result := 0\n    for i := 0; i < n; i++ {\n  \
    \      if collsion_cars[i] {\n            result++\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073356
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    collisions := 0\n\n    car_positions := make([]int, 2*n)\n \
    \   // fill with random values\n    for i := 0; i < 2*n; i++ {\n        car_positions[i]\
    \ = i\n    }\n\n    for i := 0; i < n; i++ {\n        for j := n; j < 2*n; j++\
    \ {\n            if car_positions[i] == car_positions[j] {\n                collisions++\n\
    \            }\n        }\n    }\n\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpidzzq173_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpidzzq173_test.go:53:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpidzzq173_test.go:53: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpidzzq173_test.go:53:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpidzzq173_test.go:53: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    m := make(map[int]bool)\n    for i := 0; i < n; i++ {\n    \
    \    m[i] = true\n    }\n    collisions := 0\n    for i := 0; i < n; i++ {\n \
    \       if _, ok := m[i]; ok {\n            collisions += 1\n        }\n    }\n\
    \    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9zjlps5l_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9zjlps5l_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9zjlps5l_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9zjlps5l_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9zjlps5l_test.go:47: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Algorithm:  each of the two sets of cars are represented\
    \ by a two dimensional\n    // array.  The first dimension of the array represents\
    \ the cars.  The second dimension\n    // of the array has two elements:  the\
    \ first one is the location of the car and the\n    // second one is the speed\
    \ of the car.  The two dimensional array of the left to right\n    // cars are\
    \ sorted by the location and the second dimensional array of the right to left\n\
    \    // cars are sorted by the location.  Then we traverse the two arrays to find\
    \ collisions.\n    var left_cars = make([][2]int, n)\n    var right_cars = make([][2]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        left_cars[i][0] = (i + 1) * 1000\n\
    \        left_cars[i][1] = 1\n        right_cars[i][0] = i * 1000\n        right_cars[i][1]\
    \ = -1\n    }\n    left_cars = Sort(left_cars)\n    right_cars = Sort(right_cars)\n\
    \    var collision_count = 0\n    var i = 0\n    var j = 0\n    for i < n && j\
    \ < n {\n        if left_cars[i][0] < right_cars[j][0] {\n            i++\n  \
    \      } else if left_cars[i][0] > right_cars[j][0] {\n            j++\n     \
    \   } else {\n            collision_count++\n            i++\n            j++\n\
    \        }\n    }\n    return collision_count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpherkph6z_test.go:31:17: undefined: Sort

    /tmp/tmpherkph6z_test.go:32:18: undefined: Sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var odds, evens int\n\n    for i := 1; i <= n; i++ {\n     \
    \   if i % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n\n    return (evens * odds)\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpjstuw9i1_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpjstuw9i1_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpjstuw9i1_test.go:47: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpjstuw9i1_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=16)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpjstuw9i1_test.go:47: expected '%!s(int=100)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n*(n-1))/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbac6w7bx_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbac6w7bx_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    var collision_count\
    \ int = 0\n    collision_count = n - 1\n    if n % 2 == 0 {\n        collision_count\
    \ += 1\n    }\n    return collision_count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpq6jh5e8h_test.go:45: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpq6jh5e8h_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpq6jh5e8h_test.go:45: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpq6jh5e8h_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpq6jh5e8h_test.go:45: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a \"left to right\" car set to be the base case. \
    \ We\n    // don't need to make that explicitly clear in the code here.\n    //\
    \ The other n cars are moving right to left.\n    number_of_collisions := 0\n\n\
    \    // we iterate through all the cars going left to right.\n    for car_driving_left_to_right\
    \ := 0; car_driving_left_to_right < n; car_driving_left_to_right++ {\n       \
    \ // for each car going left to right, we're going to look at each of the\n  \
    \      // cars going right to left.  If we find a collision, we'll increase\n\
    \        // our counter\n        for car_driving_right_to_left := n - 1; car_driving_right_to_left\
    \ >= 0; car_driving_right_to_left-- {\n            if car_driving_left_to_right\
    \ == car_driving_right_to_left {\n                number_of_collisions++\n   \
    \         }\n        }\n    }\n\n    return number_of_collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpq6jneejx_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpq6jneejx_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpq6jneejx_test.go:54: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpq6jneejx_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpq6jneejx_test.go:54: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // initialize a map that stores car positions, with the positions\
    \ initialized to -1\n    var car_positions = make(map[int]int)\n    for i := 1;\
    \ i <= n; i++ {\n        car_positions[i] = -1\n    }\n\n    // set the position\
    \ of the cars moving left to right\n    for i := 1; i <= n; i++ {\n        car_positions[i]\
    \ = i\n    }\n\n    // traverse the map from the start position of the cars moving\
    \ right to left\n    var collisions int = 0\n    for i := n; i >= 1; i-- {\n \
    \       var position = car_positions[i]\n        if position != -1 {\n       \
    \     collisions += position - 1\n        }\n    }\n\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp7f1c9w69_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp7f1c9w69_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp7f1c9w69_test.go:57: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp7f1c9w69_test.go:57:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp7f1c9w69_test.go:57: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0;\
    \ j < n; j++ {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assumption: The cars are driving at a constant speed.\n \
    \   // Assumption: The two sets of cars start out being very far from each other.\n\
    \    // Assumption: The cars are infinitely sturdy and strong; as a result, they\
    \ continue moving\n    // in their trajectory as if they did not collide.\n  \
    \  // Assumption: All cars are of the same length, and thus there's no need to\
    \ check for collision\n    // for the first/last car in each set.\n    if n <\
    \ 2 {\n        return 0\n    }\n    return (n-1) * n / 2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5zh920u8_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5zh920u8_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5zh920u8_test.go:46: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5zh920u8_test.go:46:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5zh920u8_test.go:46: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 2*n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmptl_4kw23_test.go:37: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmptl_4kw23_test.go:37:\
    \ expected '%!s(int=16)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmptl_4kw23_test.go:37: expected '%!s(int=64)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmptl_4kw23_test.go:37:\
    \ expected '%!s(int=100)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 2 {\n        return 0\n    }\n\n    // let's say a car\
    \ is a point on this infinite line road\n    // left2right_cars will contain coordinates\
    \ of cars moving from left to right\n    // right2left_cars will contain coordinates\
    \ of cars moving from right to left\n    left2right_cars := make([]int, n)\n \
    \   right2left_cars := make([]int, n)\n\n    // 0 - 1000 is the range of possible\
    \ coordinates on the road\n    for i := 0; i < n; i++ {\n        left2right_cars[i]\
    \ = (i + 1) * 1000\n        right2left_cars[i] = (n - i) * 1000\n    }\n\n   \
    \ // \"n - 1\" because no collisions are counted when two cars are at the same\
    \ location\n    collisions := n - 1\n\n    // we need to find how many collisions\
    \ there are between left2right cars and right2left cars\n    // it's important\
    \ to note that two left2right cars can't collide, and two right2left cars can't\
    \ collide\n    // because they are all moving in the same direction\n    for i\
    \ := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if left2right_cars[i]\
    \ == right2left_cars[j] {\n                collisions++\n            }\n     \
    \   }\n    }\n\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3gh3l9cb_test.go:67: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3gh3l9cb_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3gh3l9cb_test.go:67: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3gh3l9cb_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=15)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3gh3l9cb_test.go:67: expected '%!s(int=100)', got '%!s(int=19)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We'll run a simulation of the race.\n    // Every second,\
    \ every car moves forward by 1 unit.\n    // Every second, we'll also remove a\
    \ car from the left to right and right to left lists\n    // if it reaches the\
    \ end.\n    //\n    // The collision logic would be implemented by keeping the\
    \ two lists sorted.\n    // A collision occurs when the first car in the list\
    \ of cars moving left to right\n    // is greater than the first car moving right\
    \ to left.  This happens when the\n    // current second is equal to the difference\
    \ between these two cars.\n    var current_second int\n    var current_distance_to_end\
    \ int\n    var collisions int\n    var left_to_right_cars []int\n    var right_to_left_cars\
    \ []int\n    for i := 0; i < n; i++ {\n        // Let's fill the two lists of\
    \ cars.\n        left_to_right_cars = append(left_to_right_cars, current_distance_to_end)\n\
    \        current_distance_to_end += 1\n        right_to_left_cars = append(right_to_left_cars,\
    \ current_distance_to_end)\n        current_distance_to_end += 1\n    }\n    //\
    \ Let's loop while there are cars in either list.\n    for len(left_to_right_cars)\
    \ > 0 || len(right_to_left_cars) > 0 {\n        if len(left_to_right_cars) > 0\
    \ && len(right_to_left_cars) > 0 {\n            // Let's check for a collision.\n\
    \            if current_second == left_to_right_cars[0] - right_to_left_cars[0]\
    \ {\n                collisions += 1\n            }\n        }\n        // Let's\
    \ move all cars that are not yet done.\n        if len(left_to_right_cars) > 0\
    \ {\n            left_to_right_cars[0] -= 1\n            if left_to_right_cars[0]\
    \ == 0 {\n                left_to_right_cars = left_to_right_cars[1:]\n      \
    \      }\n        }\n        if len(right_to_left_cars) > 0 {\n            right_to\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6xr7vmsc_test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return -1;\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp721kbkyh_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp721kbkyh_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp721kbkyh_test.go:37: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp721kbkyh_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp721kbkyh_test.go:37: expected '%!s(int=100)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    rv := n - 1\n    fmt.Printf(\"\
    car_race_collision(%d) -> %d\\n\", n, rv)\n    return rv\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "car_race_collision(2) -> 1\ncar_race_collision(3) -> 2\ncar_race_collision(4)\
    \ -> 3\ncar_race_collision(8) -> 7\ncar_race_collision(10) -> 9\n--- FAIL: TestCar_Race_Collision\
    \ (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0 (0.00s)\n        tmp8gxzyohg_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmp8gxzyohg_test.go:42: expected '%!s(int=9)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmp8gxzyohg_test.go:42:\
    \ expected '%!s(int=16)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmp8gxzyohg_test.go:42: expected '%!s(int=64)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmp8gxzyohg_test.go:42:\
    \ expected '%!s(int=100)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    speed := 1\n    // cars_r_to_l: right-to-left, cars_l_to_r:\
    \ left-to-right\n    cars_r_to_l := make([]int, n)\n    cars_l_to_r := make([]int,\
    \ n)\n    for i:=0; i<n; i++ {\n        cars_r_to_l[i] = speed * (i+1)\n     \
    \   cars_l_to_r[i] = speed * (n-i)\n    }\n    return left_to_right_collision(cars_r_to_l,\
    \ cars_l_to_r)\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnn1bvf0r_test.go:25:12: undefined: left_to_right_collision

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    num_collisions := 0\n    // +1 because of the car at index 0\n\
    \    left_car_position := n + 1\n    right_car_position := 0\n    // return if\
    \ only 1 car\n    if n == 1 {\n        return 0\n    }\n    for left_car_position\
    \ > right_car_position {\n        right_car_position += 1\n        num_collisions\
    \ += 1\n        // to simulate cars moving infinitely fast\n        left_car_position\
    \ -= 1\n    }\n    return num_collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpzwjf55ln_test.go:51: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpzwjf55ln_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpzwjf55ln_test.go:51: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpzwjf55ln_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=5)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpzwjf55ln_test.go:51: expected '%!s(int=100)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // we will have n cars moving left to right and n cars moving\
    \ right to left\n    // we will have 2*n cars:   these are indexed from 0 to 2*n-1\n\
    \    // the cars moving left to right are indexed from 0 to n-1\n    // the cars\
    \ moving right to left are indexed from n to 2*n-1\n    // car i will collide\
    \ with car j exactly when\n    //    i < n < j\n    // or\n    //    j < n < i\n\
    \    // Hence we will have (n-1) + (n-1) = 2*(n-1) collisions.\n    // In other\
    \ words, car i will collide with the first n-1 cars that follow it.\n    return\
    \ 2*(n-1)\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp83nkae81_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp83nkae81_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=4)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp83nkae81_test.go:47: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp83nkae81_test.go:47:\
    \ expected '%!s(int=64)', got '%!s(int=14)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp83nkae81_test.go:47: expected '%!s(int=100)', got '%!s(int=18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    left_race := make([]int, n)\n    right_race := make([]int, n)\n\
    \    for i:=0; i<n; i++ {\n        left_race[i] = n + i\n        right_race[i]\
    \ = n - i\n    }\n    var output int\n    for _, l := range left_race {\n    \
    \    for _, r := range right_race {\n            if l == r {\n               \
    \ output++\n            }\n        }\n    }\n    return output\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpcx3brdeh_test.go:51: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpcx3brdeh_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpcx3brdeh_test.go:51: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpcx3brdeh_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpcx3brdeh_test.go:51: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The value that the function returns.\n    var return_value\
    \ int\n\n    // I will explain what's going on here in a few paragraphs.\n   \
    \ var race = make([]int, 2*n)\n    for i := 0; i < n; i++ {\n        race[i] =\
    \ i\n        race[n+i] = n-i-1\n    }\n\n    // The index into the race array\
    \ where I am currently looking at.\n    var race_index int\n\n    // This array\
    \ keeps track of which cars have already hit other cars.\n    // It's ok to think\
    \ of it as a hash table with n boolean entries.\n    var hit_hashtable = make([]bool,\
    \ n)\n\n    // For now I'm doing a very naive implementation of O(n^2) runtime.\n\
    \    // I will optimize this in the next version of this function.\n    for i\
    \ := 0; i < n; i++ {\n        race_index = n - i - 1\n        for j := n; j <\
    \ 2*n; j++ {\n            if race[race_index] == race[j] {\n                if\
    \ !hit_hashtable[race[race_index]] {\n                    return_value++\n   \
    \                 hit_hashtable[race[race_index]] = true\n                }\n\
    \            }\n        }\n    }\n\n    return return_value\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpgtps3nnx_test.go:68: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpgtps3nnx_test.go:68:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpgtps3nnx_test.go:68: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpgtps3nnx_test.go:68:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpgtps3nnx_test.go:68: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 2 {\n        return 0\n    }\n    // This solution makes\
    \ use of the fact that the cars moving left to right\n    // and the cars moving\
    \ right to left can be mapped to two arrays containing\n    // their starting\
    \ positions (which are unique).  Each array is sorted in\n    // ascending order.\
    \  All cars move at the same speed, so the cars moving\n    // left to right and\
    \ the cars moving right to left meet each other at the\n    // midpoint of their\
    \ start positions.\n    // When merging the two arrays, we need to count the number\
    \ of cars\n    // in the left-to-right array that have a left-to-right position\
    \ to the left\n    // of the right-to-left position that it meets.\n    return\
    \ merge_and_count(make_sorted_array(n), make_sorted_array(n))\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfywjjgv4_test.go:29:12: undefined: merge_and_count

    /tmp/tmpfywjjgv4_test.go:29:28: undefined: make_sorted_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n\treturn 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n \
    \ candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphjz45bo__test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphjz45bo__test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphjz45bo__test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    fmt.Printf(\"Car Race Collision\\n\");\n    return 0;\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Car Race Collision\nCar Race Collision\nCar Race Collision\nCar Race Collision\n\
    Car Race Collision\n--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5u_5n_pf_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5u_5n_pf_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5u_5n_pf_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5u_5n_pf_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5u_5n_pf_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var left_to_right_list [100000]int\n    var right_to_left_list\
    \ [100000]int\n    fmt.Println(\"Hello\")\n    //randomly generate n car positions\
    \ on the road\n    for i := 0; i < n; i++ {\n        left_to_right_list[i] = 1\n\
    \        right_to_left_list[i] = 1\n    }\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hello\nHello\nHello\nHello\nHello\n--- FAIL: TestCar_Race_Collision (0.00s)\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__0 (0.00s)\n        tmpia_728uz_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmpia_728uz_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmpia_728uz_test.go:45:\
    \ expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmpia_728uz_test.go:45: expected '%!s(int=64)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmpia_728uz_test.go:45:\
    \ expected '%!s(int=100)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n\
    \    }\n    return sum\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpoyxy8jve_test.go:41: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpoyxy8jve_test.go:41:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpoyxy8jve_test.go:41: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpoyxy8jve_test.go:41:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpoyxy8jve_test.go:41: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n * (n - 1)) / 2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp74tmqnlz_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp74tmqnlz_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp74tmqnlz_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp74tmqnlz_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp74tmqnlz_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 2 {\n        return 0\n    }\n    collisions := 0\n \
    \   // create a map of cars that is moving from left to right,\n    // where the\
    \ key is the index of the car, and the value\n    // is whether the car has already\
    \ collided with another car.\n    left_to_right := make(map[int]bool)\n    for\
    \ i := 0; i < n; i++ {\n        left_to_right[i] = false\n    }\n    // create\
    \ a map of cars that is moving from right to left,\n    // where the key is the\
    \ index of the car, and the value\n    // is whether the car has already collided\
    \ with another car.\n    right_to_left := make(map[int]bool)\n    for i := 0;\
    \ i < n; i++ {\n        right_to_left[i] = false\n    }\n    for _, value := range\
    \ left_to_right {\n        // if the car moving from left to right has not collided\
    \ with\n        // another car, simulate a collision with a car moving from\n\
    \        // right to left.\n        if !value {\n            collisions++\n  \
    \      }\n    }\n    for _, value := range right_to_left {\n        // if the\
    \ car moving from right to left has not collided with\n        // another car,\
    \ simulate a collision with a car moving from\n        // left to right.\n   \
    \     if !value {\n            collisions++\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmpkhowf2___test.go:71: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmpkhowf2___test.go:71:\
    \ expected '%!s(int=16)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmpkhowf2___test.go:71: expected '%!s(int=64)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmpkhowf2___test.go:71:\
    \ expected '%!s(int=100)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    a := make([]int, n)\n    b := make([]int, n)\n    var collisions\
    \ = 0\n    for i := 0; i < n; i++ {\n        a[i] = i\n        b[i] = i\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if\
    \ a[i] == b[j] {\n                collisions++\n            }\n        }\n   \
    \ }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbewlvhbj_test.go:51: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbewlvhbj_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbewlvhbj_test.go:51: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbewlvhbj_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbewlvhbj_test.go:51: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    left_to_right_car_positions := make([]int, n)\n    right_to_left_car_positions\
    \ := make([]int, n)\n    right_to_left_car_positions[0] = -2*n\n    right_to_left_car_positions[1]\
    \ = -1*n\n    left_to_right_car_positions[0] = 0\n    left_to_right_car_positions[1]\
    \ = n\n    for i:=2; i<n; i++ {\n        left_to_right_car_positions[i] = left_to_right_car_positions[i-1]\
    \ + n\n        right_to_left_car_positions[i] = right_to_left_car_positions[i-1]\
    \ - n\n    }\n    left_to_right_car_id := 0\n    right_to_left_car_id := 0\n \
    \   number_of_collisions := 0\n    total_number_of_car_moves := 2*n\n    for i:=0;\
    \ i<total_number_of_car_moves; i++ {\n        if left_to_right_car_positions[left_to_right_car_id]\
    \ > right_to_left_car_positions[right_to_left_car_id] {\n            left_to_right_car_positions[left_to_right_car_id]++\n\
    \            left_to_right_car_id++\n        } else {\n            right_to_left_car_positions[right_to_left_car_id]--\n\
    \            right_to_left_car_id++\n            number_of_collisions++\n    \
    \    }\n    }\n    return number_of_collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.car_race_collision(0x2)\n\t/tmp/tmpm2cdg3om_test.go:32\
    \ +0x112\ncommand-line-arguments_test.TestCar_Race_Collision(0x0?)\n\t/tmp/tmpm2cdg3om_test.go:51\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n    M := n - 1\n    return\
    \ M + car_race_collision(M)\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpfmto95pe_test.go:41: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpfmto95pe_test.go:41:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpfmto95pe_test.go:41: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpfmto95pe_test.go:41:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpfmto95pe_test.go:41: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var rLeft, rRight int\n    var lCount, rCount int\n    rLeft\
    \ = n\n    rRight = 0\n    lCount = 0\n    rCount = 0\n    for rLeft > 0 && rRight\
    \ < n {\n        for rLeft > 0 && rRight < n {\n            if rLeft == rRight\
    \ {\n                rLeft--\n                rRight++\n                lCount++\n\
    \                rCount++\n            } else if rLeft > rRight {\n          \
    \      rLeft--\n                lCount++\n            } else {\n             \
    \   rRight++\n                rCount++\n            }\n        }\n        if rLeft\
    \ == 0 && rRight < n {\n            for rRight < n {\n                rRight++\n\
    \                rCount++\n            }\n        } else if rRight == n && rLeft\
    \ > 0 {\n            for rLeft > 0 {\n                rLeft--\n              \
    \  lCount++\n            }\n        }\n    }\n    return n - (lCount - rCount)\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp433mf_ys_test.go:70: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp433mf_ys_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp433mf_ys_test.go:70: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp433mf_ys_test.go:70:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp433mf_ys_test.go:70: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // returns the number of collisions\n    return collisions(n)\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgulq191w_test.go:18:12: undefined: collisions

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n   \
    \     return 0\n    case 2:\n        return 1\n    default:\n        return car_race_collision(n-1)\
    \ + n - 1\n    }\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_3j_cmzy_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_3j_cmzy_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_3j_cmzy_test.go:46: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_3j_cmzy_test.go:46:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_3j_cmzy_test.go:46: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We run a simulation, which involves simulating the movement\
    \ of the cars.\n    // We assume that each car starts at an integer-valued position\
    \ and moves\n    // an integer number of steps.\n    // We assume that the two\
    \ sets of cars are numbered as follows:  the cars\n    // driving left to right\
    \ are numbered 1 to n, and the cars driving right to left\n    // are numbered\
    \ n+1 to 2n.\n    // We assume that the cars are initially far apart and that\
    \ each car has moved\n    // at least once.\n    // We also assume that the cars\
    \ all move in the same speed.\n    // We keep track of what cars are moving right\
    \ to left and what cars are moving\n    // left to right by storing two arrays:\
    \  the ith element of the first array\n    // is true iff the ith car is moving\
    \ right to left, and the ith element of the\n    // second array is true iff the\
    \ ith car is moving left to right.\n    // We initialize both arrays so that the\
    \ first array is true for all cars numbered\n    // n+1 to 2n and false for all\
    \ other cars, and the second array is true for all\n    // cars numbered 1 to\
    \ n and false for all other cars.\n    // We run the simulation for n^2 steps.\
    \  The idea is that for each car,\n    // the probability that we encounter a\
    \ collision is at most 1/n.  As a result,\n    // the expected number of steps\
    \ that we need to encounter a collision is at most n.\n    // We compute the sum\
    \ of n^2/n over n to get n^3.  There's a small chance that we\n    // encounter\
    \ a collision before n^2 steps, but the error due to this is at most n,\n    //\
    \ and hence is negligible compared to n^3.\n    // We use the following algorithm:\n\
    \    // We keep track of the number of collisions by declaring a variable called\n\
    \    // collisions that has an initial value of 0.\n    // In each step, we first\
    \ randomly select a car.  (We assume that we have a function\n    // rand() that\
    \ randomly selects a car.)\n    // Then, we do the following:\n    // Suppose\
    \ that the randomly selected car is moving right to left.  Then, we move the\n\
    \    // car left by\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewbn3jcu_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n - 1\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0vy21m_i_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0vy21m_i_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n    // for the first car,\
    \ it is traveling left to right;\n    // for the second car, it is traveling right\
    \ to left;\n    // for the third car, it is traveling left to right;\n    // ...\
    \ so it is alternating.\n    return n + car_race_collision(n - 1)\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5004icc3_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5004icc3_test.go:44:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5004icc3_test.go:44: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5004icc3_test.go:44:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5004icc3_test.go:44: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n - n/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpf902zdq6_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpf902zdq6_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpf902zdq6_test.go:37: expected '%!s(int=16)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpf902zdq6_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=4)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpf902zdq6_test.go:37: expected '%!s(int=100)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n;\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpde6w7w7k_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpde6w7w7k_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpde6w7w7k_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpde6w7w7k_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpde6w7w7k_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Think of the n cars as being a line of \"boxes\".  The n\
    \ cars that are\n    // moving left to right are represented by n boxes with no\
    \ holes.\n    // The n cars that are moving right to left are represented by n\
    \ boxes\n    // with 1 hole.\n    // Collisions occur when the boxes with 1 hole\
    \ touch the boxes with no holes.\n    // And the number of collisions is the same\
    \ as the total number of gaps that\n    // remain after the \"boxes\" are \"merged\"\
    \ together.\n    // Because I'm a bit lazy, I'm going to compute the number of\
    \ gaps by\n    // computing the complement of the number of non-gaps.\n    //\
    \ The number of non-gaps is computed by doing n sweeps of the array of 2n boxes\n\
    \    // in the following manner:\n    // * A box with no hole is represented by\
    \ 0.\n    // * A box with 1 hole is represented by 1.\n    // * On the first sweep,\
    \ all boxes are initialized to 0.\n    // * On the ith sweep, if the ith box is\
    \ a 1, then all 0s to the right are\n    //   changed to 1s.\n    // * At the\
    \ end of the 2n sweeps, the total number of non-gaps is the sum of\n    //   the\
    \ numbers in the array.\n    // * The total number of gaps is the complement of\
    \ the total number of non-gaps.\n    // * Because we are in a bit array, to get\
    \ the complement, we can just flip all\n    //   the bits, as they are already\
    \ in a bit array.\n    // * This can be accomplished by the following trick: \
    \ bitwise-AND the bit array\n    //   with a bit array where all the bits are\
    \ set to 1 (this has the effect of\n    //   flipping all the bits).\n    // *\
    \ Because we are doing the AND operation, and the last bit in a bit array\n  \
    \  //   always has an index of 0, and the first bit always has an index of\n \
    \   //   2n-1, we can just AND the first bit with the last bit; this will produce\n\
    \    //   the same effect as ANDing the bit array with a bit array that has all\
    \ bits\n    //   set to 1.\n    // * Finally, because we are working with\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqrrcovv9_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n * (n - 1)) / 2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp74tmqnlz_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp74tmqnlz_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp74tmqnlz_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp74tmqnlz_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp74tmqnlz_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0;\
    \ j < n; j++ {\n            if i == j {\n                continue\n          \
    \  }\n            if (i - j) % (2 * n) == 0 {\n                count += 1\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmprmvj78i5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmprmvj78i5_test.go:48:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmprmvj78i5_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmprmvj78i5_test.go:48:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmprmvj78i5_test.go:48: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    // TODO: implement this\n    return\
    \ -1\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpzm6pdmwo_test.go:39: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpzm6pdmwo_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpzm6pdmwo_test.go:39: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpzm6pdmwo_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpzm6pdmwo_test.go:39: expected '%!s(int=100)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    return n*(n-1)/2\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpjh4do50o_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpjh4do50o_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpjh4do50o_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpjh4do50o_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpjh4do50o_test.go:40: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Let's assume that the cars are numbered 1 to n; the left-to-right\
    \ cars\n    // are in the range 1 to n/2; the right-to-left cars are in the range\n\
    \    // n/2 + 1 to n.\n    // The cars will collide, obviously, if and only if\
    \ all of the following conditions\n    // hold:\n    // 1.  The car numbers are\
    \ the same.\n    // 2.  The left-to-right car is in the range 1 to n/2.\n    //\
    \ 3.  The right-to-left car is in the range n/2 + 1 to n.\n    //\n    // When\
    \ will these three conditions hold?  The conditions are satisfied for\n    //\
    \ every pair of cars that are equidistant from the halfway point of the line.\n\
    \    // How many such pairs of cars are there?  There are (n/2 - 1) such pairs.\
    \  This is\n    // because the first left-to-right car and the last right-to-left\
    \ car are adjacent,\n    // so they don't collide.  Therefore, they contribute\
    \ to the collision count.\n    return (n / 2) - 1\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9ql6nt2e_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9ql6nt2e_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9ql6nt2e_test.go:51: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9ql6nt2e_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9ql6nt2e_test.go:51: expected '%!s(int=100)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that we have two arrays of n cars.\n    // The left-to-right\
    \ cars are in the first array, and the right-to-left cars are in the second array.\n\
    \    // We need to find the number of collisions.\n    collisions := 0\n    carsLeftToRight\
    \ := make([]int, n)\n    carsRightToLeft := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        carsLeftToRight[i] = i\n        carsRightToLeft[i] = n -\
    \ i - 1\n    }\n    for _, car1 := range carsLeftToRight {\n        for _, car2\
    \ := range carsRightToLeft {\n            if car1 == car2 {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpulw_ih9q_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpulw_ih9q_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpulw_ih9q_test.go:54: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpulw_ih9q_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpulw_ih9q_test.go:54: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Solution: the answer is n(n-1)/2\n    return n*(n-1)/2\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp6tbs9ot8_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp6tbs9ot8_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp6tbs9ot8_test.go:38: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp6tbs9ot8_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp6tbs9ot8_test.go:38: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Make a slice of n cars moving left to right\n    l2r := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        l2r[i] = i\n    }\n    //fmt.Println(l2r)\n\
    \n    // Make a slice of n cars moving right to left\n    r2l := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        r2l[i] = n-i-1\n    }\n    //fmt.Println(r2l)\n\
    \n    // Count the number of \"collisions\"\n    collisions := 0\n    for i :=\
    \ 0; i < n; i++ {\n        if l2r[i] == r2l[i] {\n            collisions++\n \
    \       }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpz2u3m4im_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpz2u3m4im_test.go:58:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpz2u3m4im_test.go:58: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpz2u3m4im_test.go:58:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpz2u3m4im_test.go:58: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var visited map[int]bool = make(map[int]bool)\n    var collisions\
    \ int = 0\n    for i := 1; i <= n; i++ {\n        if visited[i] {\n          \
    \  continue\n        }\n        visited[i] = true\n        for j := 1; j <= n;\
    \ j++ {\n            if j == i {\n                continue\n            }\n  \
    \          if visited[j] {\n                continue\n            }\n        \
    \    visited[j] = true\n            if i == n - j + 1 {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpz1y2enk7_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpz1y2enk7_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpz1y2enk7_test.go:57: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpz1y2enk7_test.go:57:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpz1y2enk7_test.go:57: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    car_positions := make([]int, n)\n    // 0 means car moving left\
    \ to right, 1 means car moving right to left\n    car_directions := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        car_positions[i] = i\n        if i\
    \ % 2 == 0 {\n            car_directions[i] = 0\n        } else {\n          \
    \  car_directions[i] = 1\n        }\n    }\n    results := make([]int, 0)\n  \
    \  for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if\
    \ i != j && car_directions[i] == 0 && car_directions[j] == 1 {\n             \
    \   results = append(results, car_positions[i])\n            }\n        }\n  \
    \  }\n    return len(results)\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppunvuqrd_test.go:56: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppunvuqrd_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppunvuqrd_test.go:56: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppunvuqrd_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=16)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppunvuqrd_test.go:56: expected '%!s(int=100)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return ((n - 1) * n) / 2\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2u97nome_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2u97nome_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2u97nome_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2u97nome_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2u97nome_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // n cars are moving left to right, n are moving right to left.\n\
    \    // 1 car from the left-to-right set collides with every car that's ahead\
    \ of it.\n    // 1 car from the right-to-left set collides with every car that's\
    \ behind it.\n    return (n*(n-1))/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9ng__f84_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9ng__f84_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9ng__f84_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9ng__f84_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9ng__f84_test.go:40: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The road is modelled as the integers (infinite on both directions)\n\
    \    // Cars moving left to right are modelled as the pairs [i, i + 1]\n    //\
    \ Cars moving right to left are modelled as the pairs [i + 1, i]\n    // A collision\
    \ will happen when a car moving left to right and a car moving right to left\n\
    \    // have the same position.\n    collisions := 0\n    for i := 0; i < n; i++\
    \ {\n        for j := 0; j < n; j++ {\n            if i + 1 == j {\n         \
    \       collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpo1thqdvu_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpo1thqdvu_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpo1thqdvu_test.go:50: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpo1thqdvu_test.go:50:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpo1thqdvu_test.go:50: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return car_race_collision_rec(n, true)\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptb7jeeu__test.go:17:12: undefined: car_race_collision_rec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // *** YOUR CODE HERE ***\n    var collision_number int = 0\n\
    \n    // Car[0] is left to right\n    // Car[1] is right to left\n    var car\
    \ [2][]int = [2][]int{make([]int, n), make([]int, n)}\n\n    for i := 0; i < n;\
    \ i++ {\n        car[0][i] = i\n        car[1][i] = n - i - 1\n    }\n\n    for\
    \ i := 0; i < n; i++ {\n        if car[0][i] == car[1][i] {\n            collision_number\
    \ += 1\n        }\n    }\n\n    return collision_number\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpyn4r60u6_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpyn4r60u6_test.go:55:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpyn4r60u6_test.go:55: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpyn4r60u6_test.go:55:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpyn4r60u6_test.go:55: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n    // counter\n    collisions\
    \ := 0\n    // find n cars moving left to right, then n cars moving right to left\n\
    \    for l := 1; l <= n; l++ {\n        for r := 1; r <= n; r++ {\n          \
    \  // if the left to right car hits a right to left car\n            if l == r\
    \ {\n                collisions++\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9xk7_okn_test.go:51: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9xk7_okn_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9xk7_okn_test.go:51: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9xk7_okn_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9xk7_okn_test.go:51: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    l := make([]int, n)\n    r := make([]int, n)\n    for i:=0;\
    \ i<n; i++ {\n        l[i] = i\n        r[i] = i\n    }\n    collisions := 0\n\
    \    for i:=0; i<n; i++ {\n        for j:=0; j<n; j++ {\n            if l[i] ==\
    \ r[j] {\n                collisions += 1\n            }\n        }\n    }\n \
    \   return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpixuw_65p_test.go:51: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpixuw_65p_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpixuw_65p_test.go:51: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpixuw_65p_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpixuw_65p_test.go:51: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n == 0 {\n        return 0\n    }\n\n    var count int =\
    \ 0\n    var left [2]int = [2]int{0, 1}\n    var right [2]int = [2]int{n-1, n-2}\n\
    \n    for left[0] <= right[0] {\n        if left[1] == right[1] {\n          \
    \  count++\n            left[0]++\n            left[1]++\n            right[0]--\n\
    \            right[1]--\n        } else if left[1] < right[1] {\n            left[0]++\n\
    \            left[1]++\n        } else {\n            right[0]--\n           \
    \ right[1]--\n        }\n    }\n\n    return count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpqt92ahhh_test.go:61: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpqt92ahhh_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpqt92ahhh_test.go:61: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpqt92ahhh_test.go:61:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpqt92ahhh_test.go:61: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // There are two important things about this problem.  The first\
    \ is that the\n    // problem itself is rather simple and can be solved with a\
    \ trivial solution.\n    // The second thing is that the problem description is\
    \ actually a bit misleading\n    // and makes the problem look a lot more complicated\
    \ than it is.  I've never been\n    // told not to worry about coding style or\
    \ documentation before, so I'll assume\n    // that that is not a problem.  I'll\
    \ also assume that the description is simply\n    // the result of an unfortunate\
    \ choice of words.\n    //\n    // If a car that's driving left to right collides\
    \ with a car that's driving right\n    // to left, they would have to be moving\
    \ at the same speed.  This is because the\n    // right to left car would only\
    \ have a chance to collide with a left to right car\n    // if they were at the\
    \ same spot.  If they are at the same spot and are moving at\n    // the same\
    \ speed, they would have a collision.  If the right to left car is not\n    //\
    \ moving as fast as the left to right car, they would have to move at the same\n\
    \    // speed for a finite amount of time before they would collide.  If the right\
    \ to\n    // left car is moving faster than the left to right car, the left to\
    \ right car\n    // would just crash into the back of the right to left car. \
    \ If the left to right\n    // car is moving faster than the right to left car,\
    \ the left to right car would\n    // simply pass the right to left car.  We can\
    \ conclude that all n left to right\n    // cars that are moving and are currently\
    \ not in the process of colliding with\n    // a right to left car would be moving\
    \ at the same speed and therefore would be\n    // moving at the same speed as\
    \ all of the n right to left cars that are moving\n    // and are currently not\
    \ in the process of colliding with a left to right car.\n    // We can therefore\
    \ just take the speed of any car that is moving and not\n    // currently in the\
    \ process of colliding with another car.  We can then take\n    // the difference\
    \ of their positions and the result would tell us how many\n    // collisions\
    \ have occurred.  We can simply iterate over the cars and add their\n    // position\
    \ to the\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9yamd480_test.go:45:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var i, j, count int\n    left_to_right := make([]int, n)\n \
    \   right_to_left := make([]int, n)\n    var taken_left bool\n    var taken_right\
    \ bool\n    //fmt.Println(\"left_to_right: \", left_to_right)\n    //fmt.Println(\"\
    right_to_left: \", right_to_left)\n    //fmt.Println()\n    for i = 0; i < n;\
    \ i++ {\n        left_to_right[i] = i\n        right_to_left[i] = n-i-1\n    }\n\
    \    for i = 0; i < n; i++ {\n        //fmt.Println(\"left_to_right: \", left_to_right)\n\
    \        //fmt.Println(\"right_to_left: \", right_to_left)\n        taken_left\
    \ = false\n        taken_right = false\n        for j = 0; j < n; j++ {\n    \
    \        if !taken_left && (left_to_right[j] == i) {\n                fmt.Println(\"\
    left: \", left_to_right[j])\n                taken_left = true\n            }\n\
    \            if !taken_right && (right_to_left[j] == i) {\n                fmt.Println(\"\
    right: \", right_to_left[j])\n                taken_right = true\n           \
    \ }\n            if taken_left && taken_right {\n                fmt.Println(\"\
    count: \", count)\n                count++\n                break\n          \
    \  }\n        }\n    }\n    return count\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "left:  0\nright:  0\ncount:  0\nright:  1\nleft:  1\ncount:  1\nleft: \
    \ 0\nright:  0\ncount:  0\nleft:  1\nright:  1\ncount:  1\nright:  2\nleft:  2\n\
    count:  2\nleft:  0\nright:  0\ncount:  0\nleft:  1\nright:  1\ncount:  1\nright:\
    \  2\nleft:  2\ncount:  2\nright:  3\nleft:  3\ncount:  3\nleft:  0\nright:  0\n\
    count:  0\nleft:  1\nright:  1\ncount:  1\nleft:  2\nright:  2\ncount:  2\nleft:\
    \  3\nright:  3\ncount:  3\nright:  4\nleft:  4\ncount:  4\nright:  5\nleft: \
    \ 5\ncount:  5\nright:  6\nleft:  6\ncount:  6\nright:  7\nleft:  7\ncount:  7\n\
    left:  0\nright:  0\ncount:  0\nleft:  1\nright:  1\ncount:  1\nleft:  2\nright:\
    \  2\ncount:  2\nleft:  3\nright:  3\ncount:  3\nleft:  4\nright:  4\ncount: \
    \ 4\nright:  5\nleft:  5\ncount:  5\nright:  6\nleft:  6\ncount:  6\nright:  7\n\
    left:  7\ncount:  7\nright:  8\nleft:  8\ncount:  8\nright:  9\nleft:  9\ncount:\
    \  9\n--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpn0p6mr8p_test.go:70: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpn0p6mr8p_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpn0p6mr8p_test.go:70: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpn0p6mr8p_test.go:70:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpn0p6mr8p_test.go:70: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    left_cars_count := n\n    right_cars_count := n\n    collisions\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n     \
    \       if i == j {\n                collisions++\n            }\n        }\n\
    \    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8uan6_13_test.go:17:5: left_cars_count declared but not used

    /tmp/tmp8uan6_13_test.go:18:5: right_cars_count declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var i, j, collisions int\n    var movable [2]int\n\n    movable[0]\
    \ = n\n    movable[1] = n\n\n    for {\n        if movable[0] == 0 || movable[1]\
    \ == 0 {\n            break\n        }\n\n        for i = 0; i < n; i++ {\n  \
    \          if movable[0] == 0 {\n                break\n            }\n\n    \
    \        for j = 0; j < n; j++ {\n                if movable[1] == 0 {\n     \
    \               break\n                }\n\n                if i == j {\n    \
    \                collisions++\n                    movable[0]--\n            \
    \        movable[1]--\n                }\n            }\n        }\n    }\n\n\
    \    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmph4hek2vl_test.go:67: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmph4hek2vl_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmph4hek2vl_test.go:67: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmph4hek2vl_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmph4hek2vl_test.go:67: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 1 {\n        panic(\"n must be a positive integer\")\n\
    \    }\n    // right_to_left_races means the number of right-to-left races.\n\
    \    right_to_left_races := make([]int, n)\n    // left_to_right_races means the\
    \ number of left-to-right races.\n    left_to_right_races := make([]int, n)\n\
    \    // Populate the left_to_right_races array with the first n number sequence.\n\
    \    for i := 0; i < n; i++ {\n        left_to_right_races[i] = i\n    }\n   \
    \ // Populate the right_to_left_races array with the first n number sequence.\n\
    \    for i := 0; i < n; i++ {\n        right_to_left_races[i] = i\n    }\n   \
    \ // Shuffle the elements in left_to_right_races.\n    // At the end of this loop,\
    \ left_to_right_races becomes\n    // a random permutation of the first n number\
    \ sequence.\n    for i := 0; i < n; i++ {\n        j := random_number_in_range(i,\
    \ n)\n        tmp := left_to_right_races[i]\n        left_to_right_races[i] =\
    \ left_to_right_races[j]\n        left_to_right_races[j] = tmp\n    }\n    //\
    \ Shuffle the elements in right_to_left_races.\n    // At the end of this loop,\
    \ right_to_left_races becomes\n    // a random permutation of the first n number\
    \ sequence.\n    for i := 0; i < n; i++ {\n        j := random_number_in_range(i,\
    \ n)\n        tmp := right_to_left_races[i]\n        right_to_left_races[i] =\
    \ right_to_left_races[j]\n        right_to_left_races[j] = tmp\n    }\n    var\
    \ collisions int\n    // Simulate the car race collision\n    // and check if\
    \ two cars collide.\n    for\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0tzfzmdt_test.go:54:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073349
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    l_to_r := make([]int, n)\n    r_to_l := make([]int, n)\n   \
    \ for i := 0; i < n; i++ {\n        l_to_r[i] = i\n        r_to_l[i] = i\n   \
    \ }\n    return car_race_collision_recursive(l_to_r, r_to_l, 0, n-1)\n}\n\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzkco_39_test.go:23:12: undefined: car_race_collision_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n - 1) * n / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp93f_x_fm_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp93f_x_fm_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp93f_x_fm_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp93f_x_fm_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp93f_x_fm_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var result int = 0\n    for i := 0; i < n; i++ {\n        result\
    \ += i\n    }\n    return result\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpza27u1it_test.go:41: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpza27u1it_test.go:41:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpza27u1it_test.go:41: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpza27u1it_test.go:41:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpza27u1it_test.go:41: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // this is just the formula for the sum of natural numbers\n\
    \    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5wultg4s_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5wultg4s_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5wultg4s_test.go:38: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5wultg4s_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5wultg4s_test.go:38: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n-1\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp4iwlprnt_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp4iwlprnt_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp4iwlprnt_test.go:37: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp4iwlprnt_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp4iwlprnt_test.go:37: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // let's use n-bit binary numbers to represent the positions\
    \ of the cars.\n    // a \"1\" at a certain bit position indicates that the car\
    \ corresponding to\n    // the left-to-right group is at this position;  a \"\
    1\" at a certain bit position\n    // indicates that the car corresponding to\
    \ the right-to-left group is at this position.\n    // e.g.,  \"1101\" means that\
    \ the left-to-right car #1 is at position 0,\n    // left-to-right car #2 is at\
    \ position 1, left-to-right car #3 is at position 3,\n    // right-to-left car\
    \ #1 is at position 0, right-to-left car #2 is at position 3.\n    // if the left-to-right\
    \ car #1 collides with the right-to-left car #1, we change\n    // its bit value\
    \ to \"0101\"\n    positions := 0x0 // car #1 starts at position 0\n    positions_moved\
    \ := 0x0\n    left_to_right_group := []int{}\n    right_to_left_group := []int{}\n\
    \    collisions := 0\n    for i := 0; i < n; i++ {\n        pos_int := 1 << uint(i)\n\
    \        left_to_right_group = append(left_to_right_group, pos_int)\n        right_to_left_group\
    \ = append(right_to_left_group, pos_int)\n    }\n    for positions != positions_moved\
    \ {\n        for _,car := range left_to_right_group {\n            if positions\
    \ & car != 0 {\n                // car is already moved;  skip it\n          \
    \      continue\n            }\n            // car is not yet moved;  move it\n\
    \            positions_moved = positions_moved | car\n            // update collisions\n\
    \            collisions += number_of_ones(positions & car)\n        }\n      \
    \  for _,car := range right_to_left_group {\n            if positions & car !=\
    \ 0 {\n                // car is already moved;  skip it\n                continue\n\
    \            }\n            // car is not yet moved;  move it\n            positions_moved\
    \ = positions_moved | car\n           \nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpptbi9chp_test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return -1\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_iaz79fr_test.go:37: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_iaz79fr_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_iaz79fr_test.go:37: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_iaz79fr_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=-1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_iaz79fr_test.go:37: expected '%!s(int=100)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
