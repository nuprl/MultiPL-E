language: go_test.go
name: HumanEval_88_sort_array
results:
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    switch (array[0]\
    \ + array[len(array) - 1]) % 2 {\n    case 0:\n        return sort_array_desc(array)\n\
    \    default:\n        return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpovi9hkzi_test.go:28:16: undefined: sort_array_desc

    /tmp/tmpovi9hkzi_test.go:30:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length < 1 {\n        return array\n   \
    \ }\n    if length == 1 {\n        return array\n    }\n    if length == 2 {\n\
    \        return array\n    }\n    if (array[0] + array[length - 1]) % 2 == 0 {\n\
    \        return reverse_array(array)\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkom_j8jo_test.go:34:16: undefined: reverse_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    arrayLen := len(array)\n    if arrayLen == 0 {\n        return array\n\
    \    }\n    flag := (array[0] + array[arrayLen - 1]) % 2 == 0\n    // fmt.Println(flag)\n\
    \    for i := 0; i < arrayLen; i++ {\n        for j := 0; j < arrayLen - i - 1;\
    \ j++ {\n            if flag {\n                if array[j] < array[j + 1] {\n\
    \                    array[j], array[j + 1] = array[j + 1], array[j]\n       \
    \         }\n            } else {\n                if array[j] > array[j + 1]\
    \ {\n                    array[j], array[j + 1] = array[j + 1], array[j]\n   \
    \             }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int\n    for i, value := range array {\n        sum += value\n\
    \        if i == 0 {\n            continue\n        }\n        if array[i] > array[i-1]\
    \ {\n            continue\n        }\n        array[i], array[i-1] = array[i-1],\
    \ array[i]\n    }\n    if sum % 2 == 0 {\n        for i := 0; i < len(array)/2;\
    \ i++ {\n            array[i], array[len(array)-1-i] = array[len(array)-1-i],\
    \ array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp8ldkcbtf_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp8ldkcbtf_test.go:61: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp8ldkcbtf_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=32)\
    \ %!s(int=11) %!s(int=0) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8ldkcbtf_test.go:61: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=21) %!s(int=11) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: Implement this method\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp4t54ald__test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp4t54ald__test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp4t54ald__test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp4t54ald__test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp4t54ald__test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int\n    for i, v := range array {\n        sum += v\n      \
    \  if i == 0 {\n            continue\n        }\n        if v < array[i-1] {\n\
    \            tmp := array[i-1]\n            array[i-1] = v\n            array[i]\
    \ = tmp\n        }\n    }\n    for i, v := range array {\n        if i == 0 {\n\
    \            continue\n        }\n        if v < array[i-1] {\n            tmp\
    \ := array[i-1]\n            array[i-1] = v\n            array[i] = tmp\n    \
    \    }\n    }\n    if sum % 2 == 0 {\n        for i, v := range array {\n    \
    \        array[i] = v\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpy8vd2s5p_test.go:72: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpy8vd2s5p_test.go:72: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpy8vd2s5p_test.go:72: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=32) %!s(int=11)\
    \ %!s(int=0) %!s(int=42) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpy8vd2s5p_test.go:72: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=11) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var odd_part []int\n    var even_part []int\n    var odd_part_sorted\
    \ []int\n    var even_part_sorted []int\n    var result []int\n    var n int\n\
    \    for i := 0; i < len(array); i++ {\n        if array[i] % 2 == 0 {\n     \
    \       even_part = append(even_part, array[i])\n        } else {\n          \
    \  odd_part = append(odd_part, array[i])\n        }\n    }\n    odd_part_sorted\
    \ = odd_part\n    even_part_sorted = even_part\n    for i := 0; i < len(odd_part_sorted)\
    \ - 1; i++ {\n        for j := i + 1; j < len(odd_part_sorted); j++ {\n      \
    \      if odd_part_sorted[i] > odd_part_sorted[j] {\n                n = odd_part_sorted[i]\n\
    \                odd_part_sorted[i] = odd_part_sorted[j]\n                odd_part_sorted[j]\
    \ = n\n            }\n        }\n    }\n    for i := 0; i < len(even_part_sorted)\
    \ - 1; i++ {\n        for j := i + 1; j < len(even_part_sorted); j++ {\n     \
    \       if even_part_sorted[i] < even_part_sorted[j] {\n                n = even_part_sorted[i]\n\
    \                even_part_sorted[i] = even_part_sorted[j]\n                even_part_sorted[j]\
    \ = n\n            }\n        }\n    }\n    for i := 0; i < len(odd_part_sorted);\
    \ i++ {\n        result = append(result, odd_part_sorted[i])\n    }\n    for i\
    \ := 0; i < len(even_part_sorted); i++ {\n        result = append(result, even_part_sorted[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpzmeq8_og_test.go:84: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=4)\
    \ %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpzmeq8_og_test.go:84: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=6)\
    \ %!s(int=4) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpzmeq8_og_test.go:84: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=15) %!s(int=87)\
    \ %!s(int=42) %!s(int=32) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpzmeq8_og_test.go:84: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=21) %!s(int=23) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"array:\", array)\n    length := len(array)\n    if length\
    \ == 0 {\n        return array\n    }\n\n    // max number: 5, 4\n    // or: 5,\
    \ 4, 3\n    // or: 5, 4, 3, 2\n    // or: 5, 4, 3, 2, 1\n    // or: 5, 4, 3, 2,\
    \ 1, 0\n    if length == 1 {\n        return array\n    }\n\n    // max number:\
    \ 4, 3, 5\n    // or: 4, 3, 2, 5\n    // or: 4, 3, 2, 1, 5\n    // or: 4, 3, 2,\
    \ 1, 0, 5\n    if length == 2 {\n        if array[0] > array[1] {\n          \
    \  return []int{array[1], array[0]}\n        }\n        return array\n    }\n\n\
    \    // max number: 3, 2, 4, 5\n    // or: 3, 2, 1, 4, 5\n    // or: 3, 2, 1,\
    \ 0, 4, 5\n    if length == 3 {\n        if array[0] > array[1] {\n          \
    \  array[0], array[1] = array[1], array[0]\n        }\n        if array[1] > array[2]\
    \ {\n            array[1], array[2] = array[2], array[1]\n        }\n        if\
    \ array[0] > array[1] {\n            array[0], array[1] = array[1], array[0]\n\
    \        }\n        return array\n    }\n\n    // max number: 2, 1, 3, 4, 5\n\
    \    // or: 2, 1, 0, 3, 4, 5\n    if length == 4 {\n        // max number: 3,\
    \ 4, 5\n        if array[0] > array[1] {\n            array[0], array[1] = array[1],\
    \ array[0]\n        }\n        if array[2] > array[3] {\n            array[2],\
    \ array[3] = array[3], array[2]\n        }\n        if array[0] > array[2] {\n\
    \            array[0], array[2] = array\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpixjqlhej_test.go:77:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075107
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    arrayLen := len(array)\n    if arrayLen == 0 {\n        fmt.Println(\"\
    PATCH list\")\n        return array\n    }\n\n    if arrayLen == 1 {\n       \
    \ return array\n    }\n\n    if array[0] % 2 == array[arrayLen - 1] % 2 {\n  \
    \      // odd\n        return sortArrayInAscendingOrder(array)\n    } else {\n\
    \        // even\n        return sortArrayInDescendingOrder(array)\n    }\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82kdm8me_test.go:35:16: undefined: sortArrayInAscendingOrder

    /tmp/tmp82kdm8me_test.go:38:16: undefined: sortArrayInDescendingOrder

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n    if n <= 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[n-1]) & 1 == 0 {\n        k := n - 1\n        for i := 0;\
    \ i < n/2; i++ {\n            array[i], array[k-i] = array[k-i], array[i]\n  \
    \      }\n    }\n    k := n / 2\n    for i := 0; i < k; i++ {\n        for j :=\
    \ k; j < n-1; j++ {\n            if array[j] < array[j+1] {\n                array[j],\
    \ array[j+1] = array[j+1], array[j]\n            }\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpdny38kv0_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpdny38kv0_test.go:63: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpdny38kv0_test.go:63: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpdny38kv0_test.go:63: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpdny38kv0_test.go:63: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=21) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        return reverse_array(array)\n   \
    \ }\n    sorted := array\n    for i := 0; i < len(sorted) - 1; i++ {\n       \
    \ for j := i + 1; j < len(sorted); j++ {\n            if sorted[i] > sorted[j]\
    \ {\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n           \
    \ }\n        }\n    }\n    return sorted\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp481gkm9u_test.go:27:16: undefined: reverse_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    arrayLen := len(array)\n    var f_v, l_v int\n    var sum int\n    if\
    \ arrayLen != 0 {\n        f_v = array[0]\n        l_v = array[arrayLen-1]\n \
    \       sum = f_v + l_v\n    } else {\n        return nil\n    }\n    sort_array\
    \ := make([]int, arrayLen)\n    start_index := 0\n    end_index := arrayLen -\
    \ 1\n    if sum % 2 == 0 {\n        for _, v := range array {\n            if\
    \ v % 2 == 0 {\n                sort_array[start_index] = v\n                start_index++\n\
    \            } else {\n                sort_array[end_index] = v\n           \
    \     end_index--\n            }\n        }\n    } else {\n        for _, v :=\
    \ range array {\n            if v % 2 == 0 {\n                sort_array[end_index]\
    \ = v\n                end_index--\n            } else {\n                sort_array[start_index]\
    \ = v\n                start_index++\n            }\n        }\n    }\n    return\
    \ sort_array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpr85qutyw_test.go:79: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=1) %!s(int=5) %!s(int=0)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpr85qutyw_test.go:79: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=6)\
    \ %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpr85qutyw_test.go:79: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=87) %!s(int=11)\
    \ %!s(int=0) %!s(int=32) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpr85qutyw_test.go:79: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=11) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n    if n <= 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[n-1]) & 1 == 0 {\n        for i := 0; i < n/2; i++ {\n   \
    \         array[i], array[n-1-i] = array[n-1-i], array[i]\n        }\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp27tx3d8e_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp27tx3d8e_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp27tx3d8e_test.go:54: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp27tx3d8e_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp27tx3d8e_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    first := array[0]\n    last := array[len(array) - 1]\n    if (first +\
    \ last) % 2 == 0 {\n        fmt.Println(\"odd\")\n        for j := 0; j < len(array);\
    \ j++ {\n            for i := 0; i < len(array) - 1; i++ {\n                if\
    \ array[i] < array[i + 1] {\n                    temp := array[i]\n          \
    \          array[i] = array[i + 1]\n                    array[i + 1] = temp\n\
    \                }\n            }\n        }\n    } else {\n        fmt.Println(\"\
    even\")\n        for j := 0; j < len(array); j++ {\n            for i := 0; i\
    \ < len(array) - 1; i++ {\n                if array[i] > array[i + 1] {\n    \
    \                temp := array[i]\n                    array[i] = array[i + 1]\n\
    \                    array[i + 1] = temp\n                }\n            }\n \
    \       }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpcx5b92_q_test.go:23 +0x19e\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpcx5b92_q_test.go:58 +0x4d\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var (\n        a, b int\n        size = len(array)\n    )\n    for i,\
    \ j := 0, size - 1; i < j; {\n        a, b = array[i], array[j]\n        sum :=\
    \ a + b\n        if sum & 1 == 0 {\n            array[i], array[j] = b, a\n  \
    \      }\n        i++\n        j--\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9n7of3i0_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp9n7of3i0_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp9n7of3i0_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp9n7of3i0_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9n7of3i0_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    left := array[0]\n    right := array[len(array) - 1]\n    if (left +\
    \ right) % 2 == 0 {\n        // sort in descending order\n        for i := 0;\
    \ i < len(array) - 1; i++ {\n            for j := 0; j < len(array) - 1 - i; j++\
    \ {\n                if array[j] < array[j + 1] {\n                    tmp :=\
    \ array[j]\n                    array[j] = array[j + 1]\n                    array[j\
    \ + 1] = tmp\n                }\n            }\n        }\n    } else {\n    \
    \    // sort in ascending order\n        for i := 0; i < len(array) - 1; i++ {\n\
    \            for j := 0; j < len(array) - 1 - i; j++ {\n                if array[j]\
    \ > array[j + 1] {\n                    tmp := array[j]\n                    array[j]\
    \ = array[j + 1]\n                    array[j + 1] = tmp\n                }\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpebx06mty_test.go:23 +0x111\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpebx06mty_test.go:58 +0x4d\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    var tmp int\n \
    \   for i:= 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array);\
    \ j++ {\n            if (array[i] + array[len(array) - 1 - i]) % 2 != 0 {\n  \
    \              if array[i] > array[j] {\n                    tmp = array[i]\n\
    \                    array[i] = array[j]\n                    array[j] = tmp\n\
    \                }\n            } else {\n                if array[i] < array[j]\
    \ {\n                    tmp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpis866m0q_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpis866m0q_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=6)\
    \ %!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpis866m0q_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=87) %!s(int=32) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpis866m0q_test.go:66: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=23) %!s(int=11) %!s(int=21) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n    var sum\
    \ int\n    for k, v := range array {\n        sum += v\n        if k == len(array)\
    \ - 1 {\n            break\n        }\n    }\n    if sum % 2 == 0 {\n        for\
    \ i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array) -\
    \ 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: PATCH list [recovered]\n\tpanic:\
    \ PATCH list\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x4fcd60, 0x548930})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x4fcd60,\
    \ 0x548930})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmphcmv7hhh_test.go:24\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmphcmv7hhh_test.go:48\
    \ +0x27\ntesting.tRunner(0xc0001036c0, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n    if len(array) ==\
    \ 1 {\n        return array\n    }\n    var (\n        array_left = []int{}\n\
    \        array_right = []int{}\n        start = 0\n        end = len(array) -\
    \ 1\n        last_compare = array[start]\n        index = start + 1\n    )\n \
    \   for {\n        if index > end {\n            break\n        }\n        if\
    \ array[index] > last_compare {\n            array_left = append(array_left, array[index])\n\
    \        } else {\n            array_right = append(array_right, array[index])\n\
    \        }\n        index++\n    }\n    array_left = sort_array(array_left)\n\
    \    array_right = sort_array(array_right)\n    return append(append(array_left,\
    \ last_compare), array_right...)\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpz81lwk05_test.go:72: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n\
    \        tmpz81lwk05_test.go:72: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpz81lwk05_test.go:72:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=87) %!s(int=42) %!s(int=32) %!s(int=15) %!s(int=11) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075109
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n    first, last := array[0],\
    \ array[len(array)-1]\n    if (first + last) % 2 == 0 {\n        sort_array_desc(array)\n\
    \    } else {\n        sort_array_asc(array)\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjuidx120_test.go:28:9: undefined: sort_array_desc

    /tmp/tmpjuidx120_test.go:30:9: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length <= 1 {\n        return array\n  \
    \  }\n    compare := array[0] + array[length-1]\n    for i := 0; i < length; i++\
    \ {\n        for j := 0; j < length-i-1; j++ {\n            if compare%2 == 0\
    \ {\n                if array[j] < array[j+1] {\n                    array[j],\
    \ array[j+1] = array[j+1], array[j]\n                }\n            } else {\n\
    \                if array[j] > array[j+1] {\n                    array[j], array[j+1]\
    \ = array[j+1], array[j]\n                }\n            }\n        }\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075109
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n \
    \   }\n    return sort_array_asc(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdmzak_0_test.go:27:16: undefined: sort_array_desc

    /tmp/tmpqdmzak_0_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length <= 1 {\n        return array\n  \
    \  }\n    if (array[0] + array[length - 1]) % 2 == 0 {\n        return QuickSort(array,\
    \ true)\n    }\n    return QuickSort(array, false)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoplfuksb_test.go:28:16: undefined: QuickSort

    /tmp/tmpoplfuksb_test.go:30:12: undefined: QuickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075108
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    new_array := []int{}\n    if len(array) == 0 {\n        fmt.Println(\"\
    []int{}\")\n        return new_array\n    }\n    if len(array) == 1 {\n      \
    \  new_array = append(new_array, array[0])\n        fmt.Println(new_array)\n \
    \       return new_array\n    }\n    sum := array[0] + array[len(array) - 1]\n\
    \    if sum % 2 == 0 {\n        for i := len(array) - 1; i >= 0; i-- {\n     \
    \       new_array = append(new_array, array[i])\n        }\n    } else {\n   \
    \     for i := 0; i < len(array); i++ {\n            new_array = append(new_array,\
    \ array[i])\n        }\n    }\n    fmt.Println(new_array)\n    return new_array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]int{}\n[5]\n[2 4 3 0 1 5]\n[6 5 1 0 3 4 2]\n[2 1]\n[15 42 87 32 11 0]\n\
    [11 23 14 21]\n--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpfgoj9ffa_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpfgoj9ffa_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfgoj9ffa_test.go:66: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpfgoj9ffa_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpfgoj9ffa_test.go:66: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075110
- exit_code: null
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var (\n        left = 0\n        right = len(array) - 1\n        temp\
    \ = 0\n    )\n    for left < right {\n        for left < right && (array[left]\
    \ + array[0]) % 2 == 1 {\n            left++\n        }\n        for left < right\
    \ && (array[right] + array[0]) % 2 == 0 {\n            right--\n        }\n  \
    \      if left < right {\n            temp = array[left]\n            array[left]\
    \ = array[right]\n            array[right] = temp\n        }\n    }\n    if left\
    \ == right && (array[left] + array[0]) % 2 == 0 {\n        left++\n    }\n   \
    \ if left > 0 {\n        array = append(array[:0], array[:left]...)\n    }\n \
    \   return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0] + array[len(array) - 1]\n    fmt.Println(sum)\n    if\
    \ sum % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            max\
    \ := array[i]\n            var index int\n            for j := i; j < len(array)\
    \ - i; j++ {\n                if array[j] > max {\n                    max = array[j]\n\
    \                    index = j\n                }\n            }\n           \
    \ if index != i {\n                if index != len(array) - i - 1 {\n        \
    \            array[index] = array[len(array) - i - 1]\n                }\n   \
    \             array[len(array) - i - 1] = max\n            }\n        }\n    }\
    \ else {\n        for i := 0; i < len(array) / 2; i++ {\n            min := array[i]\n\
    \            var index int\n            for j := i; j < len(array) - i; j++ {\n\
    \                if array[j] < min {\n                    min = array[j]\n   \
    \                 index = j\n                }\n            }\n            if\
    \ index != i {\n                if index != len(array) - i - 1 {\n           \
    \         array[index] = array[len(array) - i - 1]\n                }\n      \
    \          array[len(array) - i - 1] = min\n            }\n        }\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpm11v4hfh_test.go:23 +0x267\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpm11v4hfh_test.go:70 +0x4d\ntesting.tRunner(0xc000192680, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n    if n <= 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[n-1]) % 2 == 0 {\n        for i := 0; i < n/2; i++ {\n   \
    \         array[i], array[n-1-i] = array[n-1-i], array[i]\n        }\n    }\n\
    \    i, j := 0, n-1\n    if array[i] > array[j] {\n        array[i], array[j]\
    \ = array[j], array[i]\n    }\n    i, j = i+1, j-1\n    for i < j {\n        if\
    \ array[i] > array[j] {\n            array[i], array[j] = array[j], array[i]\n\
    \        }\n        i, j = i+1, j-1\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpqu34rw6e_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpqu34rw6e_test.go:65: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpqu34rw6e_test.go:65: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqu34rw6e_test.go:65: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n    array_sum :=\
    \ array[0] + array[len(array) - 1]\n    if array_sum % 2 == 0 {\n        for i,\
    \ j := 0, len(array) - 1; i < j; i, j = i + 1, j - 1 {\n            array[i],\
    \ array[j] = array[j], array[i]\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpkqvcodky_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpkqvcodky_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkqvcodky_test.go:54: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpkqvcodky_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpkqvcodky_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        return array\n    }\n \
    \   first, last := array[0], array[len(array) - 1]\n    if (first + last) % 2\
    \ == 0 {\n        // the sum is even\n        for i := 0; i < len(array); i++\
    \ {\n            max, index := i, i\n            for j := i + 1; j < len(array);\
    \ j++ {\n                if array[j] > max {\n                    max, index =\
    \ array[j], j\n                }\n            }\n            array[i], array[index]\
    \ = array[index], array[i]\n        }\n    } else {\n        // the sum is odd\n\
    \        for i := 0; i < len(array); i++ {\n            min, index := i, i\n \
    \           for j := i + 1; j < len(array); j++ {\n                if array[j]\
    \ < min {\n                    min, index = array[j], j\n                }\n \
    \           }\n            array[i], array[index] = array[index], array[i]\n \
    \       }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpu6i3uoxm_test.go:72: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpu6i3uoxm_test.go:72: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=0)\
    \ %!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpu6i3uoxm_test.go:72: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpu6i3uoxm_test.go:72: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=0) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpu6i3uoxm_test.go:72: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=23) %!s(int=21) %!s(int=11) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if sum(array[0],\
    \ array[len(array)-1]) % 2 == 0 {\n        array = sort(array, true)\n    } else\
    \ {\n        array = sort(array, false)\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvmgoctm4_test.go:26:8: undefined: sum

    /tmp/tmpvmgoctm4_test.go:27:17: undefined: sort

    /tmp/tmpvmgoctm4_test.go:29:17: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075110
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) <= 1 {\n        return array\n    }\n \
    \   if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        return sort_array_descending(array)\n\
    \    }\n    return sort_array_ascending(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpve6pooch_test.go:27:16: undefined: sort_array_descending

    /tmp/tmpve6pooch_test.go:29:12: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075110
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var result []int\n    if len(array) == 0 {\n        return result\n \
    \   }\n    if len(array) == 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        // desc\n        for len(array)\
    \ > 0 {\n            max_value := array[0]\n            for _, v := range array\
    \ {\n                if v > max_value {\n                    max_value = v\n \
    \               }\n            }\n            result = append(result, max_value)\n\
    \            for k, v := range array {\n                if v == max_value {\n\
    \                    array = append(array[:k], array[k+1:]...)\n             \
    \       break\n                }\n            }\n        }\n    } else {\n   \
    \     // asc\n        for len(array) > 0 {\n            min_value := array[0]\n\
    \            for _, v := range array {\n                if v < min_value {\n \
    \                   min_value = v\n                }\n            }\n        \
    \    result = append(result, min_value)\n            for k, v := range array {\n\
    \                if v == min_value {\n                    array = append(array[:k],\
    \ array[k+1:]...)\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var new_array []int\n    i := 0\n    j := len(array) - 1\n    for i <\
    \ j {\n        if array[i] % 2 == 0 && array[j] % 2 == 0 {\n            i++\n\
    \            continue\n        } else if array[i] % 2 == 1 && array[j] % 2 ==\
    \ 1 {\n            j--\n            continue\n        }\n        new_array = append(new_array,\
    \ array[i])\n        new_array = append(new_array, array[j])\n        i++\n  \
    \      j--\n    }\n    if i == j {\n        new_array = append(new_array, array[i])\n\
    \    }\n    return new_array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpni8kjbmk_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=5) %!s(int=4) %!s(int=1)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpni8kjbmk_test.go:64: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=3) %!s(int=6) %!s(int=0) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmpni8kjbmk_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmpni8kjbmk_test.go:64: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=15) %!s(int=0) %!s(int=42) %!s(int=11) %!s(int=87) %!s(int=32)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpni8kjbmk_test.go:64:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=21)\
    \ %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        return array\n    }\n \
    \   return qsort(array, 0, len(array) - 1)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpklu63lw2_test.go:26:12: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sorted_array []int\n    return sorted_array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmp6fw9n6tg_test.go:46: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmp6fw9n6tg_test.go:46:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmp6fw9n6tg_test.go:46:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n \
    \       tmp6fw9n6tg_test.go:46: expected '[%!s(int=1) %!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp6fw9n6tg_test.go:46:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmp6fw9n6tg_test.go:46:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    array_len := len(array)\n    if array_len <= 1 {\n        return array\n\
    \    }\n    if (array[0] + array[array_len - 1]) % 2 == 0 {\n        array = Sort_array_descending(array)\n\
    \    } else {\n        array = Sort_array_ascending(array)\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv1j1ypk8_test.go:28:17: undefined: Sort_array_descending

    /tmp/tmpv1j1ypk8_test.go:30:17: undefined: Sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := 0; i < len(array); i++ {\n        for j := 0; j < len(array)\
    \ - 1; j++ {\n            if array[j] < array[j + 1] {\n                array[j],\
    \ array[j + 1] = array[j + 1], array[j]\n            }\n        }\n    }\n   \
    \ return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_124fzwk_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n\
    \        tmp_124fzwk_test.go:52: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp_124fzwk_test.go:52:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=87) %!s(int=42) %!s(int=32) %!s(int=15) %!s(int=11) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    size := len(array)\n    if size == 0 {\n        return array\n    }\n\
    \    if size == 1 {\n        return array\n    }\n    if (array[0] + array[size\
    \ - 1]) % 2 == 0 {\n        // Descending Sort\n        sort_descending(array)\n\
    \    } else {\n        // Ascending Sort\n        sort_ascending(array)\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp37xyf3z9_test.go:32:9: undefined: sort_descending

    /tmp/tmp37xyf3z9_test.go:35:9: undefined: sort_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n \
    \   }\n    return sort_array_asc(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_hbq1nfv_test.go:27:16: undefined: sort_array_desc

    /tmp/tmp_hbq1nfv_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    fmt.Println(length)\n    if length == 0 {\n\
    \        return array\n    }\n    quick_sort(array, 0, length - 1)\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipcj7xto_test.go:28:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var is_odd = func(n int) bool {\n        return n & 1 == 1\n    }\n \
    \   var sum = func(a, b int) int {\n        return a + b\n    }\n    var is_odd_sum\
    \ = func(a, b int) bool {\n        return is_odd(sum(a, b))\n    }\n    var sort_by_odd_sum\
    \ = func(left, right int) bool {\n        if is_odd_sum(left, right) {\n     \
    \       return left < right\n        } else {\n            return left > right\n\
    \        }\n    }\n    var sorted = merge_sort(array, sort_by_odd_sum)\n    return\
    \ sorted\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7luird9_test.go:39:18: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        return sort_array_with_descending_order(array)\n\
    \    }\n    return sort_array_with_ascending_order(array)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbt1drksp_test.go:27:16: undefined: sort_array_with_descending_order

    /tmp/tmpbt1drksp_test.go:29:12: undefined: sort_array_with_ascending_order

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if len(array)\
    \ % 2 == 0 {\n        return sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeq9u2w7z_test.go:27:16: undefined: sort_array_descending

    /tmp/tmpeq9u2w7z_test.go:29:12: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    arrayLen := len(array)\n    if arrayLen == 0 {\n        return array\n\
    \    }\n    for i := 0; i < arrayLen; i++ {\n        for j := 0; j < arrayLen-i-1;\
    \ j++ {\n            if ((array[0] + array[arrayLen-1]) & 1) == 0 {\n        \
    \        if array[j] < array[j+1] {\n                    array[j], array[j+1]\
    \ = array[j+1], array[j]\n                }\n            } else {\n          \
    \      if array[j] > array[j+1] {\n                    array[j], array[j+1] =\
    \ array[j+1], array[j]\n                }\n            }\n        }\n    }\n \
    \   return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp4ynirp8m_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp4ynirp8m_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=42) %!s(int=15)\
    \ %!s(int=0) %!s(int=32) %!s(int=87)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO\n    // if len(array) < 2 {\n    //     return array\n    //\
    \ }\n    // oddOrEven := 0\n    // for _, v := range array {\n    //     oddOrEven\
    \ += v\n    // }\n    // oddOrEven = oddOrEven % 2\n    // return sort_array(oddOrEven)\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp5_eg_c6b_test.go:55: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp5_eg_c6b_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp5_eg_c6b_test.go:55: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp5_eg_c6b_test.go:55: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp5_eg_c6b_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    // return string\n    if len(array) == 0\
    \ {\n        return array\n    }\n\n    odd_array := make([]int, 0)\n    for _,\
    \ value := range array {\n        if value % 2 == 1 {\n            odd_array =\
    \ append(odd_array, value)\n        }\n    }\n\n    odd_array = BubbleSort(odd_array)\n\
    \n    k := 0\n    for i, value := range array {\n        if value % 2 == 1 {\n\
    \            array[i] = odd_array[k]\n            k++\n        }\n    }\n\n  \
    \  if len(array) % 2 == 0 {\n        return Reverse(array)\n    }\n\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfi7ru60o_test.go:36:17: undefined: BubbleSort

    /tmp/tmpfi7ru60o_test.go:47:16: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075112
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        return []int{}\n\
    \    }\n    var result []int\n    result = make([]int, length)\n    for i := 0;\
    \ i < length; i++ {\n        result[i] = array[i]\n    }\n    if (result[0] +\
    \ result[length - 1]) % 2 == 0 {\n        for i := 0; i < length/2; i++ {\n  \
    \          if result[i] > result[length - 1 - i] {\n                result[i],\
    \ result[length - 1 - i] = result[length - 1 - i], result[i]\n            }\n\
    \        }\n    } else {\n        for i := 0; i < length/2; i++ {\n          \
    \  if result[i] < result[length - 1 - i] {\n                result[i], result[length\
    \ - 1 - i] = result[length - 1 - i], result[i]\n            }\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpr8kv64f2_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpr8kv64f2_test.go:67: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpr8kv64f2_test.go:67: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpr8kv64f2_test.go:67: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpr8kv64f2_test.go:67: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075112
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n    is_odd := (array[0]\
    \ + array[len(array) - 1]) % 2 == 1\n    for i := 1; i < len(array); i++ {\n \
    \       for j := i; j > 0; j-- {\n            if is_odd {\n                if\
    \ array[j] < array[j - 1] {\n                    array[j], array[j - 1] = array[j\
    \ - 1], array[j]\n                }\n            } else {\n                if\
    \ array[j] > array[j - 1] {\n                    array[j], array[j - 1] = array[j\
    \ - 1], array[j]\n                }\n            }\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075112
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    even := (array[0] + array[length - 1]) % 2\
    \ == 0\n    var i, j int\n    for i = 0; i < length - 1; i++ {\n        for j\
    \ = i + 1; j < length; j++ {\n            if even {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            } else {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmp58qk1abk_test.go:24 +0xaf\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp58qk1abk_test.go:49 +0x4d\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        panic(\"array was\
    \ empty\")\n    }\n    if length == 1 {\n        return array\n    }\n    odd\
    \ := length%2\n    var index1 int\n    var index2 int\n    for {\n        for\
    \ index1, index2 = 0, length-1; index1 < index2; {\n            if odd == (array[index1]+array[index2])%2\
    \ {\n                array[index1], array[index2] = array[index2], array[index1]\n\
    \            }\n            index1++\n            index2--\n        }\n      \
    \  if index1 == index2 || index1 > index2 {\n            break\n        }\n  \
    \  }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: array was empty [recovered]\n\t\
    panic: array was empty\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fde40,\
    \ 0x549dc0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fde40, 0x549dc0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmpgs5z_u_3_test.go:25 +0xc5\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpgs5z_u_3_test.go:55 +0x4d\ntesting.tRunner(0xc0001a0340, 0x5290f0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n\n    total := 0\n\
    \    for _, v := range array {\n        total += v\n    }\n\n    if total % 2\
    \ == 0 {\n        return reverse_array(array)\n    }\n\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9nerfjta_test.go:33:16: undefined: reverse_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075112
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length <= 1 {\n        return array\n  \
    \  }\n\n    oddSum := array[0] + array[length - 1]\n    ascending := oddSum %\
    \ 2 == 1\n    for i := 0; i < length - 1; i++ {\n        for j := i + 1; j < length;\
    \ j++ {\n            if ascending {\n                if array[i] > array[j] {\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \ }\n            } else {\n                if array[i] < array[j] {\n        \
    \            array[i], array[j] = array[j], array[i]\n                }\n    \
    \        }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    odd := true\n \
    \   for i := 0; i < len(array); i++ {\n        for j := i + 1; j < len(array);\
    \ j++ {\n            if odd {\n                if array[i] > array[j] {\n    \
    \                array[i], array[j] = array[j], array[i]\n                }\n\
    \            } else {\n                if array[i] < array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    }\n        }\n        odd = !odd\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp50gopjla_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=1) %!s(int=4)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp50gopjla_test.go:63: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=6) %!s(int=1) %!s(int=5)\
    \ %!s(int=2) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp50gopjla_test.go:63: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=87) %!s(int=11)\
    \ %!s(int=42) %!s(int=15) %!s(int=32)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp50gopjla_test.go:63: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    if array[0]\
    \ % 2 == 0 {\n        return array\n    }\n\n    i := 0\n    j := len(array) -\
    \ 1\n    for i < j {\n        if array[i] % 2 == 0 {\n            for j > i {\n\
    \                if array[j] % 2 == 1 {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                    break\n                }\n       \
    \         j--\n            }\n        }\n        i++\n    }\n\n    i = 0\n   \
    \ j = len(array) - 1\n    for i < j {\n        if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n            array[i], array[j] = array[j], array[i]\n     \
    \   }\n        i++\n        j--\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9jqrn2ya_test.go:78: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp9jqrn2ya_test.go:78: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp9jqrn2ya_test.go:78: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp9jqrn2ya_test.go:78: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=11) %!s(int=87)\
    \ %!s(int=32) %!s(int=42) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9jqrn2ya_test.go:78: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=11) %!s(int=23) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    new_array := make([]int, len(array))\n    copy(new_array, array)\n  \
    \  if len(new_array) == 0 {\n        return new_array\n    }\n    if (new_array[0]\
    \ + new_array[len(new_array) - 1]) % 2 == 0 {\n        for i := 0; i < len(new_array)\
    \ / 2; i++ {\n            left_index := len(new_array) - i - 1\n            right_index\
    \ := i\n            new_array[right_index], new_array[left_index] = new_array[left_index],\
    \ new_array[right_index]\n        }\n    }\n    return new_array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmps12owt_i_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmps12owt_i_test.go:57: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmps12owt_i_test.go:57: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmps12owt_i_test.go:57: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmps12owt_i_test.go:57: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return []int{}\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpze4vf3jf_test.go:45: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n \
    \       tmpze4vf3jf_test.go:45: expected '[%!s(int=1) %!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    reverse := (array[0]\
    \ + array[len(array) - 1]) % 2 == 0\n    for i := 0; i < len(array) - 1; i++ {\n\
    \        for j := i + 1; j < len(array); j++ {\n            if reverse {\n   \
    \             if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            } else {\n            \
    \    if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"input=\", array)\n    return nil\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "input= []\ninput= [5]\ninput= [2 4 3 0 1 5]\ninput= [2 4 3 0 1 5 6]\ninput=\
    \ [2 1]\ninput= [15 42 87 32 11 0]\ninput= [21 14 23 11]\n--- FAIL: TestSort_Array\
    \ (0.00s)\n    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpd8wn6hna_test.go:46:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpd8wn6hna_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpd8wn6hna_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpd8wn6hna_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpd8wn6hna_test.go:46:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpd8wn6hna_test.go:46:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n        return\
    \ array\n    }\n\n    for i := 0; i < len(array); i++ {\n        for j := i +\
    \ 1; j < len(array); j++ {\n            if need_swap(array, i, j) {\n        \
    \        tmp := array[i]\n                array[i] = array[j]\n              \
    \  array[j] = tmp\n            }\n        }\n    }\n\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfkdcd2_g_test.go:30:16: undefined: need_swap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075113
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    return sort(array,\
    \ 0, len(array) - 1)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w114_hb_test.go:26:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var ret = make([]int, len(array))\n    if len(array) < 2 {\n        return\
    \ array\n    }\n    var i = 0\n    var head = 0\n    var tail = len(array) - 1\n\
    \    var odd = ((array[0] + array[len(array) - 1]) % 2) == 1\n    for ;i < len(array);\
    \ i++ {\n        if odd {\n            if (array[i] % 2) == 1 {\n            \
    \    ret[head] = array[i]\n                head++\n            }\n        } else\
    \ {\n            if (array[i] % 2) == 0 {\n                ret[tail] = array[i]\n\
    \                tail--\n            }\n        }\n    }\n    head = 0\n    tail\
    \ = len(array) - 1\n    if odd {\n        head = 1\n    } else {\n        tail\
    \ = len(array) - 2\n    }\n    for ;i < len(array); i++ {\n        if odd {\n\
    \            if (array[i] % 2) == 0 {\n                ret[head] = array[i]\n\
    \                head++\n            }\n        } else {\n            if (array[i]\
    \ % 2) == 1 {\n                ret[tail] = array[i]\n                tail--\n\
    \            }\n        }\n    }\n    return ret\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9iwvqnkc_test.go:86: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=1) %!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp9iwvqnkc_test.go:86: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp9iwvqnkc_test.go:86: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp9iwvqnkc_test.go:86: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=87) %!s(int=11)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9iwvqnkc_test.go:86: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length <= 1 {\n        return array\n  \
    \  }\n\n    // find the first place of non-zero number.\n    index := 0\n    for\
    \ i := 0; i < length; i++ {\n        if array[i] != 0 {\n            index = i\n\
    \            break\n        }\n    }\n\n    // move all the non-zero numbers to\
    \ the front of the array.\n    for i := index + 1; i < length; i++ {\n       \
    \ if array[i] != 0 {\n            array[index], array[i] = array[i], array[index]\n\
    \            index++\n        }\n    }\n\n    // now the array is like: [x, x,\
    \ x, x, 0, 0, 0, 0]\n    // we need to find the first place of zero and the last\
    \ place of non-zero.\n    first_zero_index := index\n    last_non_zero_index :=\
    \ length - 1\n    for i := index; i < length; i++ {\n        if array[i] == 0\
    \ {\n            first_zero_index = i\n            break\n        }\n    }\n\n\
    \    if (first_zero_index + last_non_zero_index) % 2 == 0 {\n        // if the\
    \ sum of first_zero_index and last_non_zero_index is even,\n        // we need\
    \ to sort the array in ascending order.\n        for i := index; i < length; i++\
    \ {\n            for j := i + 1; j < length; j++ {\n                if array[i]\
    \ > array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // if the\
    \ sum of first_zero_index and last_non_zero_index is odd,\n        // we need\
    \ to sort the array in descending order.\n        for i := index; i < length;\
    \ i++ {\n            for j := i + 1; j < length; j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    }\n\n    return array\n}\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpc9v5tsos_test.go:99: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpc9v5tsos_test.go:99: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5)\
    \ %!s(int=6) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpc9v5tsos_test.go:99: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=42) %!s(int=87) %!s(int=32)\
    \ %!s(int=11) %!s(int=0) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpc9v5tsos_test.go:99: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=23) %!s(int=11) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        return nil\n    }\n   \
    \ if len(array) == 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpptv0yy7g_test.go:30:16: undefined: sort_array_desc

    /tmp/tmpptv0yy7g_test.go:32:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"fuck\")\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "fuck\nfuck\nfuck\nfuck\nfuck\nfuck\nfuck\n--- FAIL: TestSort_Array (0.00s)\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmp0olv8st4_test.go:46:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmp0olv8st4_test.go:46:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)\
    \ %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmp0olv8st4_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmp0olv8st4_test.go:46: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=15) %!s(int=42) %!s(int=87) %!s(int=32) %!s(int=11) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmp0olv8st4_test.go:46:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=21)\
    \ %!s(int=14) %!s(int=23) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        return append(array[len(array) -\
    \ 1:], sort_array(array[0:len(array) - 1])...)\n    }\n    return append(sort_array(array[1:]),\
    \ array[0])\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpx3h13ox2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpx3h13ox2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpx3h13ox2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=87) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpx3h13ox2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=21) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // your code goes here.\n    array_len := len(array)\n    if array_len\
    \ <= 1 {\n        return array\n    }\n    if is_even(array[0] + array[array_len\
    \ - 1]) {\n        return sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcyaiqhjn_test.go:28:8: undefined: is_even

    /tmp/tmpcyaiqhjn_test.go:29:16: undefined: sort_array_descending

    /tmp/tmpcyaiqhjn_test.go:31:12: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    //if len(array) == 0 {\n    //    panic(\"PATCH list\")\n    //}\n  \
    \  //if len(array) == 1 {\n    //    return array\n    //}\n    //if len(array)\
    \ == 2 {\n    //    if array[0] > array[1] {\n    //        array[0], array[1]\
    \ = array[1], array[0]\n    //    }\n    //    return array\n    //}\n    //if\
    \ array[0] + array[len(array) - 1] % 2 == 0 {\n    //    // \u5076\u6570\n   \
    \ //    array[0], array[len(array) - 1] = array[len(array) - 1], array[0]\n  \
    \  //} else {\n    //    // \u5947\u6570\n    //    array[0], array[len(array)\
    \ - 1] = array[len(array) - 1], array[0]\n    //}\n    //return sort_array(array[1:len(array)\
    \ - 1])\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp6bjgx2x5_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp6bjgx2x5_test.go:65: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6bjgx2x5_test.go:65: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp6bjgx2x5_test.go:65: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp6bjgx2x5_test.go:65: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    sum := array[0]\
    \ + array[len(array) - 1]\n    asc := sum % 2 == 1\n    for i := 0; i < len(array)\
    \ - 1; i++ {\n        for j := i + 1; j < len(array); j++ {\n            if asc\
    \ {\n                if array[i] > array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            } else {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075114
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    index_1, index_2 := 0, len(array) -\
    \ 1\n    index_sum := array[index_1] + array[index_2]\n    if index_sum % 2 ==\
    \ 0 {\n        // descend\n        for {\n            if index_1 >= index_2 {\n\
    \                break\n            }\n            if array[index_1] < array[index_2]\
    \ {\n                array[index_1], array[index_2] = array[index_2], array[index_1]\n\
    \            }\n            index_1 += 1\n            index_2 -= 1\n        }\n\
    \    } else {\n        // ascend\n        for {\n            if index_1 >= index_2\
    \ {\n                break\n            }\n            if array[index_1] > array[index_2]\
    \ {\n                array[index_1], array[index_2] = array[index_2], array[index_1]\n\
    \            }\n            index_1 += 1\n            index_2 -= 1\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: PATCH list [recovered]\n\tpanic:\
    \ PATCH list\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fde40, 0x549dc0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x4fde40,\
    \ 0x549dc0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmp9do1f91y_test.go:24 +0xfa\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp9do1f91y_test.go:66 +0x4d\ntesting.tRunner(0xc000192820, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    start, end := 0, len(array) - 1\n \
    \   if array[start] + array[end] % 2 == 0 {\n        quick_sort(array, true)\n\
    \    } else {\n        quick_sort(array, false)\n    }\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zcga10p_test.go:31:9: undefined: quick_sort

    /tmp/tmp8zcga10p_test.go:33:9: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var copy_array []int\n    copy(copy_array, array)\n    var first_index,\
    \ last_index int\n    if len(array) > 0 {\n        first_index = array[0]\n  \
    \      last_index = array[len(array) - 1]\n    }\n    if (first_index + last_index)\
    \ % 2 == 0 {\n        // descending order\n        for j := 0; j < len(array);\
    \ j++ {\n            for i := 0; i < len(array) - 1; i++ {\n                if\
    \ array[i] < array[i + 1] {\n                    array[i], array[i + 1] = array[i\
    \ + 1], array[i]\n                }\n            }\n        }\n    } else {\n\
    \        // ascending order\n        for j := 0; j < len(array); j++ {\n     \
    \       for i := 0; i < len(array) - 1; i++ {\n                if array[i] > array[i\
    \ + 1] {\n                    array[i], array[i + 1] = array[i + 1], array[i]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if len(array) %\
    \ 2 == 0 {\n        return ascending(array)\n    }\n    return descending(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tn7345y_test.go:27:16: undefined: ascending

    /tmp/tmp6tn7345y_test.go:29:12: undefined: descending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        return array\n  \
    \  }\n\n    if length == 1 {\n        return array\n    }\n\n    start := 0\n\
    \    end := length - 1\n    result := make([]int, length)\n    if (array[start]\
    \ + array[end]) % 2 == 0 {\n        for index := end; index >= start; index--\
    \ {\n            result[end - index] = array[index]\n        }\n    } else {\n\
    \        for index := start; index <= end; index++ {\n            result[index]\
    \ = array[index]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpl5a3ig3n_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpl5a3ig3n_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpl5a3ig3n_test.go:66: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpl5a3ig3n_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpl5a3ig3n_test.go:66: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            for j := len(array) - 1; j > len(array) / 2; j-- {\n        \
    \        if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  for i := 0; i < len(array) / 2; i++ {\n            for j := len(array) - 1;\
    \ j > len(array) / 2; j-- {\n                if array[i] > array[j] {\n      \
    \              array[i], array[j] = array[j], array[i]\n                }\n  \
    \          }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpsyivvwp0_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpsyivvwp0_test.go:65: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=0)\
    \ %!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpsyivvwp0_test.go:65: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n\
    \        tmpsyivvwp0_test.go:65: expected '[%!s(int=23) %!s(int=21) %!s(int=14)\
    \ %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        return nil\n    }\n   \
    \ if len(array) == 1 {\n        return array\n    }\n    result := make([]int,\
    \ len(array))\n    if isOddSum(array) {\n        array = sortAscending(array)\n\
    \    } else {\n        array = sortDescending(array)\n    }\n    copy(result,\
    \ array)\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3qmkacyw_test.go:30:8: undefined: isOddSum

    /tmp/tmp3qmkacyw_test.go:31:17: undefined: sortAscending

    /tmp/tmp3qmkacyw_test.go:33:17: undefined: sortDescending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    for i:=0; i<length; i++ {\n        for j:=i+1;\
    \ j<length; j++ {\n            if (isOdd(array[i], array[j]) && array[i] > array[j])\
    \ ||\n                (!isOdd(array[i], array[j]) && array[i] < array[j]) {\n\
    \                array[i], array[j] = array[j], array[i]\n            }\n    \
    \    }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcow9xkd8_test.go:26:17: undefined: isOdd

    /tmp/tmpcow9xkd8_test.go:27:19: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    fmt.Println(array)\n    sum := array[0]\
    \ + array[len(array) - 1]\n    if sum % 2 == 0 {\n        odd_array := []int{}\n\
    \        even_array := []int{}\n        for index, item := range array {\n   \
    \         if item % 2 == 0 {\n                even_array = append(even_array,\
    \ item)\n            } else {\n                odd_array = append(odd_array, item)\n\
    \            }\n            fmt.Println(index, item)\n        }\n        fmt.Println(even_array)\n\
    \        fmt.Println(odd_array)\n        for index, _ := range array {\n     \
    \       if index % 2 == 0 {\n                array[index] = even_array[0]\n  \
    \              even_array = even_array[1:]\n            } else {\n           \
    \     array[index] = odd_array[0]\n                odd_array = odd_array[1:]\n\
    \            }\n        }\n    } else {\n        odd_array := []int{}\n      \
    \  even_array := []int{}\n        for index, item := range array {\n         \
    \   if item % 2 == 0 {\n                even_array = append(even_array, item)\n\
    \            } else {\n                odd_array = append(odd_array, item)\n \
    \           }\n            fmt.Println(index, item)\n        }\n        fmt.Println(even_array)\n\
    \        fmt.Println(odd_array)\n        for index, _ := range array {\n     \
    \       if index % 2 == 0 {\n                array[index] = odd_array[0]\n   \
    \             odd_array = odd_array[1:]\n            } else {\n              \
    \  array[index] = even_array[0]\n                even_array = even_array[1:]\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[2 4 3 0 1 5]\n0 2\n1 4\n2 3\n3 0\n4 1\n5 5\n[2 4 0]\n[3 1 5]\n[2 4 3 0\
    \ 1 5 6]\n0 2\n1 4\n2 3\n3 0\n4 1\n5 5\n6 6\n[2 4 0 6]\n[3 1 5]\n[2 1]\n0 2\n\
    1 1\n[2]\n[1]\n[15 42 87 32 11 0]\n0 15\n1 42\n2 87\n3 32\n4 11\n5 0\n[42 32 0]\n\
    [15 87 11]\n[21 14 23 11]\n0 21\n1 14\n2 23\n3 11\n[14]\n[21 23 11]\n--- FAIL:\
    \ TestSort_Array (0.00s)\npanic: runtime error: index out of range [0] with length\
    \ 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc00001a3c0?, 0x4, 0x4})\n\t\
    /tmp/tmpxt4letom_test.go:46 +0x805\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpxt4letom_test.go:92 +0x267\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n        return\
    \ array\n    }\n\n    for i := 1; i < len(array); i++ {\n        for j := i; j\
    \ > 0; j-- {\n            if sum := array[j] + array[j-1]; sum % 2 == 0 {\n  \
    \              array[j], array[j-1] = array[j-1], array[j]\n            }\n  \
    \      }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "PATCH list\n--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0t98744j_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=0)\
    \ %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0t98744j_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp0t98744j_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp0t98744j_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0t98744j_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=11) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    array_len := len(array)\n    if array_len < 2 {\n        return array\n\
    \    }\n    sum := array[0] + array[array_len - 1]\n    i := 1\n    j := array_len\
    \ - 2\n    for i < j {\n        if sum % 2 == 0 {\n            if array[i] < array[j]\
    \ {\n                tmp := array[i]\n                array[i] = array[j]\n  \
    \              array[j] = tmp\n            }\n        } else {\n            if\
    \ array[i] > array[j] {\n                tmp := array[i]\n                array[i]\
    \ = array[j]\n                array[j] = tmp\n            }\n        }\n     \
    \   i++\n        j--\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpoz8zu9s2_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpoz8zu9s2_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=5) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpoz8zu9s2_test.go:69: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpoz8zu9s2_test.go:69: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpoz8zu9s2_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    sort(array, 0,\
    \ len(array) - 1)\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexwruhgf_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n    \
    \    return reverse_sort(array)\n    } else {\n        return normal_sort(array)\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuclmfewz_test.go:25:16: undefined: reverse_sort

    /tmp/tmpuclmfewz_test.go:27:16: undefined: normal_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        return array\n    }\n \
    \   odd_even := (array[0] + array[len(array) - 1]) % 2\n    return quick_sort(array,\
    \ odd_even)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdabe08xg_test.go:27:12: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    // is_reverse\
    \ := len(array) % 2 == 0\n    idx := len(array) / 2\n    for i := 0; i < idx;\
    \ i++ {\n        _is_odd := (array[i] + array[len(array) - 1 - i]) % 2 == 1\n\
    \        if _is_odd {\n            if array[i] > array[len(array) - 1 - i] {\n\
    \                array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n            }\n        } else {\n            if array[i] < array[len(array)\
    \ - 1 - i] {\n                array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n            }\n        }\n    }\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpie_jz4nr_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpie_jz4nr_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpie_jz4nr_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpie_jz4nr_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := 0; i < len(array); i++ {\n        for j := i + 1; j < len(array);\
    \ j++ {\n            if (array[i] + array[len(array) - 1]) % 2 == 0 {\n      \
    \          if array[i] < array[j] {\n                    tmp := array[i]\n   \
    \                 array[i] = array[j]\n                    array[j] = tmp\n  \
    \              }\n            } else {\n                if array[i] > array[j]\
    \ {\n                    tmp := array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp7t6c4baa_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=3) %!s(int=1)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp7t6c4baa_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=4)\
    \ %!s(int=0) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp7t6c4baa_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=15) %!s(int=87)\
    \ %!s(int=11) %!s(int=42) %!s(int=32)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp7t6c4baa_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=23) %!s(int=11) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    len := len(array)\n    if len == 0 {\n        return []int{}\n    }\n\
    \    if len == 1 {\n        return array\n    }\n    if (array[0] + array[len\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len; i++ {\n            for j := i\
    \ + 1; j < len; j++ {\n                if array[i] < array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    }\n        }\n    } else {\n        for i := 0; i < len; i++ {\n        \
    \    for j := i + 1; j < len; j++ {\n                if array[i] > array[j] {\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \ }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    // sum( first\
    \ index value, last index value)\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        // even\n        for i := 0; i < len(array); i++ {\n       \
    \     for j := i + 1; j < len(array); j++ {\n                if array[i] < array[j]\
    \ {\n                    // swap\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // odd\n        for i := 0; i < len(array); i++ {\n            for j := i +\
    \ 1; j < len(array); j++ {\n                if array[i] > array[j] {\n       \
    \             // swap\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp03summnz_test.go:70: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp03summnz_test.go:70: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        // even\n        for j := 0; j <\
    \ len(array) - 1; j++ {\n            for i := 0; i < len(array) - 1 - j; i++ {\n\
    \                if array[i] < array[i + 1] {\n                    array[i], array[i\
    \ + 1] = array[i + 1], array[i]\n                }\n            }\n        }\n\
    \    } else {\n        // odd\n        for j := 0; j < len(array) - 1; j++ {\n\
    \            for i := 0; i < len(array) - 1 - j; i++ {\n                if array[i]\
    \ > array[i + 1] {\n                    array[i], array[i + 1] = array[i + 1],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp6bgwdyz__test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp6bgwdyz__test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp6bgwdyz__test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp6bgwdyz__test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp6bgwdyz__test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    i, j := 0, len(array) - 1\n    for i < j {\n        if (array[i] + array[j])\
    \ % 2 == 0 {\n            // even\n            if array[i] > array[j] {\n    \
    \            array[i], array[j] = array[j], array[i]\n            }\n        \
    \    i++\n        } else {\n            // odd\n            if array[i] < array[j]\
    \ {\n                array[i], array[j] = array[j], array[i]\n            }\n\
    \            j--\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0a_s2mpu_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=0)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0a_s2mpu_test.go:61: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=6)\
    \ %!s(int=1) %!s(int=5) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp0a_s2mpu_test.go:61: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp0a_s2mpu_test.go:61: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=32) %!s(int=87)\
    \ %!s(int=42) %!s(int=15) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0a_s2mpu_test.go:61: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=21) %!s(int=23) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    sum := array[0]\
    \ + array[len(array) - 1]\n    for i := 0; i < len(array); i++ {\n        for\
    \ j := i; j < len(array); j++ {\n            if (sum % 2 == 0 && array[i] < array[j])\
    \ || (sum % 2 != 0 && array[i] > array[j]) {\n                array[i], array[j]\
    \ = array[j], array[i]\n            }\n        }\n    }\n    return array\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n    if len(array) ==\
    \ 1 {\n        return array\n    }\n    if array[0] + array[len(array) - 1] %\
    \ 2 == 0 {\n        sort_reverse(array)\n    } else {\n        sort_normal(array)\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps67juebc_test.go:30:9: undefined: sort_reverse

    /tmp/tmps67juebc_test.go:32:9: undefined: sort_normal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // if the length of array is odd, we will sort array in descending order\n\
    \    if len(array) % 2 == 1 {\n        i := 0\n        j := len(array) - 1\n \
    \       for i < j {\n            if array[i] > array[j] {\n                array[i],\
    \ array[j] = array[j], array[i]\n            }\n            i++\n            j--\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpaeweu11__test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpaeweu11__test.go:57: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpaeweu11__test.go:57: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpaeweu11__test.go:57: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpaeweu11__test.go:57: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    total := len(array)\n    if total == 0 {\n        return array\n    }\n\
    \    even := (array[0] + array[total - 1]) % 2 == 0\n    if even {\n        array\
    \ = reverse(array)\n    }\n    if total > 1 {\n        quick_sort(array, 0, total\
    \ - 1)\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0og6zij_test.go:29:17: undefined: reverse

    /tmp/tmpv0og6zij_test.go:32:9: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var i int\n    sum_odd := func(first, last int) bool {\n        return\
    \ (first + last) % 2 == 1\n    }\n    for i = 0; i < len(array); i++ {\n     \
    \   if i < len(array) - 1 && sum_odd(array[i], array[i + 1]) {\n            array[i],\
    \ array[i + 1] = array[i + 1], array[i]\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp9ao8o336_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)\
    \ %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp9ao8o336_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)\
    \ %!s(int=5) %!s(int=0) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp9ao8o336_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=42) %!s(int=15) %!s(int=32)\
    \ %!s(int=87) %!s(int=0) %!s(int=11)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp9ao8o336_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=21) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // make copy of given array\n    var result = array\n    var length =\
    \ len(array)\n    var isSort = false\n    for i := 1; i < length; i++ {\n    \
    \    if isSort {\n            break\n        }\n        for j := 0; j < length\
    \ - i; j++ {\n            if (isOdd(j) && isOdd(j + 1)) || (isEven(j) && isEven(j\
    \ + 1)) {\n                if result[j] > result[j + 1] {\n                  \
    \  result[j], result[j + 1] = result[j + 1], result[j]\n                    isSort\
    \ = false\n                }\n            } else {\n                if result[j]\
    \ < result[j + 1] {\n                    result[j], result[j + 1] = result[j +\
    \ 1], result[j]\n                    isSort = false\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzc3_azls_test.go:32:17: undefined: isOdd

    /tmp/tmpzc3_azls_test.go:32:47: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var odd_slice, even_slice []int\n    for i, v := range array {\n    \
    \    if v % 2 == 0 {\n            even_slice = append(even_slice, v)\n       \
    \ } else {\n            odd_slice = append(odd_slice, v)\n        }\n        //\
    \ delete the slice item which value is used to be a flag\n        array[i] = 0\n\
    \    }\n    if len(even_slice) > len(odd_slice) {\n        even_slice, odd_slice\
    \ = odd_slice, even_slice\n    }\n    sort(even_slice)\n    sort(odd_slice)\n\
    \    sort(array)\n    fmt.Println(array)\n    fmt.Println(even_slice)\n    fmt.Println(odd_slice)\n\
    \    for i, v := range even_slice {\n        array[i*2] = v\n    }\n    for i,\
    \ v := range odd_slice {\n        array[i*2+1] = v\n    }\n    fmt.Println(array)\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0jqamj06_test.go:36:5: undefined: sort

    /tmp/tmp0jqamj06_test.go:37:5: undefined: sort

    /tmp/tmp0jqamj06_test.go:38:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n    pos := 0\n \
    \   if array[0] > array[len(array) - 1] {\n        pos = 1\n    }\n\n    for i\
    \ := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array); j++\
    \ {\n            if pos == 0 {\n                if array[i] > array[j] {\n   \
    \                 tmp := array[i]\n                    array[i] = array[j]\n \
    \                   array[j] = tmp\n                }\n            } else {\n\
    \                if array[i] < array[j] {\n                    tmp := array[i]\n\
    \                    array[i] = array[j]\n                    array[j] = tmp\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpbfh_zg1x_test.go:70: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpbfh_zg1x_test.go:70: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpbfh_zg1x_test.go:70: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=87) %!s(int=42) %!s(int=32)\
    \ %!s(int=15) %!s(int=11) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    tmp := make([]int,\
    \ len(array))\n    copy(tmp, array)\n    if is_odd(tmp[0] + tmp[len(tmp) - 1])\
    \ {\n        sort_asc(tmp)\n    } else {\n        sort_desc(tmp)\n    }\n    return\
    \ tmp\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo4dxfcd_test.go:28:8: undefined: is_odd

    /tmp/tmplo4dxfcd_test.go:29:9: undefined: sort_asc

    /tmp/tmplo4dxfcd_test.go:31:9: undefined: sort_desc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    middle := len(array)\
    \ / 2\n    left := sort_array(array[:middle])\n    right := sort_array(array[middle:])\n\
    \    return merge(left, right)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmem_jji5_test.go:29:12: undefined: merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    left, right\
    \ := 0, len(array) - 1\n    if (array[left] + array[right]) & 1 == 0 {\n     \
    \   for left < right {\n            if array[left] & 1 == 0 {\n              \
    \  left++\n            }\n            if array[right] & 1 == 1 {\n           \
    \     right--\n            }\n            if left < right && array[left] & 1 ==\
    \ 1 && array[right] & 1 == 0 {\n                array[left], array[right] = array[right],\
    \ array[left]\n            }\n        }\n    } else {\n        for left < right\
    \ {\n            if array[left] & 1 == 1 {\n                left++\n         \
    \   }\n            if array[right] & 1 == 0 {\n                right--\n     \
    \       }\n            if left < right && array[left] & 1 == 0 && array[right]\
    \ & 1 == 1 {\n                array[left], array[right] = array[right], array[left]\n\
    \            }\n        }\n    }\n\n    // if left == right, it's even number,\
    \ just sort the given list in ascending order.\n    if left == right {\n     \
    \   return merge_sort(array)\n    }\n\n    rightOddArray := array[left:]\n   \
    \ rightEvenArray := array[:left]\n    rightOddArray = merge_sort(rightOddArray)\n\
    \    rightEvenArray = merge_sort(rightEvenArray)\n\n    return append(rightOddArray,\
    \ rightEvenArray...)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoj2ehrl2_test.go:56:16: undefined: merge_sort

    /tmp/tmpoj2ehrl2_test.go:61:21: undefined: merge_sort

    /tmp/tmpoj2ehrl2_test.go:62:22: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    sum := array[0]\
    \ + array[len(array) - 1]\n    if sum % 2 == 0 {\n        // sort in descending\
    \ order\n        for i := 0; i < len(array); i++ {\n            for j := i + 1;\
    \ j < len(array); j++ {\n                if array[i] < array[j] {\n          \
    \          array[i], array[j] = array[j], array[i]\n                }\n      \
    \      }\n        }\n    } else {\n        // sort in ascending order\n      \
    \  for i := 0; i < len(array); i++ {\n            for j := i + 1; j < len(array);\
    \ j++ {\n                if array[i] > array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var odd_array []int\n    var even_array []int\n    var sort_array []int\n\
    \    odd_array = get_odd_array(array)\n    even_array = get_even_array(array)\n\
    \    if odd_array[0] < even_array[0] {\n        sort_array = append(odd_array,\
    \ even_array...)\n    } else {\n        sort_array = append(even_array, odd_array...)\n\
    \    }\n    return sort_array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihv8bcq4_test.go:26:17: undefined: get_odd_array

    /tmp/tmpihv8bcq4_test.go:27:18: undefined: get_even_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int\n    for i, _ := range array {\n        sum += array[i]\n\
    \    }\n    if sum % 2 == 0 {\n        for i, _ := range array {\n           \
    \ for j := i; j < len(array) - 1; j++ {\n                if array[j] < array[j\
    \ + 1] {\n                    tmp := array[j]\n                    array[j] =\
    \ array[j + 1]\n                    array[j + 1] = tmp\n                }\n  \
    \          }\n        }\n    } else {\n        for i, _ := range array {\n   \
    \         for j := i; j < len(array) - 1; j++ {\n                if array[j] >\
    \ array[j + 1] {\n                    tmp := array[j]\n                    array[j]\
    \ = array[j + 1]\n                    array[j + 1] = tmp\n                }\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpx57iqc04_test.go:70: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpx57iqc04_test.go:70: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpx57iqc04_test.go:70: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=32) %!s(int=0)\
    \ %!s(int=11) %!s(int=42) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpx57iqc04_test.go:70: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=11) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    middle := len(array) / 2\n    sort_array(array[:middle])\n\
    \    sort_array(array[middle:])\n    last_middle := middle - 1\n    for {\n  \
    \      if last_middle < 0 {\n            break\n        }\n        if array[last_middle]\
    \ > array[middle] {\n            array[last_middle], array[middle] = array[middle],\
    \ array[last_middle]\n            middle += 1\n        }\n        last_middle\
    \ -= 1\n    }\n    if len(array) % 2 == 0 {\n        for i := middle; i < len(array)\
    \ - 1; i += 1 {\n            if array[i] < array[i + 1] {\n                array[i],\
    \ array[i + 1] = array[i + 1], array[i]\n            }\n        }\n    }\n   \
    \ return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0mxaao_2_test.go:78: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0mxaao_2_test.go:78: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)\
    \ %!s(int=3) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp0mxaao_2_test.go:78: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=32) %!s(int=0)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0mxaao_2_test.go:78: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=11) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO:\n    // return array\n    last := len(array) - 1\n    if last\
    \ < 0 {\n        return array\n    }\n\n    for {\n        if array[0] % 2 ==\
    \ 0 {\n            if array[last] % 2 == 0 {\n                array[0], array[last]\
    \ = array[last], array[0]\n            } else {\n                if array[0] >\
    \ array[last] {\n                    array[0], array[last] = array[last], array[0]\n\
    \                }\n            }\n        } else {\n            if array[last]\
    \ % 2 == 0 {\n                if array[0] < array[last] {\n                  \
    \  array[0], array[last] = array[last], array[0]\n                }\n        \
    \    } else {\n                if array[0] > array[last] {\n                 \
    \   array[0], array[last] = array[last], array[0]\n                }\n       \
    \     }\n        }\n\n        array = array[1:last]\n        last--\n        if\
    \ last <= 0 {\n            break\n        }\n    }\n\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc00001e1f8?, 0x0?, 0xd0?})\n\
    \t/tmp/tmpw5ph_1n3_test.go:51 +0xe5\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpw5ph_1n3_test.go:69 +0x90\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: to be done.\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpi3tcqobj_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpi3tcqobj_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpi3tcqobj_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpi3tcqobj_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpi3tcqobj_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if array[0] + array[len(array) - 1]\
    \ % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpg_tmwgtz_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpg_tmwgtz_test.go:56: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpg_tmwgtz_test.go:56: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpg_tmwgtz_test.go:56: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpg_tmwgtz_test.go:56: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        fmt.Println(\"PATCH list\"\
    )\n        return array\n    }\n    if array[0] % 2 == 0 {\n        sort_array_even(array)\n\
    \    } else {\n        sort_array_odd(array)\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zhra7e5_test.go:28:9: undefined: sort_array_even

    /tmp/tmp5zhra7e5_test.go:30:9: undefined: sort_array_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    head, tail :=\
    \ array[0], array[len(array)-1]\n    if (head + tail) % 2 == 0 {\n        return\
    \ sort_array(array[1:])\n    }\n    return sort_array(array[1:])\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpniovt4o0_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpniovt4o0_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__4 (0.00s)\n        tmpniovt4o0_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=2)]', got '[%!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpniovt4o0_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpniovt4o0_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    size := len(array)\n    first := array[0]\n    last := array[size - 1]\n\
    \    if (first + last) % 2 == 0 {\n        return sort_array_desc(array)\n   \
    \ }\n    return sort_array_asc(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkmzf9w20_test.go:27:16: undefined: sort_array_desc

    /tmp/tmpkmzf9w20_test.go:29:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // sort the list.\n    // if sum of the first and last element is odd,\
    \ sort the list in ascending order.\n    // else, sort the list in descending\
    \ order.\n    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n\
    \        sort_desc(array)\n    } else {\n        sort_asc(array)\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz_8p2pnw_test.go:28:9: undefined: sort_desc

    /tmp/tmpz_8p2pnw_test.go:30:9: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // write your code here.\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpne4la946_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpne4la946_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpne4la946_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpne4la946_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpne4la946_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n\n    if len(array)\
    \ == 1 {\n        return array\n    }\n\n    count := len(array)\n    odd_start_index\
    \ := 0\n    odd_end_index := count - 1\n    if (array[0] + array[count - 1]) %\
    \ 2 == 0 {\n        odd_start_index = count - 1\n        odd_end_index = 0\n \
    \   }\n\n    for i := 0; i < count - 1; i++ {\n        is_odd := array[i] % 2\
    \ == 1\n        if is_odd && i < odd_start_index {\n            odd_start_index\
    \ = i\n        } else if !is_odd && i > odd_end_index {\n            odd_end_index\
    \ = i\n        }\n    }\n\n    even_start_index := odd_end_index + 1\n    even_end_index\
    \ := odd_start_index - 1\n    for i := 0; i < count - 1; i++ {\n        is_even\
    \ := array[i] % 2 == 0\n        if is_even && i < even_start_index {\n       \
    \     even_start_index = i\n        } else if !is_even && i > even_end_index {\n\
    \            even_end_index = i\n        }\n    }\n\n    sorted_odd_array := make([]int,\
    \ 0)\n    if odd_start_index < odd_end_index {\n        sorted_odd_array = sort_increasing_array(array[odd_start_index:odd_end_index\
    \ + 1])\n    } else if odd_start_index > odd_end_index {\n        sorted_odd_array\
    \ = sort_decreasing_array(array[odd_end_index:odd_start_index + 1])\n    }\n\n\
    \    sorted_even_array := make([]int, 0)\n    if even_start_index < even_end_index\
    \ {\n        sorted_even_array = sort_increasing_array(array[even_start_index:even_end_index\
    \ + 1])\n    } else if even_start_index > even_end_index {\n        sorted_even_array\
    \ = sort_dec\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2nsfhhnl_test.go:71:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n        return\
    \ array\n    }\n    if len(array) == 1 {\n        return array\n    }\n    flag\
    \ := 0\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n        flag = 1\n\
    \    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] > array[i\
    \ + 1] {\n            if flag == 0 {\n                array[i], array[i + 1] =\
    \ array[i + 1], array[i]\n            } else {\n                array[i], array[i\
    \ + 1] = array[i + 1], array[i]\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "PATCH list\n--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpigyevm74_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpigyevm74_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpigyevm74_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=32)\
    \ %!s(int=11) %!s(int=0) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpigyevm74_test.go:66: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=21) %!s(int=11) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var new_array []int\n    if len(array) == 0 {\n        return array\n\
    \    }\n    if array[0]%2 == array[len(array)-1]%2 {\n        if array[0]%2 ==\
    \ 0 {\n            for i:=len(array)-1; i>=0; i-- {\n                new_array\
    \ = append(new_array, array[i])\n            }\n        } else {\n           \
    \ for i:=0; i<len(array); i++ {\n                new_array = append(new_array,\
    \ array[i])\n            }\n        }\n    } else {\n        for i:=0; i<len(array);\
    \ i++ {\n            if array[i]%2 == 0 {\n                new_array = append(new_array,\
    \ array[i])\n            }\n        }\n        for i:=0; i<len(array); i++ {\n\
    \            if array[i]%2 != 0 {\n                new_array = append(new_array,\
    \ array[i])\n            }\n        }\n    }\n    return new_array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpzv0vollr_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=0) %!s(int=3)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpzv0vollr_test.go:71: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpzv0vollr_test.go:71: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpzv0vollr_test.go:71: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=42) %!s(int=32) %!s(int=0)\
    \ %!s(int=15) %!s(int=87) %!s(int=11)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpzv0vollr_test.go:71: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    index := 0\n    if (len(array) % 2) == 0 {\n        index = len(array)\
    \ - 1\n    } else {\n        index = len(array) - 2\n    }\n    for i := 0; i\
    \ < index; i++ {\n        if (array[i] > array[i + 1]) {\n            temp :=\
    \ array[i]\n            array[i] = array[i + 1]\n            array[i + 1] = temp\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvdvd3enf_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvdvd3enf_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpvdvd3enf_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=32)\
    \ %!s(int=11) %!s(int=0) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpvdvd3enf_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=21) %!s(int=11) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    start := 0\n \
    \   if len(array) % 2 == 0 {\n        start = 1\n    }\n    for i := start; i\
    \ < len(array); i += 2 {\n        for j := i; j > 0; j -= 2 {\n            if\
    \ array[j] < array[j - 2] {\n                array[j], array[j - 2] = array[j\
    \ - 2], array[j]\n            } else {\n                break\n            }\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmps2fvbjqu_test.go:32\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmps2fvbjqu_test.go:51\
    \ +0x7f2\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var (\n        first_value   int\n        last_value    int\n       \
    \ asc           bool\n    )\n    first_value, last_value = array[0], array[len(array)\
    \ - 1]\n    asc = first_value + last_value & 1 == 0\n    if asc {\n        array\
    \ = sort_asc(array)\n    } else {\n        array = sort_desc(array)\n    }\n \
    \   return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0e0m6zf_test.go:31:17: undefined: sort_asc

    /tmp/tmpq0e0m6zf_test.go:33:17: undefined: sort_desc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        return array\n  \
    \  }\n\n    if length == 1 {\n        return array\n    }\n\n    if (array[0]\
    \ + array[length - 1]) % 2 == 0 {\n        for i := 0; i < length; i++ {\n   \
    \         for j := i + 1; j < length; j++ {\n                if array[i] < array[j]\
    \ {\n                    temp := array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = temp\n                }\n            }\n     \
    \   }\n    } else {\n        for i := 0; i < length; i++ {\n            for j\
    \ := i + 1; j < length; j++ {\n                if array[i] > array[j] {\n    \
    \                temp := array[i]\n                    array[i] = array[j]\n \
    \                   array[j] = temp\n                }\n            }\n      \
    \  }\n    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) <= 1 {\n        return array\n    }\n \
    \   var odd_slice []int\n    var even_slice []int\n    var odd_point int\n   \
    \ var even_point int\n    var odd_count int\n    var even_count int\n    for _,\
    \ value := range array {\n        if value % 2 == 0 {\n            even_slice\
    \ = append(even_slice, value)\n            even_count += 1\n        } else {\n\
    \            odd_slice = append(odd_slice, value)\n            odd_count += 1\n\
    \        }\n    }\n    // quick sort for even_slice\n    for i := 0; i < even_count;\
    \ i++ {\n        for j := i + 1; j < even_count; j++ {\n            if even_slice[i]\
    \ < even_slice[j] {\n                even_slice[i], even_slice[j] = even_slice[j],\
    \ even_slice[i]\n            }\n        }\n    }\n    // quick sort for odd_slice\n\
    \    for i := 0; i < odd_count; i++ {\n        for j := i + 1; j < odd_count;\
    \ j++ {\n            if odd_slice[i] > odd_slice[j] {\n                odd_slice[i],\
    \ odd_slice[j] = odd_slice[j], odd_slice[i]\n            }\n        }\n    }\n\
    \    // merge two slice\n    for i := 0; i < len(array); i++ {\n        if (i\
    \ + odd_point + even_point) % 2 == 0 {\n            array[i] = even_slice[even_point]\n\
    \            even_point += 1\n        } else {\n            array[i] = odd_slice[odd_point]\n\
    \            odd_point += 1\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0xc000024390?, 0x6, 0x6})\n\t\
    /tmp/tmpa3fdegrz_test.go:60 +0x25d\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmpa3fdegrz_test.go:79 +0xfb\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n    \
    \    // descending order\n        for i := 0; i < len(array) - 1; i++ {\n    \
    \        for j := i + 1; j < len(array); j++ {\n                if array[i] <\
    \ array[j] {\n                    array[i], array[j] = array[j], array[i]\n  \
    \              }\n            }\n        }\n    } else {\n        // ascending\
    \ order\n        for i := 0; i < len(array) - 1; i++ {\n            for j := i\
    \ + 1; j < len(array); j++ {\n                if array[i] > array[j] {\n     \
    \               array[i], array[j] = array[j], array[i]\n                }\n \
    \           }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmp_345iahf_test.go:23 +0xc5\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp_345iahf_test.go:53 +0x4d\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    var odd, even []int\n    for i, v :=\
    \ range array {\n        if i % 2 == 0 {\n            even = append(even, v)\n\
    \        } else {\n            odd = append(odd, v)\n        }\n    }\n    quick_sort(even)\n\
    \    quick_sort(odd)\n    for i, v := range even {\n        array[i * 2] = v\n\
    \    }\n    for i, v := range odd {\n        array[i * 2 + 1] = v\n    }\n   \
    \ return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqw7p478_test.go:37:5: undefined: quick_sort

    /tmp/tmpoqw7p478_test.go:38:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        return array\n  \
    \  }\n\n    if length%2 == 0 {\n        return _sort(array, 1)\n    }\n\n    return\
    \ _sort(array, 0)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd82tsfmn_test.go:29:16: undefined: _sort

    /tmp/tmpd82tsfmn_test.go:32:12: undefined: _sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    n := len(array)\n    if n == 0 {\n        return array\n    }\n\n   \
    \ if (array[0] + array[n-1]) % 2 == 0 {\n        return sort_array_even(array)\n\
    \    }\n    return sort_array_odd(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqvg7ylmn_test.go:29:16: undefined: sort_array_even

    /tmp/tmpqvg7ylmn_test.go:31:12: undefined: sort_array_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpfnrd0yh3_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpfnrd0yh3_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfnrd0yh3_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpfnrd0yh3_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpfnrd0yh3_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // even number\n    if len(array) % 2 == 0 {\n        for i := 0; i <\
    \ len(array) / 2; i++ {\n            tmp := array[i]\n            array[i] = array[len(array)\
    \ - 1 - i]\n            array[len(array) - 1 - i] = tmp\n        }\n    } else\
    \ {\n        for i := 0; i < len(array) / 2; i++ {\n            tmp := array[i]\n\
    \            array[i] = array[len(array) - 1 - i]\n            array[len(array)\
    \ - 1 - i] = tmp\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0ukckaj2_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0ukckaj2_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp0ukckaj2_test.go:59: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0ukckaj2_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    sum := array[0]\
    \ + array[len(array) - 1]\n    if sum % 2 == 0 {\n        return sort_desc_array(array)\n\
    \    }\n    return sort_asc_array(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr0wlcb8z_test.go:28:16: undefined: sort_desc_array

    /tmp/tmpr0wlcb8z_test.go:30:12: undefined: sort_asc_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var (\n        sum = array[0] + array[len(array) - 1]\n        loop =\
    \ len(array) / 2\n    )\n    // \u6C42\u548C, \u5224\u65AD\u662F\u5947\u6570\u8FD8\
    \u662F\u5076\u6570\n    if sum % 2 == 0 {\n        return reverse_sort(array,\
    \ loop)\n    }\n    return normal_sort(array, loop)\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ors09uu_test.go:29:16: undefined: reverse_sort

    /tmp/tmp7ors09uu_test.go:31:12: undefined: normal_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if (len(array) <= 1) {\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        array = reverse(array)\n    }\n\
    \    return quick_sort(array)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm1wnbzz8_test.go:27:17: undefined: reverse

    /tmp/tmpm1wnbzz8_test.go:29:12: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var length = len(array)\n    var pos, step int\n    if length%2 == 0\
    \ {\n        pos = length - 1\n        step = -1\n    } else {\n        pos =\
    \ 0\n        step = 1\n    }\n    for pos >= 0 && pos < length {\n        var\
    \ num = array[pos]\n        var index = pos\n        for i := pos+step; i >= 0\
    \ && i < length; i = i+step {\n            if array[i] < num {\n             \
    \   array[index] = array[i]\n                index = i\n            }\n      \
    \  }\n        array[index] = num\n        pos = pos + step\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvrvvv90q_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvrvvv90q_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=3) %!s(int=1) %!s(int=2)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpvrvvv90q_test.go:66: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpvrvvv90q_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=87) %!s(int=32) %!s(int=42)\
    \ %!s(int=15) %!s(int=11) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if len(array)\
    \ % 2 == 0 {\n        fmt.Println(\"ascending order\")\n        // ascending order\n\
    \        var (\n            i int\n            j int\n            tmp int\n  \
    \      )\n        for i = 0; i < len(array) - 1; i++ {\n            for j = 0;\
    \ j < len(array) - 1 - i; j++ {\n                if array[j] > array[j + 1] {\n\
    \                    tmp = array[j]\n                    array[j] = array[j +\
    \ 1]\n                    array[j + 1] = tmp\n                }\n            }\n\
    \        }\n    } else {\n        fmt.Println(\"descending order\")\n        //\
    \ descending order\n        var (\n            i int\n            j int\n    \
    \        tmp int\n        )\n        for i = 0; i < len(array) - 1; i++ {\n  \
    \          for j = 0; j < len(array) - 1 - i; j++ {\n                if array[j]\
    \ < array[j + 1] {\n                    tmp = array[j]\n                    array[j]\
    \ = array[j + 1]\n                    array[j + 1] = tmp\n                }\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "ascending order\ndescending order\nascending order\nascending order\nascending\
    \ order\n--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8266bdqi_test.go:83: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n\n    if len(array)\
    \ % 2 == 0 {\n        return sort_array_asc(array)\n    }\n\n    return sort_array_desc(array)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lzl8qo8_test.go:28:16: undefined: sort_array_asc

    /tmp/tmp3lzl8qo8_test.go:31:12: undefined: sort_array_desc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    middle := len(array)\
    \ / 2\n    left := sort_array(array[:middle])\n    right := sort_array(array[middle:])\n\
    \    return merge(left, right)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmem_jji5_test.go:29:12: undefined: merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    // Quick sort\n\
    \    sort_array_quick(array, 0, len(array) - 1)\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        sort_array_reverse(array)\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nf074xu_test.go:27:5: undefined: sort_array_quick

    /tmp/tmp3nf074xu_test.go:29:9: undefined: sort_array_reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpk20_jvx9_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpk20_jvx9_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var index = 0\n    for index < len(array) - 1 {\n        var sub_index\
    \ = index + 1\n        for sub_index < len(array) {\n            if array[index]\
    \ > array[sub_index] {\n                temp := array[index]\n               \
    \ array[index] = array[sub_index]\n                array[sub_index] = temp\n \
    \           }\n            sub_index += 1\n        }\n        index += 1\n   \
    \ }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpqoabr5jt_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqoabr5jt_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0] + array[len(array) - 1]\n    switch sum & 1 {\n    case\
    \ 0:\n        sort_desc(array)\n    default:\n        sort_asc(array)\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpki_05pzh_test.go:26:9: undefined: sort_desc

    /tmp/tmpki_05pzh_test.go:28:9: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n    \
    \    for i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array(...)\n\t/tmp/tmpr6x8urw8_test.go:23\n\
    command-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpr6x8urw8_test.go:39\
    \ +0x18\ntesting.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if (len(array) <= 1) {\n        return array\n    }\n    idx := 0\n \
    \   odd := 0\n    even := 0\n    for i := 0; i < len(array); i++ {\n        idx\
    \ = i\n        odd = array[i]\n        for j := i + 1; j < len(array); j++ {\n\
    \            if (array[j] < odd) {\n                odd = array[j]\n         \
    \       idx = j\n            }\n        }\n        array[idx] = array[i]\n   \
    \     array[i] = odd\n    }\n    for i := 0; i < len(array); i++ {\n        idx\
    \ = i\n        even = array[i]\n        for j := i + 1; j < len(array); j++ {\n\
    \            if (array[j] > even) {\n                even = array[j]\n       \
    \         idx = j\n            }\n        }\n        array[idx] = array[i]\n \
    \       array[i] = even\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp66ujp5hn_test.go:75: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n\
    \        tmp66ujp5hn_test.go:75: expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp66ujp5hn_test.go:75:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=87) %!s(int=42) %!s(int=32) %!s(int=15) %!s(int=11) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        // sort array in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort array in ascending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075120
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n\n    if len(array)\
    \ == 1 {\n        return array\n    }\n\n    if (array[0] + array[len(array) -\
    \ 1]) % 2 == 0 {\n        // even\n        return sort_array_desc(array)\n   \
    \ } else {\n        // odd\n        return sort_array_asc(array)\n    }\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjyli67s5_test.go:33:16: undefined: sort_array_desc

    /tmp/tmpjyli67s5_test.go:36:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpr7p6ladg_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpr7p6ladg_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpr7p6ladg_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpr7p6ladg_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpr7p6ladg_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0hhktfv9_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0hhktfv9_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp0hhktfv9_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp0hhktfv9_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0hhktfv9_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := len(array) - 1; i > 0; i-- {\n        for j := 0; j < i; j++\
    \ {\n            if (j + i) % 2 == 0 {\n                if array[j] > array[j\
    \ + 1] {\n                    array[j], array[j + 1] = array[j + 1], array[j]\n\
    \                }\n            } else {\n                if array[j] < array[j\
    \ + 1] {\n                    array[j], array[j + 1] = array[j + 1], array[j]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpqolmx2lt_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=2)\
    \ %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpqolmx2lt_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=0) %!s(int=4) %!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpqolmx2lt_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpqolmx2lt_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=87) %!s(int=11) %!s(int=42)\
    \ %!s(int=15) %!s(int=32) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqolmx2lt_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=23) %!s(int=14) %!s(int=21) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    for i := 0; i\
    \ < len(array) - 1; i++ {\n        for j := 0; j < len(array) - 1 - i; j++ {\n\
    \            if array[j] > array[j + 1] {\n                array[j], array[j +\
    \ 1] = array[j + 1], array[j]\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpdg9wab_e_test.go:55: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpdg9wab_e_test.go:55: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum int\n    for index, value := range array {\n        if index\
    \ == 0 || index == len(array) - 1 {\n            sum += value\n        }\n   \
    \ }\n    if sum % 2 == 0 {\n        return sorted_array(array, \"desc\")\n   \
    \ }\n    return sorted_array(array, \"asc\")\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmbruu3ll_test.go:30:16: undefined: sorted_array

    /tmp/tmpmbruu3ll_test.go:32:12: undefined: sorted_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    first, last :=\
    \ array[0], array[len(array)-1]\n    if (first + last) % 2 == 0 {\n        for\
    \ i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    }\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmppjeyrqo8_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmppjeyrqo8_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmppjeyrqo8_test.go:54: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmppjeyrqo8_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmppjeyrqo8_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    for i := 0; i < length; i++ {\n        for\
    \ j := i; j < length; j++ {\n            if (i + j) % 2 == 0 {\n             \
    \   if array[i] < array[j] {\n                    tmp := array[i]\n          \
    \          array[i] = array[j]\n                    array[j] = tmp\n         \
    \       }\n            } else {\n                if array[i] > array[j] {\n  \
    \                  tmp := array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp50_pn5c9_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=0) %!s(int=3)\
    \ %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp50_pn5c9_test.go:63: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=1) %!s(int=5) %!s(int=0)\
    \ %!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp50_pn5c9_test.go:63: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=32) %!s(int=11)\
    \ %!s(int=87) %!s(int=15) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp50_pn5c9_test.go:63: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return []int{}\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if array[0] + array[len(array) - 1]\
    \ % 2 == 0 {\n        return []int{array[len(array) - 1]}\n    }\n    return []int{array[0]}\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcr7cve2c_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpcr7cve2c_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__4 (0.00s)\n        tmpcr7cve2c_test.go:54: expected\
    \ '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpcr7cve2c_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcr7cve2c_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n\n    front_index\
    \ := 0\n    rear_index := len(array) - 1\n    if (array[front_index] + array[rear_index])\
    \ % 2 == 0 {\n        // even, need descending sort\n        descending_sort(array)\n\
    \    } else {\n        // odd, need ascending sort\n        ascending_sort(array)\n\
    \    }\n\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4lev1ap_test.go:31:9: undefined: descending_sort

    /tmp/tmpm4lev1ap_test.go:34:9: undefined: ascending_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    // select the last\
    \ element\n    elem := array[len(array) - 1]\n    array = array[:len(array) -\
    \ 1]\n    // find the insert position\n    var pos int\n    for pos = 0; pos <\
    \ len(array); pos++ {\n        if (pos + len(array)) % 2 == 0 {\n            if\
    \ array[pos] < elem {\n                continue\n            }\n        } else\
    \ {\n            if array[pos] > elem {\n                continue\n          \
    \  }\n        }\n        break\n    }\n    // insert the last element at the position\n\
    \    array = append(array, 0)\n    copy(array[pos + 1:], array[pos:])\n    array[pos]\
    \ = elem\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpdoyvws6w_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)\
    \ %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpdoyvws6w_test.go:69: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=6) %!s(int=4) %!s(int=3)\
    \ %!s(int=0) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpdoyvws6w_test.go:69: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpdoyvws6w_test.go:69: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=0) %!s(int=42)\
    \ %!s(int=87) %!s(int=32) %!s(int=11)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpdoyvws6w_test.go:69: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=11) %!s(int=14) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length == 0 {\n        return array\n  \
    \  }\n\n    sum := array[0] + array[length - 1]\n    if sum % 2 == 0 {\n     \
    \   return reverse_sort(array)\n    }\n    return normal_sort(array)\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xrizh7v_test.go:30:16: undefined: reverse_sort

    /tmp/tmp0xrizh7v_test.go:32:12: undefined: normal_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    l := len(array)\n    if l == 0 {\n        return array\n    }\n    if\
    \ l == 1 {\n        return array\n    }\n    if (array[0] + array[l-1])%2 == 0\
    \ {\n        for i := 0; i < l/2; i++ {\n            array[i], array[l-1-i] =\
    \ array[l-1-i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp4jm0r6bp_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp4jm0r6bp_test.go:57: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp4jm0r6bp_test.go:57: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp4jm0r6bp_test.go:57: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp4jm0r6bp_test.go:57: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return append(array[:0:0], array...)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp02nqow9s_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp02nqow9s_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp02nqow9s_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp02nqow9s_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp02nqow9s_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // PATCH: please implement the function.\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpiinkkdry_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpiinkkdry_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpiinkkdry_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpiinkkdry_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpiinkkdry_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    odd_start := 0\n\
    \    odd_end := len(array) - 1\n    even_start := 0\n    even_end := len(array)\
    \ - 1\n    for odd_start < odd_end {\n        for array[odd_start] % 2 == 0 {\n\
    \            if even_start < odd_start {\n                temp := array[even_start]\n\
    \                array[even_start] = array[odd_start]\n                array[odd_start]\
    \ = temp\n                even_start++\n            } else {\n               \
    \ odd_start++\n            }\n        }\n        for array[odd_end] % 2 == 1 {\n\
    \            if odd_end < even_end {\n                temp := array[even_end]\n\
    \                array[even_end] = array[odd_end]\n                array[odd_end]\
    \ = temp\n                even_end--\n            } else {\n                odd_end--\n\
    \            }\n        }\n        if odd_start < odd_end {\n            temp\
    \ := array[odd_start]\n            array[odd_start] = array[odd_end]\n       \
    \     array[odd_end] = temp\n            odd_start++\n            odd_end--\n\
    \        }\n    }\n    if odd_start > even_start {\n        return insert_sort(array[:odd_start])\
    \ + array[odd_start:]\n    } else {\n        return array[:odd_start] + insert_sort(array[odd_start:])\n\
    \    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecuu9ac__test.go:60:16: undefined: insert_sort

    /tmp/tmpecuu9ac__test.go:62:36: undefined: insert_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"TODO: Write test\")\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "TODO: Write test\nTODO: Write test\nTODO: Write test\nTODO: Write test\n\
    TODO: Write test\nTODO: Write test\nTODO: Write test\n--- FAIL: TestSort_Array\
    \ (0.00s)\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmplos7hamq_test.go:46:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmplos7hamq_test.go:46:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=5)\
    \ %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n        tmplos7hamq_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__5 (0.00s)\n        tmplos7hamq_test.go:46: expected\
    \ '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[%!s(int=15) %!s(int=42) %!s(int=87) %!s(int=32) %!s(int=11) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmplos7hamq_test.go:46:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[%!s(int=21)\
    \ %!s(int=14) %!s(int=23) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length < 2 {\n        return array\n   \
    \ }\n    if length & 1 == 0 {\n        for i := 0; i < length/2; i++ {\n     \
    \       if array[i] < array[length-1-i] {\n                array[i], array[length-1-i]\
    \ = array[length-1-i], array[i]\n            }\n        }\n    } else {\n    \
    \    for i := 0; i < length/2; i++ {\n            if array[i] > array[length-1-i]\
    \ {\n                array[i], array[length-1-i] = array[length-1-i], array[i]\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb6u8572j_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb6u8572j_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpb6u8572j_test.go:62: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpb6u8572j_test.go:62: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb6u8572j_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    odd_index := array[0]\
    \ & 0x1\n    odd_index = odd_index & 0x1\n    odd_asc := (array[0] + array[len(array)\
    \ - 1]) & 0x1\n    odd_asc = odd_asc & 0x1\n    i := 0\n    if odd_index == odd_asc\
    \ {\n        i = 1\n    }\n    for j := len(array) - 1; i < j; {\n        for\
    \ i < j && (array[i] & 0x1) == odd_index {\n            i += 2\n        }\n  \
    \      for i < j && (array[j] & 0x1) != odd_index {\n            j -= 2\n    \
    \    }\n        if i < j {\n            array[i], array[j] = array[j], array[i]\n\
    \        }\n    }\n    if odd_index == odd_asc {\n        i = 1\n    }\n    j\
    \ := i + 1\n    for i < len(array) {\n        k := i\n        for k + 1 < len(array)\
    \ && (array[k] & 0x1) == odd_index && (array[k + 1] & 0x1) == odd_index {\n  \
    \          k += 2\n        }\n        odd_asc_k := (array[i] + array[k]) & 0x1\n\
    \        odd_asc_k = odd_asc_k & 0x1\n        odd_asc_j := (array[j] + array[j\
    \ + 1]) & 0x1\n        odd_asc_j = odd_asc_j & 0x1\n        if odd_asc_k == odd_asc_j\
    \ {\n            i = k + 1\n            j = i + 1\n            continue\n    \
    \    }\n        for j < k {\n            for j < k && (array[j] & 0x1) == odd_index\
    \ {\n                j += 2\n            }\n            for j < k && (array[k]\
    \ & 0x1) != odd_index {\n                k -= 2\n            }\n            if\
    \ j < k {\n                array[j], array[k] = array[k],\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv84lx90d_test.go:72:6: expected ''('', found TestSort_Array

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // Write your code here\n    l := len(array)\n    r, i := array, 0\n\
    \    for i < l {\n        // Even\n        if array[i]%2 == 0 {\n            //\
    \ And even-index - increment index\n            if i%2 == 0 {\n              \
    \  i++\n            } else {\n                // Odd-index - find an odd-index\
    \ that's even\n                for j := i + 1; j < l; j++ {\n                \
    \    if array[j]%2 == 0 && j%2 != 0 {\n                        // Swap\n     \
    \                   r[i], r[j] = r[j], r[i]\n                        break\n \
    \                   }\n                }\n                i++\n            }\n\
    \        } else {\n            // Odd\n            // And odd-index - increment\
    \ index\n            if i%2 != 0 {\n                i++\n            } else {\n\
    \                // Even-index - find an even-index that's odd\n             \
    \   for j := i + 1; j < l; j++ {\n                    if array[j]%2 != 0 && j%2\
    \ == 0 {\n                        // Swap\n                        r[i], r[j]\
    \ = r[j], r[i]\n                        break\n                    }\n       \
    \         }\n                i++\n            }\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmplmaynfk3_test.go:83: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmplmaynfk3_test.go:83: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=4)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmplmaynfk3_test.go:83: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmplmaynfk3_test.go:83: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=87) %!s(int=32) %!s(int=11)\
    \ %!s(int=0) %!s(int=15) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmplmaynfk3_test.go:83: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=23) %!s(int=14) %!s(int=21) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n\
    \        for j := i + 1; j < len(array); j++ {\n            if array[i] > array[j]\
    \ {\n                array[i], array[j] = array[j], array[i]\n            }\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp7wwd8bb5_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp7wwd8bb5_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: add code here\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp72638t16_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp72638t16_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp72638t16_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp72638t16_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp72638t16_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var odd_array []int\n    var even_array []int\n    for _, v := range\
    \ array {\n        if v % 2 == 0 {\n            even_array = append(even_array,\
    \ v)\n        } else {\n            odd_array = append(odd_array, v)\n       \
    \ }\n    }\n    odd_array = sort(odd_array)\n    even_array = sort(even_array)\n\
    \    var result_array []int\n    odd_index := 0\n    even_index := 0\n    for\
    \ i := 0; i < len(array); i++ {\n        if i % 2 == 0 {\n            result_array\
    \ = append(result_array, odd_array[odd_index])\n            odd_index += 1\n \
    \       } else {\n            result_array = append(result_array, even_array[even_index])\n\
    \            even_index += 1\n        }\n    }\n    return result_array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9f0qnb7w_test.go:32:17: undefined: sort

    /tmp/tmp9f0qnb7w_test.go:33:18: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    length := len(array)\n    if length < 2 {\n        return array\n   \
    \ }\n    if (array[0] + array[length - 1]) % 2 == 0 {\n        return sort_array_descending(array)\n\
    \    }\n    return sort_array_ascending(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps1e6ub_p_test.go:28:16: undefined: sort_array_descending

    /tmp/tmps1e6ub_p_test.go:30:12: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        sortDescending(array)\n    } else {\n        sortAscending(array)\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzyo56n4a_test.go:30:9: undefined: sortDescending

    /tmp/tmpzyo56n4a_test.go:32:9: undefined: sortAscending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if len(array)%2\
    \ == 1 {\n        return quicksort(array, 0, len(array)-1)\n    }\n    return\
    \ reverse(quicksort(array, 0, len(array)-1))\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwe86lhdh_test.go:27:16: undefined: quicksort

    /tmp/tmpwe86lhdh_test.go:29:12: undefined: reverse

    /tmp/tmpwe86lhdh_test.go:29:20: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpxlyf2e1x_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpxlyf2e1x_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpxlyf2e1x_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpxlyf2e1x_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpxlyf2e1x_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // the sum of first index and last index is the length of array\n   \
    \ sum := len(array)\n    // if sum is even,\n    if sum % 2 == 0 {\n        for\
    \ i := 0; i < sum/2; i++ {\n            var temp int\n            for j := i +\
    \ 1; j < sum-i; j++ {\n                if array[i] < array[j] {\n            \
    \        temp = array[i]\n                    array[i] = array[j]\n          \
    \          array[j] = temp\n                }\n            }\n        }\n    }\
    \ else {\n        for i := 0; i < sum/2+1; i++ {\n            var temp int\n \
    \           for j := i + 1; j < sum-i; j++ {\n                if array[i] > array[j]\
    \ {\n                    temp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = temp\n                }\n            }\n     \
    \   }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpznmte_t__test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpznmte_t__test.go:71: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpznmte_t__test.go:71: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpznmte_t__test.go:71: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=87) %!s(int=42) %!s(int=32)\
    \ %!s(int=15) %!s(int=11) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n\n    if len(array)\
    \ == 1 {\n        return array\n    }\n\n    if len(array) == 2 {\n        if\
    \ (array[0] + array[1]) % 2 == 0 {\n            array[0], array[1] = array[1],\
    \ array[0]\n        }\n        return array\n    }\n\n    start, end := 0, len(array)\
    \ - 1\n    for {\n        for array[start] % 2 == 1 {\n            start++\n \
    \           if start >= end {\n                break\n            }\n        }\n\
    \n        for array[end] % 2 == 0 {\n            end--\n            if start >=\
    \ end {\n                break\n            }\n        }\n\n        if start >=\
    \ end {\n            break\n        }\n\n        array[start], array[end] = array[end],\
    \ array[start]\n    }\n\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n\
    \        for i := start; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n\n    return\
    \ array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp_pl9pjqz_test.go:89: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp_pl9pjqz_test.go:89: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp_pl9pjqz_test.go:89: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp_pl9pjqz_test.go:89: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=11) %!s(int=87)\
    \ %!s(int=32) %!s(int=42) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp_pl9pjqz_test.go:89: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=11) %!s(int=23) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    head, tail :=\
    \ array[0], array[len(array)-1]\n    if (head + tail) % 2 == 0 {\n        // even\n\
    \        for i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    } else {\n        // odd\n\
    \        for i := 0; i < len(array)/2-1; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    }\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpw3h3a32m_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpw3h3a32m_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpw3h3a32m_test.go:60: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpw3h3a32m_test.go:60: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=87)\
    \ %!s(int=32) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpw3h3a32m_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    array[0], array[len(array)-1]\
    \ = array[len(array)-1], array[0]\n    if array[0] > array[len(array)-1] {\n \
    \       array[0], array[len(array)-1] = array[len(array)-1], array[0]\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpjrx3uhcw_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpjrx3uhcw_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpjrx3uhcw_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpjrx3uhcw_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    start := 0\n    end := len(array) - 1\n    for start < end {\n      \
    \  if (start + end) % 2 == 0 {\n            if array[start] > array[end] {\n \
    \               array[start], array[end] = array[end], array[start]\n        \
    \    }\n        } else {\n            if array[start] < array[end] {\n       \
    \         array[start], array[end] = array[end], array[start]\n            }\n\
    \        }\n        start++\n        end--\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp__puaw2w_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp__puaw2w_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp__puaw2w_test.go:60: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp__puaw2w_test.go:60: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp__puaw2w_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if array == nil || len(array) == 0 {\n        return nil\n    }\n   \
    \ first, last := array[0], array[len(array) - 1]\n    if (first + last) % 2 ==\
    \ 0 {\n        reverse_array(array)\n    }\n    sort_list(array)\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbzamt3g_test.go:28:9: undefined: reverse_array

    /tmp/tmpfbzamt3g_test.go:30:5: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    copy(array, sort(array))\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01jbhzad_test.go:23:17: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    var sum = array[0] + array[len(array) - 1]\n    var asc = true\n    if\
    \ sum % 2 == 0 {\n        asc = false\n    }\n    var l = len(array)\n    for\
    \ i := 0; i < l / 2; i++ {\n        var start = array[i]\n        var end = array[l\
    \ - 1 - i]\n        if asc {\n            if start > end {\n                array[i]\
    \ = end\n                array[l - 1 - i] = start\n            }\n        } else\
    \ {\n            if start < end {\n                array[i] = end\n          \
    \      array[l - 1 - i] = start\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmphch53m2c_test.go:23 +0xa6\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmphch53m2c_test.go:54 +0x4d\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n\n    if\
    \ len(array) == 1 {\n        return array\n    }\n\n    var left, right []int\n\
    \    mid := len(array) / 2\n    if len(array) % 2 == 0 {\n        left = array[:mid]\n\
    \        right = array[mid:]\n    } else {\n        left = array[:mid]\n     \
    \   right = array[mid+1:]\n    }\n\n    new_left := sort_array(left)\n    new_right\
    \ := sort_array(right)\n\n    var start, end int\n    if sum(new_left) % 2 ==\
    \ 0 {\n        start = len(new_left) - 1\n        end = -1\n    } else {\n   \
    \     start = 0\n        end = len(new_left)\n    }\n\n    new_left = merge(new_left,\
    \ new_right, start, end)\n    if len(array) % 2 == 1 {\n        new_left = append(new_left,\
    \ array[mid])\n    }\n\n    return new_left\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlia2pud_test.go:45:8: undefined: sum

    /tmp/tmpxlia2pud_test.go:53:16: undefined: merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        if array[0] > array[len(array) -\
    \ 1] {\n            array[0], array[len(array) - 1] = array[len(array) - 1], array[0]\n\
    \        }\n        return append([]int{array[len(array) - 1]}, sort_array(array[:len(array)\
    \ - 1])...)\n    } else {\n        if array[0] < array[len(array) - 1] {\n   \
    \         array[0], array[len(array) - 1] = array[len(array) - 1], array[0]\n\
    \        }\n        return append([]int{array[len(array) - 1]}, sort_array(array[:len(array)\
    \ - 1])...)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp4cy_681v_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=5) %!s(int=0) %!s(int=3)\
    \ %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp4cy_681v_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=2) %!s(int=5) %!s(int=0)\
    \ %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp4cy_681v_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=15) %!s(int=11)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp4cy_681v_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=11) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    m := array[0]\
    \ + array[len(array) - 1]\n    if m % 2 == 0 {\n        for i := 0; i < len(array)\
    \ / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp76gnap9i_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp76gnap9i_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp76gnap9i_test.go:54: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp76gnap9i_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp76gnap9i_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // your code here...\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvdtlj3e8_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvdtlj3e8_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpvdtlj3e8_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpvdtlj3e8_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpvdtlj3e8_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n        return\
    \ array\n    }\n\n    start, end := 0, len(array) - 1\n    for start < end {\n\
    \        if (array[start] + array[end]) % 2 == 0 {\n            array[start],\
    \ array[end] = array[end], array[start]\n        }\n        start++\n        end--\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "PATCH list\n--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpu5gaa5_x_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpu5gaa5_x_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpu5gaa5_x_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpu5gaa5_x_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpu5gaa5_x_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        max := array[0]\n        maxi :=\
    \ 0\n        for i, v := range array {\n            if v > max {\n           \
    \     max = v\n                maxi = i\n            }\n        }\n        array[0],\
    \ array[maxi] = array[maxi], array[0]\n        array = append([]int{max}, array[1:]...)\n\
    \    } else {\n        min := array[0]\n        mini := 0\n        for i, v :=\
    \ range array {\n            if v < min {\n                min = v\n         \
    \       mini = i\n            }\n        }\n        array[0], array[mini] = array[mini],\
    \ array[0]\n        array = append([]int{min}, array[1:]...)\n    }\n    return\
    \ append(sort_array(array[:len(array) - 1]), array[len(array) - 1])\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmph6quh8zj_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=0) %!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmph6quh8zj_test.go:71: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmph6quh8zj_test.go:71: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=42) %!s(int=0) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmph6quh8zj_test.go:71: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=23) %!s(int=21) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    l := len(array)\n    if l == 0 {\n        return array\n    }\n    if\
    \ l < 2 {\n        return array\n    }\n    // use first and last index value\
    \ to calculate the sum\n    sum := array[0] + array[l-1]\n    if sum % 2 == 0\
    \ {\n        // sort in descending order\n        // sort.Slice(array, func(i,\
    \ j int) bool {\n        //     return array[i] > array[j]\n        // })\n  \
    \      quick_sort(array, 0, l-1)\n    } else {\n        // sort in ascending order\n\
    \        // sort.Slice(array, func(i, j int) bool {\n        //     return array[i]\
    \ < array[j]\n        // })\n        // sort.Ints(array)\n        merge_sort(array,\
    \ 0, l-1)\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9on4_69t_test.go:37:9: undefined: quick_sort

    /tmp/tmp9on4_69t_test.go:44:9: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    len := len(array)\n    first_last_sum := array[0] + array[len-1]\n  \
    \  if first_last_sum % 2 == 0 {\n        // even, sort array in descending order\n\
    \        for i := 0; i < len; i++ {\n            for j := i + 1; j < len; j++\
    \ {\n                if array[i] < array[j] {\n                    tmp := array[i]\n\
    \                    array[i] = array[j]\n                    array[j] = tmp\n\
    \                }\n            }\n        }\n    } else {\n        // odd, sort\
    \ array in ascending order\n        for i := 0; i < len; i++ {\n            for\
    \ j := i + 1; j < len; j++ {\n                if array[i] > array[j] {\n     \
    \               tmp := array[i]\n                    array[i] = array[j]\n   \
    \                 array[j] = tmp\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62a7e0?, 0x0?, 0xd0?})\n\t\
    /tmp/tmp80zdsxcs_test.go:24 +0xc5\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\
    \t/tmp/tmp80zdsxcs_test.go:58 +0x4d\ntesting.tRunner(0xc000199040, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ + array[1] % 2 == 0 {\n            array[0], array[1] = array[1], array[0]\n\
    \        }\n        return array\n    }\n    for i := 0; i < len(array); i++ {\n\
    \        for j := i; j < len(array); j++ {\n            if (array[i] + array[j])\
    \ % 2 == 0 {\n                array[i], array[j] = array[j], array[i]\n      \
    \      }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpcc_3m8mo_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpcc_3m8mo_test.go:64: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=0) %!s(int=5) %!s(int=4)\
    \ %!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpcc_3m8mo_test.go:64: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpcc_3m8mo_test.go:64: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=0) %!s(int=87)\
    \ %!s(int=32) %!s(int=15) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcc_3m8mo_test.go:64: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        return sort_desc(array)\n    }\n\
    \    return sort_asc(array)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo9bkjlso_test.go:27:16: undefined: sort_desc

    /tmp/tmpo9bkjlso_test.go:29:12: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    return []int{}\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__1\
    \ (0.00s)\n        tmpze4vf3jf_test.go:45: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]', got '[]'\n    --- FAIL: TestSort_Array/test_num__4 (0.00s)\n \
    \       tmpze4vf3jf_test.go:45: expected '[%!s(int=1) %!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=0) %!s(int=11) %!s(int=15) %!s(int=32) %!s(int=42) %!s(int=87)]',\
    \ got '[]'\n    --- FAIL: TestSort_Array/test_num__6 (0.00s)\n        tmpze4vf3jf_test.go:45:\
    \ expected '[%!s(int=23) %!s(int=21) %!s(int=14) %!s(int=11)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075113
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    // TODO: return a new sorted array.\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp1hzcyzmg_test.go:46: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp1hzcyzmg_test.go:46: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp1hzcyzmg_test.go:46: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp1hzcyzmg_test.go:46: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp1hzcyzmg_test.go:46: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    l := len(array)\n    if l <= 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[l-1]) % 2 == 0 {\n        // even\n        for i := 0; i <\
    \ l/2; i++ {\n            array[i], array[l-1-i] = array[l-1-i], array[i]\n  \
    \      }\n    } else {\n        // odd\n        i := 0\n        j := l - 1\n \
    \       for {\n            if i >= j {\n                break\n            }\n\
    \            array[i], array[j] = array[j], array[i]\n            i++\n      \
    \      j--\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpag7me0r8_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpag7me0r8_test.go:67: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpag7me0r8_test.go:67: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpag7me0r8_test.go:67: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] +\
    \ array[len(array) - 1]) % 2 == 0 {\n        for i, j := 0, len(array) - 1; i\
    \ < j; i, j = i + 1, j - 1 {\n            array[i], array[j] = array[j], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyw5ikb4__test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyw5ikb4__test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyw5ikb4__test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyw5ikb4__test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyw5ikb4__test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    fmt.Println(\"array length: \", len(array))\n    sum := array[0] + array[len(array)\
    \ - 1]\n    fmt.Println(\"sum: \", sum)\n    if sum % 2 == 0 {\n        fmt.Println(\"\
    it's even\")\n        for i := 0; i < len(array) / 2; i++ {\n            j :=\
    \ len(array) - 1 - i\n            fmt.Println(\"i: \", i, \" j: \", j)\n     \
    \       array[i], array[j] = array[j], array[i]\n        }\n    } else {\n   \
    \     fmt.Println(\"it's odd\")\n        for i := 0; i < len(array) / 2; i++ {\n\
    \            j := len(array) - 1 - i\n            fmt.Println(\"i: \", i, \" j:\
    \ \", j)\n            array[i], array[j] = array[j], array[i]\n        }\n   \
    \ }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "array length:  0\n--- FAIL: TestSort_Array (0.00s)\npanic: runtime error:\
    \ index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index\
    \ out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_array({0x62b7e0?, 0x0, 0x0})\n\t/tmp/tmpqn3h1z6k_test.go:24\
    \ +0x485\ncommand-line-arguments_test.TestSort_Array(0x0?)\n\t/tmp/tmpqn3h1z6k_test.go:51\
    \ +0x4d\ntesting.tRunner(0xc0001a0340, 0x529108)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    result := array\n\
    \    for i := len(result) - 1; i > 0; i-- {\n        for j := 0; j < i; j++ {\n\
    \            a := result[j]\n            b := result[j + 1]\n            if (a\
    \ + i) % 2 == 0 {\n                if a < b {\n                    result[j] =\
    \ b\n                    result[j + 1] = a\n                }\n            } else\
    \ {\n                if a > b {\n                    result[j] = b\n         \
    \           result[j + 1] = a\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp5kz9t2_2_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=3) %!s(int=4)\
    \ %!s(int=0) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp5kz9t2_2_test.go:66: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp5kz9t2_2_test.go:66: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=32) %!s(int=87)\
    \ %!s(int=42) %!s(int=15) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp5kz9t2_2_test.go:66: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=21) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    slice_sum := array[0]\
    \ + array[len(array) - 1]\n    if slice_sum % 2 == 0 {\n        // descending\n\
    \        sort_desc(array)\n    } else {\n        // ascending\n        sort_asc(array)\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc9nb55mi_test.go:29:9: undefined: sort_desc

    /tmp/tmpc9nb55mi_test.go:32:9: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    for i := 0; i < len(array); i++ {\n        for j := 0; j < len(array)\
    \ - 1; j++ {\n            if (i + j) & 1 == 0 {\n                if array[j] >\
    \ array[j + 1] {\n                    array[j], array[j + 1] = array[j + 1], array[j]\n\
    \                }\n            } else {\n                if array[j] < array[j\
    \ + 1] {\n                    array[j], array[j + 1] = array[j + 1], array[j]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpthxn3dlc_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=1)\
    \ %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpthxn3dlc_test.go:58: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=6) %!s(int=1) %!s(int=5)\
    \ %!s(int=2) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpthxn3dlc_test.go:58: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpthxn3dlc_test.go:58: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=87) %!s(int=0) %!s(int=42)\
    \ %!s(int=11) %!s(int=32) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpthxn3dlc_test.go:58: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=23) %!s(int=11) %!s(int=21) %!s(int=14)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return array\n    }\n    l := array[0]\n\
    \    r := array[len(array) - 1]\n    sum := l + r\n    if sum % 2 == 0 {\n   \
    \     // even sort\n        fmt.Println(\"even sort\")\n        for i := 0; i\
    \ < len(array); i++ {\n            for j := i; j < len(array); j++ {\n       \
    \         if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // odd sort\n        fmt.Println(\"odd sort\")\n        for i := 0; i < len(array);\
    \ i++ {\n            for j := i; j < len(array); j++ {\n                if array[i]\
    \ > array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) < 2 {\n        return array\n    }\n    odd, even := 0,\
    \ len(array) - 1\n    for {\n        for array[odd] % 2 == 1 {\n            odd++\n\
    \            if odd == len(array) - 1 {\n                break\n            }\n\
    \        }\n        for array[even] % 2 == 0 {\n            even--\n         \
    \   if even == 0 {\n                break\n            }\n        }\n        if\
    \ odd >= even {\n            break\n        }\n        array[odd], array[even]\
    \ = array[even], array[odd]\n    }\n    odd++\n    for i := 0; i < odd; i++ {\n\
    \        for j := i + 1; j < odd; j++ {\n            if array[i] > array[j] {\n\
    \                array[i], array[j] = array[j], array[i]\n            }\n    \
    \    }\n    }\n    for i := odd; i < len(array); i++ {\n        for j := i + 1;\
    \ j < len(array); j++ {\n            if array[i] < array[j] {\n              \
    \  array[i], array[j] = array[j], array[i]\n            }\n        }\n    }\n\
    \    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp90h97k1m_test.go:82: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=5)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp90h97k1m_test.go:82: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=5)\
    \ %!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp90h97k1m_test.go:82: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=11) %!s(int=15) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp90h97k1m_test.go:82: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a list of non-negative integers, return a cogo of the given list after\
    \ sorting,\n// you will sort the given list in ascending order if the sum( first\
    \ index value, last index value) is odd,\n// or sort it in descending order if\
    \ the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH\
    \ list\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4,\
    \ 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0,\
    \ 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int\
    \ {\n    if len(array) == 0 {\n        return nil\n    }\n    if len(array) ==\
    \ 1 {\n        return array\n    }\n    var sum int\n    for index, _ := range\
    \ array {\n        sum += array[index]\n    }\n    // odd and even\n    if sum\
    \ % 2 == 0 {\n        return descending_array(array)\n    } else {\n        return\
    \ ascending_array(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzk638m92_test.go:35:16: undefined: descending_array

    /tmp/tmpzk638m92_test.go:37:16: undefined: ascending_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075124
