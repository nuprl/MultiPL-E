language: go_test.go
name: HumanEval_86_anti_shuffle
results:
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := getWords(s)\n    for i, w := range words {\n        words[i] = sortString(w)\n\
    \    }\n    return joinString(words)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptet3zdg2_test.go:21:14: undefined: getWords

    /tmp/tmptet3zdg2_test.go:23:20: undefined: sortString

    /tmp/tmptet3zdg2_test.go:25:12: undefined: joinString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    l := len(s)\n    var chars [][]byte\n    var words []string\n    var buffer\
    \ []byte\n    var j int\n    for i := 0; i < l; i++ {\n        switch s[i] {\n\
    \        case ' ':\n            chars = append(chars, buffer)\n            buffer\
    \ = make([]byte, 0)\n            words = append(words, string(chars[j]))\n   \
    \         j++\n        default:\n            buffer = append(buffer, s[i])\n \
    \       }\n    }\n    chars = append(chars, buffer)\n    words = append(words,\
    \ string(chars[j]))\n    j++\n    for i := 0; i < j; i++ {\n        quickSort(chars[i])\n\
    \    }\n    for i := 0; i < j; i++ {\n        words[i] = string(chars[i])\n  \
    \  }\n    return fmt.Sprint(words)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvm462gl1_test.go:41:9: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var err error\n    var arr []string\n    var i int\n\
    \n    arr = strings.Split(s, \" \")\n    for _, item := range arr {\n        result\
    \ += sort_string(item)\n        if i < len(arr) - 1 {\n            result += \"\
    \ \"\n        }\n        i++\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrqdk9wx_test.go:22:9: err declared but not used

    /tmp/tmpqrqdk9wx_test.go:26:11: undefined: strings

    /tmp/tmpqrqdk9wx_test.go:28:19: undefined: sort_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpocbdzlpt_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpocbdzlpt_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpocbdzlpt_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpocbdzlpt_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpocbdzlpt_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpocbdzlpt_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Init stack data \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdwvl3mco_test.go:22:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    r := []rune(s)\n    for i := 0; i < len(r); i++ {\n        //fmt.Println(r[i])\n\
    \        if r[i] == ' ' {\n            //fmt.Println(\"space\")\n            continue\n\
    \        }\n        j := i + 1\n        for ; j < len(r); j++ {\n            if\
    \ r[j] == ' ' {\n                break\n            }\n        }\n        fmt.Println(r[i:j])\n\
    \        if j-i > 1 {\n            slice := r[i:j]\n            for k := i; k\
    \ < j; k++ {\n                fmt.Println(k)\n                for l := k+1; l\
    \ < j; l++ {\n                    fmt.Println(l)\n                    if slice[k]\
    \ > slice[l] {\n                        fmt.Println(\"swap\")\n              \
    \          slice[k], slice[l] = slice[l], slice[k]\n                    }\n  \
    \              }\n            }\n            i = j - 1\n        }\n    }\n   \
    \ return string(r)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[72 105]\n0\n1\n1\n[104 101 108 108 111]\n0\n1\nswap\n2\n3\n4\n1\n2\n3\n\
    4\n2\n3\n4\n3\n4\n4\n[110 117 109 98 101 114]\n0\n1\n2\nswap\n3\nswap\n4\n5\n\
    1\n2\nswap\n3\nswap\n4\nswap\n5\n2\n3\nswap\n4\nswap\n5\n3\n4\nswap\n5\n4\n5\n\
    swap\n5\n[97 98 99 100]\n0\n1\n2\n3\n1\n2\n3\n2\n3\n3\n[72 101 108 108 111]\n\
    0\n1\n2\n3\n4\n1\n2\n3\n4\n2\n3\n4\n3\n4\n4\n[87 111 114 108 100 33 33 33]\n6\n\
    7\n8\n--- FAIL: TestAnti_Shuffle (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.anti_shuffle({0x5201e0?, 0xc0000f8de8?})\n\
    \t/tmp/tmprx0ia_cj_test.go:41 +0x325\ncommand-line-arguments_test.TestAnti_Shuffle(0x0?)\n\
    \t/tmp/tmprx0ia_cj_test.go:64 +0xf1\ntesting.tRunner(0xc000192680, 0x528fd0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var newString string\n    array := []rune(s)\n    for i := 0; i < len(array);\
    \ i++ {\n        if string(array[i]) == \" \" {\n            newString += \" \"\
    \n        } else {\n            for j := i; j < len(array); j++ {\n          \
    \      if string(array[j]) == \" \" {\n                    break\n           \
    \     }\n                for k := j; k < len(array); k++ {\n                 \
    \   if string(array[k]) > string(array[j]) {\n                        array[j],\
    \ array[k] = array[k], array[j]\n                    }\n                }\n  \
    \          }\n            newString += string(array[i])\n        }\n    }\n  \
    \  return newString\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp5rbk3q_1_test.go:62: expected 'Hi', got 'iH'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp5rbk3q_1_test.go:62: expected\
    \ 'ehllo', got 'ollhe'\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n \
    \       tmp5rbk3q_1_test.go:62: expected 'bemnru', got 'urnmeb'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__3 (0.00s)\n        tmp5rbk3q_1_test.go:62: expected\
    \ 'abcd', got 'dcba'\n    --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n   \
    \     tmp5rbk3q_1_test.go:62: expected 'Hello !!!Wdlor', got 'rooll ledWH!!!'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5rbk3q_1_test.go:62:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'yyw ut tssr ro ooonmi\
    \ iieeeb aaR MMH H?..'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Do not delete this line.\n    defer fmt.Println(s)\n    return \"\"\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpqyl7e_ci_test.go:45: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpqyl7e_ci_test.go:45: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpqyl7e_ci_test.go:45: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpqyl7e_ci_test.go:45: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpqyl7e_ci_test.go:45: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpqyl7e_ci_test.go:45: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    word := \"\"\n    result := \"\"\n    for _, c :=\
    \ range s {\n        switch c {\n        case ' ':\n            if word != \"\"\
    \ {\n                words = append(words, word)\n                word = \"\"\n\
    \            }\n            result += \" \"\n        default:\n            word\
    \ += string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words,\
    \ word)\n    }\n    for _, w := range words {\n        sorted := []byte(w)\n \
    \       for i := 0; i < len(sorted) - 1; i++ {\n            for j := i + 1; j\
    \ < len(sorted); j++ {\n                if sorted[i] > sorted[j] {\n         \
    \           sorted[i], sorted[j] = sorted[j], sorted[i]\n                }\n \
    \           }\n        }\n        result += string(sorted)\n    }\n    return\
    \ result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpyk9dyt5i_test.go:72: expected 'Hello !!!Wdlor', got ' Hello!!!Wdlor'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpyk9dyt5i_test.go:72:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '        .HiMyaemnisMeirst.RbootHowaer?ouy'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    arr := []byte(s)\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ == 32 {\n            continue\n        }\n        for j := i + 1; j < len(arr);\
    \ j++ {\n            if arr[j] == 32 {\n                break\n            }\n\
    \            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return string(arr)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp9p0nhnyd_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp9p0nhnyd_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp9p0nhnyd_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp9p0nhnyd_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp9p0nhnyd_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp9p0nhnyd_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var str string\n    for _, word := range split_string(s) {\n        str +=\
    \ sort_string(word)\n    }\n    return str\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifsot908_test.go:22:26: undefined: split_string

    /tmp/tmpifsot908_test.go:23:16: undefined: sort_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var c []byte\n    runes := []rune(s)\n    for _, r := range runes {\n   \
    \     if r == ' ' {\n            c = append(c, r)\n        } else {\n        \
    \    c = append(c, bytes(rune(r))...)\n        }\n    }\n    c = bubble_sort(c)\n\
    \    i := 0\n    for j := 0; j < len(runes); j++ {\n        if runes[j] == ' '\
    \ {\n            runes[j] = ' '\n        } else {\n            runes[j] = rune(c[i])\n\
    \            i++\n        }\n    }\n    return string(runes)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83it_f8g_test.go:25:27: cannot use r (variable of type rune) as type byte
    in argument to append

    /tmp/tmp83it_f8g_test.go:27:27: undefined: bytes

    /tmp/tmp83it_f8g_test.go:30:9: undefined: bubble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Remove the below code and implement!\n    return \"\"\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpfdw0r9d3_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpfdw0r9d3_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpfdw0r9d3_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpfdw0r9d3_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpfdw0r9d3_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpfdw0r9d3_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result []string\n    a := []byte(s)\n    for i := 0; i < len(a); i++\
    \ {\n        if a[i] == ' ' {\n            result = append(result, \" \")\n  \
    \      } else {\n            temp := []byte{a[i]}\n            for j := i + 1;\
    \ j < len(a); j++ {\n                if a[j] == ' ' {\n                    i =\
    \ j\n                    break\n                } else {\n                   \
    \ temp = append(temp, a[j])\n                }\n            }\n            result\
    \ = append(result, string(sort(temp)))\n        }\n    }\n    return fmt.Sprintf(\"\
    %s\", result)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw4zhp8pf_test.go:36:44: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \tfmt.Println(s)\n\treturn s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpx5ibj_0g_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpx5ibj_0g_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpx5ibj_0g_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpx5ibj_0g_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var r string\n    for _, str := range s {\n        fmt.Println(str)\n   \
    \ }\n    return r\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "72\n105\n104\n101\n108\n108\n111\n110\n117\n109\n98\n101\n114\n97\n98\n\
    99\n100\n72\n101\n108\n108\n111\n32\n87\n111\n114\n108\n100\n33\n33\n33\n72\n\
    105\n46\n32\n77\n121\n32\n110\n97\n109\n101\n32\n105\n115\n32\n77\n105\n115\n\
    116\n101\n114\n32\n82\n111\n98\n111\n116\n46\n32\n72\n111\n119\n32\n97\n114\n\
    101\n32\n121\n111\n117\n63\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__0 (0.00s)\n        tmpa0sblukb_test.go:47: expected\
    \ 'Hi', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa0sblukb_test.go:47:\
    \ expected 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n\
    \        tmpa0sblukb_test.go:47: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa0sblukb_test.go:47: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa0sblukb_test.go:47: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa0sblukb_test.go:47: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if s == \"\" {\n        return \"\"\n    }\n    // Extract words and convert\
    \ them to byte slice (to be able to sort bytes)\n    words := make([][]byte, 0)\n\
    \    wordStart := 0\n    for i, c := range s {\n        if c == ' ' {\n      \
    \      words = append(words, []byte(s[wordStart:i]))\n            wordStart =\
    \ i + 1\n        }\n    }\n    words = append(words, []byte(s[wordStart:]))\n\n\
    \    for _, word := range words {\n        for i := 0; i < len(word) - 1; i++\
    \ {\n            minIndex := i\n            for j := i + 1; j < len(word); j++\
    \ {\n                if word[j] < word[minIndex] {\n                    minIndex\
    \ = j\n                }\n            }\n            word[i], word[minIndex] =\
    \ word[minIndex], word[i]\n        }\n    }\n\n    // Restore the string from\
    \ words\n    result := \"\"\n    for i, word := range words {\n        if i !=\
    \ 0 {\n            result += \" \"\n        }\n        result += string(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    res := \"\"\n    var idx int\n    for i, c := range s {\n        if c ==\
    \ ' ' {\n            res += sort_word(s[idx:i]) + \" \"\n            idx = i +\
    \ 1\n        }\n    }\n    res += sort_word(s[idx:])\n    return res\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbcq1prh8_test.go:25:20: undefined: sort_word

    /tmp/tmpbcq1prh8_test.go:29:12: undefined: sort_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \tvar tmp [][]rune\n\tvar word []rune\n\tvar result []rune\n\tfor _, letter :=\
    \ range s {\n\t\tswitch letter {\n\t\tcase ' ':\n\t\t\ttmp = append(tmp, word)\n\
    \t\t\ttmp = append(tmp, []rune{' '})\n\t\t\tword = nil\n\t\tdefault:\n\t\t\tword\
    \ = append(word, letter)\n\t\t}\n\t}\n\ttmp = append(tmp, word)\n\tfor _, t :=\
    \ range tmp {\n\t\tif len(t) == 1 {\n\t\t\tresult = append(result, t[0])\n\t\t\
    } else {\n\t\t\tfor _, l := range t {\n\t\t\t\tfor i, r := range result {\n\t\t\
    \t\t\tif r > l {\n\t\t\t\t\t\tresult = append(result, ' ')\n\t\t\t\t\t\tcopy(result[i+1:],\
    \ result[i:])\n\t\t\t\t\t\tresult[i] = l\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn string(result)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp77jm1df4_test.go:73: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp77jm1df4_test.go:73: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp77jm1df4_test.go:73: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp77jm1df4_test.go:73: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp77jm1df4_test.go:73: expected\
    \ 'Hello !!!Wdlor', got ' '\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp77jm1df4_test.go:73: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got '        '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    length := len(s)\n    if length == 0 {\n        return \"\"\n    }\n    result\
    \ := make([]byte, length)\n    var prev_space bool\n    i := 0\n    j := 0\n \
    \   for i < length {\n        if s[i] == ' ' {\n            result[j] = ' '\n\
    \            prev_space = true\n            i++\n            j++\n        } else\
    \ {\n            if prev_space {\n                prev_space = false\n       \
    \         l := i\n                for i < length && s[i] != ' ' {\n          \
    \          i++\n                }\n                word := make([]byte, i - l)\n\
    \                for k := 0; k < i - l; k++ {\n                    word[k] = s[l\
    \ + k]\n                }\n                for k := 0; k < i - l; k++ {\n    \
    \                min := k\n                    for u := k + 1; u < i - l; u++\
    \ {\n                        if word[u] < word[min] {\n                      \
    \      min = u\n                        }\n                    }\n           \
    \         temp := word[k]\n                    word[k] = word[min]\n         \
    \           word[min] = temp\n                }\n                for k := 0; k\
    \ < i - l; k++ {\n                    result[j] = word[k]\n                  \
    \  j++\n                }\n            } else {\n                result[j] = s[i]\n\
    \                i++\n                j++\n            }\n        }\n    }\n \
    \   return string(result[:j])\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp_eqs8a4r_test.go:90: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp_eqs8a4r_test.go:90:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__6\
    \ (0.00s)\n        tmp_eqs8a4r_test.go:90: expected '.Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy', got 'Hi. My aemn is Meirst .Rboot How aer ?ouy'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var r []rune\n    var result []rune\n    copy(r, s)\n    var temp []rune\n\
    \    for i := 0; i < len(r); i++ {\n        if r[i] == ' ' {\n            temp\
    \ = []rune{}\n            result = append(result, r[i])\n        } else {\n  \
    \          temp = append(temp, r[i])\n            for j := i + 1; j < len(r);\
    \ j++ {\n                if r[j] == ' ' {\n                    break\n       \
    \         }\n                temp = append(temp, r[j])\n                i++\n\
    \            }\n            var temp2 []rune\n            copy(temp2, temp)\n\
    \            temp = []rune{}\n            temp = temp2\n            result = append(result,\
    \ sort(temp)...)\n        }\n    }\n    return string(result)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx45esiiz_test.go:23:10: invalid argument: arguments to copy r (variable
    of type []rune) and s (variable of type string) have different element types rune
    and byte

    /tmp/tmpx45esiiz_test.go:42:37: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var b []byte\n    b = []byte(s)\n    for i := 0; i < len(b); i++ {\n    \
    \    if b[i] == ' ' {\n            continue\n        }\n        for j := i + 1;\
    \ j < len(b); j++ {\n            if b[j] == ' ' {\n                continue\n\
    \            }\n            if b[i] > b[j] {\n                b[i], b[j] = b[j],\
    \ b[i]\n            }\n        }\n    }\n    return string(b)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp1bt954rr_test.go:58: expected 'Hello !!!Wdlor', got '!!!HW\
    \ dellloor'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp1bt954rr_test.go:58:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '..? HH MMRa ab eeeiii\
    \ mnoooo rrs stt uwyy'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // write your code here\n    if s == \"\" {\n        return \"\"\n    }\n\
    \    str := []byte(s)\n    left := 0\n    right := 0\n    for left <= len(str)\
    \ - 1 {\n        if str[left] == ' ' {\n            left++\n            right++\n\
    \            continue\n        }\n        if right == len(str) - 1 || str[right\
    \ + 1] == ' ' {\n            reverse(str, left, right)\n            left = right\
    \ + 1\n            right = left\n        } else {\n            right++\n     \
    \   }\n    }\n    return string(str)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5gg5qrd0_test.go:35:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpivpnhtbc_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpivpnhtbc_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpivpnhtbc_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpivpnhtbc_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"TODO\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpqhdvwas8_test.go:43: expected 'Hi', got 'TODO'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpqhdvwas8_test.go:43:\
    \ expected 'ehllo', got 'TODO'\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n\
    \        tmpqhdvwas8_test.go:43: expected 'bemnru', got 'TODO'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__3 (0.00s)\n        tmpqhdvwas8_test.go:43: expected\
    \ 'abcd', got 'TODO'\n    --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n   \
    \     tmpqhdvwas8_test.go:43: expected 'Hello !!!Wdlor', got 'TODO'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__5 (0.00s)\n        tmpqhdvwas8_test.go:43: expected\
    \ '', got 'TODO'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n       \
    \ tmpqhdvwas8_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer ?ouy',\
    \ got 'TODO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n    for i := 1; i < len(s); i++\
    \ {\n        for j := i; j > 0 && s[j-1] > s[j]; j-- {\n            s = swap(s,\
    \ j-1, j)\n        }\n    }\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pzoc533_test.go:26:17: undefined: swap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if s == \"\" {\n        return \"\"\n    }\n    s_ascii := make([]byte, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        s_ascii = append(s_ascii, s[i])\n\
    \    }\n    i := 0\n    for i < len(s_ascii) {\n        j := i + 1\n        for\
    \ j < len(s_ascii) && s_ascii[j] != 32 {\n            j++\n        }\n       \
    \ merge_sort(s_ascii[i:j])\n        i = j + 1\n    }\n    return string(s_ascii)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub2el9v3_test.go:34:9: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range split_string(s) {\n        result\
    \ += sort_word(word)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpflea5lgt_test.go:22:26: undefined: split_string

    /tmp/tmpflea5lgt_test.go:23:19: undefined: sort_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n\n    words := make([]string,\
    \ 0)\n    word := make([]byte, 0)\n    for i := 0; i < len(s); i++ {\n       \
    \ if s[i] == ' ' {\n            if len(word) > 0 {\n                words = append(words,\
    \ string(word))\n                word = make([]byte, 0)\n            }\n     \
    \       words = append(words, \" \")\n        } else {\n            word = append(word,\
    \ s[i])\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ string(word))\n    }\n\n    result := make([]byte, 0)\n    for _, w := range\
    \ words {\n        if w == \" \" {\n            result = append(result, w[0])\n\
    \        } else {\n            result = append(result, anti_shuffle_helper(w)...)\n\
    \        }\n    }\n\n    return string(result)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbd_pkitc_test.go:47:37: undefined: anti_shuffle_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n\n    if len(s) == 1 {\n  \
    \      return s\n    }\n\n    newStr := \"\"\n    tmpStr := \"\"\n    for _, ch\
    \ := range s {\n        if ch == ' ' {\n            if len(tmpStr) > 0 {\n   \
    \             newStr += string(sortStr(tmpStr))\n                tmpStr = \"\"\
    \n            }\n            newStr += string(ch)\n        } else {\n        \
    \    tmpStr += string(ch)\n        }\n    }\n\n    if len(tmpStr) > 0 {\n    \
    \    newStr += string(sortStr(tmpStr))\n    }\n\n    return newStr\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6iun_zn2_test.go:34:34: undefined: sortStr

    /tmp/tmp6iun_zn2_test.go:44:26: undefined: sortStr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    runes := []rune(s)\n    if len(runes) <= 1 {\n        return s\n    }\n \
    \   var result string\n    var temp string\n    for i := 0; i < len(runes); i++\
    \ {\n        temp = temp + string(runes[i])\n        if temp == \" \" {\n    \
    \        result = result + temp\n            temp = \"\"\n        } else if i\
    \ == len(runes) - 1 {\n            result = result + string(sortChar(temp))\n\
    \        } else if runes[i+1] == ' ' {\n            result = result + string(sortChar(temp))\n\
    \            temp = \"\"\n        }\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpntvmyrxs_test.go:33:38: undefined: sortChar

    /tmp/tmpntvmyrxs_test.go:35:38: undefined: sortChar

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075010
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \t// slice of runes\n\twords := []string{}\n\tword := []rune{}\n\tw := []rune{}\n\
    \tstr := []rune(s)\n\tfor _, r := range str {\n\t\tif r == ' ' {\n\t\t\tif len(word)\
    \ > 0 {\n\t\t\t\tw = []rune{}\n\t\t\t\tfor _, r2 := range word {\n\t\t\t\t\tw\
    \ = append(w, r2)\n\t\t\t\t}\n\t\t\t\twords = append(words, string(w))\n\t\t\t\
    \tword = []rune{}\n\t\t\t}\n\t\t\twords = append(words, \" \")\n\t\t} else {\n\
    \t\t\tword = append(word, r)\n\t\t}\n\t}\n\tif len(word) > 0 {\n\t\tw = []rune{}\n\
    \t\tfor _, r2 := range word {\n\t\t\tw = append(w, r2)\n\t\t}\n\t\twords = append(words,\
    \ string(w))\n\t}\n\tstr = []rune{}\n\tfor _, s := range words {\n\t\tif s ==\
    \ \" \" {\n\t\t\tstr = append(str, []rune(s)...)\n\t\t} else {\n\t\t\tw = []rune{}\n\
    \t\t\tfor _, r := range s {\n\t\t\t\tw = append(w, r)\n\t\t\t}\n\t\t\tfor {\n\t\
    \t\t\tchange := false\n\t\t\t\tfor i := 0; i < len(w)-1; i++ {\n\t\t\t\t\tif w[i]\
    \ > w[i+1] {\n\t\t\t\t\t\tw[i], w[i+1] = w[i+1], w[i]\n\t\t\t\t\t\tchange = true\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif !change {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tstr = append(str, w...)\n\t\t}\n\t}\n\treturn string(str)\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \treturn \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2pqfk4n__test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2pqfk4n__test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2pqfk4n__test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2pqfk4n__test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2pqfk4n__test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2pqfk4n__test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code goes here\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpbemk7y4m_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpbemk7y4m_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpbemk7y4m_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpbemk7y4m_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result = \"\"\n    var word = \"\"\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            result += word + \" \"\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmptgg1epx8_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmptgg1epx8_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmptgg1epx8_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmptgg1epx8_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code goes here\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpbemk7y4m_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpbemk7y4m_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpbemk7y4m_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpbemk7y4m_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    b := make([]byte, len(s))\n    copy(b, s)\n    var acc, tmp []byte\n    for\
    \ _, c := range b {\n        if c == ' ' {\n            for _, c := range acc\
    \ {\n                tmp = append(tmp, c)\n            }\n            tmp = append(tmp,\
    \ ' ')\n            acc = nil\n        } else {\n            acc = append(acc,\
    \ c)\n        }\n    }\n    sort.Slice(acc, func(i, j int) bool { return acc[i]\
    \ < acc[j] })\n    for _, c := range acc {\n        tmp = append(tmp, c)\n   \
    \ }\n    return string(tmp)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppvg9nlq8_test.go:35:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpocbdzlpt_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpocbdzlpt_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpocbdzlpt_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpocbdzlpt_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpocbdzlpt_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpocbdzlpt_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n    r := []rune(s)\n    start\
    \ := 0\n    end := 0\n    result := \"\"\n    for i := 0; i < len(r); i++ {\n\
    \        if r[i] == ' ' {\n            result += sort(r[start:end]) + \" \"\n\
    \            start = i + 1\n            end = i + 1\n        } else {\n      \
    \      end++\n        }\n    }\n    result += sort(r[start:end])\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3omhga4_test.go:30:23: undefined: sort

    /tmp/tmpa3omhga4_test.go:37:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var temp []rune\n    for _, v := range s {\n     \
    \   if string(v) == \" \" {\n            for _, v := range temp {\n          \
    \      result += string(v)\n            }\n            result += \" \"\n     \
    \       temp = temp[:0]\n        } else {\n            temp = append(temp, v)\n\
    \        }\n    }\n    for _, v := range temp {\n        result += string(v)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp1_kibr1f_test.go:59: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp1_kibr1f_test.go:59:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp1_kibr1f_test.go:59: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp1_kibr1f_test.go:59:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n    if len(s) == 1 {\n    \
    \    return s\n    }\n    var sWords []string\n    var sWordsLen int\n    var\
    \ str = \"\"\n    var sWord string\n    var sWordLen int\n    var sWordStr string\n\
    \    var startIdx = 0\n    var endIdx = 0\n    for endIdx < len(s) {\n       \
    \ if s[endIdx] == ' ' {\n            sWord = s[startIdx:endIdx]\n            sWordLen\
    \ = len(sWord)\n            if sWordLen > 0 {\n                sWords = append(sWords,\
    \ sWord)\n                sWordsLen += 1\n            }\n            startIdx\
    \ = endIdx + 1\n        }\n        endIdx += 1\n    }\n    if startIdx < len(s)\
    \ {\n        sWord = s[startIdx:endIdx]\n        sWordLen = len(sWord)\n     \
    \   if sWordLen > 0 {\n            sWords = append(sWords, sWord)\n          \
    \  sWordsLen += 1\n        }\n    }\n    for _, sWord = range sWords {\n     \
    \   sWordStr = sortString(sWord)\n        str += sWordStr\n        str += \" \"\
    \n    }\n    return str[:len(str)-1]\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1mb_hsq2_test.go:56:20: undefined: sortString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    bytes := []byte(s)\n    for i := 0; i < len(bytes); i++ {\n        for j\
    \ := 0; j < len(bytes) - 1; j++ {\n            if bytes[j] > bytes[j + 1] {\n\
    \                temp := bytes[j]\n                bytes[j] = bytes[j + 1]\n \
    \               bytes[j + 1] = temp\n            }\n        }\n    }\n    return\
    \ string(bytes)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpwmgam64t_test.go:53: expected 'Hello !!!Wdlor', got ' !!!HWdellloor'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpwmgam64t_test.go:53:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '        ..?HHMMRaabeeeiiimnoooorrssttuwyy'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    w := \"\"\n    a := []rune(s)\n    for i := 0; i < len(a); i++ {\n      \
    \  if a[i] == ' ' {\n            w += \" \"\n        } else {\n            word\
    \ := string(a[i])\n            for j := i + 1; j < len(a); j++ {\n           \
    \     if a[j] == ' ' {\n                    break\n                }\n       \
    \         word += string(a[j])\n            }\n            w += sortedString(word)\n\
    \            i += len(word) - 1\n        }\n    }\n    return w\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1pxhdyxl_test.go:34:18: undefined: sortedString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpe9ktxl77_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpe9ktxl77_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpe9ktxl77_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpe9ktxl77_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    t := make([]byte, len(s))\n    j := 0\n    start := 0\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == ' ' {\n            copy(t[j:], s[start:i])\n\
    \            j += i - start\n            t[j] = ' '\n            j++\n       \
    \     start = i + 1\n        }\n    }\n    copy(t[j:], s[start:])\n    j += len(s)\
    \ - start\n    t = t[:j]\n    j = 0\n    for i := 0; i < len(t); i++ {\n     \
    \   if t[i] == ' ' {\n            sorted := sort_slice(t[j:i])\n            copy(t[j:],\
    \ sorted)\n            j = i + 1\n        }\n    }\n    sorted := sort_slice(t[j:])\n\
    \    copy(t[j:], sorted)\n    return string(t)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp54qy6ea7_test.go:39:23: undefined: sort_slice

    /tmp/tmp54qy6ea7_test.go:44:15: undefined: sort_slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code goes here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpp2if63h1_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpp2if63h1_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpp2if63h1_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpp2if63h1_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpp2if63h1_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpp2if63h1_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    for _, word := range(Split(s)) {\n        res += SortString(word)\n\
    \    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqlazhjv_test.go:22:26: undefined: Split

    /tmp/tmpzqlazhjv_test.go:23:16: undefined: SortString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    //TODO: Place your code here\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkjqwg7yq_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n\
    \        }\n        // j := i + 1\n        // for j < len(s) && s[j] != ' ' {\n\
    \        //     j++\n        // }\n        // words := s[i:j]\n        // s[i:j]\
    \ = []byte(sort_str(words))\n        // i = j\n    }\n    return s\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp4yf6zv77_test.go:55: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp4yf6zv77_test.go:55:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp4yf6zv77_test.go:55: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp4yf6zv77_test.go:55:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpgcu5u9oh_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpgcu5u9oh_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpgcu5u9oh_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpgcu5u9oh_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result []byte\n    var current_word []byte\n    for i := 0; i < len(s);\
    \ i++ {\n        if string(s[i]) == \" \" {\n            result = append(result,\
    \ current_word...)\n            result = append(result, ' ')\n            current_word\
    \ = []byte{}\n        } else {\n            current_word = append(current_word,\
    \ s[i])\n        }\n    }\n    result = append(result, current_word...)\n    return\
    \ string(result)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpz4ac9btr_test.go:55: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpz4ac9btr_test.go:55:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpz4ac9btr_test.go:55: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpz4ac9btr_test.go:55:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := get_words(s)\n    sorted_words := make([]string, len(words))\n \
    \   for i, word := range words {\n        chars := get_chars(word)\n        sorted_chars\
    \ := ascii_sorted(chars)\n        sorted_words[i] = string(sorted_chars)\n   \
    \ }\n    return combine_words(sorted_words)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqai4m8n_test.go:21:14: undefined: get_words

    /tmp/tmpfqai4m8n_test.go:24:18: undefined: get_chars

    /tmp/tmpfqai4m8n_test.go:25:25: undefined: ascii_sorted

    /tmp/tmpfqai4m8n_test.go:28:12: undefined: combine_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var letter rune\n    var new_word = []rune{}\n    var output = []rune{}\n\
    \    for _, letter = range s {\n        if letter == ' ' {\n            output\
    \ = append(output, letter)\n            output = append(output, new_word...)\n\
    \            new_word = []rune{}\n        } else {\n            new_word = append(new_word,\
    \ letter)\n        }\n    }\n    output = append(output, new_word...)\n    return\
    \ string(output)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpn2hdhfiu_test.go:56: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpn2hdhfiu_test.go:56:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpn2hdhfiu_test.go:56: expected 'Hello !!!Wdlor', got ' HelloWorld!!!'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpn2hdhfiu_test.go:56:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got ' Hi. My name is Mister\
    \ Robot. How areyou?'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement this function\n    return s\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpi727ouvw_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpi727ouvw_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpi727ouvw_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpi727ouvw_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    r := []rune(s)\n    l := len(r)\n    last := -1\n    ans := make([]rune,\
    \ l)\n    for i := 0; i < l; i++ {\n        if is_letter(r[i]) {\n           \
    \ wl := i - last - 1\n            if wl > 0 {\n                ans[last+1] = '\
    \ '\n            }\n            w := make([]rune, wl)\n            copy(w, r[last+1:i])\n\
    \            sort_word(w)\n            j := last + 1\n            for _, v :=\
    \ range w {\n                ans[j] = v\n                j++\n            }\n\
    \            last = i\n        }\n        ans[i] = r[i]\n    }\n    return string(ans)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf4ybf_8b_test.go:26:12: undefined: is_letter

    /tmp/tmpf4ybf_8b_test.go:33:13: undefined: sort_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmps39td4vf_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmps39td4vf_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmps39td4vf_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmps39td4vf_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmps39td4vf_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmps39td4vf_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpgcu5u9oh_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpgcu5u9oh_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpgcu5u9oh_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpgcu5u9oh_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    var word string\n    for _, ch := range s {\n  \
    \      if ch == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n\
    \    if word != \"\" {\n        words = append(words, word)\n    }\n    for i,\
    \ word := range words {\n        words[i] = anti_shuffle_word(word)\n    }\n \
    \   return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ni4vzyd_test.go:35:20: undefined: anti_shuffle_word

    /tmp/tmp3ni4vzyd_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    t := []rune(s)\n    for i := 0; i < len(t); i++ {\n        if t[i] == ' '\
    \ {\n            continue\n        }\n\n        prev := i\n        for j := i\
    \ + 1; j < len(t); j++ {\n            if t[j] == ' ' {\n                break\n\
    \            }\n\n            if t[j] < t[prev] {\n                prev = j\n\
    \            }\n        }\n\n        if prev != i {\n            tmp := t[i]\n\
    \            t[i] = t[prev]\n            t[prev] = tmp\n        }\n    }\n\n \
    \   return string(t)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code goes here\n    var (\n        spaces []int\n        words [][]byte\n\
    \    )\n    buf := []byte(s)\n    for i, c := range buf {\n        if c == ' '\
    \ {\n            spaces = append(spaces, i)\n        }\n    }\n    spaces = append(spaces,\
    \ len(buf))\n    var j int\n    for i, n := range spaces {\n        words = append(words,\
    \ buf[j:n])\n        j = n + 1\n        if i == len(spaces) - 1 {\n          \
    \  break\n        }\n    }\n    sort_words := func(x, y []byte) bool {\n     \
    \   if len(x) != len(y) {\n            return len(x) < len(y)\n        }\n   \
    \     for i := 0; i < len(x); i++ {\n            if x[i] != y[i] {\n         \
    \       return x[i] < y[i]\n            }\n        }\n        return false\n \
    \   }\n    var i int\n    for j, w := range words {\n        if i < j {\n    \
    \        words[i], words[j] = words[j], words[i]\n        }\n        for i < j\
    \ && sort_words(words[i], w) {\n            i++\n        }\n    }\n    return\
    \ string(buf)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpj3bagwqi_test.go:83: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpj3bagwqi_test.go:83:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpj3bagwqi_test.go:83: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpj3bagwqi_test.go:83:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // split the string into words\n    wordList := split(s)\n    // sort and\
    \ join the characters in each word\n    for i, word := range wordList {\n    \
    \    wordList[i] = sort(word)\n    }\n    // join the words with space as separator\n\
    \    return join(wordList)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wkoxch3_test.go:22:17: undefined: split

    /tmp/tmp0wkoxch3_test.go:25:23: undefined: sort

    /tmp/tmp0wkoxch3_test.go:28:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // First, split the string into words\n    // Then, we sort the characters\
    \ of each word\n    // Finally, we return the joined string\n    return \"\"\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpt1omcm_5_test.go:46: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpt1omcm_5_test.go:46: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpt1omcm_5_test.go:46: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpt1omcm_5_test.go:46: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpt1omcm_5_test.go:46: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpt1omcm_5_test.go:46: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return anti_shuffle_2(s)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprz6v8kq5_test.go:21:12: undefined: anti_shuffle_2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var is_char bool\n    var temp_arr []string\n    var temp_str string\n  \
    \  var fin string\n    var i, j int\n    var temp_char byte\n    temp_arr = []string{}\n\
    \    temp_str = \"\"\n    is_char = false\n    for i = 0; i < len(s); i++ {\n\
    \        if s[i] == ' ' {\n            if !is_char {\n                continue\n\
    \            }\n            temp_arr = append(temp_arr, temp_str)\n          \
    \  temp_str = \"\"\n            is_char = false\n        } else {\n          \
    \  is_char = true\n            temp_str += string(s[i])\n        }\n    }\n  \
    \  if is_char {\n        temp_arr = append(temp_arr, temp_str)\n    }\n    fin\
    \ = \"\"\n    for i = 0; i < len(temp_arr); i++ {\n        for j = 0; j < len(temp_arr[i])\
    \ - 1; j++ {\n            for k := j + 1; k < len(temp_arr[i]); k++ {\n      \
    \          if temp_arr[i][j] > temp_arr[i][k] {\n                    temp_char\
    \ = temp_arr[i][j]\n                    temp_arr[i] = temp_arr[i][:j] + string(temp_arr[i][k])\
    \ + temp_arr[i][j+1:]\n                    temp_arr[i] = temp_arr[i][:k] + string(temp_char)\
    \ + temp_arr[i][k+1:]\n                }\n            }\n        }\n        fin\
    \ += temp_arr[i]\n        if i != len(temp_arr) - 1 {\n            fin += \" \"\
    \n        }\n    }\n    return fin\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here.\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpb10vohx__test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpb10vohx__test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpb10vohx__test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpb10vohx__test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpb10vohx__test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpb10vohx__test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res []byte\n    var curr []byte\n    for i:=0; i<len(s); i++ {\n    \
    \    c := s[i]\n        if c == ' ' {\n            res = append(res, curr...)\n\
    \            res = append(res, c)\n            curr = []byte{}\n        } else\
    \ {\n            curr = append(curr, c)\n        }\n    }\n    res = append(res,\
    \ curr...)\n    return string(res)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp76pb5j_a_test.go:56: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp76pb5j_a_test.go:56:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp76pb5j_a_test.go:56: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp76pb5j_a_test.go:56:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n\n    for _, c := range s {\n        if c == 32 {\n  \
    \          result += \" \"\n        } else {\n            if result == \"\" {\n\
    \                result += string(c)\n            } else {\n                var\
    \ tmp string\n                for i := 0; i < len(result); i++ {\n           \
    \         if rune(result[i]) < c {\n                        tmp += string(result[i])\n\
    \                    } else {\n                        tmp += string(c)\n    \
    \                    result = result[i:]\n                        result = tmp\
    \ + result\n                        break\n                    }\n           \
    \     }\n                if len(tmp) == len(result) {\n                    result\
    \ = tmp + string(c)\n                }\n            }\n        }\n    }\n\n  \
    \  return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpggtdto1y_test.go:70: expected 'Hello !!!Wdlor', got '!!!HWdellloo\
    \ r'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpggtdto1y_test.go:70:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '..?HHMMRaabeeeiii\
    \ mnoooorrssttuwyy       '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n    var l []string\n    var\
    \ t string\n    var i int\n    for i = 0; i < len(s); i++ {\n        // space\
    \ found, sort temp string and add it to result\n        if s[i] == ' ' {\n   \
    \         l = append(l, sort_string(t))\n            t = \"\"\n            l =\
    \ append(l, \" \")\n        } else {\n            t += string(s[i])\n        }\n\
    \    }\n    // add last word to result\n    l = append(l, sort_string(t))\n  \
    \  return fmt.Sprintf(\"%s\", l)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpij27o8xl_test.go:30:27: undefined: sort_string

    /tmp/tmpij27o8xl_test.go:38:19: undefined: sort_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n\n    for _, v := range s {\n        if v == ' ' {\n \
    \           result += \" \"\n        } else {\n            result += string(v)\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpb_czunov_test.go:53: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpb_czunov_test.go:53:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpb_czunov_test.go:53: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpb_czunov_test.go:53:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpygh4g23y_test.go:43: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpygh4g23y_test.go:43:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpygh4g23y_test.go:43: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpygh4g23y_test.go:43:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var r string\n\n    for i, _ := range s {\n        if s[i] == ' ' {\n   \
    \         r += \" \"\n        } else {\n            r += string(s[i])\n      \
    \  }\n    }\n\n    return r\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpxmxkmij__test.go:53: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpxmxkmij__test.go:53:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpxmxkmij__test.go:53: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpxmxkmij__test.go:53:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        result += string(word)\n\
    \    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpi05p5u2l_test.go:47: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpi05p5u2l_test.go:47:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code here\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp5sh5xydk_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp5sh5xydk_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp5sh5xydk_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp5sh5xydk_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    res := \"\"\n    wordStart := 0\n    wordEnd := 0\n    wordRune := []rune{}\n\
    \    for i, r := range s {\n        wordRune = append(wordRune, r)\n        if\
    \ i == 0 {\n            wordStart = 0\n        } else if r == ' ' {\n        \
    \    wordEnd = i - 1\n            sortRune(wordRune)\n            res += string(wordRune)\n\
    \            res += \" \"\n            wordRune = []rune{}\n            wordStart\
    \ = i + 1\n        } else if i == len(s) - 1 {\n            wordEnd = i\n    \
    \        sortRune(wordRune)\n            res += string(wordRune)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3qmhdazq_test.go:22:5: wordStart declared but not used

    /tmp/tmp3qmhdazq_test.go:23:5: wordEnd declared but not used

    /tmp/tmp3qmhdazq_test.go:31:13: undefined: sortRune

    /tmp/tmp3qmhdazq_test.go:38:13: undefined: sortRune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    //TODO: implement\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpsmrvi_fo_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpsmrvi_fo_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpsmrvi_fo_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpsmrvi_fo_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpsmrvi_fo_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpsmrvi_fo_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var chars []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] != '\
    \ ' {\n            chars = append(chars, s[i])\n        }\n    }\n    ret := make([]byte,\
    \ len(chars))\n    i := 0\n    for _, c := range chars {\n        ret[i] = c\n\
    \        i++\n    }\n    return string(ret)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp8vbrtl4y_test.go:55: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp8vbrtl4y_test.go:55:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp8vbrtl4y_test.go:55: expected 'Hello !!!Wdlor', got 'HelloWorld!!!'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp8vbrtl4y_test.go:55:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi.MynameisMisterRobot.Howareyou?'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var num_letters = 0\n    var num_spaces = 0\n    var ch rune\n    var last_was_letter\
    \ = false\n    var last_was_space = false\n    var letters []string\n    var spaces\
    \ []string\n    var shuffled_letters []string\n    var result string\n\n    for\
    \ _, ch = range s {\n        if !last_was_letter && !last_was_space {\n      \
    \      last_was_letter = true\n            letters = make([]string, 0)\n     \
    \   }\n\n        if ch == ' ' {\n            if last_was_letter {\n          \
    \      last_was_letter = false\n                last_was_space = true\n      \
    \          shuffled_letters = quick_sort(letters)\n                for _, letter\
    \ := range shuffled_letters {\n                    result += letter\n        \
    \        }\n                spaces = make([]string, 0)\n            }\n      \
    \      spaces = append(spaces, string(ch))\n            result += string(ch)\n\
    \        } else {\n            if last_was_space {\n                last_was_space\
    \ = false\n                last_was_letter = true\n                letters = make([]string,\
    \ 0)\n            }\n            letters = append(letters, string(ch))\n     \
    \   }\n    }\n\n    //if last_was_letter {\n    shuffled_letters = quick_sort(letters)\n\
    \    for _, letter := range shuffled_letters {\n        result += letter\n   \
    \ }\n    //}\n\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyw4z0hv_test.go:21:9: num_letters declared but not used

    /tmp/tmppyw4z0hv_test.go:22:9: num_spaces declared but not used

    /tmp/tmppyw4z0hv_test.go:41:36: undefined: quick_sort

    /tmp/tmppyw4z0hv_test.go:60:24: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075014
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var out string\n    for _, word := range words(s) {\n        out += fmt.Sprintf(\"\
    %s%s\", sort_word(word), \" \")\n    }\n    return out\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzlkra0dj_test.go:22:26: undefined: words

    /tmp/tmpzlkra0dj_test.go:23:36: undefined: sort_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var new_s string\n    var chars []rune\n    var words []string\n    var ascii\
    \ map[int]rune\n    var new_word string\n    var size int\n\n    ascii = make(map[int]rune)\n\
    \    new_s = \"\"\n    for _, char := range s {\n        if char == 32 {\n   \
    \         size = len(chars)\n            for i := 0; i < size; i++ {\n       \
    \         if ascii[i] != 0 {\n                    new_word += string(ascii[i])\n\
    \                }\n            }\n            words = append(words, new_word)\n\
    \            new_word = \"\"\n            chars = []rune{}\n            ascii\
    \ = make(map[int]rune)\n        } else {\n            chars = append(chars, char)\n\
    \            ascii[int(char)] = char\n        }\n    }\n    size = len(chars)\n\
    \    for i := 0; i < size; i++ {\n        if ascii[i] != 0 {\n            new_word\
    \ += string(ascii[i])\n        }\n    }\n    words = append(words, new_word)\n\
    \    for _, word := range words {\n        new_s += word + \" \"\n    }\n    return\
    \ new_s[:len(new_s)-1]\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpxriegqny_test.go:79: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpxriegqny_test.go:79: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpxriegqny_test.go:79: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpxriegqny_test.go:79: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpxriegqny_test.go:79: expected\
    \ 'Hello !!!Wdlor', got ' '\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpxriegqny_test.go:79: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got '        '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Split string into a list of strings\n    t := []rune(s)\n    for i, _\
    \ := range t {\n        // Sort characters in each word in order of ascii value\n\
    \        for j := i+1; j < len(t); j++ {\n            if t[i] > t[j] {\n     \
    \           t[i], t[j] = t[j], t[i]\n            }\n        }\n    }\n    return\
    \ string(t)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpsyj6pesk_test.go:53: expected 'Hello !!!Wdlor', got ' !!!HWdellloor'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpsyj6pesk_test.go:53:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '        ..?HHMMRaabeeeiiimnoooorrssttuwyy'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var str string = \"\"\n    var word string = \"\"\n    var num int = 0\n\
    \    var count int = 0\n    var prev_is_space bool = false\n    var is_first_word\
    \ bool = true\n    var prev_char_space bool = false\n    var is_new_word bool\
    \ = false\n    for i := 0; i < len(s); i++ {\n        num = int(s[i])\n      \
    \  if num == 32 {\n            prev_char_space = true\n            if is_first_word\
    \ == true {\n                prev_is_space = true\n            }\n           \
    \ continue\n        } else {\n            is_new_word = true\n            if is_first_word\
    \ == true {\n                is_first_word = false\n            }\n        }\n\
    \        if is_new_word == true {\n            if prev_is_space == true {\n  \
    \              str += \" \"\n            }\n            if prev_char_space ==\
    \ true {\n                str += \" \"\n            }\n            prev_char_space\
    \ = false\n            prev_is_space = false\n            count = 0\n        \
    \    word = \"\"\n            is_new_word = false\n        }\n        word +=\
    \ string(s[i])\n        count++\n        if i == len(s) - 1 {\n            for\
    \ j := 0; j < count; j++ {\n                num = int(word[j])\n             \
    \   for k := j + 1; k < count; k++ {\n                    if int(word[k]) < num\
    \ {\n                        word = word[:j] + string(word[k]) + word[j + 1:]\n\
    \                        word = word[:k] + string(word[j]) + word[k + 1:]\n  \
    \                      num = int(word[j])\n                    }\n           \
    \     }\n            }\n            str += word\n        }\n    }\n    return\
    \ str\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpdl6tcwnd_test.go:94: expected 'Hi', got 'i'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpdl6tcwnd_test.go:94: expected\
    \ 'ehllo', got 'o'\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n     \
    \   tmpdl6tcwnd_test.go:94: expected 'bemnru', got 'r'\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpdl6tcwnd_test.go:94: expected 'abcd', got 'd'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpdl6tcwnd_test.go:94: expected\
    \ 'Hello !!!Wdlor', got ' !'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpdl6tcwnd_test.go:94: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got '        ?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n\n    m := make(map[int][]byte)\n\
    \    for _, c := range []byte(s) {\n        m[int(c)] = append(m[int(c)], c)\n\
    \    }\n\n    res := make([]byte, 0)\n    for _, c := range []byte(s) {\n    \
    \    res = append(res, m[int(c)][0])\n        m[int(c)] = m[int(c)][1:]\n    }\n\
    \n    return string(res)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpccnutcr0_test.go:58: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpccnutcr0_test.go:58:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpccnutcr0_test.go:58: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpccnutcr0_test.go:58:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"implement me\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpboavwr99_test.go:43: expected 'Hi', got 'implement me'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpboavwr99_test.go:43:\
    \ expected 'ehllo', got 'implement me'\n    --- FAIL: TestAnti_Shuffle/test_num__2\
    \ (0.00s)\n        tmpboavwr99_test.go:43: expected 'bemnru', got 'implement me'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__3 (0.00s)\n        tmpboavwr99_test.go:43:\
    \ expected 'abcd', got 'implement me'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpboavwr99_test.go:43: expected 'Hello !!!Wdlor', got 'implement\
    \ me'\n    --- FAIL: TestAnti_Shuffle/test_num__5 (0.00s)\n        tmpboavwr99_test.go:43:\
    \ expected '', got 'implement me'\n    --- FAIL: TestAnti_Shuffle/test_num__6\
    \ (0.00s)\n        tmpboavwr99_test.go:43: expected '.Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy', got 'implement me'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code goes here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2mccbpbq_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2mccbpbq_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2mccbpbq_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2mccbpbq_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2mccbpbq_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2mccbpbq_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpsrrw9_rn_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpsrrw9_rn_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpsrrw9_rn_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpsrrw9_rn_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpsrrw9_rn_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpsrrw9_rn_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    r := []rune(s)\n    is_space := func(r rune) bool {\n        return r ==\
    \ 32\n    }\n    if len(r) == 0 {\n        return \"\"\n    }\n    if len(r) ==\
    \ 1 {\n        return s\n    }\n    var out_r []rune\n    var temp_r []rune\n\
    \    var space []rune\n    for _, v := range r {\n        if is_space(v) {\n \
    \           temp_r = anti_sort(temp_r)\n            out_r = append(out_r, temp_r...)\n\
    \            out_r = append(out_r, v)\n            temp_r = []rune{}\n       \
    \ } else {\n            temp_r = append(temp_r, v)\n        }\n    }\n    out_r\
    \ = append(out_r, anti_sort(temp_r)...)\n    return string(out_r)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x04ehge_test.go:33:9: space declared but not used

    /tmp/tmp4x04ehge_test.go:36:22: undefined: anti_sort

    /tmp/tmp4x04ehge_test.go:44:27: undefined: anti_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code here.\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpe5frue9w_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpe5frue9w_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpe5frue9w_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpe5frue9w_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpe5frue9w_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpe5frue9w_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var d map[string]string = make(map[string]string)\n\
    \    var words []string = strings.Split(s, \" \")\n    for _, w := range words\
    \ {\n        if _, ok := d[w]; !ok {\n            d[w] = encode(w)\n        }\n\
    \        result += d[w] + \" \"\n    }\n    return result[:len(result)-1]\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc42cq0lr_test.go:23:26: undefined: strings

    /tmp/tmpc42cq0lr_test.go:26:20: undefined: encode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Go through words\n    words := make([]string, 0)\n    word := \"\"\n \
    \   for _, r := range s {\n        if string(r) == \" \" {\n            words\
    \ = append(words, word)\n            word = \"\"\n        } else {\n         \
    \   word += string(r)\n        }\n    }\n    words = append(words, word)\n\n \
    \   // Sort characters in words\n    sorted_words := make([]string, len(words))\n\
    \    for i, word := range words {\n        sorted_words[i] = sort_string(word)\n\
    \    }\n\n    // Re-con\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzbfv9j3m_test.go:41:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \tif len(s) == 0 {\n\t\treturn \"\"\n\t}\n\tif len(s) == 1 {\n\t\treturn s\n\t\
    }\n\ta := make([]int, len(s))\n\tvar c []string\n\tvar i int\n\tfor j := 0; j\
    \ < len(s); j++ {\n\t\tif s[j] == ' ' {\n\t\t\ta[i] = j\n\t\t\ti++\n\t\t}\n\t\
    }\n\ta = a[:i]\n\tvar p int\n\tfor i := 0; i < len(a); i++ {\n\t\tt := []rune(s[p:a[i]])\n\
    \t\tfor j := len(t) - 1; j > 0; j-- {\n\t\t\tfor k := 0; k < j; k++ {\n\t\t\t\t\
    if t[k] > t[k+1] {\n\t\t\t\t\tt[k], t[k+1] = t[k+1], t[k]\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t\tc = append(c, string(t))\n\t\tc = append(c, \" \")\n\t\tp = a[i] +\
    \ 1\n\t}\n\tt := []rune(s[p:])\n\tfor j := len(t) - 1; j > 0; j-- {\n\t\tfor k\
    \ := 0; k < j; k++ {\n\t\t\tif t[k] > t[k+1] {\n\t\t\t\tt[k], t[k+1] = t[k+1],\
    \ t[k]\n\t\t\t}\n\t\t}\n\t}\n\tc = append(c, string(t))\n\treturn fmt.Sprint(c)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpp82bhj1d_test.go:82: expected 'Hi', got '[Hi]'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpp82bhj1d_test.go:82:\
    \ expected 'ehllo', got '[ehllo]'\n    --- FAIL: TestAnti_Shuffle/test_num__2\
    \ (0.00s)\n        tmpp82bhj1d_test.go:82: expected 'bemnru', got '[bemnru]'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__3 (0.00s)\n        tmpp82bhj1d_test.go:82:\
    \ expected 'abcd', got '[abcd]'\n    --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n\
    \        tmpp82bhj1d_test.go:82: expected 'Hello !!!Wdlor', got '[Hello   !!!Wdlor]'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpp82bhj1d_test.go:82:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '[.Hi   My   aemn\
    \   is   Meirst   .Rboot   How   aer   ?ouy]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    s_arr := []rune(s)\n    for i, _ := range s_arr {\n        for j := 0; j\
    \ < len(s_arr) - i - 1; j++ {\n            if s_arr[j] > s_arr[j + 1] {\n    \
    \            s_arr[j], s_arr[j + 1] = s_arr[j + 1], s_arr[j]\n            }\n\
    \        }\n    }\n    return string(s_arr)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpo707kle9_test.go:51: expected 'Hello !!!Wdlor', got ' !!!HWdellloor'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpo707kle9_test.go:51:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '        ..?HHMMRaabeeeiiimnoooorrssttuwyy'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here.\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpb10vohx__test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpb10vohx__test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpb10vohx__test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpb10vohx__test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpb10vohx__test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpb10vohx__test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    bytes := []byte(s)\n    i := 0\n    for ; i < len(bytes); i++ {\n       \
    \ if bytes[i] == ' ' {\n            continue\n        }\n        break\n    }\n\
    \    j := i\n    if j >= len(bytes) {\n        return s\n    }\n    for j < len(bytes)\
    \ {\n        for ; j < len(bytes); j++ {\n            if bytes[j] == ' ' {\n \
    \               break\n            }\n        }\n        antiShuffle(bytes[i:j])\n\
    \        i = j + 1\n        for ; i < len(bytes); i++ {\n            if bytes[i]\
    \ == ' ' {\n                continue\n            }\n            break\n     \
    \   }\n        j = i\n    }\n    return string(bytes)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpocjxwdqb_test.go:39:9: undefined: antiShuffle

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    index := 0\n    word := \"\"\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n            index++\n        } else {\n    \
    \        word += string(s[i])\n        }\n    }\n    words = append(words, word)\n\
    \    for _, w := range words {\n        letters := []byte{}\n        for _, c\
    \ := range w {\n            letters = append(letters, byte(c))\n        }\n  \
    \      fmt.Println(string(letters))\n    }\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello\nWorld!!!\n\nHi.\nMy\nname\nis\nMister\n\
    Robot.\nHow\nare\nyou?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp9_gatcy3_test.go:63: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp9_gatcy3_test.go:63: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp9_gatcy3_test.go:63: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp9_gatcy3_test.go:63: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp9_gatcy3_test.go:63: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp9_gatcy3_test.go:63: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // write your solution here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpxx_5_4p1_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpxx_5_4p1_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpxx_5_4p1_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpxx_5_4p1_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpxx_5_4p1_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpxx_5_4p1_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return anti_shuffle_recursive(s, \"\")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8vf65pz_test.go:21:12: undefined: anti_shuffle_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp9p0nhnyd_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp9p0nhnyd_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp9p0nhnyd_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp9p0nhnyd_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp9p0nhnyd_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp9p0nhnyd_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: implementation here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp4n9sq99f_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp4n9sq99f_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp4n9sq99f_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp4n9sq99f_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp4n9sq99f_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp4n9sq99f_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n    str := \"\"\n    for _, word\
    \ := range s {\n        if word == ' ' {\n            str += \" \"\n        }\
    \ else {\n            str += string(word)\n        }\n    }\n    return str\n\
    }\n\n//\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpc119x1bh_test.go:55: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpc119x1bh_test.go:55:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpc119x1bh_test.go:55: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpc119x1bh_test.go:55:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpuakciju0_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpuakciju0_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // your code goes here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2mccbpbq_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2mccbpbq_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2mccbpbq_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2mccbpbq_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2mccbpbq_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2mccbpbq_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var arr []string\n    var new_arr []string\n    var str string\n    var tmp\
    \ string\n    arr = strings.Split(s, \" \")\n    for _, v := range arr {\n   \
    \     tmp = strings.Split(v, \"\")\n        new_arr = sort(tmp)\n        str +=\
    \ new_arr + \" \"\n    }\n    return str\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp475lnfvf_test.go:25:11: undefined: strings

    /tmp/tmp475lnfvf_test.go:27:15: undefined: strings

    /tmp/tmp475lnfvf_test.go:28:19: undefined: sort

    /tmp/tmp475lnfvf_test.go:29:16: invalid operation: new_arr + " " (mismatched types
    []string and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := make([]string, 0)\n    start := 0\n    for i, c := range s {\n \
    \       if c == ' ' {\n            words = append(words, s[start:i])\n       \
    \     start = i + 1\n        }\n    }\n    words = append(words, s[start:])\n\
    \    fmt.Println(words)\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[Hi]\n[hello]\n[number]\n[abcd]\n[Hello World!!!]\n[]\n[Hi. My name is\
    \ Mister Robot. How are you?]\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__0 (0.00s)\n        tmpl0h_1m8f_test.go:53: expected\
    \ 'Hi', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpl0h_1m8f_test.go:53:\
    \ expected 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n\
    \        tmpl0h_1m8f_test.go:53: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpl0h_1m8f_test.go:53: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpl0h_1m8f_test.go:53: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpl0h_1m8f_test.go:53: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result []string\n    var word string\n    for _, char := range s {\n\
    \        if char == ' ' {\n            if len(word) > 0 {\n                result\
    \ = append(result, word)\n                word = \"\"\n            }\n       \
    \     result = append(result, \" \")\n        } else {\n            word += string(char)\n\
    \        }\n    }\n    result = append(result, word)\n    for i, item := range\
    \ result {\n        if len(item) > 1 {\n            result[i] = sortString(item)\n\
    \        }\n    }\n    return strings.Join(result, \"\")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vhofrw3_test.go:37:25: undefined: sortString

    /tmp/tmp6vhofrw3_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n\n    words := strings.Split(s,\
    \ \" \")\n    newWords := make([]string, len(words))\n    for i, word := range\
    \ words {\n        chars := []rune(word)\n        sort.Slice(chars, func(i, j\
    \ int) bool {\n            return chars[i] < chars[j]\n        })\n        newWords[i]\
    \ = string(chars)\n    }\n\n    return strings.Join(newWords, \" \")\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq5t0ubb6_test.go:25:14: undefined: strings

    /tmp/tmpq5t0ubb6_test.go:29:9: undefined: sort

    /tmp/tmpq5t0ubb6_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Implement this function\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpyp0xet15_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpyp0xet15_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpyp0xet15_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpyp0xet15_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpyp0xet15_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpyp0xet15_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \twords := make([]string, 0)\n\tword := \"\"\n\t// Put words in a list, space\
    \ is a word\n\tfor _, r := range s {\n\t\tif r == ' ' {\n\t\t\twords = append(words,\
    \ word)\n\t\t\twords = append(words, \" \")\n\t\t\tword = \"\"\n\t\t} else {\n\
    \t\t\tword += string(r)\n\t\t}\n\t}\n\twords = append(words, word)\n\t// Sort\
    \ words\n\tfor i, w := range words {\n\t\twords[i] = string(sort_word(w))\n\t\
    }\n\t// Join words\n\treturn join_words(words)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4774a5l8_test.go:36:21: undefined: sort_word

    /tmp/tmp4774a5l8_test.go:39:9: undefined: join_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    runes := []rune(s)\n    for i := 0; i < len(runes); i++ {\n        for j\
    \ := i + 1; j < len(runes); j++ {\n            if runes[i] > runes[j] {\n    \
    \            tmp := runes[i]\n                runes[i] = runes[j]\n          \
    \      runes[j] = tmp\n            }\n        }\n    }\n    return string(runes)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmplu7l_4qq_test.go:53: expected 'Hello !!!Wdlor', got ' !!!HWdellloor'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmplu7l_4qq_test.go:53:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '        ..?HHMMRaabeeeiiimnoooorrssttuwyy'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n    // make s to a list of words\
    \ with space\n    words := make([]string, len(s))\n    word := \"\"\n    idx :=\
    \ 0\n    for _, c := range s {\n        if c == ' ' {\n            words[idx]\
    \ = word\n            idx += 1\n            word = \"\"\n        } else {\n  \
    \          word += string(c)\n        }\n    }\n    words[idx] = word\n    words\
    \ = words[:idx+1]\n    // sort each word\n    for i, _ := range words {\n    \
    \    words[i] = anti_shuffle(words[i])\n    }\n    // concatenate words\n    res\
    \ := \"\"\n    for _, word := range words {\n        res += word\n        res\
    \ += \" \"\n    }\n    return res[:len(res)-1]\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520380?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x2?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x40cf1d\nruntime.rawstring(0x2)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:273 +0x37 fp=0xc0201e03f8\
    \ sp=0xc0201e03a8 pc=0x44e0d7\nruntime.rawstringtmp(0x44e0d7?, 0xc000b00400?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:135 +0x3c fp=0xc0201e0418\
    \ sp=0xc0201e03f8 pc=0x44dadc\nruntime.concatstrings(0xc0201e04d0?, {0xc0201e04b0,\
    \ 0x2, 0xc0201e04d0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:51\
    \ +0xc5 fp=0xc0201e0490 sp=0xc0201e0418 pc=0x44d425\nruntime.concatstring2(0xc0201e0538?,\
    \ {0xc00d5434a4?, 0xc00d54349c?}, {0xc00d5434a8?, 0x44d650?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:60\
    \ +0x50 fp=0xc0201e04e0 sp=0xc0201e0490 pc=0x44d650\ncommand-line-arguments_test.anti_shuffle({0xc00d5434a0,\
    \ 0x2})\n\t/tmp/tmp2sq1kl6h_test.go:34 +0x15c fp=0xc0201e0558 sp=0xc0201e04e0\
    \ pc=0x4ef7bc\ncommand-line-arguments_test.anti_shuffle({0xc00d543494, 0x2})\n\
    \t/tmp/tmp2sq1kl6h_test.go:41 +0x205 fp=0xc0201e05d0 sp=0xc0201e0558 pc=0x4ef865\n\
    command-line-arguments_test.anti_shuffle({0xc00d543488, 0x2})\n\t/tmp/tmp2sq1kl6h_test.go:41\
    \ +0x205 fp=0xc0201e0648 sp=0xc0201e05d0 pc=0x4ef865\ncommand-line-arguments_test.anti_shuffle({0xc00d54347c,\
    \ 0x2})\n\t/tmp/tmp2sq1kl6h_test.go:41 +0x205 fp=0xc0201e06c0 sp=0xc0201e0648\
    \ pc=0x4ef865\ncommand-line-arguments_test.anti_shuffle({0xc00d543470, 0x2})\n\
    \t/tmp/tmp2sq1kl6h_test.go:41 +0x205 fp=0xc0201e0738 sp=0xc0201e06c0 pc=0x4ef865\n\
    command-line-argument"
  timestamp: 1660075019
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // YOUR CODE HERE\n\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpk79tgqip_test.go:45: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpk79tgqip_test.go:45: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpk79tgqip_test.go:45: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpk79tgqip_test.go:45: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpk79tgqip_test.go:45: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpk79tgqip_test.go:45: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \twords := []string{}\n\tfor _, w := range s {\n\t\twords = append(words, string(w))\n\
    \t}\n\tfor i, w := range words {\n\t\twords[i] = sort(w)\n\t}\n\treturn strings.Join(words,\
    \ \"\")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_osgyc_8_test.go:26:14: undefined: sort

    /tmp/tmp_osgyc_8_test.go:28:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n\n    // i = 0\n    var newWord []rune\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            result += string(newWord) + \"\
    \ \"\n            newWord = nil\n        } else {\n            newWord = append(newWord,\
    \ c)\n        }\n    }\n    if len(newWord) > 0 {\n        result += string(newWord)\n\
    \    }\n\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp6ku6lvol_test.go:59: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp6ku6lvol_test.go:59:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp6ku6lvol_test.go:59: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp6ku6lvol_test.go:59:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var result_rune []rune\n    var words []string\n \
    \   var word string\n    var word_rune []rune\n    var check bool\n    var start\
    \ int\n    var end int\n    var i int\n    var j int\n    var k int\n    var min\
    \ int\n    var min_rune rune\n    var flag bool\n    var flag2 bool\n    words\
    \ = strings.Split(s, \" \")\n    check = false\n    start = 0\n    end = 0\n \
    \   flag = false\n    flag2 = false\n    i = 0\n    j = 0\n    k = 0\n    for\
    \ {\n        if i == len(s) {\n            result_rune = append(result_rune, []rune(s[start:end])...)\n\
    \            break\n        }\n        if s[i] == ' ' {\n            flag = true\n\
    \            if check == false {\n                if end - start != 0 {\n    \
    \                result_rune = append(result_rune, []rune(s[start:end])...)\n\
    \                }\n                start = i\n                check = true\n\
    \            }\n            if len(words[j]) == end - start {\n              \
    \  flag2 = true\n                word = words[j]\n                word_rune =\
    \ []rune(word)\n                j += 1\n            }\n        } else {\n    \
    \        if flag2 == true {\n                for {\n                    if k ==\
    \ len(word_rune) {\n                        flag2 = false\n                  \
    \      break\n                    }\n                    min = -1\n          \
    \          for l := k; l < len(word_rune); l++ {\n                        if min\
    \ == -1 {\n                            min = l\n                        } else\
    \ {\n                            if word_rune[l] < word_rune[min] {\n        \
    \                        min = l\n                            }\n            \
    \            }\n                    }\n                    min_rune = word_rune[min]\n\
    \                    word_rune[min] = word_rune[k]\n                    word_rune[k]\
    \ = min_rune\n                    k += 1\n                }\n                result_rune\
    \ = append(result_rune, word_rune...)\n                if end != i {\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptac4c0ny_test.go:89:6: expected ''('', found TestAnti_Shuffle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \treturn \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp2pqfk4n__test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp2pqfk4n__test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp2pqfk4n__test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp2pqfk4n__test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp2pqfk4n__test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp2pqfk4n__test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    var arr []rune\n    for _,r := range s {\n        if\
    \ r == ' ' {\n            res += string(r)\n            continue\n        }\n\
    \        arr = append(arr, r)\n    }\n    return res\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp4ttpbuzt_test.go:52: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp4ttpbuzt_test.go:52: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp4ttpbuzt_test.go:52: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp4ttpbuzt_test.go:52: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp4ttpbuzt_test.go:52: expected\
    \ 'Hello !!!Wdlor', got ' '\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp4ttpbuzt_test.go:52: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got '        '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    word := \"\"\n    list := make([]string, 0)\n    for _, v := range s {\n\
    \        if v == ' ' {\n            list = append(list, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n\
    \    list = append(list, word)\n    word = \"\"\n    for _, value := range list\
    \ {\n        word += SortStr(value)\n        word += \" \"\n    }\n    return\
    \ word[:len(word)-1]\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_lyvoznr_test.go:34:17: undefined: SortStr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var words []string\n    prev := 0\n    for i, _ := range s {\n        if\
    \ s[i] == ' ' {\n            words = append(words, s[prev:i])\n            prev\
    \ = i + 1\n        }\n    }\n    words = append(words, s[prev:])\n    fmt.Println(words)\n\
    \    for i, _ := range words {\n        word := words[i]\n        for j := 0;\
    \ j < len(word); j++ {\n            for k := j + 1; k < len(word); k++ {\n   \
    \             if word[j] > word[k] {\n                    words[i] = word[:j]\
    \ + string(word[k]) + string(word[j]) + word[k+1:]\n                }\n      \
    \      }\n        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxrnvgk0_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range SplitWhiteSpace(s) {\n      \
    \  result += SortWord(word)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxagvzab_test.go:22:26: undefined: SplitWhiteSpace

    /tmp/tmpdxagvzab_test.go:23:19: undefined: SortWord

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    start := 0\n    for i, r := range s {\n        if\
    \ r == ' ' {\n            words = append(words, s[start:i])\n            start\
    \ = i+1\n        }\n    }\n    if start < len(s) {\n        words = append(words,\
    \ s[start:])\n    }\n    for i, word := range words {\n        words[i] = anti_shuffle_word(word)\n\
    \    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzbzx4p5_test.go:33:20: undefined: anti_shuffle_word

    /tmp/tmprzbzx4p5_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \t// your code goes here\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwuvrpkur_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var r rune\n    word := \"\"\n    phrase := \"\"\n    for _, r = range s\
    \ {\n        if r == ' ' {\n            phrase += word + \" \"\n            word\
    \ = \"\"\n        } else {\n            word += string(r)\n        }\n    }\n\
    \    phrase += word\n    return phrase\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpz4em_a4f_test.go:55: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpz4em_a4f_test.go:55:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpz4em_a4f_test.go:55: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpz4em_a4f_test.go:55:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    m := make(map[string]string)\n    words := strings.Split(s,\
    \ \" \")\n    for _, word := range words {\n        w := strings.Split(word, \"\
    \")\n        sort.Strings(w)\n        m[word] = strings.Join(w, \"\")\n    }\n\
    \    for k, v := range m {\n        s = strings.Replace(s, k, v, -1)\n    }\n\
    \    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffe1fngz_test.go:23:14: undefined: strings

    /tmp/tmpffe1fngz_test.go:25:14: undefined: strings

    /tmp/tmpffe1fngz_test.go:26:9: undefined: sort

    /tmp/tmpffe1fngz_test.go:27:19: undefined: strings

    /tmp/tmpffe1fngz_test.go:30:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var current_word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            result += current_word + \" \"\n         \
    \   current_word = \"\"\n        } else {\n            current_word += string([]rune{c})\n\
    \        }\n    }\n    result += current_word\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp2gfyfdgx_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp2gfyfdgx_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp2gfyfdgx_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp2gfyfdgx_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var rtn string\n    var tempSlice = []rune{}\n    var last = 0\n    for i,v\
    \ := range s {\n        if v == ' ' {\n            if len(tempSlice) > 0 {\n \
    \               //sortedSlice := []rune{}\n                sortRune(tempSlice)\n\
    \                rtn += s[last:i] + string(tempSlice)\n                tempSlice\
    \ = []rune{}\n                last = i\n            } else {\n               \
    \ rtn += s[last:i]\n                last = i\n            }\n        } else {\n\
    \            tempSlice = append(tempSlice, v)\n        }\n    }\n    if len(tempSlice)\
    \ > 0 {\n        sortRune(tempSlice)\n        rtn += s[last:] + string(tempSlice)\n\
    \    } else {\n        rtn += s[last:]\n    }\n    return rtn\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttxswmav_test.go:28:17: undefined: sortRune

    /tmp/tmpttxswmav_test.go:41:9: undefined: sortRune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var (\n        words    []string\n        newWords []string\n    )\n    words\
    \ = split(s)\n    newWords = anti_sort(words)\n    return strings.Join(newWords,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24s62o9b_test.go:25:13: undefined: split

    /tmp/tmp24s62o9b_test.go:26:16: undefined: anti_sort

    /tmp/tmp24s62o9b_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    str := \"\"\n    word := \"\"\n    for _, r := range s {\n        if r ==\
    \ ' ' {\n            str += word + \" \"\n            word = \"\"\n        } else\
    \ {\n            word += string(r)\n        }\n    }\n    str += word\n    return\
    \ str\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp9xzh8eri_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp9xzh8eri_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp9xzh8eri_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp9xzh8eri_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    res := make([]string, 0)\n    if len(s) == 0 {\n        return \"\"\n   \
    \ }\n    if len(s) == 1 {\n        return s\n    }\n    lastSplit := 0\n    for\
    \ i, r := range s {\n        if r == ' ' {\n            if i - lastSplit > 1 {\n\
    \                res = append(res, sortString(s[lastSplit:i]))\n            }\
    \ else {\n                res = append(res, s[lastSplit:i])\n            }\n \
    \           res = append(res, \" \")\n            lastSplit = i + 1\n        }\n\
    \    }\n    res = append(res, sortString(s[lastSplit:]))\n    return joinStrings(res)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mvhmono_test.go:32:35: undefined: sortString

    /tmp/tmp8mvhmono_test.go:40:23: undefined: sortString

    /tmp/tmp8mvhmono_test.go:41:12: undefined: joinStrings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpuakciju0_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpuakciju0_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // split the string\n    words := strings.Split(s, \" \")\n    for i, word\
    \ := range words {\n        letters := strings.Split(word, \"\")\n        sort.Strings(letters)\n\
    \        words[i] = strings.Join(letters, \"\")\n    }\n    // join the list of\
    \ words again\n    return strings.Join(words, \" \")\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5octmoif_test.go:22:14: undefined: strings

    /tmp/tmp5octmoif_test.go:24:20: undefined: strings

    /tmp/tmp5octmoif_test.go:25:9: undefined: sort

    /tmp/tmp5octmoif_test.go:26:20: undefined: strings

    /tmp/tmp5octmoif_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    var result, word string\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            result += word + \" \"\n           \
    \ word = \"\"\n        } else {\n            word += string(c)\n        }\n  \
    \  }\n    result += word\n    return result\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpjo92r14q_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpjo92r14q_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpjo92r14q_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpjo92r14q_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    res := \"\"\n    k := \"\"\n    for _, r := range s {\n        if r == '\
    \ ' {\n            res += k + \" \"\n            k = \"\"\n        } else {\n\
    \            k += string(r)\n        }\n    }\n    res += k\n    return res\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpz62e2jbl_test.go:54: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpz62e2jbl_test.go:54:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpz62e2jbl_test.go:54: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpz62e2jbl_test.go:54:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    fmt.Println(s)\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nnumber\nabcd\nHello World!!!\n\nHi. My name is Mister Robot.\
    \ How are you?\n--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpocbdzlpt_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpocbdzlpt_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpocbdzlpt_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpocbdzlpt_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpocbdzlpt_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpocbdzlpt_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    a := []byte(s)\n    //fmt.Println(s)\n    i := 0\n    j := 0\n    for i<len(a)\
    \ {\n        j = i\n        for j<len(a) && !is_space(a[j]) {\n            j++\n\
    \        }\n        anti_shuffle_chars(a[i:j])\n        i = j+1\n    }\n    return\
    \ string(a)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ub9qo2q_test.go:27:26: undefined: is_space

    /tmp/tmp_ub9qo2q_test.go:30:9: undefined: anti_shuffle_chars

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Put your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpw6_2prk4_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpw6_2prk4_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpw6_2prk4_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpw6_2prk4_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpw6_2prk4_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpw6_2prk4_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    slice_s := []rune(s)\n    last_space := 0\n    current_space := 0\n    for\
    \ i := 0; i < len(slice_s); i++ {\n        if slice_s[i] == 32 {\n           \
    \ current_space = i\n            sub_slice := slice_s[last_space:current_space]\n\
    \            fmt.Println(sub_slice)\n            for i := 0; i < len(sub_slice);\
    \ i++ {\n                for j := i; j < len(sub_slice); j++ {\n             \
    \       if sub_slice[i] > sub_slice[j] {\n                        sub_slice[i],\
    \ sub_slice[j] = sub_slice[j], sub_slice[i]\n                    }\n         \
    \       }\n            }\n            last_space = current_space + 1\n       \
    \ }\n    }\n    return string(slice_s)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[72 101 108 108 111]\n[72 105 46]\n[77 121]\n[110 97 109 101]\n[105 115]\n\
    [77 105 115 116 101 114]\n[82 111 98 111 116 46]\n[72 111 119]\n[97 114 101]\n\
    --- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpyx5qixn3_test.go:61: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpyx5qixn3_test.go:61:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpyx5qixn3_test.go:61: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpyx5qixn3_test.go:61:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '.Hi My aemn is Meirst\
    \ .Rboot How aer you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if (s[i]\
    \ != ' ') {\n            j := i\n            for ; j < len(s) && s[j] != ' ';\
    \ j++ {}\n            words = append(words, s[i:j])\n            i = j\n     \
    \   }\n    }\n    fmt.Println(words)\n    for i := 0; i < len(words); i++ {\n\
    \        word := words[i]\n        word_bytes := []byte(word)\n        tmp :=\
    \ make([]byte, len(word_bytes))\n        copy(tmp, word_bytes)\n        sort(tmp)\n\
    \        words[i] = string(tmp)\n    }\n    fmt.Println(words)\n    str := \"\"\
    \n    for i := 0; i < len(s); i++ {\n        if (s[i] != ' ') {\n            word\
    \ := words[0]\n            words = words[1:]\n            j := i\n           \
    \ for ; j < len(s) && s[j] != ' '; j++ {}\n            str += word\n         \
    \   i = j - 1\n        } else {\n            str += string(s[i])\n        }\n\
    \    }\n    return str\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiqrjtph_test.go:36:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    start := 0\n    for i, r := range s {\n        if\
    \ i == len(s) - 1 {\n            words = append(words, anti_shuffle_word(s[start:i+1]))\n\
    \        } else if r == ' ' {\n            words = append(words, anti_shuffle_word(s[start:i]))\n\
    \            start = i + 1\n        }\n    }\n    return join_words(words)\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6jm7q3_test.go:25:35: undefined: anti_shuffle_word

    /tmp/tmpsz6jm7q3_test.go:27:35: undefined: anti_shuffle_word

    /tmp/tmpsz6jm7q3_test.go:31:12: undefined: join_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := []string{}\n    for _, word := range s {\n        words = append(words,\
    \ string(word))\n    }\n    for i, word := range words {\n        for j, letter\
    \ := range word {\n            for j < len(word) - 1 {\n                if byte(letter)\
    \ > byte(word[j + 1]) {\n                    word = word[:j] + string(word[j +\
    \ 1]) + string(letter) + word[j + 2:]\n                }\n                j++\n\
    \            }\n        }\n        words[i] = word\n    }\n    res := \"\"\n \
    \   for _, word := range words {\n        res += word\n    }\n    return res\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpp2zx_s62_test.go:62: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpp2zx_s62_test.go:62:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpp2zx_s62_test.go:62: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpp2zx_s62_test.go:62:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := make([]string, 0)\n    word := \"\"\n    for _, c := range s {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    for i, w := range words {\n        words[i]\
    \ = ordered(w)\n    }\n    return orderedString(words)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5gesa3jr_test.go:33:20: undefined: ordered

    /tmp/tmp5gesa3jr_test.go:35:12: undefined: orderedString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    //TODO\n    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpop20u_n9_test.go:44: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpop20u_n9_test.go:44:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpop20u_n9_test.go:44: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpop20u_n9_test.go:44:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // 1. split string by space\n    // 2. sort each string\n    // 3. combine\
    \ into a new string\n    wordSlice := strings.Split(s, \" \")\n    sortedWordSlice\
    \ := make([]string, len(wordSlice))\n    for index, word := range wordSlice {\n\
    \        sortedWordSlice[index] = sortString(word)\n    }\n    return strings.Join(sortedWordSlice,\
    \ \" \")\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2hqfaqq_test.go:24:18: undefined: strings

    /tmp/tmpn2hqfaqq_test.go:27:34: undefined: sortString

    /tmp/tmpn2hqfaqq_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpa8ygsqh2_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpa8ygsqh2_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpa8ygsqh2_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpa8ygsqh2_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Implement me\n    m := make(map[int][]string)\n    for _, word :=\
    \ range s {\n        m[int(word)] = append(m[int(word)], string(word))\n    }\n\
    \    return \"1\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate :=\
    \ anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp6tmserhv_test.go:48: expected 'Hi', got '1'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp6tmserhv_test.go:48: expected\
    \ 'ehllo', got '1'\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n     \
    \   tmp6tmserhv_test.go:48: expected 'bemnru', got '1'\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp6tmserhv_test.go:48: expected 'abcd', got '1'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp6tmserhv_test.go:48: expected\
    \ 'Hello !!!Wdlor', got '1'\n    --- FAIL: TestAnti_Shuffle/test_num__5 (0.00s)\n\
    \        tmp6tmserhv_test.go:48: expected '', got '1'\n    --- FAIL: TestAnti_Shuffle/test_num__6\
    \ (0.00s)\n        tmp6tmserhv_test.go:48: expected '.Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result []byte\n    var current, next byte\n    var nextIsLetter, currentIsLetter\
    \ bool\n    currentIsLetter = false\n    for i, c := range []byte(s) {\n     \
    \   if i == len(s) - 1 {\n            next = 0\n        } else {\n           \
    \ next = s[i+1]\n        }\n        nextIsLetter = next >= 'a' && next <= 'z'\
    \ || next >= 'A' && next <= 'Z'\n        if c >= 'a' && c <= 'z' || c >= 'A' &&\
    \ c <= 'Z' {\n            if !currentIsLetter {\n                result = append(result,\
    \ c)\n            } else {\n                result[len(result)-1] = c\n      \
    \      }\n            currentIsLetter = true\n        } else {\n            if\
    \ nextIsLetter {\n                result = append(result, c)\n            } else\
    \ {\n                if len(result) > 0 {\n                    result[len(result)-1]\
    \ = c\n                } else {\n                    result = append(result, c)\n\
    \                }\n            }\n            currentIsLetter = false\n     \
    \   }\n        current = c\n    }\n    for i, r := range result {\n        if\
    \ r >= 'a' && r <= 'z' || r >= 'A' && r <= 'Z' {\n            result[i] = sortLetters(r)\n\
    \        }\n    }\n    return string(result)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy1zc3buc_test.go:22:9: current declared but not used

    /tmp/tmpy1zc3buc_test.go:55:25: undefined: sortLetters

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Get the words in the input string\n    words := strings.Split(s, \" \"\
    )\n    for _, word := range words {\n        // Sort each word\n        word =\
    \ string(sortWord(word))\n    }\n    return strings.Join(words, \" \")\n}\n\n\
    func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpctno4kle_test.go:22:14: undefined: strings

    /tmp/tmpctno4kle_test.go:25:23: undefined: sortWord

    /tmp/tmpctno4kle_test.go:27:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"ehllo\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpowuach80_test.go:43: expected 'Hi', got 'ehllo'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpowuach80_test.go:43:\
    \ expected 'bemnru', got 'ehllo'\n    --- FAIL: TestAnti_Shuffle/test_num__3 (0.00s)\n\
    \        tmpowuach80_test.go:43: expected 'abcd', got 'ehllo'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpowuach80_test.go:43: expected 'Hello !!!Wdlor', got 'ehllo'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__5 (0.00s)\n        tmpowuach80_test.go:43:\
    \ expected '', got 'ehllo'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpowuach80_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got 'ehllo'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Write your code here.\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpb10vohx__test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpb10vohx__test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpb10vohx__test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpb10vohx__test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpb10vohx__test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpb10vohx__test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) == 0 {\n        return \"\"\n    }\n\n    var result []byte\n \
    \   var temp []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' '\
    \ {\n            result = append(result, temp...)\n            result = append(result,\
    \ s[i])\n            temp = nil\n        } else {\n            temp = append(temp,\
    \ s[i])\n        }\n    }\n    result = append(result, temp...)\n\n    for i :=\
    \ 0; i < len(result); i++ {\n        if result[i] == ' ' {\n            continue\n\
    \        }\n        j := i\n        for ; j < len(result); j++ {\n           \
    \ if result[j] == ' ' {\n                break\n            }\n        }\n   \
    \     sort(result[i:j])\n        i = j\n    }\n\n    return string(result)\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvch2e7h8_test.go:48:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"Hello\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate\
    \ := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi\"), expected:\
    \ \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n   \
    \  { actual: candidate(\"number\"), expected: \"bemnru\" },\n     { actual: candidate(\"\
    abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"),\
    \ expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\
    \" },\n     { actual: candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpuk4ph2a2_test.go:43: expected 'Hi', got 'Hello'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpuk4ph2a2_test.go:43:\
    \ expected 'ehllo', got 'Hello'\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n\
    \        tmpuk4ph2a2_test.go:43: expected 'bemnru', got 'Hello'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__3 (0.00s)\n        tmpuk4ph2a2_test.go:43: expected\
    \ 'abcd', got 'Hello'\n    --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n  \
    \      tmpuk4ph2a2_test.go:43: expected 'Hello !!!Wdlor', got 'Hello'\n    ---\
    \ FAIL: TestAnti_Shuffle/test_num__5 (0.00s)\n        tmpuk4ph2a2_test.go:43:\
    \ expected '', got 'Hello'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpuk4ph2a2_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got 'Hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var out, word string\n    var words []string\n    wl := 0\n\n    for _, c\
    \ := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n      \
    \          words = append(words, word)\n                wl += len(word)\n    \
    \            word = \"\"\n            }\n            words = append(words, \"\
    \ \")\n            wl++\n        } else {\n            word += string(c)\n   \
    \     }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \        wl += len(word)\n    }\n\n    out = make([]rune, wl)\n    o := 0\n  \
    \  for _, w := range words {\n        if w == \" \" {\n            out[o] = '\
    \ '\n            o++\n        } else {\n            copy(out[o:], sortStr(w))\n\
    \            o += len(w)\n        }\n    }\n\n    return string(out)\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xkqkpbh_test.go:43:11: cannot use make([]rune, wl) (value of type []rune)
    as type string in assignment

    /tmp/tmp1xkqkpbh_test.go:47:13: cannot assign to out[o] (value of type byte)

    /tmp/tmp1xkqkpbh_test.go:50:27: undefined: sortStr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res, w string\n    for _, c := range s {\n        if c == ' ' {\n   \
    \         res += w + \" \"\n            w = \"\"\n        } else {\n         \
    \   w += string(c)\n        }\n    }\n    res += w\n    return res\n}\n\nfunc\
    \ TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"\
    hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected:\
    \ \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n \
    \    { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpefyq0e7c_test.go:53: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpefyq0e7c_test.go:53:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpefyq0e7c_test.go:53: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpefyq0e7c_test.go:53:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // split by spaces to array of words\n    words := splitBySpaces(s)\n   \
    \ // sort characters in each word\n    sortedWords := sortWords(words)\n    //\
    \ join sorted words by spaces to a new string\n    return joinWords(sortedWords)\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14ve82ed_test.go:22:14: undefined: splitBySpaces

    /tmp/tmp14ve82ed_test.go:24:20: undefined: sortWords

    /tmp/tmp14ve82ed_test.go:26:12: undefined: joinWords

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    strArray := stringToArray(s)\n    resultArray := make([]string, len(strArray))\n\
    \    for i, v := range strArray {\n        resultArray[i] = anti_shuffleWord(v)\n\
    \    }\n    return arrayToString(resultArray)\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5qug9s0m_test.go:21:17: undefined: stringToArray

    /tmp/tmp5qug9s0m_test.go:24:26: undefined: anti_shuffleWord

    /tmp/tmp5qug9s0m_test.go:26:12: undefined: arrayToString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \tnewString := []string{}\n\tfor _, w := range s {\n\t\tnewString = append(newString,\
    \ string(w))\n\t}\n\tfmt.Println(newString)\n\treturn newString\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vxr32bb_test.go:26:9: cannot use newString (variable of type []string)
    as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    /* Write your solution here */\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp8g311l_1_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp8g311l_1_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp8g311l_1_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp8g311l_1_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp8g311l_1_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp8g311l_1_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // check input\n    if len(s) == 0 {\n        return \"\"\n    }\n\n    //\
    \ assume input is utf-8 string\n    // save words\n    word := make([]string,\
    \ 0)\n    var i int\n    for i = 0; i < len(s); i++ {\n        if s[i] == ' '\
    \ {\n            continue\n        } else {\n            j := i\n            for\
    \ j < len(s) && s[j] != ' ' {\n                j++\n            }\n          \
    \  word = append(word, s[i:j])\n            i = j - 1\n        }\n    }\n\n  \
    \  // sort letters in word\n    for i = 0; i < len(word); i++ {\n        for j\
    \ := 0; j < len(word[i]) - 1; j++ {\n            for k := j + 1; k < len(word[i]);\
    \ k++ {\n                if word[i][j] > word[i][k] {\n                    word[i][j],\
    \ word[i][k] = word[i][k], word[i][j]\n                }\n            }\n    \
    \    }\n    }\n\n    // recovery string\n    s = \"\"\n    is_word := false\n\
    \    for i = 0; i < len(word); i++ {\n        if is_word {\n            s += \"\
    \ \"\n        }\n        s += word[i]\n        is_word = true\n    }\n\n    return\
    \ s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5vlb4a6_test.go:48:21: cannot assign to word[i][j] (value of type byte)

    /tmp/tmpo5vlb4a6_test.go:48:33: cannot assign to word[i][k] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    runes := []rune(s)\n    for i := 0; i < len(runes); i++ {\n        for j\
    \ := i + 1; j < len(runes); j++ {\n            if runes[i] > runes[j] {\n    \
    \            runes[i], runes[j] = runes[j], runes[i]\n            }\n        }\n\
    \    }\n    return string(runes)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n\
    \  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmplzwhv3w4_test.go:51: expected 'Hello !!!Wdlor', got ' !!!HWdellloor'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmplzwhv3w4_test.go:51:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got '        ..?HHMMRaabeeeiiimnoooorrssttuwyy'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // TODO: Write your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpsrrw9_rn_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpsrrw9_rn_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpsrrw9_rn_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpsrrw9_rn_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpsrrw9_rn_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpsrrw9_rn_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Your code here\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmp0kap_3lw_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmp0kap_3lw_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmp0kap_3lw_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmp0kap_3lw_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmp0kap_3lw_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmp0kap_3lw_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := split(s)\n    result := []string{}\n    for _, word := range words\
    \ {\n        sorted := sort(word)\n        result = append(result, sorted)\n \
    \   }\n    return join(result)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n \
    \ candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahvoww5u_test.go:21:14: undefined: split

    /tmp/tmpahvoww5u_test.go:24:19: undefined: sort

    /tmp/tmpahvoww5u_test.go:27:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpuakciju0_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpuakciju0_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \tvar word []rune\n\tvar result []rune\n\tfor _, r := range s {\n\t\tif r == '\
    \ ' {\n\t\t\tresult = append(result, word...)\n\t\t\tresult = append(result, '\
    \ ')\n\t\t\tword = nil\n\t\t} else {\n\t\t\tword = append(word, r)\n\t\t}\n\t\
    }\n\tresult = append(result, word...)\n\treturn string(result)\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmp1tfqdbap_test.go:55: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmp1tfqdbap_test.go:55:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmp1tfqdbap_test.go:55: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmp1tfqdbap_test.go:55:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 0
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    arr := []byte(s)\n    last_space := 0\n    for curr := 0; curr < len(arr);\
    \ curr++ {\n        if arr[curr] == ' ' {\n            last_space = curr\n   \
    \     }\n        if last_space != curr {\n            for j := last_space; j <\
    \ curr; j++ {\n                if arr[j] > arr[curr] {\n                    arr[j],\
    \ arr[curr] = arr[curr], arr[j]\n                }\n            }\n        }\n\
    \    }\n    return string(arr)\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n \
    \ candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    strMap := make(map[string]string)\n    ans := \"\"\n    for _, word := range\
    \ s {\n        word := string(word)\n        if _, ok := strMap[word]; !ok {\n\
    \            bytes := []byte(word)\n            quickSort(bytes, 0, len(bytes)-1)\n\
    \            newWord := string(bytes)\n            strMap[word] = newWord\n  \
    \      }\n        ans += strMap[word]\n    }\n    return ans\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46nbgz7c_test.go:27:13: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    if len(s) <= 1 {\n        return s\n    }\n    ans := \"\"\n    lastSpace\
    \ := false\n    for i, c := range s {\n        if c == ' ' {\n            ans\
    \ += string(c)\n            lastSpace = true\n            continue\n        }\n\
    \        if lastSpace {\n            for j := i + 1; j < len(s); j++ {\n     \
    \           if s[j] == ' ' {\n                    ans += quicksort(s[i:j])\n \
    \                   i = j - 1\n                    break\n                }\n\
    \            }\n            lastSpace = false\n        }\n    }\n    return ans\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnh24ja8d_test.go:35:28: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // Fill this in.\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpmpubwu52_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpmpubwu52_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpmpubwu52_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpmpubwu52_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpmpubwu52_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpmpubwu52_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return s\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1\
    \ (0.00s)\n        tmpygh4g23y_test.go:43: expected 'ehllo', got 'hello'\n   \
    \ --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n        tmpygh4g23y_test.go:43:\
    \ expected 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4\
    \ (0.00s)\n        tmpygh4g23y_test.go:43: expected 'Hello !!!Wdlor', got 'Hello\
    \ World!!!'\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmpygh4g23y_test.go:43:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    words := make([]string, 0)\n    word := make([]byte, 0)\n    chars := make([]byte,\
    \ 0)\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words,\
    \ string(word))\n            word = make([]byte, 0)\n        } else {\n      \
    \      word = append(word, byte(c))\n        }\n    }\n    words = append(words,\
    \ string(word))\n    fmt.Println(words)\n    for _, w := range words {\n     \
    \   chars = append(chars, []byte(w)...)\n        chars = append(chars, ' ')\n\
    \    }\n    chars = chars[:len(chars)-1]\n    return SortByASCII(string(chars))\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9m7u31z_test.go:39:12: undefined: SortByASCII

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    new := []byte(s)\n    for i,j := 0,0; i<len(s); i++ {\n        if s[i] !=\
    \ ' ' {\n            for j=i+1; j<len(s) && s[j] != ' '; j++ {\n             \
    \   if s[j] < s[i] {\n                    new[i], new[j] = new[j], new[i]\n  \
    \              }\n            }\n        }\n    }\n    return string(new)\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__2\
    \ (0.00s)\n        tmpzwli4on9_test.go:53: expected 'bemnru', got 'ermunb'\n \
    \   --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpzwli4on9_test.go:53:\
    \ expected 'Hello !!!Wdlor', got 'Hello !!!Wdrol'\n    --- FAIL: TestAnti_Shuffle/test_num__6\
    \ (0.00s)\n        tmpzwli4on9_test.go:53: expected '.Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy', got '.Hi My enma is Merits .Rboot How aer ?uyo'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpaaebxnxu_test.go:43: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpaaebxnxu_test.go:43: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpaaebxnxu_test.go:43: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpaaebxnxu_test.go:43: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var res string\n    var last int\n    for i, char := range s {\n        if\
    \ char == ' ' {\n            res += sortWord(s[last:i]) + \" \"\n            last\
    \ = i + 1\n        }\n    }\n    res += sortWord(s[last:])\n    return res\n}\n\
    \nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe12k2aou_test.go:25:20: undefined: sortWord

    /tmp/tmpe12k2aou_test.go:29:12: undefined: sortWord

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestAnti_Shuffle(t *testing.T)\
    \ {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"), expected: \"\
    ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\" },\n  \
    \   { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual: candidate(\"\
    Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is Mister Robot.\
    \ How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How aer ?ouy\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__0\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'Hi', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__1 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'ehllo', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__2 (0.00s)\n      \
    \  tmpuakciju0_test.go:44: expected 'bemnru', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__3\
    \ (0.00s)\n        tmpuakciju0_test.go:44: expected 'abcd', got ''\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__4 (0.00s)\n        tmpuakciju0_test.go:44: expected\
    \ 'Hello !!!Wdlor', got ''\n    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n\
    \        tmpuakciju0_test.go:44: expected '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    res := \"\"\n    last_idx := 0\n    for idx, c := range s {\n        if c\
    \ == ' ' {\n            res += sort_word(s[last_idx:idx])\n            res +=\
    \ \" \"\n            last_idx = idx + 1\n        }\n    }\n    res += sort_word(s[last_idx:])\n\
    \    return res\n}\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n\
    \     { actual: candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"\
    number\"), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected:\
    \ \"abcd\" },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello\
    \ !!!Wdlor\" },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplytjpft6_test.go:25:20: undefined: sort_word

    /tmp/tmplytjpft6_test.go:30:12: undefined: sort_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
- exit_code: 1
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    for _, word := range s {\n        fmt.Println(result)\n\
    \        result += string(word)\n    }\n    return result\n}\n\nfunc TestAnti_Shuffle(t\
    \ *testing.T) {\n  candidate := anti_shuffle\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi\"), expected: \"Hi\" },\n     { actual: candidate(\"hello\"),\
    \ expected: \"ehllo\" },\n     { actual: candidate(\"number\"), expected: \"bemnru\"\
    \ },\n     { actual: candidate(\"abcd\"), expected: \"abcd\" },\n     { actual:\
    \ candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\" },\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hi. My name is\
    \ Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst .Rboot How\
    \ aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "\nH\n\nh\nhe\nhel\nhell\n\nn\nnu\nnum\nnumb\nnumbe\n\na\nab\nabc\n\nH\n\
    He\nHel\nHell\nHello\nHello \nHello W\nHello Wo\nHello Wor\nHello Worl\nHello\
    \ World\nHello World!\nHello World!!\n\nH\nHi\nHi.\nHi. \nHi. M\nHi. My\nHi. My\
    \ \nHi. My n\nHi. My na\nHi. My nam\nHi. My name\nHi. My name \nHi. My name i\n\
    Hi. My name is\nHi. My name is \nHi. My name is M\nHi. My name is Mi\nHi. My name\
    \ is Mis\nHi. My name is Mist\nHi. My name is Miste\nHi. My name is Mister\nHi.\
    \ My name is Mister \nHi. My name is Mister R\nHi. My name is Mister Ro\nHi. My\
    \ name is Mister Rob\nHi. My name is Mister Robo\nHi. My name is Mister Robot\n\
    Hi. My name is Mister Robot.\nHi. My name is Mister Robot. \nHi. My name is Mister\
    \ Robot. H\nHi. My name is Mister Robot. Ho\nHi. My name is Mister Robot. How\n\
    Hi. My name is Mister Robot. How \nHi. My name is Mister Robot. How a\nHi. My\
    \ name is Mister Robot. How ar\nHi. My name is Mister Robot. How are\nHi. My name\
    \ is Mister Robot. How are \nHi. My name is Mister Robot. How are y\nHi. My name\
    \ is Mister Robot. How are yo\nHi. My name is Mister Robot. How are you\n--- FAIL:\
    \ TestAnti_Shuffle (0.00s)\n    --- FAIL: TestAnti_Shuffle/test_num__1 (0.00s)\n\
    \        tmptbsw8zzu_test.go:48: expected 'ehllo', got 'hello'\n    --- FAIL:\
    \ TestAnti_Shuffle/test_num__2 (0.00s)\n        tmptbsw8zzu_test.go:48: expected\
    \ 'bemnru', got 'number'\n    --- FAIL: TestAnti_Shuffle/test_num__4 (0.00s)\n\
    \        tmptbsw8zzu_test.go:48: expected 'Hello !!!Wdlor', got 'Hello World!!!'\n\
    \    --- FAIL: TestAnti_Shuffle/test_num__6 (0.00s)\n        tmptbsw8zzu_test.go:48:\
    \ expected '.Hi My aemn is Meirst .Rboot How aer ?ouy', got 'Hi. My name is Mister\
    \ Robot. How are you?'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075021
- exit_code: 2
  program: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns an ordered version of\
    \ it.\n// Ordered version of string, is a string where all words (separated by\
    \ space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n\
    \    var result string\n    var ascii_codes [][]int\n    for _, word := range\
    \ s {\n        ascii_codes = append(ascii_codes, []int{int(word)})\n    }\n  \
    \  for _, codes := range ascii_codes {\n        for i := 0; i < len(codes); i++\
    \ {\n            for j := 1; j < len(codes); j++ {\n                if codes[j-1]\
    \ > codes[j] {\n                    temp := codes[j-1]\n                    codes[j-1]\
    \ = codes[j]\n                    codes[j] = temp\n                }\n       \
    \     }\n        }\n        result += string(codes[0])\n    }\n    return result\n\
    }\n\nfunc TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
    \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
    ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
    \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
    \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmph3tachbk_test.go:36:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075021
