language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // string([]byte{'a','b','c'})\
    \ = \"abc\"\n    // fmt.Sprintf(\"%s%s\", \"str1\", \"str2\")\n    // x /= 10\n\
    \    // x %= 10\n    length := len(fmt.Sprintf(\"%d\", x))\n    length -= shift\n\
    \    if length < 0 {\n        length += len(fmt.Sprintf(\"%d\", x))\n    }\n \
    \   str := fmt.Sprintf(\"%d\", x)\n    return fmt.Sprintf(\"%s%s\", str[length:],\
    \ str[:length])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-4:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-4:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmp_kjpbug0_test.go:26\
    \ +0x1a9\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp_kjpbug0_test.go:38\
    \ +0x96\ntesting.tRunner(0xc0000da340, 0x528f58)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ []int\n    digits := digits(x)\n    length := len(digits)\n    if shift >= length\
    \ {\n        for i := length - 1; i >= 0; i-- {\n            result = append(result,\
    \ digits[i])\n        }\n    } else {\n        for i := shift; i < length; i++\
    \ {\n            result = append(result, digits[i])\n        }\n        for i\
    \ := 0; i < shift; i++ {\n            result = append(result, digits[i])\n   \
    \     }\n    }\n    return fmt.Sprintf(\"%v\", result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpengqx95v_test.go:17:15: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        s = fmt.Sprintf(\"%s\", reverse(s))\n\
    \    } else {\n        s = fmt.Sprintf(\"%s%s\", s[shift:], s[:shift])\n    }\n\
    \    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzgtojfo_test.go:18:31: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbhvasntk_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    n_digits\
    \ := num_digits(x)\n    shift = shift % n_digits\n    if shift == 0 {\n      \
    \  return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n    for x > 0\
    \ {\n        digits = append(digits, x % 10)\n        x /= 10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        temp := digits[len(digits) - 1]\n        digits\
    \ = digits[:len(digits) - 1]\n        digits = append([]int{temp}, digits...)\n\
    \    }\n    s := fmt.Sprintf(\"%d\", digits[0])\n    for i := 1; i < len(digits);\
    \ i++ {\n        s += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return s\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1m8ra9ht_test.go:16:17: undefined: num_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    shift = shift % len(digits)\n    if shift\
    \ == 0 {\n        return string(digits)\n    }\n    return string(append(digits[len(digits)\
    \ - shift:], digits[:len(digits) - shift]...))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpzgy6xbp4_test.go:41: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift > 0 {\n \
    \       l := len(fmt.Sprintf(\"%d\", x))\n        shift = shift % l\n        n\
    \ := pow10(l - shift)\n        a := x / n\n        b := x % n\n        return\
    \ fmt.Sprintf(\"%d%d\", b, a)\n    }\n    return circular_shift(x, -shift)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx3vt6jk_test.go:22:14: undefined: pow10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Run a\
    \ modulo operation to find out the number of digits in the integer\n    number_of_digits\
    \ := 0\n    for {\n        if x < 10 {\n            number_of_digits += 1\n  \
    \          break\n        }\n        x /= 10\n        number_of_digits += 1\n\
    \    }\n    // Return if there is nothing to shift\n    if shift == 0 {\n    \
    \    return fmt.Sprintf(\"%d\", x)\n    }\n    // Return if the shift is greater\
    \ than the number of digits\n    if shift >= number_of_digits {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    // Split the number into an array\n    split_number\
    \ := make([]int, number_of_digits)\n    for i := number_of_digits-1; i >= 0; i--\
    \ {\n        split_number[i] = x % 10\n        x /= 10\n    }\n    // Shift the\
    \ digits\n    for i := 0; i < shift; i++ {\n        last_digit := split_number[number_of_digits-1]\n\
    \        for j := number_of_digits-1; j > 0; j-- {\n            split_number[j]\
    \ = split_number[j-1]\n        }\n        split_number[0] = last_digit\n    }\n\
    \    // Recon\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd63e0i2p_test.go:49:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074753
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ >= num_digits(x) {\n        return reverse_str(str(x))\n    }\n    return str(x)[len(str(x))-shift:]\
    \ + str(x)[:len(str(x))-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemquf2ya_test.go:16:17: undefined: num_digits

    /tmp/tmpemquf2ya_test.go:17:16: undefined: reverse_str

    /tmp/tmpemquf2ya_test.go:17:28: undefined: str

    /tmp/tmpemquf2ya_test.go:19:12: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > num_digits(x) {\n        return reverse_digits(x)\n    }\n    new_num := x\
    \ / int(pow(10, shift))\n    mod := x % int(pow(10, shift))\n    new_num = (mod\
    \ * int(pow(10, num_digits(x) - shift))) + new_num\n    return fmt.Sprintf(\"\
    %d\", new_num)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_rpvvto_test.go:16:16: undefined: num_digits

    /tmp/tmp1_rpvvto_test.go:17:16: undefined: reverse_digits

    /tmp/tmp1_rpvvto_test.go:19:24: undefined: pow

    /tmp/tmp1_rpvvto_test.go:20:20: undefined: pow

    /tmp/tmp1_rpvvto_test.go:21:26: undefined: pow

    /tmp/tmp1_rpvvto_test.go:21:34: undefined: num_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    n := num_digits(x)\n\
    \    if n <= shift {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var a,\
    \ b int\n    a = x % int(pow(10, n - shift))\n    b = x / int(pow(10, n - shift))\n\
    \    return fmt.Sprintf(\"%d%d\", a, b)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4q1mn3po_test.go:16:10: undefined: num_digits

    /tmp/tmp4q1mn3po_test.go:21:17: undefined: pow

    /tmp/tmp4q1mn3po_test.go:22:17: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x == 0\
    \ {\n        return \"0\"\n    }\n    result := make([]byte, 0)\n    for x > 0\
    \ {\n        digit := x % 10\n        result = append(result, byte(digit) + 48)\n\
    \        x /= 10\n    }\n    for shift > 0 {\n        digit := result[len(result)\
    \ - 1]\n        result = append(result, digit)\n        result = result[:len(result)\
    \ - 1]\n        shift--\n    }\n    return string(result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpn2lm6dht_test.go:51: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    reverse(digits)\n    return fmt.Sprintf(\"\
    %v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2xl74cyw_test.go:28:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string, then convert it to a byte array.\n    byteArray :=\
    \ []byte(fmt.Sprintf(\"%d\", x))\n    // Reverse the byte array.\n    reverse(byteArray)\n\
    \    if shift > len(byteArray) {\n        // If the number of digits is greater\
    \ than the shift, just return the\n        // reversed digits.\n        return\
    \ string(byteArray)\n    }\n    // Make a second array.\n    byteArray2 := make([]byte,\
    \ len(byteArray))\n    // Copy the shifted digits to the second array.\n    copy(byteArray2,\
    \ byteArray[shift:])\n    // Copy the digits that wrap around to the second array.\n\
    \    copy(byteArray2[len(byteArray)-shift:], byteArray[:shift])\n    // Reverse\
    \ the digits in the second array.\n    reverse(byteArray2)\n    // Convert the\
    \ second array to a string and return it.\n    return string(byteArray2)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphqoj9iqe_test.go:19:5: undefined: reverse

    /tmp/tmphqoj9iqe_test.go:32:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_str_len := len(x_str)\n    shift = shift % x_str_len\n\
    \    if shift == 0 {\n        return x_str\n    }\n    x_str_runes := []rune(x_str)\n\
    \    return string(x_str_runes[x_str_len - shift:]) + string(x_str_runes[:x_str_len\
    \ - shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp8jf4skpt_test.go:43: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        // Digits are\
    \ not circular, reverse them.\n        a := []rune(digits)\n        for i, j :=\
    \ 0, len(a)-1; i < j; i, j = i+1, j-1 {\n            a[i], a[j] = a[j], a[i]\n\
    \        }\n        return string(a)\n    } else {\n        return digits[shift:]\
    \ + digits[:shift]\n    }\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmprpptf820_test.go:46: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmprpptf820_test.go:46:\
    \ expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ 0\n    digits_reversed := 0\n    for n := x; n > 0; n /= 10 {\n        digits_reversed\
    \ = digits_reversed * 10 + n % 10\n        digits++\n    }\n    if shift > digits\
    \ {\n        digits = shift\n    }\n    str := \"\"\n    for i := 0; i < digits;\
    \ i++ {\n        str += fmt.Sprintf(\"%d\", digits_reversed % 10)\n        digits_reversed\
    \ /= 10\n    }\n    return str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvj86lwro_test.go:50: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpvj86lwro_test.go:50:\
    \ expected '79', got '97000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvj86lwro_test.go:50: expected '21', got '12'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpvj86lwro_test.go:50: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(str) {\n        str = \"\"\n        for i := len(str)-1;\
    \ i >= 0; i-- {\n            str += string(str[i])\n        }\n    } else {\n\
    \        str = str[len(str)-shift:] + str[:len(str)-shift]\n    }\n    return\
    \ str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp7ky3zobh_test.go:45: expected '79', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp7ky3zobh_test.go:45: expected\
    \ '11', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 0\
    \ {\n        return circular_shift(-x, shift)\n    }\n    length := 0\n    z :=\
    \ x\n    for z > 0 {\n        length++\n        z /= 10\n    }\n    shift %= length\n\
    \    if shift > 0 {\n        var digit int\n        digit = x % 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d%0*d\", digit, length - 1, x)\n    }\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5gq8wyvs_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp5gq8wyvs_test.go:52:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // First,\
    \ convert the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Now,\
    \ split the string into a slice of characters.\n    n := len(s)\n    r := make([]rune,\
    \ n)\n    for i, c := range s {\n        r[i] = c\n    }\n    // Now, circular\
    \ shift the string.\n    shift = shift % n\n    if shift > 0 {\n        reverse(r,\
    \ 0, n - 1)\n        reverse(r, 0, shift - 1)\n        reverse(r, shift, n - 1)\n\
    \    }\n    // Now, convert the slice of characters back to a string.\n    s =\
    \ string(r)\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76s1v20w_test.go:27:9: undefined: reverse

    /tmp/tmp76s1v20w_test.go:28:9: undefined: reverse

    /tmp/tmp76s1v20w_test.go:29:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    l := len(s)\n    // Calculate\
    \ new string length\n    l2 := l\n    if shift > l {\n        l2 = l - shift\n\
    \    }\n    // Create new string\n    s2 := make([]byte, l2)\n    for i := 0;\
    \ i < l2; i++ {\n        if shift + i >= l {\n            s2[i] = s[shift + i\
    \ - l]\n        } else {\n            s2[i] = s[shift + i]\n        }\n    }\n\
    \    return string(s2)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: makeslice:\
    \ len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of\
    \ range\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x549050})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5028a0,\
    \ 0x549050})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc000078728?, 0x8)\n\t/tmp/tmpr245yqcv_test.go:25\
    \ +0x8a\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpr245yqcv_test.go:45\
    \ +0x96\ntesting.tRunner(0xc000103380, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xs := fmt.Sprintf(\"\
    %d\", x)\n    xslen := len(xs)\n    if shift > xslen {\n        return reverse(xs)\n\
    \    }\n    xs = xs[xslen-shift:] + xs[:xslen-shift]\n    return xs\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mfwmmdj_test.go:19:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    len := len(str)\n    if shift > len {\n        result := make([]byte,\
    \ len)\n        for i := 0; i < len; i++ {\n            result[i] = str[len -\
    \ i - 1]\n        }\n        return string(result)\n    }\n    return str[len\
    \ - shift:] + str[:len - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xStr := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(xStr) {\n        xStr = reverse(xStr)\n    } else\
    \ {\n        xStr = xStr[shift:] + xStr[:shift]\n    }\n    return xStr\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukmnx422_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    num_digits\
    \ := len(fmt.Sprintf(\"%d\", x))\n    if shift > num_digits {\n        return\
    \ fmt.Sprintf(\"%d\", x)[::-1]\n    }\n    return fmt.Sprintf(\"%d\", x)[shift:]\
    \ + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzckspual_test.go:18:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    switch {\n\
    \    case x < 0:\n        panic(\"Argument x must be non-negative\")\n    case\
    \ shift < 0:\n        panic(\"Argument shift must be non-negative\")\n    case\
    \ x == 0:\n        return \"0\"\n    }\n\n    digits := make([]byte, 0)\n    for\
    \ ; x > 0; x /= 10 {\n        digits = append(digits, byte(x % 10) + '0')\n  \
    \  }\n\n    if shift >= len(digits) {\n        // Shift is larger than number\
    \ of digits, reverse the digits.\n        for i := 0; i < len(digits) / 2; i++\
    \ {\n            j := len(digits) - i - 1\n            digits[i], digits[j] =\
    \ digits[j], digits[i]\n        }\n    } else {\n        // The circular shift\
    \ is trivial in this case.\n        for i := 0; i < shift; i++ {\n           \
    \ j := len(digits) - 1\n            digits[i], digits[j] = digits[j], digits[i]\n\
    \        }\n    }\n\n    return string(digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_vfr94hm_test.go:64: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp_vfr94hm_test.go:64:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp_vfr94hm_test.go:64: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    Circular shift %d,%d\\n\", x, shift)\n    digits := 1\n    count := x\n    for\
    \ count > 10 {\n        count /= 10\n        digits++\n    }\n    shift = shift\
    \ % digits\n    count = x\n    for i := 0; i < shift; i++ {\n        count = (count\
    \ % 10) * (10 * digits) + (count / 10)\n    }\n    return fmt.Sprintf(\"%d\",\
    \ count)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Circular shift 100,2\nCircular shift 12,2\nCircular shift 97,8\nCircular\
    \ shift 12,1\nCircular shift 11,101\n--- FAIL: TestCircular_Shift (0.00s)\n  \
    \  --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpu9wt420t_test.go:48:\
    \ expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpu9wt420t_test.go:48: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpu9wt420t_test.go:48: expected '21', got '41'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpu9wt420t_test.go:48: expected\
    \ '11', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5sgu83rl_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp5sgu83rl_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp5sgu83rl_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var y, power\
    \ int\n    var digits, result string\n\n    // Find the digits of x.\n    for\
    \ x > 0 {\n        digits = fmt.Sprintf(\"%d%s\", x % 10, digits)\n        x /=\
    \ 10\n    }\n\n    // Shift the digits.\n    if shift >= len(digits) {\n     \
    \   // Shift past all the digits, just reverse the string.\n        for _, d :=\
    \ range digits {\n            result = fmt.Sprintf(\"%c%s\", d, result)\n    \
    \    }\n    } else {\n        // Shift some digits, just concatenate in two steps.\n\
    \        result = digits[shift:] + digits[:shift]\n    }\n\n    // Build the integer.\n\
    \    for _, d := range result {\n        power = len(result) - len(digits)\n \
    \       y += int(d - '0') * power\n        power *= 10\n    }\n\n    return fmt.Sprintf(\"\
    %d\", y)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3a9m7jxr_test.go:63: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp3a9m7jxr_test.go:63: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp3a9m7jxr_test.go:63: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp3a9m7jxr_test.go:63: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp3a9m7jxr_test.go:63: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]string, 0)\n    for x > 0 {\n        digits = append(digits, fmt.Sprintf(\"\
    %d\", x % 10))\n        x /= 10\n    }\n    if shift >= len(digits) {\n      \
    \  return reverse(digits)\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[0])\n        digits = digits[1:]\n    }\n    return\
    \ reverse(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9zksaya_test.go:22:16: undefined: reverse

    /tmp/tmp_9zksaya_test.go:28:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    l := len(fmt.Sprintf(\"\
    %d\", x))\n    if shift >= l {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[l-shift:] + fmt.Sprintf(\"%d\", x)[:l-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwtpcgugu_test.go:18:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x\
    \ /= 10\n    }\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return rotate(digits, shift)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc82ah8f2_test.go:22:16: undefined: reverse

    /tmp/tmpc82ah8f2_test.go:24:12: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    Circular shift x: %d, shift: %d\\n\", x, shift)\n    s := fmt.Sprintf(\"%d\",\
    \ x)\n    digit_count := len(s)\n    if shift >= digit_count {\n        res :=\
    \ \"\"\n        for i := len(s) - 1; i >= 0; i-- {\n            res += s[i:i+1]\n\
    \        }\n        return res\n    }\n    return s[digit_count - shift:] + s[:digit_count\
    \ - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Circular shift x: 100, shift: 2\nCircular shift x: 12, shift: 2\nCircular\
    \ shift x: 97, shift: 8\nCircular shift x: 12, shift: 1\nCircular shift x: 11,\
    \ shift: 101\n--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp2wc43q4u_test.go:46: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_len := len(x_str)\n    if shift >= x_len {\n \
    \       new_x_str := \"\"\n        for i := range x_str {\n            new_x_str\
    \ = string(x_str[i]) + new_x_str\n        }\n        return new_x_str\n    }\n\
    \    new_x_str := x_str[(x_len - shift):]\n    new_x_str += x_str[:(x_len - shift)]\n\
    \    return new_x_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp2dpnk7sx_test.go:47: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    shift %= count_digits(x)\n\
    \    s := fmt.Sprintf(\"%d\", x)\n    if shift == 0 {\n        return s\n    }\n\
    \    s = s[shift:] + s[:shift]\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhrcuejb_test.go:19:14: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 0\
    \ {\n        return \"\"\n    }\n    digits := make([]int, 0)\n    for ; x > 0;\
    \ x /= 10 {\n        digits = append(digits, x % 10)\n    }\n    l := len(digits)\n\
    \    if shift > l {\n        for i := 0; i < l / 2; i++ {\n            digits[i],\
    \ digits[l - i - 1] = digits[l - i - 1], digits[i]\n        }\n        return\
    \ fmt.Sprintf(\"%v\", digits)\n    }\n    digits = append(digits[l - shift:],\
    \ digits[:l - shift]...)\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpxskdl3xe_test.go:51: expected '001', got '[0 1 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpxskdl3xe_test.go:51:\
    \ expected '12', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpxskdl3xe_test.go:51: expected '79', got '[9 7]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpxskdl3xe_test.go:51: expected '21', got '[1 2]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpxskdl3xe_test.go:51:\
    \ expected '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    n := len(s)\n    shift = shift % n\n    if shift < n {\n       \
    \ return s[shift:] + s[:shift]\n    }\n    return string(reverse([]rune(s)))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5jmn2yb_test.go:22:19: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Number\
    \ of digits in x.\n    num_digits := 0\n    tmp := x\n    for tmp > 0 {\n    \
    \    tmp /= 10\n        num_digits++\n    }\n\n    // Reversed digits of x\n \
    \   reversed := 0\n    for x > 0 {\n        reversed = 10 * reversed + x % 10\n\
    \        x /= 10\n    }\n\n    if shift > num_digits {\n        shift = num_digits\n\
    \    }\n\n    // Take shift digits from the right of reversed.\n    shifted :=\
    \ 0\n    for i := 0; i < shift; i++ {\n        shifted = 10 * shifted + reversed\
    \ % 10\n        reversed /= 10\n    }\n\n    return fmt.Sprintf(\"%d\", shifted)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmprcjyamk0_test.go:62: expected '001', got '10'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmprcjyamk0_test.go:62: expected\
    \ '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n     \
    \   tmprcjyamk0_test.go:62: expected '21', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift > (x / 10) {\n\
    \        return fmt.Sprintf(\"%d\", x % 10) + circular_shift(x / 10, shift)\n\
    \    }\n    if shift > 0 {\n        tens := x / 10\n        digit := x % 10\n\
    \        return fmt.Sprintf(\"%d\", digit) + circular_shift(tens, shift - 1)\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpmjzakg3i_test.go:47: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string for easier manipulation.\n    s := fmt.Sprintf(\"%d\", x)\n    n :=\
    \ len(s)\n    // If shift > number of digits, return digits reversed.\n    if\
    \ shift > n {\n        return reverse(s)\n    }\n    return s[n-shift:] + s[:n-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvl5xnba_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var numDigits\
    \ int = 0\n    for x > 0 {\n        x /= 10\n        numDigits++\n    }\n    if\
    \ shift > numDigits {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits\
    \ := make([]byte, numDigits)\n    xTmp := x\n    for i := 0; i < numDigits; i++\
    \ {\n        digits[i] = byte('0' + xTmp % 10)\n        xTmp /= 10\n    }\n  \
    \  return string(digits[numDigits - shift:]) + string(digits[:numDigits - shift])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpq4iqe1m8_test.go:50: expected '001', got '000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpq4iqe1m8_test.go:50:\
    \ expected '12', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpq4iqe1m8_test.go:50: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpq4iqe1m8_test.go:50: expected '21', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpq4iqe1m8_test.go:50: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string, which makes manipulating it easier.\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        // The shift requested is greater than\
    \ the number of digits, so we just\n        // reverse the digits and return.\n\
    \        var result string\n        for i := len(s) - 1; i >= 0; i-- {\n     \
    \       result += string(s[i])\n        }\n        return result\n    }\n    //\
    \ Get the right part, up to the shift, and append it to the left part.\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpruba9uu__test.go:48: expected '001', got '010'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    y := x\n\
    \    i := 0\n    for y > 0 {\n        y /= 10\n        i++\n    }\n    // fmt.Printf(\"\
    i: %d\\n\", i)\n    if shift >= i {\n        // fmt.Printf(\"reverse\\n\")\n \
    \       // If shift is greater than the number of digits in x, reverse the digits\n\
    \        y = 0\n        for x > 0 {\n            y = y * 10 + x % 10\n       \
    \     x /= 10\n        }\n        return fmt.Sprintf(\"%d\", y)\n    }\n    y\
    \ = 0\n    for x > 0 {\n        y = y * 10 + x % 10\n        x /= 10\n    }\n\
    \    // Divide by 10 until shift is reached. \n    for shift > 0 {\n        y\
    \ /= 10\n        shift--\n    }\n    return fmt.Sprintf(\"%d\", y)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp6qvphlbl_test.go:63: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp6qvphlbl_test.go:63: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n     \
    \   tmp6qvphlbl_test.go:63: expected '21', got '2'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    shift %=\
    \ len(fmt.Sprintf(\"%d\", x))\n    a := fmt.Sprintf(\"%d\", x)\n    b := fmt.Sprintf(\"\
    %d\", x)\n    a = a[shift:]\n    b = b[:shift]\n    return a + b\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpa1l846cq_test.go:41: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpa1l846cq_test.go:41:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    size := len(fmt.Sprintf(\"\
    %d\", x))\n    fmt.Println(size)\n    if shift >= size {\n        fmt.Println(\"\
    Shift too big. reversing int\")\n        return reverse_string(fmt.Sprintf(\"\
    %d\", x))\n    }\n    str := fmt.Sprintf(\"%d\", x)\n    return str[shift:] +\
    \ str[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsoleiz11_test.go:20:16: undefined: reverse_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ string\n    var digit int\n    var reversed bool\n    if x < 0 {\n        //\
    \ if negative, make it positive\n        x = -x\n        result = \"-\"\n    }\n\
    \    if shift > 0 {\n        for {\n            // extract last digit\n      \
    \      digit = x % 10\n            if digit == 0 && reversed {\n             \
    \   // if at least one digit was shifted and digit is 0, ignore\n            \
    \    x = x / 10\n                continue\n            }\n            // shift\
    \ right, append the digit at the front\n            result = fmt.Sprintf(\"%d%s\"\
    , digit, result)\n            x = x / 10\n            shift = shift - 1\n    \
    \        if shift == 0 {\n                // shift done\n                break\n\
    \            }\n            if x == 0 {\n                // if shift is done,\
    \ but digits to shift exhausted, reverse digits and shift again\n            \
    \    x = digit\n                result = result[1:]\n                reversed\
    \ = true\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_023c32e_test.go:69: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmp_023c32e_test.go:69: expected\
    \ '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n     \
    \   tmp_023c32e_test.go:69: expected '21', got '2'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string and store the string in a slice of\n    // characters.\n\
    \    str := fmt.Sprintf(\"%d\", x)\n    s := []rune(str)\n\n    // Compute the\
    \ number of digits in the string.\n    size := len(s)\n\n    // Compute the shift\
    \ amount.\n    a := shift\n    if size < shift {\n        a = size\n    }\n\n\
    \    // If the shift amount is non-zero, perform the shift.\n    if a > 0 {\n\
    \        s = append(s[size-a:], s[:size-a]...)\n    }\n\n    // Return the string\
    \ representation of the shifted value.\n    return string(s)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp7k4kkjd__test.go:56: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074758
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(x_str) {\n        x_str = reverse(x_str)\n\
    \    } else {\n        x_str = x_str[shift:] + x_str[:shift]\n    }\n    return\
    \ x_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdp3_qs99_test.go:18:17: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return reverse(fmt.Sprintf(\"%d\",\
    \ x))\n    }\n\n    return fmt.Sprintf(\"%d\", x)[len(fmt.Sprintf(\"%d\", x))\
    \ - shift:] + fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x)) - shift]\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbdu_yyv_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074758
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    r := []rune(fmt.Sprintf(\"\
    %d\", x))\n    n := len(r)\n    if shift < n {\n        r = append(r[shift:],\
    \ r[:shift]...)\n    } else {\n        for i, j := 0, n-1; i < j; i, j = i+1,\
    \ j-1 {\n            r[i], r[j] = r[j], r[i]\n        }\n    }\n    return string(r)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp4ta7r6vv_test.go:45: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4ta7r6vv_test.go:45:\
    \ expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        s = reverse(s)\n    } else {\n    \
    \    s = s[shift:] + s[:shift]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7wewwre_test.go:18:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // convert\
    \ the integer to string\n    s := fmt.Sprintf(\"%d\", x)\n    // reverse the string\n\
    \    reversed := []rune(s)\n    for i, j := 0, len(reversed)-1; i < j; i, j =\
    \ i+1, j-1 {\n        reversed[i], reversed[j] = reversed[j], reversed[i]\n  \
    \  }\n    if shift > len(reversed) {\n        return string(reversed)\n    }\n\
    \    return string(reversed[shift:]) + string(reversed[:shift])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmplo59fb0c_test.go:46: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmplo59fb0c_test.go:46:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmplo59fb0c_test.go:46: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    l := len(str)\n    if shift > l {\n        for i, j := 0, l-1; i\
    \ < j; i, j = i+1, j-1 {\n            str[i], str[j] = str[j], str[i]\n      \
    \  }\n        return str\n    }\n    return str[l-shift:] + str[:l-shift]\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbx7q3zex_test.go:20:13: cannot assign to str[i] (value of type byte)

    /tmp/tmpbx7q3zex_test.go:20:21: cannot assign to str[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digit_str\
    \ string\n    var remainder int\n    var quotient int\n    var y int\n    y =\
    \ x\n    for y > 0 {\n        quotient = y / 10\n        remainder = y % 10\n\
    \        digit_str = fmt.Sprintf(\"%v%v\", remainder, digit_str)\n        y =\
    \ quotient\n    }\n    if shift > len(digit_str) {\n        return digit_str\n\
    \    }\n    shift_str := digit_str[shift:]\n    return fmt.Sprintf(\"%v%v\", shift_str,\
    \ digit_str[:shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmph_sjvnip_test.go:51: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmph_sjvnip_test.go:51:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x == 0\
    \ {\n        return \"0\"\n    }\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    s := fmt.Sprintf(\"%d\", x)\n    i := 0\n    j := i + shift\n\
    \    if shift > len(s) {\n        j = len(s)\n    }\n    return s[j:] + s[i:j]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpo5zsaobd_test.go:48: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpo5zsaobd_test.go:48:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string, and reverse it.\n    str := fmt.Sprintf(\"%d\", x)\n\
    \    reverse(str)\n\n    if shift >= len(str) {\n        // If shift is >= number\
    \ of digits, reverse the string.\n        return str\n    }\n\n    return str[shift:]\
    \ + str[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08k7c5ka_test.go:18:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    x: %d shift: %d\\n\", x, shift)\n    x_str := fmt.Sprintf(\"%d\", x)\n    x_str_len\
    \ := len(x_str)\n    fmt.Printf(\"x_str: %s x_str_len: %d\\n\", x_str, x_str_len)\n\
    \    if shift >= x_str_len {\n        // reverse x_str and return it\n       \
    \ var rev_x_str string\n        for i := x_str_len - 1; i >= 0; i-- {\n      \
    \      rev_x_str += string(x_str[i])\n        }\n        return rev_x_str\n  \
    \  }\n    shifted_x_str := x_str[shift:] + x_str[:shift]\n    return shifted_x_str\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x: 100 shift: 2\nx_str: 100 x_str_len: 3\nx: 12 shift: 2\nx_str: 12 x_str_len:\
    \ 2\nx: 97 shift: 8\nx_str: 97 x_str_len: 2\nx: 12 shift: 1\nx_str: 12 x_str_len:\
    \ 2\nx: 11 shift: 101\nx_str: 11 x_str_len: 2\n--- FAIL: TestCircular_Shift (0.00s)\n\
    \    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp2lohk_hb_test.go:49:\
    \ expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n\
    \        tmp2lohk_hb_test.go:49: expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digit\
    \ = 1\n    for ; digit <= x; digit *= 10 {\n    }\n    digit /= 10\n    for i\
    \ := 0; i < shift; i++ {\n        if digit == 0 {\n            digit = 1\n   \
    \         for ; digit <= x; digit *= 10 {\n            }\n            digit /=\
    \ 10\n        }\n        last_digit := x % 10\n        x /= 10\n        x += digit\
    \ * last_digit\n        digit /= 10\n    }\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp0ssr0qyg_test.go:52: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp0ssr0qyg_test.go:52: expected\
    \ '12', got '3'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp0ssr0qyg_test.go:52: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp0ssr0qyg_test.go:52: expected '11', got '2'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    r := reverse(x)\n\
    \    m := shift % len(r)\n    return r[m:] + r[:m]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8_mk_zq_test.go:16:10: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    shift: %d\\n\", shift)\n    fmt.Printf(\"x: %d\\n\", x)\n    num_digits := 0\n\
    \    for tmp := x; tmp > 0; tmp /= 10 {\n        num_digits++\n    }\n    fmt.Printf(\"\
    num_digits: %d\\n\", num_digits)\n    shift %= num_digits\n    tmp := x\n    for\
    \ i := 0; i < shift; i++ {\n        // val is the last digit, x is the other digits\n\
    \        val := tmp % 10\n        tmp /= 10\n        tmp += val * int(math.Pow(10,\
    \ float64(num_digits - 1)))\n    }\n    fmt.Printf(\"tmp: %d\\n\", tmp)\n    return\
    \ strconv.Itoa(tmp)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjnhg3c1j_test.go:29:26: undefined: math

    /tmp/tmpjnhg3c1j_test.go:32:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    // convert to string\n\
    \    x_str := fmt.Sprintf(\"%d\", x)\n    x_str_length := len(x_str)\n\n    //\
    \ return reversed string if there is no shift\n    if shift >= x_str_length {\n\
    \        return reverse_str(x_str)\n    }\n\n    // return shifted string\n  \
    \  part_1 := x_str[x_str_length - shift:]\n    part_2 := x_str[:x_str_length -\
    \ shift]\n    return part_1 + part_2\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4wvnhqb_test.go:26:16: undefined: reverse_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for x != 0 {\n        digits = append(digits, x % 10)\n       \
    \ x /= 10\n    }\n    for shift %= len(digits); shift != 0; shift-- {\n      \
    \  last := digits[len(digits) - 1]\n        copy(digits[1:], digits[:len(digits)\
    \ - 1])\n        digits[0] = last\n    }\n    str := \"\"\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        str += fmt.Sprintf(\"%d\", digits[i])\n    }\n \
    \   return str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpbsy32m2t_test.go:50: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpbsy32m2t_test.go:50:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digit_count\
    \ := count_digits(x)\n    if shift >= digit_count {\n        return reverse_digits(x)\n\
    \    }\n\n    str := fmt.Sprintf(\"%d\", x)\n    return str[shift:] + str[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi91qdy11_test.go:16:20: undefined: count_digits

    /tmp/tmpi91qdy11_test.go:18:16: undefined: reverse_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074759
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n\n    for x != 0 {\n        digits = append(digits, x % 10)\n       \
    \ x /= 10\n    }\n\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n\n    for i := 1; i <= shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n\n    var result string\n    for _, d :=\
    \ range digits {\n        result += fmt.Sprintf(\"%d\", d)\n    }\n\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7uk5m6as_test.go:57: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7uk5m6as_test.go:57:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp7uk5m6as_test.go:57: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // x contains\
    \ digits.\n    // shift = shift.\n    // y contains result.\n    // =======================\n\
    \    // y = reverse(reverse(x) + reverse(x))[shift:].\n    // if shift > number\
    \ of digits in x, reverse x and return it.\n    digits := []rune(fmt.Sprintf(\"\
    %d\", x))\n    l := len(digits)\n    if shift > l {\n        for i, j := 0, l\
    \ - 1; i < j; i, j = i + 1, j - 1 {\n            digits[i], digits[j] = digits[j],\
    \ digits[i]\n        }\n        return string(digits)\n    }\n    digits = append(digits,\
    \ digits...)\n    for i, j := 0, l - 1; i < j; i, j = i + 1, j - 1 {\n       \
    \ digits[i], digits[j] = digits[j], digits[i]\n    }\n    return string(digits[shift:shift\
    \ + l])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp6tpk_kq2_test.go:54: expected '001', got '110'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp6tpk_kq2_test.go:54:\
    \ expected '21', got '11'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5sgu83rl_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp5sgu83rl_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp5sgu83rl_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var num_digits\
    \ int\n    var curr_x int = x\n    for {\n        if curr_x > 0 {\n          \
    \  num_digits += 1\n            curr_x /= 10\n        } else {\n            break\n\
    \        }\n    }\n    if shift >= num_digits {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    fmt.Printf(\"num_digits: %d\\n\", num_digits)\n    var digits\
    \ [32]int\n    curr_x = x\n    var i int\n    for {\n        if curr_x > 0 {\n\
    \            digits[i] = curr_x % 10\n            i += 1\n            curr_x /=\
    \ 10\n        } else {\n            break\n        }\n    }\n    var result string\n\
    \    for i := num_digits - shift; i < num_digits; i++ {\n        result += fmt.Sprintf(\"\
    %d\", digits[i])\n    }\n    for i := 0; i < num_digits - shift; i++ {\n     \
    \   result += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "num_digits: 3\nnum_digits: 2\n--- FAIL: TestCircular_Shift (0.00s)\n  \
    \  --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp76r2dlp__test.go:69:\
    \ expected '001', got '010'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp76r2dlp__test.go:69: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp76r2dlp__test.go:69: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    f := 1\n\
    \    s := 0\n    var swap int\n    var i = 0\n    swap = x\n    for {\n      \
    \  if swap < 10 {\n            s = swap\n            break\n        }\n      \
    \  swap = swap / 10\n        f = f * 10\n        i++\n    }\n    shift = shift\
    \ % i\n    if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n   \
    \ for j := 0; j < shift; j++ {\n        x = x / 10\n        x = x + (s * f)\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp76dqpmcj_test.go:58: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp76dqpmcj_test.go:58:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp76dqpmcj_test.go:58: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xs := fmt.Sprintf(\"\
    %d\", x)\n    n := len(xs)\n    if shift >= n {\n        r := make([]byte, n)\n\
    \        for i := 0; i < n; i++ {\n            r[i] = xs[n-i-1]\n        }\n \
    \       return string(r)\n    }\n    xs = fmt.Sprintf(\"%d\", x)\n    return xs[n-shift:]\
    \ + xs[:n-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp9bmwj7v0_test.go:46: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits := len(fmt.Sprintf(\"\
    %d\", x))\n    if shift > digits {\n        return fmt.Sprintf(\"%s\", reverse(fmt.Sprintf(\"\
    %d\", x)))\n    }\n\n    return fmt.Sprintf(\"%s%s\", fmt.Sprintf(\"%d\", x)[shift:],\
    \ fmt.Sprintf(\"%d\", x)[:shift])\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnzite4kr_test.go:22:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ < 0 {\n        shift = shift * -1\n    }\n    s := fmt.Sprintf(\"%d\", x)\n\
    \    l := len(s)\n    if shift >= l {\n        // reverse the string\n       \
    \ r := []rune(s)\n        for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1\
    \ {\n            r[i], r[j] = r[j], r[i]\n        }\n        return string(r)\n\
    \    }\n    return s[l-shift:] + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpvf6r2bm5_test.go:49: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    y := x\n\
    \    digits := 0\n    for y > 0 {\n        y /= 10\n        digits++\n    }\n\
    \    if shift >= digits {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    z\
    \ := x\n    for i := 0; i < shift; i++ {\n        z /= 10\n    }\n    z = x -\
    \ z * 10\n    return fmt.Sprintf(\"%d%d\", z, x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp8926u4xb_test.go:50: expected '001', got '90100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp8926u4xb_test.go:50:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp8926u4xb_test.go:50: expected '21', got '212'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074760
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x\
    \ /= 10\n    }\n    fmt.Println(digits)\n    if shift >= len(digits) {\n     \
    \   // Reverse the digits.\n        for i := 0; i < len(digits) / 2; i++ {\n \
    \           digits[i], digits[len(digits) - i - 1] = digits[len(digits) - i -\
    \ 1], digits[i]\n        }\n    } else {\n        rotate_right(digits, shift)\n\
    \    }\n    result := \"\"\n    for _, digit := range digits {\n        result\
    \ += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ux7nbt3_test.go:28:9: undefined: rotate_right

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074760
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Extract\
    \ digits from input integer and convert to array of digits.\n    digits := make([]int,\
    \ 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n\
    \    }\n    // Handle shift > number of digits.\n    if shift > len(digits) {\n\
    \        shift = shift % len(digits)\n    }\n    // Circular shift the digits.\n\
    \    digits = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n\
    \    // Convert the array of digits to a string.\n    output := \"\"\n    for\
    \ _, digit := range digits {\n        output += fmt.Sprintf(\"%d\", digit)\n \
    \   }\n    return output\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3mgl28fd_test.go:53: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp3mgl28fd_test.go:53:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp3mgl28fd_test.go:53: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074761
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    dgts := fmt.Sprintf(\"\
    %d\", x)\n    n := len(dgts)\n    rev := false\n    if shift > n {\n        rev\
    \ = true\n        shift = shift % n\n    }\n    if shift == 0 {\n        return\
    \ dgts\n    }\n    if rev {\n        for i := 0; i < shift; i++ {\n          \
    \  dgts = rotate_right(dgts)\n        }\n    } else {\n        for i := 0; i <\
    \ shift; i++ {\n            dgts = rotate_left(dgts)\n        }\n    }\n    return\
    \ dgts\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnow2r547_test.go:28:20: undefined: rotate_right

    /tmp/tmpnow2r547_test.go:32:20: undefined: rotate_left

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    res := \"\
    \"\n    digits := get_digits(x)\n    shift %= len(digits)\n    // reverse digits\n\
    \    for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n        digits[i],\
    \ digits[j] = digits[j], digits[i]\n    }\n    for i := 0; i < shift; i++ {\n\
    \        res += string(digits[i])\n    }\n    for i := shift; i < len(digits);\
    \ i++ {\n        res += string(digits[i])\n    }\n    return res\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc6mno704_test.go:17:15: undefined: get_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 0\
    \ {\n        return \"\"\n    }\n\n    result := make([]byte, 0)\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    n := len(digits)\n    if shift > n {\n        for\
    \ i := n-1; i >= 0; i-- {\n            result = append(result, digits[i])\n  \
    \      }\n    } else {\n        result = append(result, digits[n-shift:]...)\n\
    \        result = append(result, digits[:n-shift]...)\n    }\n    return string(result)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    length := len(s)\n    if shift >= length {\n        for i, j :=\
    \ 0, length-1; i < j; i, j = i+1, j-1 {\n            s[i], s[j] = s[j], s[i]\n\
    \        }\n        return s\n    }\n    s = s[length-shift:] + s[:length-shift]\n\
    \    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcul6b6my_test.go:20:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpcul6b6my_test.go:20:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    n := shift\n\
    \    x_str := fmt.Sprintf(\"%d\", x)\n    if n > len(x_str) {\n        return\
    \ Reverse(x_str)\n    }\n    for i := 0; i < n; i++ {\n        //pop the last\
    \ digit and put it on the front\n        x_str = x_str[len(x_str)-1:] + x_str[:len(x_str)-1]\n\
    \    }\n    return x_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1uy0avt_test.go:19:16: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ string\n    if x == 0 {\n        return \"0\"\n    }\n    if shift > digits(x)\
    \ {\n        return reverse(x)\n    }\n    for i := 0; i < shift; i++ {\n    \
    \    last_digit := x % 10\n        result = fmt.Sprintf(\"%d%s\", last_digit,\
    \ result)\n        x = x / 10\n    }\n    result = fmt.Sprintf(\"%d%s\", x, result)\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpslwxxerk_test.go:20:16: undefined: digits

    /tmp/tmpslwxxerk_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ [4]int\n    var num_digits int\n    for x > 0 {\n        digit := x % 10\n \
    \       x = x / 10\n        digits[num_digits] = digit\n        num_digits++\n\
    \    }\n    if shift > num_digits {\n        shift = shift % num_digits\n    }\n\
    \    start := num_digits - shift\n    var circular_shifted_digits [4]int\n   \
    \ for i := 0; i < num_digits; i++ {\n        digit := digits[start]\n        circular_shifted_digits[i]\
    \ = digit\n        start++\n        if start == num_digits {\n            start\
    \ = 0\n        }\n    }\n    var result string\n    for i := 0; i < num_digits;\
    \ i++ {\n        result += fmt.Sprintf(\"%d\", circular_shifted_digits[i])\n \
    \   }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp6meuw3ck_test.go:61: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp6meuw3ck_test.go:61:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp6meuw3ck_test.go:61: expected '79', got '00'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp6meuw3ck_test.go:61: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x\
    \ /= 10\n    }\n    for i := 0; i < shift % len(digits); i++ {\n        digits\
    \ = append(digits, digits[0])\n        digits = digits[1:]\n    }\n    reverse(digits)\n\
    \    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fhl8v5u_test.go:25:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Convert the string to\
    \ a rune slice.\n    runes := []rune(str)\n    // Get the number of digits\n \
    \   l := len(runes)\n    // Chop off leading 0's to get the actual number of digits\n\
    \    for i := 0; i < l; i++ {\n        if runes[i] != '0' {\n            l = i\n\
    \            break\n        }\n    }\n    // The number of digits is the length\
    \ of the rune slice minus the number of\n    // leading 0's\n    num_digits :=\
    \ l + 1\n    // Now just return the number reversed if shift > number of digits\n\
    \    if shift > num_digits {\n        for i, j := 0, num_digits-1; i < j; i, j\
    \ = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n\
    \        return string(runes)\n    }\n    // Rotate the runes slice right by shift\n\
    \    shift = shift % num_digits\n    l = num_digits - shift\n    for i, j := 0,\
    \ l-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n\
    \    }\n    // Now rotate the entire string left by shift to get the result\n\
    \    for i, j := l, num_digits-1; i < j; i, j = i+1, j-1 {\n        runes[i],\
    \ runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu3vg6c39_test.go:69: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpu3vg6c39_test.go:69:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpu3vg6c39_test.go:69: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // We could\
    \ use a string.Split, but that would be\n    // really slow\n    xstr := fmt.Sprintf(\"\
    %d\", x)\n    shift %= len(xstr)\n    if shift == 0 {\n        return xstr\n \
    \   }\n    return xstr[shift:] + xstr[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpu8k2851y_test.go:43: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpu8k2851y_test.go:43:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var str =\
    \ fmt.Sprintf(\"%d\", x)\n    var num_digits = len(str)\n    var right_shift =\
    \ shift % num_digits\n    if (right_shift == 0) {\n        return str\n    }\n\
    \    var digits = make([]byte, len(str))\n    for i := 0; i < num_digits; i++\
    \ {\n        var s_pos = (i + right_shift) % num_digits\n        digits[i] = str[s_pos]\n\
    \    }\n    return string(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr14g77g9_test.go:47: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpr14g77g9_test.go:47:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_len := len(x_str)\n    if shift >= x_len {\n \
    \       return x_str[:1] + reverse(x_str[1:])\n    } else {\n        return x_str[shift:]\
    \ + x_str[:shift]\n    }\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq1t06ik_test.go:19:28: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n\n    for x != 0 {\n        digits = append(digits, x % 10)\n       \
    \ x /= 10\n    }\n\n    for i := 0; i < shift % len(digits); i++ {\n        digits\
    \ = append(digits, digits[0])\n        digits = digits[1:]\n    }\n\n    result\
    \ := \"\"\n    for i := len(digits) - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"\
    %d\", digits[i])\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp__r23z3h_test.go:53: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return \"\
    \"\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpbdz7n1ug_test.go:36: expected '001', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpbdz7n1ug_test.go:36: expected\
    \ '12', got ''\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n       \
    \ tmpbdz7n1ug_test.go:36: expected '79', got ''\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpbdz7n1ug_test.go:36: expected '21', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpbdz7n1ug_test.go:36: expected\
    \ '11', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5sgu83rl_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp5sgu83rl_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp5sgu83rl_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    length := len(str)\n    if shift > length {\n        shift = length\n\
    \    }\n    return str[length-shift:] + str[:length-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq0mldeop_test.go:41: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        // reverse\n        s := fmt.Sprintf(\"\
    %d\", x)\n        rs := make([]rune, len(s))\n        for i, r := range s {\n\
    \            rs[len(s)-1-i] = r\n        }\n        return string(rs)\n    }\n\
    \    i := shift\n    for ; i < len(fmt.Sprintf(\"%d\", x)); i++ {\n        fmt.Printf(\"\
    %c\", rune(fmt.Sprintf(\"%d\", x)[i]))\n    }\n    for j := 0; j < shift; j++\
    \ {\n        fmt.Printf(\"%c\", rune(fmt.Sprintf(\"%d\", x)[j]))\n    }\n    return\
    \ \"\"\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "0101221--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpkxezeh6l_test.go:52: expected '001', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpkxezeh6l_test.go:52: expected\
    \ '12', got ''\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n       \
    \ tmpkxezeh6l_test.go:52: expected '21', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    var rev_x int\n\n   \
    \ for x > 0 {\n        rev_x = rev_x * 10 + x % 10\n        x /= 10\n    }\n\n\
    \    for shift > 0 {\n        rev_x = rev_x / 10 + (rev_x % 10) * (1000000000\
    \ / 10)\n        shift--\n    }\n\n    var result string\n\n    for rev_x > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", rev_x % 10)\n        rev_x /= 10\n\
    \    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3idl_o_f_test.go:59: expected '001', got '00000001'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp3idl_o_f_test.go:59:\
    \ expected '12', got '000000012'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp3idl_o_f_test.go:59: expected '79', got '097'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmp3idl_o_f_test.go:59: expected\
    \ '21', got '200000001'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp3idl_o_f_test.go:59: expected '11', got '000000011'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    s := fmt.Sprintf(\"\
    %d\", x)\n    digits := len(s)\n    mod := shift % digits\n    if mod == 0 {\n\
    \        return s\n    }\n\n    return s[mod:] + s[:mod]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp6mdet3fy_test.go:47: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp6mdet3fy_test.go:47:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    for ; shift > len(digits); shift -= len(digits) {\n    }\n    shift_digits\
    \ := []int{}\n    for i := 0; i < len(digits) - shift; i++ {\n        shift_digits\
    \ = append(shift_digits, digits[i])\n    }\n    for i := len(digits) - shift;\
    \ i < len(digits); i++ {\n        shift_digits = append(shift_digits, digits[i])\n\
    \    }\n    shift_str := \"\"\n    for i := len(shift_digits) - 1; i >= 0; i--\
    \ {\n        shift_str += fmt.Sprintf(\"%d\", shift_digits[i])\n    }\n    return\
    \ shift_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpsts3d6ap_test.go:57: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpsts3d6ap_test.go:57:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpsts3d6ap_test.go:57: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := make([]int, 0)\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    i := shift % len(digits)\n    return fmt.Sprintf(\"%d%d\", digits[i],\
    \ digits[1-i])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x2)\n\t/tmp/tmpgja_c60v_test.go:25\
    \ +0x1e5\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpgja_c60v_test.go:35\
    \ +0x4b\ntesting.tRunner(0xc0000da1a0, 0x528f58)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    t := x\n    for t > 0 {\n        digits = append(digits, t % 10)\n\
    \        t /= 10\n    }\n    if shift > len(digits) {\n        return fmt.Sprintf(\"\
    %v\", digits)\n    }\n    // circular shift, shift digits right by shift\n   \
    \ digits = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n\
    \    // convert to string\n    str := \"\"\n    for _, d := range digits {\n \
    \       str += fmt.Sprintf(\"%v\", d)\n    }\n    return str\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpnu1igs4l_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpnu1igs4l_test.go:52:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpnu1igs4l_test.go:52: expected '79', got '[7 9]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpnu1igs4l_test.go:52: expected '21', got '12'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpnu1igs4l_test.go:52: expected\
    \ '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ get_digits(x)\n    if shift >= len(digits) {\n        return fmt.Sprintf(\"\
    %v\", digits)\n    }\n    return fmt.Sprintf(\"%v%v\", digits[len(digits)-shift:],\
    \ digits[:len(digits)-shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0bulose_test.go:16:15: undefined: get_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    for ; x > 0; x /= 10 {\n        result = fmt.Sprintf(\"%d%s\", x %\
    \ 10, result)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmphr04wqdr_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmphr04wqdr_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmphr04wqdr_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n \
    \       x /= 10\n    }\n    shift %= len(digits)\n    if shift == 0 {\n      \
    \  return fmt.Sprintf(\"%v\", digits)\n    }\n    return fmt.Sprintf(\"%v\", append(digits[shift:],\
    \ digits[:shift]...))\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpgcbiot8o_test.go:45: expected '001', got '[1 0 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpgcbiot8o_test.go:45:\
    \ expected '12', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpgcbiot8o_test.go:45: expected '79', got '[7 9]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpgcbiot8o_test.go:45: expected '21', got '[1 2]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpgcbiot8o_test.go:45:\
    \ expected '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    y := x\n\
    \    if shift > 0 {\n        y /= 10\n    }\n    if shift > 1 {\n        y /=\
    \ 10\n    }\n    if shift > 2 {\n        y /= 10\n    }\n    if shift > 3 {\n\
    \        y /= 10\n    }\n    if shift > 4 {\n        y /= 10\n    }\n    if shift\
    \ > 5 {\n        y /= 10\n    }\n    if shift > 6 {\n        y /= 10\n    }\n\
    \    if shift > 7 {\n        y /= 10\n    }\n    if shift > 8 {\n        y /=\
    \ 10\n    }\n    if shift > 9 {\n        y /= 10\n    }\n    if shift > 10 {\n\
    \        y /= 10\n    }\n    if shift > 11 {\n        y /= 10\n    }\n    if shift\
    \ > 12 {\n        y /= 10\n    }\n    if shift > 13 {\n        y /= 10\n    }\n\
    \    if shift > 14 {\n        y /= 10\n    }\n    if shift > 15 {\n        y /=\
    \ 10\n    }\n    if shift > 16 {\n        y /= 10\n    }\n    if shift > 17 {\n\
    \        y /= 10\n    }\n    if shift > 18 {\n        y /= 10\n    }\n    if shift\
    \ > 19 {\n        y /= 10\n    }\n    if shift > 20 {\n        y /= 10\n    }\n\
    \    if shift > 21 {\n        y /= 10\n    }\n    if shift > 22 {\n        y /=\
    \ 10\n    }\n    if shift > 23 {\n        y /= 10\n    }\n    if shift > 24 {\n\
    \        y /= 10\n    }\n    if shift > 25 {\n        y /= 10\n    }\n    if shift\
    \ > 26 {\n        y /= 10\n    }\n    if shift > 27 {\n        y /= 10\n    }\n\
    \    if shift > 28 {\n        y /= 10\n    }\n    if shift > 29 {\n        y /=\
    \ 10\n    }\n    if shift > 30 {\n        y /= 10\n    }\n    if shift > 31 {\n\
    \        y /\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp456r5qkw_test.go:112:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    length := len(s)\n    shifts := shift % length\n    if shifts >\
    \ 0 {\n        s = s[length-shifts:] + s[:length-shifts]\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpwkt9ipik_test.go:42: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ >= digits(x) {\n        return fmt.Sprintf(\"%d\", reverse(x))\n    }\n    y\
    \ := x % (10 ** shift)\n    z := x / (10 ** shift)\n    return fmt.Sprintf(\"\
    %d%d\", y, z)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprgr3t_of_test.go:16:17: undefined: digits

    /tmp/tmprgr3t_of_test.go:17:34: undefined: reverse

    /tmp/tmprgr3t_of_test.go:19:21: invalid operation: cannot indirect shift (variable
    of type int)

    /tmp/tmprgr3t_of_test.go:20:21: invalid operation: cannot indirect shift (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xlen := len(fmt.Sprintf(\"\
    %d\", x))\n    shift = shift % xlen\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    if shift > xlen {\n        return reverse(fmt.Sprintf(\"\
    %d\", x))\n    }\n    xs := fmt.Sprintf(\"%d\", x)\n    return xs[xlen-shift:]\
    \ + xs[:xlen-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpde10buqh_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return s\n    }\n    return s[shift:]\
    \ + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpmzysdkoh_test.go:40: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpmzysdkoh_test.go:40:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var xrev\
    \ = reverse(x)\n    var shifted = string(xrev[shift % len(xrev):]) + string(xrev[:shift\
    \ % len(xrev)])\n    return reverse(string_to_int(shifted))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dz8_io_test.go:16:16: undefined: reverse

    /tmp/tmpe_dz8_io_test.go:18:12: undefined: reverse

    /tmp/tmpe_dz8_io_test.go:18:20: undefined: string_to_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for ; x > 0; x /= 10 {\n        digits = append(digits, x % 10)\n\
    \    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n   \
    \ for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n \
    \       digits = digits[1:]\n    }\n    for i := 0; i < len(digits) / 2; i++ {\n\
    \        digits[i], digits[len(digits) - i - 1] = digits[len(digits) - i - 1],\
    \ digits[i]\n    }\n    result := \"\"\n    for _, digit := range digits {\n \
    \       result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpwrxhjqom_test.go:54: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074764
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    chars := []rune(s)\n    if shift > len(chars) {\n        for i,\
    \ j := 0, len(chars)-1; i < j; i, j = i+1, j-1 {\n            chars[i], chars[j]\
    \ = chars[j], chars[i]\n        }\n        return string(chars)\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        c := chars[len(chars)-1]\n        chars =\
    \ append([]rune{c}, chars[:len(chars)-1]...)\n    }\n    return string(chars)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    num_digits := len(x_str)\n    shift %= num_digits\n\
    \    if shift > 0 {\n        return x_str[num_digits-shift:] + x_str[:num_digits-shift]\n\
    \    } else {\n        return reverse(x_str)\n    }\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkg6qmbh0_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    d_list :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    res := make([]rune, len(d_list))\n    for\
    \ i, d := range d_list {\n        if shift + i >= len(d_list) {\n            res[shift+i-len(d_list)]\
    \ = d\n        } else {\n            res[shift+i] = d\n        }\n    }\n    return\
    \ string(res)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [6] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [6] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmpxfsuzw0t_test.go:20\
    \ +0x125\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpxfsuzw0t_test.go:37\
    \ +0x96\ntesting.tRunner(0xc0000da1a0, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    l := len(digits)\n    if shift > l {\n        return\
    \ reverse(digits)\n    } else {\n        digits = digits[l-shift:] + digits[:l-shift]\n\
    \        return digits\n    }\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lep1qka_test.go:19:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x == 0\
    \ {\n        return \"0\"\n    }\n    s := fmt.Sprintf(\"%d\", x)\n    // reverse\
    \ the string\n    var r string\n    for i := len(s) - 1; i >= 0; i-- {\n     \
    \   r += string(s[i])\n    }\n    // shift back characters\n    shift %= len(s)\n\
    \    if shift == 0 {\n        return r\n    }\n    for i := 0; i < shift; i++\
    \ {\n        r = string(r[len(r) - 1]) + r[:len(r) - 1]\n    }\n    return r\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpn1acq4lr_test.go:53: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpn1acq4lr_test.go:53:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpn1acq4lr_test.go:53: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n \
    \       x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        last := digits[len(digits)\
    \ - 1]\n        for j := len(digits) - 1; j > 0; j-- {\n            digits[j]\
    \ = digits[j - 1]\n        }\n        digits[0] = last\n    }\n    result := \"\
    \"\n    for i := len(digits) - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"\
    %d\", digits[i])\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp1blh1h_i_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp1blh1h_i_test.go:52:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n \
    \       x /= 10\n    }\n    l := len(digits)\n    if shift >= l {\n        //\
    \ shift larger than number of digits. Reverse digits.\n        shift = l - 1\n\
    \    }\n    s := \"\"\n    for i := 0; i < l; i++ {\n        digit := digits[(i\
    \ + shift) % l]\n        s += fmt.Sprintf(\"%d\", digit)\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpczg7r5lc_test.go:51: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpczg7r5lc_test.go:51:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpczg7r5lc_test.go:51: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the int to a string\n    n := fmt.Sprintf(\"%d\", x)\n    // fmt.Println(n)\n\
    \    // Reverse the int\n    reversed := []rune(n)\n    for i, j := 0, len(reversed)-1;\
    \ i < j; i, j = i+1, j-1 {\n        reversed[i], reversed[j] = reversed[j], reversed[i]\n\
    \    }\n    // fmt.Println(string(reversed))\n    if shift > len(reversed) {\n\
    \        return string(reversed)\n    }\n    // Pop off the last shift digits\
    \ and join them to the front\n    new_start := make([]rune, shift)\n    copy(new_start,\
    \ reversed[len(reversed)-shift:])\n    // fmt.Println(string(new_start))\n   \
    \ new_end := reversed[:len(reversed)-shift]\n    // fmt.Println(string(new_end))\n\
    \    new_order := append(new_start, new_end...)\n    // fmt.Println(string(new_order))\n\
    \    return string(new_order)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmph9er9idp_test.go:56: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmph9er9idp_test.go:56:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmph9er9idp_test.go:56: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    Shift: %d\\n\", shift)\n    fmt.Printf(\"Shift %% 10: %d\\n\", shift % 10)\n \
    \   result := fmt.Sprintf(\"%d\", x)\n    fmt.Printf(\"result: %s\\n\", result)\n\
    \    result = result[len(result) - (shift % 10):] + result[:len(result) - (shift\
    \ % 10)]\n    fmt.Printf(\"result: %s\\n\", result)\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Shift: 2\nShift % 10: 2\nresult: 100\nresult: 001\nShift: 2\nShift % 10:\
    \ 2\nresult: 12\nresult: 12\nShift: 8\nShift % 10: 8\nresult: 97\n--- FAIL: TestCircular_Shift\
    \ (0.00s)\npanic: runtime error: slice bounds out of range [-6:] [recovered]\n\
    \tpanic: runtime error: slice bounds out of range [-6:]\n\ngoroutine 6 [running]:\n\
    testing.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmpvbg8rajd_test.go:20\
    \ +0x265\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpvbg8rajd_test.go:34\
    \ +0x96\ntesting.tRunner(0xc0000d04e0, 0x528f78)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        digits = fmt.Sprintf(\"\
    %s\", reverse(digits))\n    } else {\n        digits = fmt.Sprintf(\"%s%s\", \n\
    \                digits[len(digits)-shift:], digits[:len(digits)-shift])\n   \
    \ }\n    return digits\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuazwrpgv_test.go:18:36: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    l := len(s)\n    if shift > l {\n        for i, j := 0, l-1; i <\
    \ j; i, j = i+1, j-1 {\n            s[i], s[j] = s[j], s[i]\n        }\n     \
    \   return s\n    }\n    return s[l-shift:] + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpus_2276f_test.go:20:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpus_2276f_test.go:20:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // If x is\
    \ negative, chop off the '-' so we can\n    // count the number of digits.\n \
    \   i := x\n    if i < 0 {\n        i = -i\n    }\n    // How many digits in x?\n\
    \    n := 0\n    for ; i > 0; i /= 10 {\n        n++\n    }\n    // Chop off the\
    \ first n-shift digits, then reverse them.\n    // The remaining digits are the\
    \ result.\n    //\n    // If shift is larger than the number of digits, reverse\
    \ the digits and\n    // return them.\n    j := 1\n    for i = 0; i < shift &&\
    \ j <= n; i++ {\n        j *= 10\n    }\n    if j > n {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    k := x / j\n    s := fmt.Sprintf(\"%d\", k)\n    for i, j\
    \ = 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j], s[i]\n \
    \   }\n    // Then, append the remaining digits.\n    return fmt.Sprintf(\"%s%d\"\
    , s, x % j)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr7jhq_ir_test.go:42:9: cannot assign to s[i] (value of type byte)

    /tmp/tmpr7jhq_ir_test.go:42:15: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_str_len := len(x_str)\n    if shift > x_str_len\
    \ {\n        // Reverse the string\n        for i := 0; i < x_str_len/2; i++ {\n\
    \            x_str[i], x_str[x_str_len-i-1] = x_str[x_str_len-i-1], x_str[i]\n\
    \        }\n    } else {\n        x_str = x_str[x_str_len-shift:] + x_str[:x_str_len-shift]\n\
    \    }\n    return x_str\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpefmz_q6z_test.go:21:13: cannot assign to x_str[i] (value of type byte)

    /tmp/tmpefmz_q6z_test.go:21:23: cannot assign to x_str[x_str_len - i - 1] (value
    of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift > 10 {\n\
    \        shift = shift % 10\n    }\n    if shift > x {\n        // reverse the\
    \ digits\n        digits := fmt.Sprintf(\"%d\", x)\n        reverse := \"\"\n\
    \        for i := len(digits) - 1; i >= 0; i-- {\n            reverse += string(digits[i])\n\
    \        }\n        return reverse\n    }\n    // split the digits\n    first\
    \ := x / int(fmt.Sprintf(\"%d\", x)[0] - '0')\n    second := x % int(fmt.Sprintf(\"\
    %d\", x)[0] - '0')\n    // shift the digits\n    return fmt.Sprintf(\"%d%d\",\
    \ second, first)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpsik7k40w_test.go:55: expected '001', got '0100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpsik7k40w_test.go:55:\
    \ expected '12', got '012'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpsik7k40w_test.go:55: expected '79', got '710'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpsik7k40w_test.go:55: expected '21', got '012'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpsik7k40w_test.go:55: expected\
    \ '11', got '011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    count :=\
    \ 0\n    m := x\n    for m > 0 {\n        m /= 10\n        count++\n    }\n  \
    \  if shift > count {\n        m := x\n        result := 0\n        for m > 0\
    \ {\n            result = result * 10 + m % 10\n            m /= 10\n        }\n\
    \        return fmt.Sprintf(\"%d\", result)\n    }\n    for shift > 0 {\n    \
    \    a := x % 10\n        x = x / 10 + a * int(1e8)\n        shift--\n    }\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp301__feo_test.go:56: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp301__feo_test.go:56: expected\
    \ '12', got '120000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp301__feo_test.go:56: expected '21', got '200000001'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ x\n    // number of digits\n    n := 0\n    // 1-indexed position of the most\
    \ significant digit\n    p := 0\n    for digits > 0 {\n        n += 1\n      \
    \  p += 1\n        digits /= 10\n    }\n    // shift is greater than number of\
    \ digits\n    if shift >= n {\n        return fmt.Sprintf(\"%d\", reverse(x))\n\
    \    }\n    for shift > 0 {\n        // find the most significant digit\n    \
    \    msd := x / int(pow(10, n-1))\n        // replace the least significant digit\
    \ with the most significant digit\n        x = x + (msd * int(pow(10, n-1)))\n\
    \        // remove the most significant digit\n        x = x % int(pow(10, n-1))\n\
    \        shift -= 1\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoo6thoa9_test.go:28:34: undefined: reverse

    /tmp/tmpoo6thoa9_test.go:32:24: undefined: pow

    /tmp/tmpoo6thoa9_test.go:34:28: undefined: pow

    /tmp/tmpoo6thoa9_test.go:36:21: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ x\n    digit_count := 0\n    reversed := 0\n    for digits > 0 {\n        d\
    \ := digits % 10\n        reversed = reversed * 10 + d\n        digits /= 10\n\
    \        digit_count += 1\n    }\n    if shift >= digit_count {\n        return\
    \ fmt.Sprintf(\"%d\", reversed)\n    }\n    for i := 0; i < shift; i++ {\n   \
    \     reversed = reversed % 10 * 10 + reversed / 10\n    }\n    return fmt.Sprintf(\"\
    %d\", reversed)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmppxlrb543_test.go:51: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmppxlrb543_test.go:51: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n     \
    \   tmppxlrb543_test.go:51: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := 1\n    for\
    \ ; digits * 10 <= x; digits *= 10 {\n    }\n    if shift >= digits {\n      \
    \  shift = shift % digits\n        digits = 1\n        for ; digits * 10 <= x;\
    \ digits *= 10 {\n        }\n    }\n    y := x % digits\n    z := (x - y) / digits\n\
    \    return fmt.Sprintf(\"%d%d\", y, z)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5c4cq1nm_test.go:50: expected '001', got '01'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp5c4cq1nm_test.go:50: expected\
    \ '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ 0\n    t := x\n    for t > 0 {\n        digits += 1\n        t /= 10\n    }\n\
    \    if shift >= digits {\n        x = reverse(x)\n    } else {\n        x = right_shift(x,\
    \ shift)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpotweeu0s_test.go:23:13: undefined: reverse

    /tmp/tmpotweeu0s_test.go:25:13: undefined: right_shift

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    var result string\n    var tmp int\n\n    if x == 0 {\n        digits\
    \ = []int{0}\n    } else {\n        tmp = x\n        for tmp > 0 {\n         \
    \   digits = append(digits, tmp % 10)\n            tmp /= 10\n        }\n    }\n\
    \n    shift %= len(digits)\n    for i := 0; i < len(digits); i++ {\n        result\
    \ += fmt.Sprintf(\"%d\", digits[(i + shift) % len(digits)])\n    }\n\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp6jta05gi_test.go:55: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp6jta05gi_test.go:55:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp6jta05gi_test.go:55: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // reverse\
    \ the string\n    str := fmt.Sprintf(\"%d\", x)\n    l := len(str)\n    // reverse\
    \ string\n    for i := 0; i < l/2; i++ {\n        str[i], str[l-i-1] = str[l-i-1],\
    \ str[i]\n    }\n    fmt.Println(str)\n    return \"\"\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8q41dqk_test.go:21:9: cannot assign to str[i] (value of type byte)

    /tmp/tmpk8q41dqk_test.go:21:17: cannot assign to str[l - i - 1] (value of type
    byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps61cqpcp_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Make x\
    \ positive if it is negative.\n    if x < 0 {\n        x = -x\n    }\n    // Convert\
    \ the number to a string and make it a slice.\n    s := []byte(fmt.Sprintf(\"\
    %d\", x))\n    s_len := len(s)\n    shift = shift % s_len\n    // If we don't\
    \ need to shift, return string.\n    if shift == 0 {\n        return string(s)\n\
    \    }\n    // If shift is greater than number of digits, reverse the digits.\n\
    \    if shift > s_len {\n        for i := 0; i < s_len/2; i++ {\n            s[i],\
    \ s[s_len-i-1] = s[s_len-i-1], s[i]\n        }\n        return string(s)\n   \
    \ }\n    // Otherwise, circular shift the digits.\n    s = append(s[s_len-shift:],\
    \ s[:s_len-shift]...)\n    return string(s)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpwgmn9s5c_test.go:57: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string, then to a rune slice\n    s := []rune(fmt.Sprintf(\"%d\", x))\n \
    \   length := len(s)\n    shift = shift % length\n\n    // Reverse runes\n   \
    \ for i := 0; i < length/2; i++ {\n        s[i], s[length-i-1] = s[length-i-1],\
    \ s[i]\n    }\n\n    // Rotate the runes\n    s = append(s[length-shift:], s[:length-shift]...)\n\
    \n    return string(s)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpv7w_9mlg_test.go:49: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpv7w_9mlg_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpv7w_9mlg_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ []int\n    digits := int_to_digits(x)\n    var pos int = 0\n    var counter\
    \ int = 0\n    for pos < len(digits) {\n        result = append(result, digits[pos])\n\
    \        counter++\n        pos = (pos + shift) % len(digits)\n    }\n    if counter\
    \ == len(digits) {\n        return slice_to_string(result)\n    } else {\n   \
    \     var result_reversed []int\n        for i := len(result) - 1; i >= 0; i--\
    \ {\n            result_reversed = append(result_reversed, result[i])\n      \
    \  }\n        return slice_to_string(result_reversed)\n    }\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82r1h6xl_test.go:17:15: undefined: int_to_digits

    /tmp/tmp82r1h6xl_test.go:26:16: undefined: slice_to_string

    /tmp/tmp82r1h6xl_test.go:32:16: undefined: slice_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x <= 0\
    \ {\n        return \"0\"\n    }\n    max_digits := 0\n    digits := []rune{}\n\
    \    for i := x; i > 0; i /= 10 {\n        digit := i % 10\n        digits = append(digits,\
    \ rune(digit) + '0')\n        max_digits++\n    }\n    if shift > max_digits {\n\
    \        shift = max_digits\n    }\n    digits = append(digits[max_digits - shift:],\
    \ digits[:max_digits - shift]...)\n    return string(digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_y4gu9b__test.go:50: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_y4gu9b__test.go:50:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp_y4gu9b__test.go:50: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    num_digits := len(digits)\n    if shift >= num_digits\
    \ {\n        return string(reverse(digits))\n    }\n    return digits[shift:]\
    \ + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp53bhnn62_test.go:19:23: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > num_digits(x) {\n        return reverse_digits(x)\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        x = circular_shift_right(x)\n    }\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8s7jq9w7_test.go:16:16: undefined: num_digits

    /tmp/tmp8s7jq9w7_test.go:17:16: undefined: reverse_digits

    /tmp/tmp8s7jq9w7_test.go:20:13: undefined: circular_shift_right

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    shift = shift\
    \ % (len(fmt.Sprintf(\"%d\", x)) + 1)\n    digits := []byte(fmt.Sprintf(\"%d\"\
    , x))\n    reversed := []byte(fmt.Sprintf(\"%d\", x))\n    for i, j := 0, len(digits)\
    \ - 1; i < j; i, j = i + 1, j - 1 {\n        reversed[i], reversed[j] = reversed[j],\
    \ reversed[i]\n    }\n    if shift > len(digits) {\n        return string(reversed)\n\
    \    }\n    return string(append(digits[len(digits) - shift:], digits[:len(digits)\
    \ - shift]...))\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmppsczzwlw_test.go:45: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    n := len(s)\n    if shift > n {\n        shift = n\n    }\n    return\
    \ s[n-shift:] + s[:n-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpvyp3r106_test.go:41: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > 0 {\n        x = x / (10 * (shift % 4))\n    }\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmp9s9xl90s_test.go:17\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp9s9xl90s_test.go:31\
    \ +0x9a\ntesting.tRunner(0xc00011b1e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    l := len(s)\n    if shift > l {\n        return reverse(s)\n   \
    \ }\n    return s[l-shift:] + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzud_oth_test.go:19:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    x: %d shift: %d\\n\", x, shift)\n    if shift >= len(fmt.Sprintf(\"%d\", x)) {\n\
    \        fmt.Printf(\"Reversing.\\n\")\n        reversed := 0\n        for x >\
    \ 0 {\n            reversed = reversed * 10 + x % 10\n            x /= 10\n  \
    \      }\n        return fmt.Sprintf(\"%d\", reversed)\n    }\n    left := x /\
    \ (10 * (len(fmt.Sprintf(\"%d\", x)) - shift))\n    right := x % (10 * (len(fmt.Sprintf(\"\
    %d\", x)) - shift))\n    fmt.Printf(\"left: %d right: %d\\n\", left, right)\n\
    \    return fmt.Sprintf(\"%d%d\", right, left)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x: 100 shift: 2\nleft: 10 right: 0\nx: 12 shift: 2\nReversing.\nx: 97 shift:\
    \ 8\nReversing.\nx: 12 shift: 1\nleft: 1 right: 2\nx: 11 shift: 101\nReversing.\n\
    --- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpq5r2qj4h_test.go:49: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpq5r2qj4h_test.go:49:\
    \ expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    strLen := len(digits)\n    shift %= strLen\n   \
    \ if shift == 0 {\n        return digits\n    } else if shift == strLen {\n  \
    \      return reverse_string(digits)\n    } else {\n        return fmt.Sprintf(\"\
    %s%s\", reverse_string(digits[shift:]), reverse_string(digits[:shift]))\n    }\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_gfd0t9_test.go:22:16: undefined: reverse_string

    /tmp/tmpu_gfd0t9_test.go:24:36: undefined: reverse_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5sgu83rl_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp5sgu83rl_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp5sgu83rl_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return reverse(fmt.Sprintf(\"%d\",\
    \ x))\n    }\n    if shift == 0 {\n        return fmt.Sprintf(\"%d\", x)\n   \
    \ }\n    first, last := fmt.Sprintf(\"%d\", x)[0:shift], fmt.Sprintf(\"%d\", x)[shift:]\n\
    \    return last + first\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbk5k76f_test.go:17:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str_x :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(str_x) {\n        str_x = Reverse(str_x)\n\
    \    } else {\n        str_x = str_x[shift:] + str_x[:shift]\n    }\n    return\
    \ str_x\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjn41sdh_test.go:18:17: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digit :=\
    \ []int{}\n    for x != 0 {\n        digit = append(digit, x % 10)\n        x\
    \ /= 10\n    }\n    if shift > len(digit) {\n        shift = len(digit)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digit = append(digit, digit[0])\n \
    \       digit = digit[1:]\n    }\n    for i := 0; i < len(digit) / 2; i++ {\n\
    \        digit[i], digit[len(digit) - i - 1] = digit[len(digit) - i - 1], digit[i]\n\
    \    }\n    result := \"\"\n    for _, d := range digit {\n        result += fmt.Sprintf(\"\
    %d\", d)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpkpz5vyxg_test.go:55: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer x to a string\n    str := fmt.Sprintf(\"%d\", x)\n    s := shift\
    \ % len(str)\n    // Circular shift the digits by shifting to the left, then to\
    \ the right\n    return str[s:] + str[:s]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpwo4t08a5_test.go:40: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpwo4t08a5_test.go:40:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    for i := 0; i < shift; i++ {\n        s = s[len(s)-1:] + s[:len(s)-1]\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpa3syqa54_test.go:40: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    length :=\
    \ len(fmt.Sprintf(\"%d\", x))\n    if shift > length {\n        return reverse(fmt.Sprintf(\"\
    %d\", x))\n    }\n    end := x % (int)(math.Pow(10, shift))\n    start := x /\
    \ (int)(math.Pow(10, shift))\n    return fmt.Sprintf(\"%d%d\", end, start)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphallrktw_test.go:18:16: undefined: reverse

    /tmp/tmphallrktw_test.go:20:22: undefined: math

    /tmp/tmphallrktw_test.go:21:24: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    for i := 0; i < shift; i++ {\n        s = s[len(s)-1:] + s[:len(s)-1]\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpa3syqa54_test.go:40: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return circular_shift_str(fmt.Sprintf(\"\
    %d\", x), shift)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqd4i0tg7_test.go:16:12: undefined: circular_shift_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Make sure\
    \ the shift is within the number of digits.\n    // If shift is too high, just\
    \ reverse the digits.\n    shifted := x\n    digits := 0\n    for shifted > 0\
    \ {\n        shifted /= 10\n        digits++\n    }\n    if shift > digits {\n\
    \        shift = digits\n    }\n\n    // Now do the shift.\n    var shift_digits\
    \ []int\n    for x > 0 {\n        shift_digits = append(shift_digits, x % 10)\n\
    \        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        shift_digits\
    \ = append(shift_digits, shift_digits[0])\n        shift_digits = shift_digits[1:]\n\
    \    }\n\n    // Return result as a string.\n    result := \"\"\n    for i :=\
    \ len(shift_digits) - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\",\
    \ shift_digits[i])\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmptfhxn9rr_test.go:64: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ 0\n    temp := x\n    for temp > 0 {\n        digits++\n        temp /= 10\n\
    \    }\n    fmt.Printf(\"There are %d digits in %d\\n\", digits, x)\n    if shift\
    \ >= digits {\n        return reverse(x)\n    }\n    y := 0\n    for x > 0 {\n\
    \        y = y * 10 + x % 10\n        x /= 10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        x = x * 10 + y % 10\n        y /= 10\n    }\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpyhvurn_test.go:24:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if len(s) < shift {\n        s = reverse(s)\n    } else {\n    \
    \    s = s[len(s)-shift:] + s[:len(s)-shift]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj7_61fbg_test.go:18:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift < len(digits) {\n        return digits[shift:]\
    \ + digits[:shift]\n    } else {\n        return reverse(digits)\n    }\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ab7g98f_test.go:20:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    d := len(s)\n    r := s\n    shift = shift % d\n    if shift > 0\
    \ {\n        r = s[d-shift:] + s[:d-shift]\n    }\n    return r\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp64jbt_k9_test.go:43: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Get length\
    \ of integer as a string\n    s := fmt.Sprintf(\"%d\", x)\n    slen := len(s)\n\
    \n    // Get last digit\n    l := s[slen-1:]\n\n    // Shift right by shifting\
    \ left slen-shift times\n    y := x << uint(slen-shift)\n\n    // Add last digit\
    \ to the beginning\n    return l + fmt.Sprintf(\"%d\", y)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvu0bd7fd_test.go:47: expected '001', got '0200'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpvu0bd7fd_test.go:47:\
    \ expected '12', got '212'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpvu0bd7fd_test.go:47: expected '79', got '70'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvu0bd7fd_test.go:47: expected '21', got '224'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpvu0bd7fd_test.go:47: expected\
    \ '11', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    shift = shift\
    \ % len(fmt.Sprintf(\"%d\", x))\n    digit_slice := []rune(fmt.Sprintf(\"%d\"\
    , x))\n    return string(digit_slice[len(digit_slice) - shift:]) + string(digit_slice[:len(digit_slice)\
    \ - shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmptmz3tq1v_test.go:38: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    return fmt.Sprintf(\"%s%s\", s[len(s)-shift:], s[:len(s)-shift])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-6:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-6:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmp72g__slv_test.go:17\
    \ +0x109\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp72g__slv_test.go:29\
    \ +0x96\ntesting.tRunner(0xc0000cc4e0, 0x527f58)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    n := len(str)\n    if shift > n {\n        // Return reversed digits\n\
    \        for i, j := 0, n-1; i < j; i, j = i+1, j-1 {\n            str[i], str[j]\
    \ = str[j], str[i]\n        }\n        return str\n    } else {\n        return\
    \ str[n-shift:] + str[:n-shift]\n    }\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpleq77h_m_test.go:21:13: cannot assign to str[i] (value of type byte)

    /tmp/tmpleq77h_m_test.go:21:21: cannot assign to str[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n   \
    \ tmp := x\n    for tmp > 0 {\n        digits = append(digits, tmp % 10)\n   \
    \     tmp /= 10\n    }\n    if shift >= len(digits) {\n        return fmt.Sprintf(\"\
    %d\", reverse(x))\n    }\n    shift = len(digits) - shift\n    digits = append(digits[shift:],\
    \ digits[:shift]...)\n    res := 0\n    n := len(digits)\n    for i := 0; i <\
    \ n; i++ {\n        res += digits[i] * power(10, n - i - 1)\n    }\n    return\
    \ fmt.Sprintf(\"%d\", res)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdmio3qs_test.go:26:34: undefined: reverse

    /tmp/tmppdmio3qs_test.go:33:28: undefined: power

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > number_of_digits(x) {\n        return reverse_digits(x)\n    }\n\n    y :=\
    \ x % pow10(shift)\n    return fmt.Sprintf(\"%d%d\", y, x / pow10(shift))\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7jjv1zff_test.go:16:16: undefined: number_of_digits

    /tmp/tmp7jjv1zff_test.go:17:16: undefined: reverse_digits

    /tmp/tmp7jjv1zff_test.go:20:14: undefined: pow10

    /tmp/tmp7jjv1zff_test.go:21:39: undefined: pow10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    str := fmt.Sprintf(\"\
    %d\", x)\n    l := len(str)\n    shift = shift % l\n    return str[l-shift:] +\
    \ str[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpbkcutnds_test.go:42: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    len := len(str)\n    if shift > len {\n        shift = len\n   \
    \ }\n    shifted := make([]byte, len)\n    copy(shifted[shift:], str[:len-shift])\n\
    \    copy(shifted[:shift], str[len-shift:])\n    return string(shifted)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpividcl82_test.go:44: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x == 0\
    \ {\n        return \"0\"\n    }\n    if shift > length(x) {\n        return reverse(x)\n\
    \    }\n    digits := make([]int, length(x))\n    n := x\n    i := 0\n    for\
    \ n > 0 {\n        digits[i] = n % 10\n        n /= 10\n        i++\n    }\n \
    \   for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    // fmt.Println(digits)\n    var r string\n\
    \    for i := len(digits) - 1; i >= 0; i-- {\n        r += fmt.Sprintf(\"%d\"\
    , digits[i])\n    }\n    return r\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoiif2dg5_test.go:19:16: undefined: length

    /tmp/tmpoiif2dg5_test.go:20:16: undefined: reverse

    /tmp/tmpoiif2dg5_test.go:22:27: undefined: length

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > num_digits(x) {\n        return reverse_digits(x)\n    }\n    r := x % pow10(shift)\n\
    \    return fmt.Sprintf(\"%d%d\", r, x / pow10(shift))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs54_scu_test.go:16:16: undefined: num_digits

    /tmp/tmphs54_scu_test.go:17:16: undefined: reverse_digits

    /tmp/tmphs54_scu_test.go:19:14: undefined: pow10

    /tmp/tmphs54_scu_test.go:20:39: undefined: pow10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return \"\
    \"\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpbdz7n1ug_test.go:36: expected '001', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpbdz7n1ug_test.go:36: expected\
    \ '12', got ''\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n       \
    \ tmpbdz7n1ug_test.go:36: expected '79', got ''\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpbdz7n1ug_test.go:36: expected '21', got ''\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpbdz7n1ug_test.go:36: expected\
    \ '11', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    ndigits := len(str)\n    if shift >= ndigits {\n        return reversed(str)\n\
    \    }\n    return str[shift:] + str[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7vsgwolq_test.go:19:16: undefined: reversed

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ >= len(fmt.Sprintf(\"%d\", x)) {\n        return reverse(fmt.Sprintf(\"%d\"\
    , x))\n    }\n\n    reversed := reverse(fmt.Sprintf(\"%d\", x))\n    rotated :=\
    \ reversed[:shift] + reversed[shift:]\n    return reverse(rotated)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhby9kq__test.go:17:16: undefined: reverse

    /tmp/tmpxhby9kq__test.go:20:17: undefined: reverse

    /tmp/tmpxhby9kq__test.go:22:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    l := 0\n\
    \    t := x\n    for t != 0 {\n        l += 1\n        t /= 10\n    }\n    if\
    \ shift >= l {\n        s := \"\"\n        for x != 0 {\n            s = fmt.Sprintf(\"\
    %d%s\", x % 10, s)\n            x /= 10\n        }\n        return s\n    } else\
    \ {\n        return fmt.Sprintf(\"%d%d\", x / (int(fmt.Sprintf(\"%d\", x)[0:shift])\
    \ + 1), x % (int(fmt.Sprintf(\"%d\", x)[0:shift]) + 1))\n    }\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwvdldx_u_test.go:30:65: cannot convert fmt.Sprintf("%d", x)[0:shift] (value
    of type string) to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    if shift\
    \ == len(s) {\n        return s\n    }\n    return s[shift:] + s[:shift]\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkchl6fwg_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n\n    s := fmt.Sprintf(\"%d\", x)\n    left := s[:len(s) - shift]\n  \
    \  right := s[len(s) - shift:]\n    return right + left\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdistw0_e_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    n := len(s)\n    shift = shift % n\n    if shift == 0 {\n      \
    \  return s\n    }\n    if shift > n {\n        for i, j := 0, n-1; i < j; i,\
    \ j = i+1, j-1 {\n            s[i], s[j] = s[j], s[i]\n        }\n        return\
    \ s\n    }\n    return s[n-shift:] + s[:n-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3ikti5y_test.go:24:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpq3ikti5y_test.go:24:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    num_digits\
    \ := 1\n    rem := x\n    for rem > 9 {\n        rem /= 10\n        num_digits++\n\
    \    }\n    if shift > num_digits {\n        return fmt.Sprintf(\"%d\", x)\n \
    \   }\n    res := x\n    for shift > 0 {\n        last_digit := res % 10\n   \
    \     res /= 10\n        res += last_digit * int(num_digits * 1e9)\n        shift--\n\
    \    }\n    return fmt.Sprintf(\"%d\", res)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpz0g3lnx7_test.go:52: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpz0g3lnx7_test.go:52: expected\
    \ '12', got '2400000000'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpz0g3lnx7_test.go:52: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpz0g3lnx7_test.go:52: expected '21', got '4000000001'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // y = x\
    \ * 10^n % 10^m, where n is the number of digits in x and m is n-shift\n    //\
    \ n = floor(log10(x)) + 1\n    // log10(x) = log(x) / log(10)\n    // m = ceil(log10(x)\
    \ - shift)\n    // y = x * 10^n % 10^m\n    // y = x * 10^n * 10^-m % 10^m\n \
    \   // y = x * 10^(n-m) % 10^m\n    // y = x * 10^(n-m)\n    n := int(1 + math.Floor(math.Log10(float64(x))))\n\
    \    m := int(math.Ceil(math.Log10(float64(x)) - float64(shift)))\n    y := x\
    \ * int(math.Pow(10, float64(n-m)))\n    return strconv.Itoa(y)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl14s76c7_test.go:24:18: undefined: math

    /tmp/tmpl14s76c7_test.go:25:14: undefined: math

    /tmp/tmpl14s76c7_test.go:26:18: undefined: math

    /tmp/tmpl14s76c7_test.go:27:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_digits\
    \ := []rune(fmt.Sprintf(\"%d\", x))\n    shift = shift % len(x_digits)\n    return\
    \ string(append(x_digits[shift:], x_digits[:shift]...))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmph7vi3idg_test.go:38: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmph7vi3idg_test.go:38:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    length := len(str)\n    if shift > length {\n        return rev(str)\n\
    \    } else {\n        return str[length-shift:] + str[:length-shift]\n    }\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxpiac4xq_test.go:19:16: undefined: rev

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    if shift > len(digits) {\n        return\
    \ reverse(digits)\n    }\n    shifted := make([]rune, len(digits))\n    for i\
    \ := 0; i < len(digits); i++ {\n        shifted[i] = digits[(i + shift) % len(digits)]\n\
    \    }\n    return string(shifted)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprs3b7yvf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer x to a string s.\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse\
    \ the string.\n    if len(s) < shift {\n        fmt.Printf(\"Rotate %d, by %d\\\
    n\", x, shift)\n        s = reverse(s)\n    } else {\n        fmt.Printf(\"Shift\
    \ %d, by %d\\n\", x, shift)\n        s = s[shift:] + s[:shift]\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps7ymgdbw_test.go:21:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    num_digits := len(digits)\n    if shift >= num_digits\
    \ {\n        // Reverse digits.\n        out := make([]rune, num_digits)\n   \
    \     for i, r := range digits {\n            out[num_digits - i - 1] = r\n  \
    \      }\n        return string(out)\n    }\n    return digits[shift:] + digits[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp2lp_5cwr_test.go:46: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp2lp_5cwr_test.go:46:\
    \ expected '12', got '21'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    y := x\n    for y > 0 {\n        digits = append(digits, y % 10)\n\
    \        y /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    digits = append(digits[len(digits) - shift:], digits[:len(digits)\
    \ - shift]...)\n    y = 0\n    for _, d := range digits {\n        y = y * 10\
    \ + d\n    }\n    return fmt.Sprintf(\"%d\", y)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpwejnwjd3_test.go:50: expected '001', got '10'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpwejnwjd3_test.go:50: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n     \
    \   tmpwejnwjd3_test.go:50: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[len(fmt.Sprintf(\"%d\", x)) - shift:]\
    \ + fmt.Sprintf(\"%d\", x)[:len(fmt.Sprintf(\"%d\", x)) - shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbl92nifd_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", reverse(x))\n\
    \    }\n    digits := make([]int, 0)\n    for _, char := range fmt.Sprintf(\"\
    %d\", x) {\n        digits = append(digits, int(char)-48)\n    }\n    shifted\
    \ := append(digits[shift:], digits[:shift]...)\n    result := make([]string, 0)\n\
    \    for _, digit := range shifted {\n        result = append(result, fmt.Sprintf(\"\
    %d\", digit))\n    }\n    return strings.Join(result, \"\")\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ge749ie_test.go:17:34: undefined: reverse

    /tmp/tmp0ge749ie_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    xDigits :=\
    \ make([]int, 0)\n    m := x\n    for m > 0 {\n        m, r := m/10, m%10\n  \
    \      xDigits = append(xDigits, r)\n    }\n    if shift > len(xDigits) {\n  \
    \      for i, j := 0, len(xDigits)-1; i < j; i, j = i+1, j-1 {\n            xDigits[i],\
    \ xDigits[j] = xDigits[j], xDigits[i]\n        }\n    } else {\n        xDigits\
    \ = append(xDigits[shift:], xDigits[:shift]...)\n    }\n    out := \"\"\n    for\
    \ _, d := range xDigits {\n        out += fmt.Sprintf(\"%d\", d)\n    }\n    return\
    \ out\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb65bjc2f_test.go:19:9: m declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var s string\n\
    \    var y int\n    y = 1\n    for x > 0 {\n        y *= 10\n        x /= 10\n\
    \    }\n    y /= 10\n    x = shift\n    for y > 0 {\n        s += fmt.Sprintf(\"\
    %d\", (shift / y) % 10)\n        x %= y\n        y /= 10\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7aw9z8zr_test.go:50: expected '001', got '002'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7aw9z8zr_test.go:50:\
    \ expected '12', got '02'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7aw9z8zr_test.go:50: expected '79', got '08'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp7aw9z8zr_test.go:50: expected '21', got '01'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp7aw9z8zr_test.go:50: expected\
    \ '11', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var xStr\
    \ = fmt.Sprintf(\"%d\", x)\n    shift %= len(xStr)\n    if shift == 0 {\n    \
    \    return xStr\n    }\n    if shift > len(xStr) {\n        shift = len(xStr)\
    \ - shift\n    }\n    var xStrLast = xStr[len(xStr) - shift:]\n    xStr = xStr[:len(xStr)\
    \ - shift]\n    return xStrLast + xStr\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpohg20nzs_test.go:46: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_len := len(x_str)\n    if shift >= x_len {\n \
    \       return reverse(x_str)\n    } else {\n        return fmt.Sprintf(\"%s%s\"\
    , x_str[shift:], x_str[:shift])\n    }\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvaquymr9_test.go:19:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    x=%d\\n\", x)\n    fmt.Printf(\"shift=%d\\n\", shift)\n    // Convert int to string\n\
    \    s := fmt.Sprintf(\"%d\", x)\n    fmt.Printf(\"s=%s\\n\", s)\n    // Convert\
    \ string to array of bytes\n    b := []byte(s)\n    fmt.Printf(\"b=%d\\n\", b)\n\
    \    // Reverse bytes\n    reverse(b)\n    fmt.Printf(\"b=%d\\n\", b)\n    //\
    \ Return as string\n    return string(b)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9eit7eix_test.go:25:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_string\
    \ := fmt.Sprintf(\"%d\", x)\n    if shift > len(x_string) {\n        x_string\
    \ = reverse(x_string)\n    } else {\n        x_string = x_string[len(x_string)\
    \ - shift:] + x_string[:len(x_string) - shift]\n    }\n    return x_string\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2ystobt_test.go:18:20: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp5sgu83rl_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp5sgu83rl_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp5sgu83rl_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    n := x\n\
    \    digits := 0\n    for n > 0 {\n        n /= 10\n        digits++\n    }\n\
    \    if shift > digits {\n        return reverse(x)\n    }\n\n    for shift >\
    \ 0 {\n        digit := x % 10\n        x /= 10\n        x += digit * power(10,\
    \ digits - 1)\n        shift--\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpohx4zcxx_test.go:23:16: undefined: reverse

    /tmp/tmpohx4zcxx_test.go:29:22: undefined: power

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    n := len(s)\n    i := shift % n\n    if i > 0 {\n        return\
    \ s[i:] + s[:i]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp17odmoeb_test.go:42: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp17odmoeb_test.go:42:\
    \ expected '79', got '97'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbhvasntk_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    fmt.Printf(\"\
    x: %d\\n\", x)\n    fmt.Printf(\"shift: %d\\n\", shift)\n    var str string =\
    \ fmt.Sprintf(\"%d\", x)\n    fmt.Printf(\"x as string: %s\\n\", str)\n    if\
    \ shift > len(str) {\n        return reverse(str)\n    }\n    var result string\
    \ = str[len(str) - shift:] + str[:len(str) - shift]\n    fmt.Printf(\"result:\
    \ %s\\n\", result)\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph4p9x0r5_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    str := fmt.Sprintf(\"\
    %d\", x)\n    length := len(str)\n    if shift > length {\n        return reverse(str)\n\
    \    }\n    return str[shift:] + str[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2ajztie_test.go:19:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if len(s) == 1 {\n        return s\n    }\n    if shift < len(s)\
    \ {\n        return s[shift:] + s[:shift]\n    }\n    return reverse(s)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjc59f2ak_test.go:23:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var y int\
    \ = x\n    var p int = 10\n    var digits int = 1\n    for y >= 10 {\n       \
    \ digits += 1\n        y /= 10\n        p *= 10\n    }\n    for shift > digits\
    \ {\n        shift -= digits\n    }\n    for shift > 0 {\n        x = (x % 10)\
    \ * p + x / 10\n        shift -= 1\n    }\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpgcg4y5wu_test.go:51: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpgcg4y5wu_test.go:51: expected\
    \ '12', got '120'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n    \
    \    tmpgcg4y5wu_test.go:51: expected '79', got '970'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpgcg4y5wu_test.go:51: expected '21', got '201'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpgcg4y5wu_test.go:51: expected\
    \ '11', got '101'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
