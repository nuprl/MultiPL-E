name: HumanEval_55_fib
language: go_test.go
prompt: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
  // 21\nfunc fib(n int) int {\n"
tests: "func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
  \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
  \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    a, b := 0, 1\n    for i := 0; i < n; i++ {\n        a,\
    \ b = b, a+b\n    }\n    return a\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    return int(((1.0 + 5.0**0.5)**float64(n)\
    \ - (1.0 - 5.0**0.5)**float64(n)) / (2.0**float64(n) * 5.0**0.5))\n}\n", "   \
    \ if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    return 0\n}\n", "    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    var f0, f1,\
    \ fn int\n    f0 = 0\n    f1 = 1\n    for i := 0; i < n; i++ {\n        fn = f0\
    \ + f1\n        f0 = f1\n        f1 = fn\n    }\n    return fn\n}\n", "    if\
    \ n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", " \
    \   a, b := 0, 1\n    for i := 0; i < n; i++ {\n        a, b = b, a+b\n    }\n\
    \    return a\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    p, q := 0, 1\n    for i := 0; i < n; i++ {\n        p,\
    \ q = q, p+q\n    }\n    return p\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    switch n {\n    case 0:\n\
    \        return 0\n    case 1:\n        return 1\n    default:\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    if n <= 1 {\n        return n\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    return\
    \ n\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    var f1 = 1\n  \
    \  var f2 = 1\n    var fn = 0\n    for i := 3; i <= n; i++ {\n        fn = f1\
    \ + f2\n        f1 = f2\n        f2 = fn\n    }\n    return fn\n}\n", "    if\
    \ n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    a, b := 1, 1\n\
    \    for i := 0; i < n-2; i++ {\n        a, b = b, a+b\n    }\n    return b\n\
    }\n", "    if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 2 {\n        return 1\n    } else {\n        return fib(n-1)\
    \ + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n\
    \ == 1 || n == 2 {\n        return 1\n    } else {\n        return fib(n-1) +\
    \ fib(n-2)\n    }\n}\n", "    if n <= 2 {\n        return 1\n    } else {\n  \
    \      return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n \
    \       return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    } else {\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    switch n\
    \ {\n    case 0:\n        return 0\n    case 1:\n        return 1\n    default:\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1\
    \ {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    x, y\
    \ := 0, 1\n    for i := 0; i < n; i++ {\n        x, y = y, x+y\n    }\n    return\
    \ x\n}\n", "    fib := make([]int, n)\n    fib[0] = 1\n    fib[1] = 1\n    for\
    \ i := 2; i < n; i++ {\n        fib[i] = fib[i-1] + fib[i-2]\n    }\n    return\
    \ fib[n-1]\n}\n", "    return 1\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n\
    \ <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "   \
    \ if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    x, y := 0, 1\n    for i := 0; i < n; i++ {\n        x, y = y, x+y\n\
    \    }\n    return x\n}\n", "    if n == 1 || n == 2 {\n        return 1\n   \
    \ } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n <= 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    fibs := make([]int,\
    \ n)\n    fibs[0] = 1\n    fibs[1] = 1\n    for i := 2; i < n; i++ {\n       \
    \ fibs[i] = fibs[i-1] + fibs[i-2]\n    }\n    return fibs[n-1]\n}\n", "    return\
    \ 0\n}\n", "    a, b := 0, 1\n    for i := 0; i < n; i++ {\n        a, b = b,\
    \ a+b\n    }\n    return a\n}\n", "    if n == 1 || n == 2 {\n        return 1\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n   \
    \     return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 ||\
    \ n == 2 {\n        return 1\n    } else {\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    // Your code goes here.\n    return 0\n}\n", "    if n <= 1\
    \ {\n        return n\n    }\n\n    prev1, prev2 := 1, 0\n    for i := 2; i <=\
    \ n; i++ {\n        cur := prev1 + prev2\n        prev2 = prev1\n        prev1\
    \ = cur\n    }\n\n    return prev1\n}\n", "    //  TODO: implement fib\n    return\
    \ 0\n}\n", "    if n <= 1 {\n        return n\n    }\n    var a, b int = 0, 1\n\
    \    for i := 2; i <= n; i++ {\n        tmp := a + b\n        a = b\n        b\
    \ = tmp\n    }\n    return b\n}\n", "    if n <= 2 {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n == 1 || n == 2 {\n        return 1\n    } else {\n        return fib(n-1)\
    \ + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n\
    \ == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    f1, f2 := 0, 1\n    for i := 1; i < n; i++ {\n        f1, f2 = f2,\
    \ f1 + f2\n    }\n    return f2\n}\n", "    if n <= 1 {\n        return n\n  \
    \  }\n\n    fibn := fib(n-1) + fib(n-2)\n    return fibn\n}\n", "    if n <= 1\
    \ {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n\
    \ == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    } else {\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    if n <= 1 {\n        return n\n    }\n\
    \n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    x, y := 0, 1\n    for i\
    \ := 0; i < n; i++ {\n        x, y = y, x+y\n    }\n    return x\n}\n", "    if\
    \ n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    return 0\n}\n", "    if n <= 1 {\n        return n\n    }\n    f1,\
    \ f2 := 0, 1\n    for i := 2; i <= n; i++ {\n        f1, f2 = f2, f1 + f2\n  \
    \  }\n    return f2\n}\n", "    switch n {\n    case 0:\n        return 0\n  \
    \  case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    // Time complexity: O(n).\n    // Space complexity: O(1).\n\
    \    // if n == 0 {\n    //     return 0\n    // }\n    // if n == 1 {\n    //\
    \     return 1\n    // }\n    // return fib(n-1) + fib(n-2)\n    // Time complexity:\
    \ O(n).\n    // Space complexity: O(1).\n    if n == 0 {\n        return 0\n \
    \   }\n    a, b := 0, 1\n    for i := 1; i < n; i++ {\n        a, b = b, a+b\n\
    \    }\n    return b\n}\n", "    if n == 1 || n == 2 {\n        return 1\n   \
    \ }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    // we need 2 variables\
    \ to keep track of the two previous fibonacci numbers\n    prev, prevprev := 1,\
    \ 0\n    for n > 0 {\n        // the fibonacci sequence is calculated by adding\
    \ the two previous numbers\n        prev, prevprev = prev+prevprev, prev\n   \
    \     n--\n    }\n    return prevprev\n}\n", "    if n == 1 || n == 2 {\n    \
    \    return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1\
    \ {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n\
    \ <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "   \
    \ if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 2 {\n        return 1\n    } else {\n        return fib(n-1)\
    \ + fib(n-2)\n    }\n}\n", "    // TODO: insert code here.\n    return 0\n}\n",
  "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    var a, b int = 0, 1\n    for i := 0; i < n; i++ {\n        a, b = b,\
    \ a + b\n    }\n    return a\n}\n", "    if n <= 2 {\n        return 1\n    }\n\
    \    a, b := 1, 1\n    for i := 2; i < n; i++ {\n        b, a = a+b, b\n    }\n\
    \    return b\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n   \
    \ return fib(n-1) + fib(n-2)\n}\n", "    a, b := 0, 1\n    for i := 0; i < n;\
    \ i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    if n == 1 || n\
    \ == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "   \
    \ x, y := 0, 1\n    for i := 0; i < n; i++ {\n        x, y = y, x+y\n    }\n \
    \   return x\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n", "    f := make([]int, n+1)\n\
    \    f[0] = 0\n    f[1] = 1\n    for i := 2; i <= n; i++ {\n        f[i] = f[i-1]\
    \ + f[i-2]\n    }\n    return f[n]\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n\n    f, s := 0, 1\n    for i := 1; i < n; i++ {\n        f, s = s, f\
    \ + s\n    }\n\n    return s\n}\n", "    f1, f2 := 0, 1\n    var f3 int\n    for\
    \ i := 0; i < n; i++ {\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n\
    \    }\n    return f3\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    a, b := 0, 1\n    for i := 0;\
    \ i < n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    return\
    \ 1\n}\n", "    x, y := 0, 1\n    for i := 0; i < n; i++ {\n        x, y = y,\
    \ x+y\n    }\n    return x\n}\n", "    if n <= 1 {\n        return n\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n\
    \ == 1 || n == 2 {\n        return 1\n    } else {\n        return fib(n-1) +\
    \ fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    } else\
    \ {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2\
    \ {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    prev,\
    \ res := 0, 1\n    for n > 0 {\n        prev, res = res, prev + res\n        n--\n\
    \    }\n    return res\n}\n", "    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n", "    // TODO: Fibonacci\n \
    \   return 1\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    // initialize first and\
    \ second Fibonacci numbers\n    a, b := 0, 1\n    // repeat n times\n    for i\
    \ := 0; i < n; i++ {\n        // calculate next Fibonacci number and store it\n\
    \        a, b = b, a+b\n    }\n    // return the n-th Fibonacci number\n    return\
    \ a\n}\n", "    var fib = []int{0, 1}\n    for i := 2; i <= n; i++ {\n       \
    \ fib = append(fib, fib[i-1] + fib[i-2])\n    }\n    return fib[n]\n}\n", "  \
    \  if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    a, b := 0, 1\n    for i := 0; i < n; i++ {\n        a, b = b, a+b\n    }\n\
    \    return a\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    } else {\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return\
    \ n\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 2\
    \ {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n\
    \ <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "   \
    \ x, y := 0, 1\n    for i := 0; i < n; i++ {\n        x, y = y, x+y\n    }\n \
    \   return x\n}\n", "    a, b := 0, 1\n    for n > 0 {\n        a, b = b, a +\
    \ b\n        n -= 1\n    }\n    return a\n}\n", "    switch n {\n    case 0:\n\
    \        return 0\n    case 1:\n        return 1\n    default:\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    a, b := 0, 1\n    for i\
    \ := 0; i < n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    fib\
    \ := map[int]int{0: 0, 1: 1}\n    for i := 2; i <= n; i++ {\n        fib[i] =\
    \ fib[i-1] + fib[i-2]\n    }\n    return fib[n]\n}\n", "    if n <= 1 {\n    \
    \    return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 ||\
    \ n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", " \
    \   if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    // WRITE ME!\n    if n == 1 {\n    \treturn 1\n    }\
    \ else if n == 2 {\n    \treturn 1\n    } else {\n    \treturn fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    a, b := 0, 1\n    for i := 0;\
    \ i < n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    return\
    \ 0\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    // Create a closure fibonacci function.\n    fib := func(n int) int {\n   \
    \     if n < 2 {\n            return n\n        }\n        return fib(n-1) + fib(n-2)\n\
    \    }\n    return fib(n)\n}\n", "    fibs := []int{0, 1}\n    for i := 2; i <=\
    \ n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    return\
    \ fibs[n]\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n     \
    \   return 1\n    } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", " \
    \   if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n == 1 || n == 2 {\n        return 1\n    } else {\n        return fib(n-1)\
    \ + fib(n-2)\n    }\n}\n", "    a, b := 0, 1\n    for i := 0; i < n; i++ {\n \
    \       a, b = b, a+b\n    }\n    return a\n}\n", "    if n <= 2 {\n        return\
    \ 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n\
    \        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    f0, f1 :=\
    \ 0, 1\n    for i := 1; i < n; i++ {\n        f0, f1 = f1, f0 + f1\n    }\n  \
    \  return f1\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    switch n {\n    case 0:\n   \
    \     return 0\n    case 1:\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n == 1 || n == 2 {\n        return 1\n    } else {\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    switch n {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    if n <= 2 {\n        return 1\n    } else {\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    if n <= 2 {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 2 {\n        return 1\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n == 1 || n == 2 {\n   \
    \     return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    var p, q int\
    \ = 0, 1\n    for i := 0; i < n; i++ {\n        p, q = q, p + q\n    }\n    return\
    \ p\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    n1, n2 := 0, 1\n    if n < 1 {\n        return 0\n  \
    \  } else if n < 3 {\n        return 1\n    }\n    for i := 2; i < n; i++ {\n\
    \        n1, n2 = n2, n1 + n2\n    }\n    return n2\n}\n", "    if n == 1 || n\
    \ == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "   \
    \ p, q := 0, 1\n    for i := 0; i < n; i++ {\n        p, q = q, p+q\n    }\n \
    \   return p\n}\n", "    if n <= 1 {\n        return n\n    }\n\n    a, b := 0,\
    \ 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a + b\n    }\n\n    return\
    \ b\n}\n", "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    return 0\n}\n", "    i, j := 0, 1\n    for x := 0; x\
    \ < n; x++ {\n        i, j = j, i+j\n    }\n    return i\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n == 1 || n == 2 {\n        return 1\n    } else {\n        return fib(n-1)\
    \ + fib(n-2)\n    }\n}\n", "    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    // TODO\n    return 0\n}\n", "    if n == 1\
    \ || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
