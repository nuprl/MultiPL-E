name: HumanEval_139_special_factorial
language: go_test.go
prompt: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunc special_factorial(n int) int {\n"
tests: "func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
  \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
  \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n       \
    \ return 1\n    }\n    res := 1\n    for i := n; i > 0; i-- {\n        res *=\
    \ i\n    }\n    for i := n-1; i > 0; i-- {\n        res *= i\n    }\n    return\
    \ res\n}\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    for n > 1 {\n        n *= special_factorial(n-1)\n    }\n    return\
    \ n\n}\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n", "    // Your code here\n    return 0\n}\n", "    fact := 1\n    for i :=\
    \ 1; i <= n; i++ {\n        fact *= i\n    }\n    for i := n-1; i > 0; i-- {\n\
    \        fact *= i\n    }\n    return fact\n}\n", "    if n < 0 {\n        return\
    \ -1\n    }\n    if n < 2 {\n        return 1\n    }\n    sf := 1\n    for i :=\
    \ n; i > 0; i-- {\n        sf *= factorial(i)\n    }\n    return sf\n}\n", " \
    \   return 1\n}\n", "    if n == 1 {\n        return 1\n    }\n    return n *\
    \ special_factorial(n-1)\n}\n", "    if n == 1 {\n        return 1\n    }\n  \
    \  return n * special_factorial(n-1)\n}\n", "    if n == 1 {\n        return 1\n\
    \    }\n    return n * special_factorial(n-1)\n}\n", "    fact := 1\n    for i\
    \ := 1; i <= n; i++ {\n        fact *= i\n    }\n    return fact\n}\n", "    var\
    \ i, factorial_prev, factorial int = 0, 1, 1\n    for i < n {\n        factorial_prev\
    \ *= i\n        factorial *= factorial_prev\n        i++\n    }\n    return factorial\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n\n    f := 1\n    for i := 1;\
    \ i <= n; i++ {\n        f *= i\n    }\n\n    return f * special_factorial(n-1)\n\
    }\n", "    if n <= 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n", "    var result int = 1\n    var i int\n    for i = 1; i <= n; i++ {\n \
    \       var j int\n        for j = 1; j <= i; j++ {\n            result *= j\n\
    \        }\n    }\n    return result\n}\n", "    p := 1\n    if n == 0 {\n   \
    \     return 1\n    }\n    for i := 1; i <= n; i++ {\n        p *= i\n    }\n\
    \    return p * special_factorial(n-1)\n}\n", "    if n == 1 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    if n <= 1 {\n  \
    \      return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    var\
    \ total int = 1\n\n    for i := n; i > 0; i-- {\n        total *= i\n    }\n\n\
    \    return total\n}\n", "    // your code here\n    fact := 1\n    if n > 0 {\n\
    \        for i := 1; i <= n; i++ {\n            for j := 1; j <= i; j++ {\n  \
    \              fact *= j\n            }\n        }\n    }\n    return fact\n}\n",
  "    // YOUR CODE HERE\n    return 0\n}\n", "    return special_factorial_recursive(n,\
    \ 1)\n}\n", "    var nums []int\n    total := 1\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return 1\n    }\n    for i := 1; i <= n;\
    \ i++ {\n        nums = append(nums, i)\n    }\n    for _, v := range nums {\n\
    \        total *= v\n    }\n    return total\n}\n", "    factor := 1\n    for\
    \ i := n; i > 0; i-- {\n        factor *= i\n    }\n    return factor\n}\n", " \
    \   // your code here\n    var result int = 1\n    for i := 1; i <= n; i++ {\n\
    \        result *= i\n    }\n    return result\n}\n", "    var r int\n    if n\
    \ > 0 {\n        r = 1\n        for i := 1; i <= n; i++ {\n            r *= i\n\
    \        }\n        for i := 1; i < n; i++ {\n            r *= i\n        }\n\
    \    }\n    return r\n}\n", "    if n < 1 {\n        return 1\n    }\n\n    return\
    \ n * special_factorial(n-1)\n}\n", "    if n <= 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    return special_factorial(n-1) *\
    \ special_factorial(n-2) * n\n}\n", "    if n <= 1 {\n        return 1\n    }\n\
    \    return n * special_factorial(n-1)\n}\n", "    factorial := 1\n    for i :=\
    \ 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n",
  "    // TODO: Define this function\n    return 0\n}\n", "    if n <= 1 {\n     \
    \   return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    factorial\
    \ := 1\n    for i := n; i > 0; i-- {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n", "    // Your code here\n    return 0\n}\n", "    // Your code\
    \ here!\n    var total int\n    var _n int\n    total = n\n\n    for n>1 {\n \
    \       n = n-1\n        _n = n\n        for _n>1 {\n            _n = _n-1\n \
    \           total = total * _n\n        }\n    }\n    return total\n}\n", "  \
    \  // code here\n}\n", "    if n < 1 {\n        return 0\n    }\n\n    if n ==\
    \ 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n}\n",
  "    // Check n's validity\n    if n < 1 {\n        panic(\"n must be a positive\
    \ integer\")\n    }\n\n    // Calculate the factorials of n, n-1, n-2, ... , 1\n\
    \    factorials := make([]int, n)\n    factorials[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        factorials[i] = factorials[i-1] * (i+1)\n    }\n\n    // Multiply\
    \ the factorials\n    product := 1\n    for _, factorial := range factorials {\n\
    \        product *= factorial\n    }\n\n    return product\n}\n", "    if n ==\
    \ 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n", " \
    \   answer := 1\n    for i := n; i > 0; i-- {\n        var aux int = 1\n     \
    \   for j := i; j > 0; j-- {\n            aux *= j\n        }\n        answer\
    \ *= aux\n    }\n    return answer\n}\n", "    result := 1\n    for i := n; i\
    \ > 0; i-- {\n        result *= i\n    }\n    for i := n - 1; i > 0; i-- {\n \
    \       result *= i\n    }\n    return result\n}\n", "    if n == 1 {\n      \
    \  return 1\n    }\n    r := n\n    for i := n-1; i > 0; i-- {\n        r *= i\n\
    \    }\n    return r\n}\n", "    // your code here\n    if n == 0 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    // Write your code\
    \ here!\n    return 0\n}\n", "    if n < 1 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n-1)\n}\n", "    if n < 1 {\n        return 0\n    }\n\
    \    res := 1\n    for i := 1; i <= n; i++ {\n        res *= factorial(i)\n  \
    \  }\n    return res\n}\n", "    if n == 1 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n-1)\n}\n", "    return n\n}\n", "    // write your code\
    \ here\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    r := 1\n    for i := n; i > 0; i-- {\n        for j := i; j > 0; j--\
    \ {\n            r *= j\n        }\n    }\n    return r\n}\n", "    res := 1\n\
    \    for i := 1; i <= n; i++ {\n        res *= i\n    }\n    return res\n}\n",
  "\t// your code here\n\treturn 0\n}\n", "    if n == 1 {\n        return 1\n   \
    \ }\n    return special_factorial(n-1) * n\n}\n", "    output := 1\n    for i\
    \ := 1; i <= n; i++ {\n        output *= factorial(i)\n    }\n    return output\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    return 0\n}\n", "    var result int = 1\n    for ; n > 0; n-- {\n \
    \       result *= n\n    }\n    return result\n}\n", "    // your code goes here\n\
    \    return 0\n}\n", "\treturn 1\n}\n", "    return 0\n}\n", "\tif n == 0 {\n\t\
    \treturn 1\n\t}\n\tr := 1\n\tfor i := 1; i <= n; i++ {\n\t\tr *= i\n\t}\n\treturn\
    \ r\n}\n", "    total := 1\n    for n > 0 {\n        total *= factorial(n)\n \
    \       n--\n    }\n    return total\n}\n", "    if n <= 1 {\n        return 1\n\
    \    }\n\n    return special_factorial(n-1) * n\n}\n", "    factorial := 1\n \
    \   for i := n; i > 0; i-- {\n        factorial *= i\n    }\n    return factorial\n\
    }\n", "    for i := n - 1; i > 0; i-- {\n        n *= i\n    }\n    return n\n\
    }\n", "    fact := 1\n    for i := n; i > 0; i-- {\n        fact *= i\n    }\n\
    \    return fact\n}\n", "    factorial := 1\n    i := 0\n    for i < n {\n   \
    \     factorial *= (n - i)\n        i++\n    }\n    return factorial\n}\n", " \
    \   if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    // Fill this in.\n    r := n\n    for i := n-1; i > 0; i-- {\n    \
    \    r *= i\n    }\n    return r\n}\n", "    // +++your code here+++\n    return\
    \ -1\n}\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    return 2\n}\n", "    if n == 1 {\n        return 1\n    }\n\n    return\
    \ special_factorial(n-1) * factorial(n)\n}\n", "    fact := 1\n    for i := 1;\
    \ i <= n; i++ {\n        fact *= i\n    }\n    return fact\n}\n", "    //your\
    \ code here\n    fmt.Println(n)\n    return 0\n}\n", "    return n\n}\n", "  \
    \  var f = 1\n    for i := 1; i <= n; i++ {\n        f *= factorial(i)\n    }\n\
    \    return f\n}\n", "    // Implement the function here and then modify this\
    \ comment accordingly\n    return 0\n}\n", "    if n < 1 {\n        return 0\n\
    \    }\n    ret := 1\n    for i := n; i > 0; i-- {\n        ret *= i\n    }\n\
    \    for i := n - 1; i > 0; i-- {\n        ret *= i\n    }\n    return ret\n}\n",
  "    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n\n    product := 1\n    for i\
    \ := n; i > 0; i-- {\n        product *= factorial(i)\n    }\n\n    return product\n\
    }\n", "    return 0\n}\n", "    // Your code here!\n    a := 1\n    for i := 1;\
    \ i <= n; i++ {\n        a *= i\n    }\n    b := 1\n    for i := 1; i < n; i++\
    \ {\n        b *= i\n    }\n    c := 1\n    for i := 1; i < n-1; i++ {\n     \
    \   c *= i\n    }\n    d := 1\n    for i := 1; i < n-2; i++ {\n        d *= i\n\
    \    }\n    e := 1\n    for i := 1; i < n-3; i++ {\n        e *= i\n    }\n  \
    \  f := 1\n    for i := 1; i < n-4; i++ {\n        f *= i\n    }\n    g := 1\n\
    \    for i := 1; i < n-5; i++ {\n        g *= i\n    }\n    h := 1\n    for i\
    \ := 1; i < n-6; i++ {\n        h *= i\n    }\n    i := 1\n    for j := 1; j <\
    \ n-7; j++ {\n        i *= j\n    }\n    j := 1\n    for k := 1; k < n-8; k++\
    \ {\n        j *= k\n    }\n    k := 1\n    for l := 1; l < n-9; l++ {\n     \
    \   k *= l\n    }\n    l := 1\n    for m := 1; m < n-10; m++ {\n        l *= m\n\
    \    }\n    m := 1\n    for o := 1; o < n-11; o++ {\n        m *= o\n    }\n \
    \   o := 1\n    for p := 1; p < n-12; p++ {\n        o *= p\n    }\n    p := 1\n\
    \    for q := 1; q < n-13; q++ {\n        p *= q\n    }\n    q := 1\n    for r\
    \ := 1; r < n-14; r++ {\n        q *= r\n    }\n    r := 1\n    for s := 1; s\
    \ < n-15; s++ {\n        r *= s\n   ", "\tif n == 0 {\n\t\treturn 1\n\t}\n\tif\
    \ n < 0 {\n\t\treturn 0\n\t}\n\treturn n * special_factorial(n-1)\n}\n", "   \
    \ // your code here\n    return 0\n}\n", "    // your code here\n    return 0\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n", "    // Your code here\n    return 0\n}\n", "    var f int = 1\n    for\
    \ i := n; i > 0; i-- {\n        f *= i\n    }\n    return f\n}\n", "    m := 1\n\
    \    for i := 1; i <= n; i++ {\n        m *= i\n    }\n    return m\n}\n", " \
    \   if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n < 1 {\n        return 0\n    }\n\n    result := 1\n    for i :=\
    \ 1; i <= n; i++ {\n        result *= i\n    }\n\n    return result\n}\n", " \
    \   result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n\
    \    }\n    return result\n}\n", "    return 0\n}\n", "    // Write your code\
    \ here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    var result int = 1\n    for\
    \ i := n; i > 0; i-- {\n        for j := i; j > 0; j-- {\n            result *=\
    \ j\n        }\n    }\n    return result\n}\n", "    if n == 1 {\n        return\
    \ 1\n    }\n    r := n\n    for i := n-1; i > 0; i-- {\n        r *= i\n    }\n\
    \    return r\n}\n", "    if n == 1 {\n        return 1\n    }\n\n    return n\
    \ * special_factorial(n-1)\n}\n", "    r := 1\n    for i := n; i > 0; i-- {\n\
    \        r *= i\n    }\n    return r\n}\n", "    fact := 1\n    for i := n; i\
    \ > 0; i-- {\n        fact *= i\n    }\n    return fact\n}\n", "    // 1! = 1\n\
    \    // 2! = 2\n    // 3! = 6\n    // 4! = 24\n    // 5! = 120\n    // 6! = 720\n\
    \    // 7! = 5040\n    // 8! = 40320\n    // 9! = 362880\n    // 10! = 3628800\n\
    \    // 11! = 39916800\n    // 12! = 479001600\n    // 13! = 6227020800\n    //\
    \ 14! = 87178291200\n    // 15! = 1307674368000\n    // 16! = 20922789888000\n\
    \    // 17! = 355687428096000\n    // 18! = 6402373705728000\n    // 19! = 121645100408832000\n\
    \    // 20! = 2432902008176640000\n    if n == 1 {\n        return 1\n    } else\
    \ {\n        return n * special_factorial(n-1)\n    }\n}\n", "    return 1\n}\n",
  "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "\tresult := 1\n\tif n == 0 {\n\t\treturn result\n\t}\n\tfor i := n; i >\
    \ 0; i-- {\n\t\tresult *= i\n\t}\n\treturn result\n}\n", "    if n <= 1 {\n  \
    \      return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    if n\
    \ <= 1 {\n        return 1\n    }\n    // compute factorial\n    fact := 1\n \
    \   for i := 2; i <= n; i++ {\n        fact *= i\n    }\n    // compute brazilian\
    \ factorial\n    for j := 1; j < n; j++ {\n        fact *= special_factorial(j)\n\
    \    }\n    return fact\n}\n", "    m := n\n    r := 1\n    for i := 1; i <= m;\
    \ i++ {\n        r *= i\n    }\n    for i := 1; i < n; i++ {\n        r *= m\n\
    \        m--\n    }\n    return r\n}\n", "    return n\n}\n", "    if n <= 1 {\n\
    \        return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    // your code here\n    return n\n}\n", " \
    \   if n < 0 {\n        return -1\n    }\n    var result int = 1\n    for i :=\
    \ n; i > 0; i-- {\n        result *= i\n    }\n    return result\n}\n", "    var\
    \ product int = 1\n    for i := n; i > 0; i-- {\n        product *= i\n    }\n\
    \    return product\n}\n", "    if n < 0 {\n        return -1\n    }\n\n    res\
    \ := 1\n    for i := n; i > 0; i-- {\n        res *= i\n    }\n\n    return res\n\
    }\n", "    var result int = 1\n    for i := 1; i <= n; i++ {\n        result *=\
    \ factorial(i)\n    }\n    return result\n}\n", "    if n < 1 {\n        return\
    \ 1\n    }\n    ret := 1\n    for i := 1; i <= n; i++ {\n        ret *= factorial(i)\n\
    \    }\n    return ret\n}\n", "    if n == 1 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n-1)\n}\n", "    if n <= 1 {\n        return 1\n    }\n\
    \    return n * special_factorial(n-1)\n}\n", "    if n == 1 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    var r = 1\n    for\
    \ i := n; i > 0; i-- {\n        r *= i\n    }\n    return r\n}\n", "    //YOUR\
    \ CODE HERE\n    return 0\n}\n", "    // Your code here\n    return 0\n}\n", " \
    \   // Your code here!\n    // return 0\n    if n == 1 || n == 0 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    if n < 1 {\n   \
    \     return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return n\
    \ * special_factorial(n-1)\n}\n", "    // Your code here\n\n    return 0\n}\n",
  "    var result int = 1\n    var fac int = 1\n    if n < 0 {\n        return -1\n\
    \    }\n    for i := n; i > 0; i-- {\n        fac *= i\n        result *= fac\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return 0\n}\n", " \
    \   var result = 1\n    var i = 1\n    for i <= n {\n        result *= i\n   \
    \     i++\n    }\n    i = n - 1\n    for i > 0 {\n        result *= i\n      \
    \  i--\n    }\n    return result\n}\n", "\tif n == 0 {\n\t\treturn 1\n\t}\n\n\t\
    result := 1\n\tfor i := 1; i <= n; i++ {\n\t\tresult *= i\n\t}\n\n\treturn result\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    // Your code here...\n}\n", "    // Assume n is positive\n    facs\
    \ := make([]int, n)\n    facs[0] = 1\n    for i := 1; i < n; i++ {\n        facs[i]\
    \ = facs[i-1] * (i+1)\n    }\n    res := 1\n    for _, fac := range facs {\n \
    \       res *= fac\n    }\n    return res\n}\n", "    return 0\n}\n", "    if\
    \ n <= 1 {\n        return 1\n    }\n\n    bf := 1\n    for i := 1; i <= n; i++\
    \ {\n        bf *= factorial(i)\n    }\n\n    return bf\n}\n", "    if n == 1\
    \ {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n", " \
    \   if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    factorial := 1\n    // a factorial is a product of integers\n    for\
    \ i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n\
    }\n", "    // Your code here\n    total := 1\n    if n == 0 {\n        return\
    \ 1\n    }\n    for i := 1; i <= n; i++ {\n        total *= i\n    }\n    return\
    \ total\n}\n", "    panic(\"not implemented\")\n}\n", "    // Define the base\
    \ case\n    if n == 1 {\n        return 1\n    }\n    // Make the recursive call\n\
    \    return n * special_factorial(n-1)\n}\n", "    if n == 1 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    var factorial int\n\
    \    for i := 1; i <= n; i++ {\n        factorial = factorial * i\n    }\n   \
    \ return factorial\n}\n", "    if n <= 1 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n-1)\n}\n", "    if n == 1 {\n        return 1\n    }\n\
    \    return n * special_factorial(n-1)\n}\n", "    if n == 1 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    return -1\n}\n",
  "    // your code here\n    return 0\n}\n", "    //replace this for solution\n \
    \   return 0\n}\n", "    fact := 1\n    for i := n; i > 0; i-- {\n        fact\
    \ *= i\n    }\n    return fact\n}\n", "    // your code here\n    var result =\
    \ 1\n    for i := n; i > 0; i-- {\n        if i == n {\n            result *=\
    \ factorial(i)\n        } else {\n            result *= factorial(i) * i\n   \
    \     }\n    }\n    return result\n}\n", "\t// your code here\n\tif n == 0 {\n\
    \t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n * special_factorial(n-1)\n\
    }\n", "    if n < 1 {\n        return 0\n    }\n\n    facts := make([]int, n)\n\
    \    facts[0] = 1\n    for i := 1; i < n; i++ {\n        facts[i] = facts[i-1]\
    \ * (i+1)\n    }\n\n    bf := 1\n    for _, f := range facts {\n        bf *=\
    \ f\n    }\n\n    return bf\n}\n\ntype TestCase ", "    factorial := 1\n    var\
    \ subFactorial int\n    for i := n; i > 0; i-- {\n        subFactorial = 1\n \
    \       for j := i; j > 0; j-- {\n            subFactorial *= j\n        }\n \
    \       factorial *= subFactorial\n    }\n    return factorial\n}\n", "    total\
    \ := 1\n    if n == 0 {\n        return total\n    }\n\n    for i := n; i > 0;\
    \ i-- {\n        total *= i\n    }\n\n    return total\n}\n", "    return 0\n\
    }\n", "    total := 1\n    for i := n; i > 0; i-- {\n        total *= factorial(i)\n\
    \    }\n    return total\n}\n", "    return 0\n}\n", "    if n == 1 {\n      \
    \  return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    if n <=\
    \ 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n", " \
    \   var result int = 1\n\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n\
    \    }\n\n    return result\n}\n", "    return 0\n}\n", "    if n <= 1 {\n   \
    \     return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    if n\
    \ == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n",
  "    return 0\n}\n", "\t// Good luck!\n    if n <= 1 {\n        return 1\n    }\n\
    \n    s := n\n\n    for i := n-1; i > 0; i-- {\n        s *= i\n    }\n\n    return\
    \ s\n}\n", "    if n < 1 {\n        return 0\n    }\n    var factorial int = 1\n\
    \    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n\
    }\n", "    var res int = 1\n    var pro int = 1\n    for i := 1; i <= n; i++ {\n\
    \        res *= i\n        pro *= res\n    }\n    return pro\n}\n", "    if n\
    \ < 0 {\n        return 0\n    }\n    res := 1\n    for i := 1; i <= n; i++ {\n\
    \        res *= i\n    }\n    for i := 1; i < n; i++ {\n        res *= i\n   \
    \ }\n    return res\n}\n", "    var factorial int = 1\n    for i := n; i > 0;\
    \ i-- {\n        factorial *= i\n    }\n    return factorial\n}\n", "    output\
    \ := 1\n    if n > 0 {\n        for i := n; i > 0; i-- {\n            output *=\
    \ i\n        }\n    }\n    return output\n}\n", "    var prod int = 1\n    for\
    \ n > 0 {\n        prod *= factorial(n)\n        n--\n    }\n    return prod\n\
    }\n", "    factorial := 1\n    for i := n; i > 0; i-- {\n        factorial *=\
    \ i\n    }\n    return factorial\n}\n", "    return 1\n}\n", "    if n <= 1 {\n\
    \        return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    //\
    \ Write your solution here\n}\n", "    return n\n}\n", "    if n < 0 {\n     \
    \   panic(\"function does not support negative integers\")\n    }\n    if n ==\
    \ 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n", " \
    \   if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n", "    return 0\n}\n", "    res := 1\n    for i := 1; i <= n; i++ {\n    \
    \    res *= i\n    }\n    for i := n-1; i > 0; i-- {\n        res *= i\n    }\n\
    \    return res\n}\n", "    if n <= 1 {\n        return 1\n    }\n\n    return\
    \ n * special_factorial(n-1)\n}\n", "    // Your code here\n    return 1\n}\n",
  "    // Your code here\n    if n == 0 {\n        return 1\n    }\n    return n *\
    \ special_factorial(n-1)\n}\n", "    if n == 1 {\n        return 1\n    }\n  \
    \  factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n   \
    \ }\n    return special_factorial(n-1) * factorial\n}\n", "    if n == 1 {\n \
    \       return 1\n    }\n    return n * special_factorial(n-1)\n}\n", "    if\
    \ n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n",
  "    // Make your code here!\n    var f int\n    f = 1\n    for i := 1; i <= n;\
    \ i++ {\n        f = f * i\n    }\n    return f\n}\n", "    var specialFactorial\
    \ = 1\n    for i := 1; i <= n; i++ {\n        var factorial = 1\n        for j\
    \ := 1; j <= i; j++ {\n            factorial *= j\n        }\n        specialFactorial\
    \ *= factorial\n    }\n    return specialFactorial\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    if n == 1 {\n        return 1\n    }\n\n    return n\
    \ * special_factorial(n-1)\n}\n", "    special_factorial := 1\n    for i := n;\
    \ i > 0; i-- {\n        special_factorial *= factorial(i)\n    }\n    return special_factorial\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
