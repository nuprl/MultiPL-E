name: HumanEval_15_string_sequence
language: go_test.go
prompt: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
  // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n"
tests: "func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
  \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
  \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := \"\"\n    for i := 0; i <= n; i++ {\n        if i > 0\
    \ {\n            result += \" \"\n        }\n        result += fmt.Sprintf(\"\
    %d\", i)\n    }\n    return result\n}\n", "    result := \"\"\n    for i := 0;\
    \ i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ result\n}\n", "    var ans string\n    for i := 0; i <= n; i++ {\n        ans\
    \ += fmt.Sprintf(\"%d \", i)\n    }\n    return ans\n}\n", "\tvar ret string\n\
    \tfor i := 0; i <= n; i++ {\n\t\tret += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn\
    \ ret\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "    s := \"\"\
    \n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return s\n}\n", "    var seq string\n    for i := 0; i <= n; i++ {\n    \
    \    seq += fmt.Sprintf(\"%d \", i)\n    }\n    return seq\n}\n", "    var ret\
    \ string\n    for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return ret\n}\n", "    // TODO\n    return \"\"\n}\n", "    var result\
    \ []string\n    var i int\n    for i = 0; i <= n; i++ {\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", i))\n    }\n    return fmt.Sprintf(\"%s\", result)\n}\n",
  "    result := \"\"\n    for i := 0; i <= n; i++ {\n        if i != 0 {\n      \
    \      result += \" \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n\
    \    }\n    return result\n}\n", "    // your code here\n    if n == 0 {\n   \
    \     return \"0\"\n    }\n\n    s := \"\"\n    for i := 0; i <= n; i++ {\n  \
    \      s += fmt.Sprintf(\"%d \", i)\n    }\n\n    return s\n}\n", "    a := make([]string,\
    \ n + 1)\n    for i := 0; i <= n; i++ {\n        a[i] = fmt.Sprintf(\"%d\", i)\n\
    \    }\n    return join(a, \" \")\n}\n", "    s := \"\"\n    for i := 0; i <=\
    \ n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n", " \
    \   s := \"\"\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \"\
    , i)\n    }\n    return s\n}\n", "    var result string\n    for i := 0; i <=\
    \ n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n\
    }\n", "    s := \"\"\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"\
    %d \", i)\n    }\n    return s\n}\n", "    // TODO: Implement me!\n    return\
    \ \"\"\n}\n", "    sequence := \"\"\n    for i := 0; i <= n; i++ {\n        sequence\
    \ += fmt.Sprintf(\"%d \", i)\n    }\n    return sequence\n}\n", "    // BEGIN\n\
    \    var result []string\n    for i := 0; i <= n; i++ {\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", i))\n    }\n    return s2l(result)\n    // END\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
