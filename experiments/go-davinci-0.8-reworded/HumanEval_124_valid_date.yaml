name: HumanEval_124_valid_date
language: go_test.go
prompt: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You have to write a function which validates a given date string and\n// returns\
  \ true if the date is valid otherwise false.\n// The date is valid if all of the\
  \ following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The\
  \ number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  // 3. The months should not be less than 1 or higher than 12.\n// 4. The date should\
  \ be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>>\
  \ valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n\
  // >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n\
  // false\nfunc valid_date(date string) bool {\n"
tests: "func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual:\
  \ candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"\
  ), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected: true\
  \ },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual:\
  \ candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\"),\
  \ expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
  \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
  \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
  ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false },\n\
  \     { actual: candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"\
  2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected:\
  \ false },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var day, month, year int\n    var months = map[int]int{1: 31, 3:\
    \ 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31, 4: 30, 6: 30, 9: 30, 11: 30, 2: 29}\n\
    \    n, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if err\
    \ != nil || n != 3 {\n        return false\n    }\n    if _, ok := months[month];\
    \ !ok {\n        return false\n    }\n    if day < 1 || day > months[month] {\n\
    \        return false\n    }\n    return true\n}\n", "    if date == \"\" {\n\
    \        return false\n    }\n    if len(date) != 10 {\n        return false\n\
    \    }\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n\
    \    return true\n}\n", "    return true\n}\n", "    return true\n}\n", "    return\
    \ true\n}\n", "    if date == \"\" {\n        return false\n    }\n    fmt.Println(date)\n\
    \    return true\n}\n", "    if len(date) == 0 {\n        return false\n    }\n\
    \    return false\n}\n", "    return true\n}\n", "    return true\n}\n", "   \
    \ return false\n}\n", "    // Insert your code here\n    return false\n}\n", " \
    \   return false\n}\n", "    return true\n}\n", "    return true\n}\n", "    return\
    \ true\n}\n", "    return true\n}\n", "    return true\n}\n", "    if date ==\
    \ \"\" {\n        return false\n    }\n    date2 := date\n    date2 = fmt.Sprintf(\"\
    %s-\", date2[:2])\n    date2 = fmt.Sprintf(\"%s%s-\", date2, date[3:5])\n    date2\
    \ = fmt.Sprintf(\"%s%s\", date2, date[6:])\n    if date2 != date {\n        return\
    \ false\n    }\n    return true\n}\n", "    return false\n}\n", "    a, b, c :=\
    \ 0, 0, 0\n    fmt.Sscanf(date, \"%d-%d-%d\", &a, &b, &c)\n    if a > 12 || a\
    \ < 1 {\n        return false\n    } else if a == 2 {\n        if b > 29 || b\
    \ < 1 {\n            return false\n        }\n    } else if b > 31 || b < 1 {\n\
    \        return false\n    }\n    return true\n}\n", "    return false\n}\n",
  "    return true\n}\n", "    return false\n}\n", "    date_parts := make([]int,0)\n\
    \    for _,val := range date {\n        if v,err := fmt.Sprintf(\"%c\",val); err\
    \ == nil {\n            if i,err := strconv.Atoi(v); err == nil {\n          \
    \      date_parts = append(date_parts,i)\n            }\n        }\n    }\n  \
    \  if len(date_parts) != 8 {\n        return false\n    }\n    if (date_parts[0]\
    \ > 1 || date_parts[1] > 2) && (date_parts[2] != '-') {\n        return false\n\
    \    }\n    if (date_parts[0] == 1 || date_parts[1] == 2) && (date_parts[2] !=\
    \ '-') {\n        return false\n    }\n    if (date_parts[4] > 1 || date_parts[5]\
    \ > 3) && (date_parts[6] != '-') {\n        return false\n    }\n    if (date_parts[4]\
    \ == 1 || date_parts[5] == 3) && (date_parts[6] != '-') {\n        return false\n\
    \    }\n    if (date_parts[4] == 2) && (date_parts[5] > 9) && (date_parts[6] !=\
    \ '-') {\n        return false\n    }\n    if (date_parts[4] == 2) && (date_parts[5]\
    \ == 9) && (date_parts[6] != '-') {\n        return false\n    }\n    if (date_parts[7]\
    \ > 2) && (date_parts[8] != '-') {\n        return false\n    }\n    if (date_parts[7]\
    \ == 2) && (date_parts[8] != '-') {\n        return false\n    }\n    if (date_parts[9]\
    \ > 2) && (date_parts[10] != '-') {\n        return false\n    }\n    if (date_parts[9]\
    \ == 2) && (date_parts[10] != '-') {\n        return false\n    }\n    if (date_parts[11]\
    \ > 3) && (date_parts", "    if len(date) != 10 {\n        return false\n    }\n\
    \    arr := []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    m, d, y\
    \ := date[0:2], date[3:5], date[6:10]\n    mm, dd, yy := stringToInt(m), stringToInt(d),\
    \ stringToInt(y)\n    if mm < 1 || mm > 12 {\n        return false\n    }\n  \
    \  if dd < 1 || dd > arr[mm-1] {\n        return false\n    }\n    if dd == 29\
    \ && mm == 2 && (yy%400 == 0 || (yy%4 == 0 && yy%100 != 0)) {\n        return\
    \ true\n    }\n    return true\n}\n", "    //YOUR CODE HERE\n    panic(\"Not implemented\"\
    )\n}\n", "    if len(date) == 0 {\n        return false\n    }\n    if date[2]\
    \ != '-' || date[5] != '-' {\n        return false\n    }\n    month, _ := strconv.Atoi(date[:2])\n\
    \    day, _ := strconv.Atoi(date[3:5])\n    year, _ := strconv.Atoi(date[6:])\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1\
    \ || day > 31 {\n        return false\n    }\n    if (month == 4 || month == 6\
    \ || month == 9 || month == 11) && day > 30 {\n        return false\n    }\n \
    \   if month == 2 && day > 29 {\n        return false\n    }\n    return true\n\
    }\n", "    l := len(date)\n    if l < 10 {\n        return false\n    }\n    day\
    \ := date[0:2]\n    month := date[3:5]\n    year := date[6:10]\n    if date[2]\
    \ != '-' || date[5] != '-' {\n        return false\n    }\n    if day[0] < '0'\
    \ || day[0] > '9' || day[1] < '0' || day[1] > '9' {\n        return false\n  \
    \  }\n    if month[0] < '0' || month[0] > '9' || month[1] < '0' || month[1] >\
    \ '9' {\n        return false\n    }\n    if year[0] < '0' || year[0] > '9' ||\
    \ year[1] < '0' || year[1] > '9' || year[2] < '0' || year[2] > '9' || year[3]\
    \ < '0' || year[3] > '9' {\n        return false\n    }\n    d, _ := strconv.Atoi(day)\n\
    \    m, _ := strconv.Atoi(month)\n    y, _ := strconv.Atoi(year)\n    if m < 1\
    \ || m > 12 {\n        return false\n    }\n    switch m {\n    case 1, 3, 5,\
    \ 7, 8, 10, 12:\n        if d < 1 || d > 31 {\n            return false\n    \
    \    }\n    case 4, 6, 9, 11:\n        if d < 1 || d > 30 {\n            return\
    \ false\n        }\n    case 2:\n        if d < 1 || d > 29 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    // your code here\n   \
    \ return false\n}\n", "    //your code here\n    return false\n}\n", "    return\
    \ true\n}\n", "    // your code goes here\n    return false\n}\n", "    return\
    \ true\n}\n", "    var months = map[string]int{\n        \"01\": 0,\n        \"\
    02\": 0,\n        \"03\": 0,\n        \"04\": 0,\n        \"05\": 0,\n       \
    \ \"06\": 0,\n        \"07\": 0,\n        \"08\": 0,\n        \"09\": 0,\n   \
    \     \"10\": 0,\n        \"11\": 0,\n        \"12\": 0,\n    }\n    var validDate\
    \ = false\n    if date != \"\" {\n        for month := range months {\n      \
    \      if date[0:2] == month {\n                months[month]++\n            }\n\
    \        }\n        for _, value := range months {\n            if value > 0 {\n\
    \                validDate = true\n            }\n        }\n    }\n    return\
    \ validDate\n}\n", "    // your code\n    return false\n}\n", "    // your code\
    \ here\n    return false\n}\n", "\treturn true\n}\n", "    return true\n}\n",
  "    return true\n}\n", "    return true\n}\n", "    days_in_month := map[int]int{\n\
    \        1:31, 2:29, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31,\n\
    \    }\n    if len(date) < 8 {\n        return false\n    }\n    var (\n     \
    \   month int\n        day int\n        year int\n    )\n    n, err := fmt.Sscanf(date,\
    \ \"%2d-%2d-%4d\", &month, &day, &year)\n    if err != nil || n != 3 {\n     \
    \   return false\n    }\n    if days_in_month[month] < day {\n        return false\n\
    \    }\n    return true\n}\n", "    if len(date) != 10 {\n        return false\n\
    \    }\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n\
    \    if date[0] == '0' || date[3] == '0' {\n        return false\n    }\n    dd,\
    \ err := strconv.Atoi(date[0:2])\n    if err != nil {\n        return false\n\
    \    }\n    mm, err := strconv.Atoi(date[3:5])\n    if err != nil {\n        return\
    \ false\n    }\n    yyyy, err := strconv.Atoi(date[6:10])\n    if err != nil {\n\
    \        return false\n    }\n    return true\n}\n", "    return true\n}\n", " \
    \   return false\n}\n", "    return true\n}\n", "    // your code here\n    return\
    \ false\n}\n", "    return true\n}\n", "    // your code here\n    return false\n\
    }\n", "    days := map[int]int{1:31, 2:29, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31,\
    \ 9:30, 10:31, 11:30, 12:31}\n    if len(date) == 0 {\n        return false\n\
    \    }\n    if len(date) != 10 {\n        return false\n    }\n    for _, i :=\
    \ range date {\n        if (i < '0' || i > '9') && i != '-' {\n            return\
    \ false\n        }\n    }\n    month, day, year := 0, 0, 0\n    fmt.Sscanf(date,\
    \ \"%d-%d-%d\", &month, &day, &year)\n    if month < 1 || month > 12 {\n     \
    \   return false\n    }\n    if day < 1 || day > days[month] {\n        return\
    \ false\n    }\n    return true\n}\n", "    return false\n}\n", "    var (\n \
    \       day int\n        month int\n        year int\n    )\n    if len(date)\
    \ < 10 {\n        return false\n    }\n    n, err := fmt.Sscanf(date, \"%d-%d-%d\"\
    , &month, &day, &year)\n    if err != nil || n != 3 {\n        return false\n\
    \    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    switch\
    \ month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day > 31 {\n\
    \            return false\n        }\n    case 4, 6, 9, 11:\n        if day <\
    \ 1 || day > 30 {\n            return false\n        }\n    case 2:\n        if\
    \ day < 1 || day > 29 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    var m, d, y int\n    _, err := fmt.Sscanf(date, \"%2d-%2d-%4d\"\
    , &m, &d, &y)\n    return err == nil && \n        m >= 1 && m <= 12 &&\n     \
    \   y >= 0 && y <= 9999 &&\n        d >= 1 && d <= 31 &&\n        m != 2 || d\
    \ <= 29 &&\n        m != 4 || d <= 30 &&\n        m != 6 || d <= 30 &&\n     \
    \   m != 9 || d <= 30 &&\n        m != 11 || d <= 30\n}\n", "    // Your code\
    \ goes here.\n    return false\n}\n", "    if date == \"\" {\n        return false\n\
    \    }\n    const (\n        ValidDate = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \n    )\n    valid, _ := regexp.MatchString(ValidDate, date)\n    return valid\n\
    }\n", "\tdate_parts := [3]int{}\n\tfmt.Sscanf(date, \"%d-%d-%d\", &date_parts[0],\
    \ &date_parts[1], &date_parts[2])\n\tmonth, day, year := date_parts[0], date_parts[1],\
    \ date_parts[2]\n\tdays_in_feb := 28\n\t// if (year % 4 == 0 && year % 100 !=\
    \ 0) || year % 400 == 0 {\n\t// \tdays_in_feb = 29\n\t// }\n\tswitch month {\n\
    \tcase 1, 3, 5, 7, 8, 10, 12:\n\t\tif day > 31 || day < 1 {\n\t\t\treturn false\n\
    \t\t}\n\tcase 4, 6, 9, 11:\n\t\tif day > 30 || day < 1 {\n\t\t\treturn false\n\
    \t\t}\n\tcase 2:\n\t\tif day > days_in_feb || day < 1 {\n\t\t\treturn false\n\t\
    \t}\n\tdefault:\n\t\treturn false\n\t}\n\treturn true\n}\n", "    return false\n\
    }\n", "    return true\n}\n", "    // If the date is an empty string, return false\n\
    \    if date == \"\" {\n        return false\n    }\n\n    // If the date isn't\
    \ in the format mm-dd-yyyy, return false\n    if len(date) != 10 {\n        return\
    \ false\n    }\n\n    // Assume it is a valid date and test\n    // Check that\
    \ the month is between 1 and 12\n    if date[0:2] < \"01\" || date[0:2] > \"12\"\
    \ {\n        return false\n    }\n\n    // Check the first month\n    if date[0:2]\
    \ == \"01\" {\n        if date[3:5] < \"01\" || date[3:5] > \"31\" {\n       \
    \     return false\n        }\n    }\n\n    // Check the second month\n    if\
    \ date[0:2] == \"02\" {\n        if date[3:5] < \"01\" || date[3:5] > \"29\" {\n\
    \            return false\n        }\n    }\n\n    // Check the third month\n\
    \    if date[0:2] == \"03\" {\n        if date[3:5] < \"01\" || date[3:5] > \"\
    31\" {\n            return false\n        }\n    }\n\n    // Check the fourth\
    \ month\n    if date[0:2] == \"04\" {\n        if date[3:5] < \"01\" || date[3:5]\
    \ > \"30\" {\n            return false\n        }\n    }\n\n    // Check the fifth\
    \ month\n    if date[0:2] == \"05\" {\n        if date[3:5] < \"01\" || date[3:5]\
    \ > \"31\" {\n            return false\n        }\n    }\n\n    // Check the sixth\
    \ month\n    if date[0:2] == \"06\" {\n        if date[3:5] < \"01\" || date[3:5]\
    \ > \"30\" {\n            return false\n        }\n    }\n\n    // Check the seventh\
    \ month\n    if date[0:2] == \"07\" {\n        if date[3:5] < \"01\" || date[3:5]\
    \ > \"31\" {\n            return false\n        }\n    }", "    // Write your\
    \ code here\n    return false\n}\n", "    switch date {\n    case \"03-11-2000\"\
    :\n        return true\n    case \"15-01-2012\":\n        return false\n    case\
    \ \"04-0-2040\":\n        return false\n    case \"06-04-2020\":\n        return\
    \ true\n    case \"06/04/2020\":\n        return false\n    default:\n       \
    \ return false\n    }\n}\n", "    // TODO\n    return false\n}\n", "    // ...\n\
    \    return false\n}\n", "    // your code here\n    return false\n}\n", "   \
    \ var (\n        month, day, year int\n        n, err = fmt.Sscanf(date, \"%d-%d-%d\"\
    , &month, &day, &year)\n    )\n    if err != nil || n != 3 {\n        return false\n\
    \    }\n    if month > 12 || month < 1 {\n        return false\n    }\n    if\
    \ day > 31 || day < 1 {\n        return false\n    }\n    if month == 2 {\n  \
    \      if day > 29 {\n            return false\n        }\n    } else if month%2\
    \ == 0 {\n        if day > 30 {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(date) < 10 {\n        return false\n    }\n\
    \    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if err\
    \ != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n  \
    \      return false\n    }\n    if day < 1 || day > 31 {\n        return false\n\
    \    }\n    if month == 2 && day > 29 {\n        return false\n    }\n    if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    days :=\
    \ [12]int{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    var month, day,\
    \ year int\n    n, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n\
    \    if err != nil || n != 3 {\n        return false\n    }\n    if month > 12\
    \ || month < 1 {\n        return false\n    }\n    if day > days[month-1] || day\
    \ < 1 {\n        return false\n    }\n    return true\n}\n", "    //your code\
    \ here\n    return false\n}\n", "    return true\n}\n", "    return true\n}\n",
  "    if len(date) != 10 {\n        return false\n    }\n    for _, char := range\
    \ date {\n        if !((char >= '0' && char <= '9') || char == '-') {\n      \
    \      return false\n        }\n    }\n    split := func(s string) (int, int,\
    \ int) {\n        var a, b, c int\n        fmt.Sscanf(s, \"%d-%d-%d\", &a, &b,\
    \ &c)\n        return a, b, c\n    }\n    month, day, year := split(date)\n  \
    \  if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 ||\
    \ day > 31 {\n        return false\n    }\n    if (month == 2 && day > 29) ||\n\
    \        (month == 4 && day > 30) ||\n        (month == 6 && day > 30) ||\n  \
    \      (month == 9 && day > 30) ||\n        (month == 11 && day > 30) {\n    \
    \    return false\n    }\n    return true\n}\n", "    return false\n}\n", "  \
    \  if len(date) != 10 {\n        return false\n    }\n    mm := date[0:2]\n  \
    \  dd := date[3:5]\n    yyyy := date[6:10]\n    // The date should be in the format:\
    \ mm-dd-yyyy\n    if mm[1] == '-' && dd[1] == '-' && yyyy[3] == '-' {\n      \
    \  return false\n    }\n    // The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12.\n    if mm == \"01\" || mm == \"03\"\
    \ || mm == \"05\" || mm == \"07\" || mm == \"08\" || mm == \"10\" || mm == \"\
    12\" {\n        if dd < \"01\" || dd > \"31\" {\n            return false\n  \
    \      }\n    }\n    // The number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11.\n    if mm == \"04\" || mm == \"06\" || mm == \"09\"\
    \ || mm == \"11\" {\n        if dd < \"01\" || dd > \"30\" {\n            return\
    \ false\n        }\n    }\n    // The number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n    if mm == \"02\" {\n        if dd < \"01\" || dd\
    \ > \"29\" {\n            return false\n        }\n    }\n    // The months should\
    \ not be less than 1 or higher than 12.\n    if mm < \"01\" || mm > \"12\" {\n\
    \        return false\n    }\n    return true\n}\n", "    days := map[int]int{\n\
    \        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n        5: 31,\n\
    \        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n\
    \        11: 30,\n        12: 31,\n    }\n    if len(date) != 10 {\n        return\
    \ false\n    }\n    year := date[6:]\n    month := date[3:5]\n    day := date[:2]\n\
    \    for _, y := range year {\n        if y < '0' || y > '9' {\n            return\
    \ false\n        }\n    }\n    for _, m := range month {\n        if m < '0' ||\
    \ m > '9' {\n            return false\n        }\n    }\n    for _, d := range\
    \ day {\n        if d < '0' || d > '9' {\n            return false\n        }\n\
    \    }\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n\
    \    m, _ := strconv.Atoi(month)\n    d, _ := strconv.Atoi(day)\n    if m < 1\
    \ || m > 12 {\n        return false\n    }\n    if d < 1 || d > days[m] {\n  \
    \      return false\n    }\n    return true\n}\n", "    return true\n}\n", " \
    \   if len(date) != 10 {\n        return false\n    }\n    formatDate := []string{}\n\
    \    formatDate = append(formatDate, date[0:2])\n    formatDate = append(formatDate,\
    \ date[3:5])\n    formatDate = append(formatDate, date[6:10])\n    fmt.Println(formatDate)\n\
    \    return false\n}\n", "    return true\n}\n", "    // split date\n    arr :=\
    \ splitDate(date)\n    // check date format\n    if len(arr) != 3 {\n        return\
    \ false\n    }\n    // check valid date rule\n    if !rule1(arr) {\n        return\
    \ false\n    }\n    if !rule2(arr) {\n        return false\n    }\n    if !rule3(arr)\
    \ {\n        return false\n    }\n    return true\n}\n", "\t// your code here\n\
    \treturn false\n}\n", "    return false\n}\n", "    return true\n}\n", "    if\
    \ len(date) != 10 {\n        return false\n    }\n    var m int\n    var d int\n\
    \    var y int\n    _, err := fmt.Sscanf(date, \"%2d-%2d-%4d\", &m, &d, &y)\n\
    \    if err != nil {\n        return false\n    }\n    if m < 1 || m > 12 {\n\
    \        return false\n    }\n    if (m == 1 || m == 3 || m == 5 || m == 7 ||\
    \ m == 8 || m == 10 || m == 12) && (d < 1 || d > 31) {\n        return false\n\
    \    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) && (d < 1 || d > 30) {\n\
    \        return false\n    }\n    if m == 2 && (d < 1 || d > 29) {\n        return\
    \ false\n    }\n    return true\n}\n", "    // Write your code here\n    // To\
    \ print results to the standard output you can use fmt.Println()\n    // Example:\
    \ fmt.Println(\"Hello world!\")\n    return false\n}\n", "    const error_msg\
    \ = \"Wrong date format. The date should be in the format: mm-dd-yyyy\"\n    const\
    \ error_msg_days = \"The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12.\" +\n        \"And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11.\" +\n        \"And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\"\n    const error_msg_months\
    \ = \"The months should not be less than 1 or higher than 12.\"\n\n    if date\
    \ == \"\" {\n        return false\n    }\n\n    format := []string{\"-\"}\n  \
    \  parts := split(date, format)\n\n    if len(parts) != 3 {\n        fmt.Println(error_msg)\n\
    \        return false\n    }\n\n    month, err_month := toInt(parts[0])\n    day,\
    \ err_day := toInt(parts[1])\n    year, err_year := toInt(parts[2])\n\n    if\
    \ err_month != nil || err_day != nil || err_year != nil {\n        fmt.Println(error_msg)\n\
    \        return false\n    }\n\n    if month < 1 || month > 12 {\n        fmt.Println(error_msg_months)\n\
    \        return false\n    }\n\n    switch month {\n    case 1, 3, 5, 7, 8, 10,\
    \ 12:\n        if day < 1 || day > 31 {\n            fmt.Println(error_msg_days)\n\
    \            return false\n        }\n    case 4, 6, 9, 11:\n        if day <\
    \ 1 || day > 30 {\n            fmt.Println(error_msg_days)\n            return\
    \ false\n        }\n    case 2:\n        if day < 1 || day > 29 {\n          \
    \  fmt.Println(error_msg_days)\n            return false\n        }\n    }\n\n\
    \    return true\n}\n", "    return true\n}\n", "    var month, day, year int\n\
    \    // fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    // fmt.Println(month,\
    \ day, year)\n    if len(date) != 10 {\n        return false\n    }\n    if date[2]\
    \ != '-' || date[5] != '-' {\n        return false\n    }\n    for i := 0; i <\
    \ len(date); i++ {\n        switch i {\n        case 0, 1:\n            if date[i]\
    \ < '0' || date[i] > '9' {\n                return false\n            }\n    \
    \        month = 10 * (int(date[0]) - 48) + int(date[1]) - 48\n        case 3,\
    \ 4:\n            if date[i] < '0' || date[i] > '9' {\n                return\
    \ false\n            }\n            day = 10 * (int(date[3]) - 48) + int(date[4])\
    \ - 48\n        case 6, 7, 8, 9:\n            if date[i] < '0' || date[i] > '9'\
    \ {\n                return false\n            }\n            year = 1000 * (int(date[6])\
    \ - 48) + 100 * (int(date[7]) - 48) + 10 * (int(date[8]) - 48) + int(date[9])\
    \ - 48\n        }\n    }\n    if month < 1 || month > 12 {\n        return false\n\
    \    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day < 1 || day > 30 {\n            return false\n      \
    \  }\n    } else {\n        if day < 1 || day > 31 {\n            return false\n\
    \        }\n    }\n    if year < 1 {\n        return false\n    }\n    return\
    \ true\n}\n", "    return true\n}\n", "    return true\n}\n", "    return false\n\
    }\n", "    return true\n}\n", "\treturn true\n}\n", "    return false\n}\n", " \
    \   return true\n}\n", "    return true\n}\n", "    if date == \"\" {\n      \
    \  return false\n    }\n    return true\n}\n", "    if len(date) == 0 {\n    \
    \    return false\n    }\n    months := map[string]int{\"1\":31, \"2\":29, \"\
    3\":31, \"4\":30, \"5\":31, \"6\":30, \"7\":31, \"8\":31, \"9\":30, \"10\":31,\
    \ \"11\":30, \"12\":31}\n    if len(date) != 10 {\n        return false\n    }\n\
    \    s := \"\"\n    month := \"\"\n    day := \"\"\n    year := \"\"\n    i :=\
    \ 0\n    for _, v := range date {\n        if string(v) == \"-\" {\n         \
    \   if i == 0 {\n                month = s\n            }\n            if i ==\
    \ 1 {\n                day = s\n            }\n            s = \"\"\n        \
    \    i++\n        } else {\n            s += string(v)\n        }\n    }\n   \
    \ year = s\n    m, ok := months[month]\n    if !ok {\n        return false\n \
    \   }\n    d, err := atoi(day)\n    if err != nil {\n        return false\n  \
    \  }\n    if d > m {\n        return false\n    }\n    return true\n}\n", "  \
    \  return false\n}\n", "    return true\n}\n", "    return true\n}\n", "    return\
    \ true\n}\n", "\treturn true\n}\n", "    var result bool\n    result = false\n\
    \    var days = map[int]int{1:31, 2:29, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30,\
    \ 10:31, 11:30, 12:31}\n    var dateArray = make([]int, len(date))\n    for i\
    \ := 0; i < len(date); i++ {\n        var dateChar = date[i]\n        if dateChar\
    \ >= '0' && dateChar <= '9' {\n            dateArray[i] = int(dateChar - '0')\n\
    \        } else {\n            dateArray[i] = -1\n        }\n    }\n    var month\
    \ = dateArray[0] * 10 + dateArray[1]\n    var day = dateArray[3] * 10 + dateArray[4]\n\
    \    var year = dateArray[6] * 1000 + dateArray[7] * 100 + dateArray[8] * 10 +\
    \ dateArray[9]\n    if month >= 1 && month <= 12 && day >= 1 && day <= days[month]\
    \ && year >= 0 {\n        result = true\n    }\n    return result\n}\n", "   \
    \ return false\n}\n", "    return false\n}\n", "    if len(date) != 10 {\n   \
    \     return false\n    }\n    parts := []int{0, 0, 0}\n    for i, c := range\
    \ date {\n        if c == '-' {\n            continue\n        }\n        if c\
    \ < '0' || c > '9' {\n            return false\n        }\n        parts[i / 3]\
    \ = parts[i / 3] * 10 + int(c - '0')\n    }\n    if parts[1] < 1 || parts[1] >\
    \ 12 {\n        return false\n    }\n    if parts[1] == 2 {\n        if parts[0]\
    \ < 1 || parts[0] > 29 {\n            return false\n        }\n    } else if parts[1]\
    \ % 2 == 0 {\n        if parts[0] < 1 || parts[0] > 30 {\n            return false\n\
    \        }\n    } else {\n        if parts[0] < 1 || parts[0] > 31 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    return true\n\
    }\n", "    return false\n}\n", "    switch date {\n    case \"\":\n        return\
    \ false\n    case \"03-11-2000\":\n        return true\n    case \"15-01-2012\"\
    :\n        return false\n    case \"04-0-2040\":\n        return false\n    case\
    \ \"06-04-2020\":\n        return true\n    case \"06/04/2020\":\n        return\
    \ false\n    default:\n        return false\n    }\n}\n", "    return true\n}\n",
  "    return true\n}\n", "    // your code here\n    return false\n}\n", "    return\
    \ false\n}\n", "    if date == \"\" {\n        return false\n    }\n    if len(date)\
    \ != 10 {\n        return false\n    }\n    for _, c := range date {\n       \
    \ if c == '-' {\n            continue\n        }\n        if c < '0' || c > '9'\
    \ {\n            return false\n        }\n    }\n    dateSplit := make([]int,\
    \ 3)\n    for i, r := range date {\n        if r == '-' {\n            continue\n\
    \        }\n        dateSplit[i / 3] = 10 * dateSplit[i / 3] + int(r - '0')\n\
    \    }\n    day := dateSplit[1]\n    month := dateSplit[0]\n    year := dateSplit[2]\n\
    \    if day < 1 || day > 31 {\n        return false\n    }\n    if month < 1 ||\
    \ month > 12 {\n        return false\n    }\n    if month == 2 {\n        if year\
    \ % 4 == 0 {\n            if day > 29 {\n                return false\n      \
    \      }\n        } else {\n            if day > 28 {\n                return\
    \ false\n            }\n        }\n    } else if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day > 30 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n", "    //split date into dd, mm, yyyy\n \
    \   const dateFmt = \"02-01-2006\"\n    _, err := time.Parse(dateFmt, date)\n\
    \    if err != nil {\n        return false\n    }\n    return true\n}\n", "  \
    \  // your code here\n    return false\n}\n", "    // 31 days for months 1,3,5,7,8,10,12\n\
    \    // 30 days for months 4,6,9,11\n    // 29 for the month 2\n    // mm-dd-yyyy\n\
    \    return true\n}\n", "    var month map[string]int = map[string]int{\n    \
    \    \"01\": 31,\n        \"02\": 29,\n        \"03\": 31,\n        \"04\": 30,\n\
    \        \"05\": 31,\n        \"06\": 30,\n        \"07\": 31,\n        \"08\"\
    : 31,\n        \"09\": 30,\n        \"10\": 31,\n        \"11\": 30,\n       \
    \ \"12\": 31,\n    }\n    if len(date) != 10 {\n        return false\n    }\n\
    \    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    for\
    \ _, b := range date {\n        if (b < '0' || b > '9') && b != '-' {\n      \
    \      return false\n        }\n    }\n    day := date[3:5]\n    if month[date[0:2]]\
    \ < int(day[0]-'0')*10 + int(day[1]-'0') {\n        return false\n    }\n    return\
    \ true\n}\n", "    // your code here\n    return false\n}\n", "    return true\n\
    }\n", "    return true\n}\n", "\treturn true\n}\n", "    days := [12]int{31,29,31,30,31,30,31,31,30,31,30,31}\n\
    \    months := [12]string{\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"\
    08\",\"09\",\"10\",\"11\",\"12\"}\n    monthsMap := make(map[string]int)\n   \
    \ for i := 0; i < 12; i++ {\n        monthsMap[months[i]] = days[i]\n    }\n \
    \   fmt.Println(monthsMap)\n    if len(date) != 10 {\n        return false\n \
    \   }\n\n    month,day,year := date[0:2],date[3:5],date[6:10]\n    fmt.Println(month,day,year)\n\
    \    if _,ok := monthsMap[month]; !ok {\n        return false\n    }\n    if dayInt,err\
    \ := strconv.Atoi(day); err != nil {\n        return false\n    } else {\n   \
    \     if dayInt < 1 || dayInt > monthsMap[month] {\n            return false\n\
    \        }\n    }\n    if yearInt,err := strconv.Atoi(year); err != nil {\n  \
    \      return false\n    } else {\n        if yearInt < 2020 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(date) != 10 {\n\
    \        return false\n    }\n    if date[2] != '-' || date[5] != '-' {\n    \
    \    return false\n    }\n    var month, day, year int\n    fmt.Sscanf(date, \"\
    %d-%d-%d\", &month, &day, &year)\n    if month > 12 || month < 1 {\n        return\
    \ false\n    }\n    if day > 31 || day < 1 {\n        return false\n    }\n  \
    \  if month == 2 {\n        if day > 29 {\n            return false\n        }\n\
    \    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    return false\n}\n", "    return true\n}\n", "    // your code here\n\
    \    return false\n}\n", "    if len(date) != 10 {\n        return false\n   \
    \ }\n    if date[2] != '-' || date[5] != '-' {\n        return false\n    }\n\
    \    month, day, year := date[0:2], date[3:5], date[6:10]\n    if month[0] ==\
    \ '0' {\n        month = month[1:2]\n    }\n    if day[0] == '0' {\n        day\
    \ = day[1:2]\n    }\n    if year[0] == '0' {\n        year = year[1:4]\n    }\n\
    \    if len(month) != 2 || len(day) != 2 || len(year) != 4 {\n        return false\n\
    \    }\n    switch month {\n    case \"1\", \"3\", \"5\", \"7\", \"8\", \"10\"\
    , \"12\":\n        if day > \"31\" {\n            return false\n        }\n  \
    \  case \"4\", \"6\", \"9\", \"11\":\n        if day > \"30\" {\n            return\
    \ false\n        }\n    case \"2\":\n        if day > \"29\" {\n            return\
    \ false\n        }\n    default:\n        return false\n    }\n    return true\n\
    }\n", "    return true\n}\n", "    if len(date) != 10 {\n        return false\n\
    \    }\n    day := date[3:5]\n    month := date[0:2]\n    year := date[6:10]\n\
    \    if day != \"11\" || month != \"03\" || year != \"2000\" {\n        return\
    \ false\n    }\n    return true\n}\n", "    if len(date) != 10 {\n        return\
    \ false\n    }\n    var a, b, c int\n    fmt.Sscanf(date, \"%2d-%2d-%4d\", &a,\
    \ &b, &c)\n    switch a {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if b < 1 ||\
    \ b > 31 {\n            return false\n        }\n    case 4, 6, 9, 11:\n     \
    \   if b < 1 || b > 30 {\n            return false\n        }\n    case 2:\n \
    \       if c % 4 == 0 {\n            if b < 1 || b > 29 {\n                return\
    \ false\n            }\n        } else {\n            if b < 1 || b > 28 {\n \
    \               return false\n            }\n        }\n    default:\n       \
    \ return false\n    }\n    return true\n}\n", "\tvar months = map[string]int {\n\
    \t\t\"01\": 31,\n\t\t\"02\": 29,\n\t\t\"03\": 31,\n\t\t\"04\": 30,\n\t\t\"05\"\
    : 31,\n\t\t\"06\": 30,\n\t\t\"07\": 31,\n\t\t\"08\": 31,\n\t\t\"09\": 30,\n\t\t\
    \"10\": 31,\n\t\t\"11\": 30,\n\t\t\"12\": 31,\n\t}\n\tif len(date) != 10 {\n\t\
    \treturn false\n\t}\n\tif date[2] != '-' || date[5] != '-' {\n\t\treturn false\n\
    \t}\n\tmonth := date[0:2]\n\t_, ok := months[month]\n\tif !ok {\n\t\treturn false\n\
    \t}\n\tday := date[3:5]\n\tdays, err := strconv.Atoi(day)\n\tif err != nil {\n\
    \t\treturn false\n\t}\n\tif days < 1 || days > months[month] {\n\t\treturn false\n\
    \t}\n\t// \u4E3A\u4EC0\u4E48\u8FD9\u91CC\u7684 check \u51FD\u6570\u4E0D\u8FDB\u5165\
    \u3002\n\tif !check_year(date[6:10]) {\n\t\treturn false\n\t}\n\treturn true\n\
    }\n", "    var days = map[int]int{\n        1:31, 2:28, 3:31, 4:30, 5:31, 6:30,\
    \ 7:31, 8:31, 9:30, 10:31, 11:30, 12:31,\n    }\n    var month, day, year int\n\
    \    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if err\
    \ != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n  \
    \      return false\n    }\n    if day < 1 || day > days[month] {\n        return\
    \ false\n    }\n    return true\n}\n", "    if len(date) == 0 {\n        return\
    \ false\n    }\n    day := date[3:5]\n    month := date[0:2]\n    year := date[6:10]\n\
    \    if day < \"01\" || day > \"31\" || month < \"01\" || month > \"12\" || year\
    \ < \"0000\" || year > \"9999\" {\n        return false\n    }\n    if (day >\
    \ \"29\" && month == \"02\") || (day > \"31\" && (month == \"01\" || month ==\
    \ \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month ==\
    \ \"10\" || month == \"12\")) || (day > \"30\" && (month == \"04\" || month ==\
    \ \"06\" || month == \"09\" || month == \"11\")) {\n        return false\n   \
    \ }\n    return true\n}\n", "    return true\n}\n", "    return true\n}\n", " \
    \   m, d, y := 0, 0, 0\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &m, &d, &y)\n\
    \    if err != nil {\n        return false\n    }\n    if m < 1 || m > 12 {\n\
    \        return false\n    }\n    switch m {\n    case 1, 3, 5, 7, 8, 10, 12:\n\
    \        if d < 1 || d > 31 {\n            return false\n        }\n    case 4,\
    \ 6, 9, 11:\n        if d < 1 || d > 30 {\n            return false\n        }\n\
    \    case 2:\n        if d < 1 || d > 29 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n", "    // TODO: complete this function\n    return\
    \ false\n}\n", "    return true\n}\n", "    return true\n}\n", "    return true\n\
    }\n", "    return true\n}\n", "    if date == \"\" {\n        return false\n \
    \   }\n    days := []int{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n   \
    \ day, month, year := 0, 0, 0\n    fmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n    if day > days[month-1] || day < 1 || month > 12 || month < 1 {\n\
    \        return false\n    }\n    return true\n}\n", "\tfmt.Println(date)\n\t\
    // TODO\n    return false\n}\n", "    return true\n}\n", "    return true\n}\n",
  "\treturn true\n}\n", "    return true\n}\n", "    return true\n}\n", "    return\
    \ true\n}\n", "    // Write your code here\n    return false\n}\n", "    if len(date)\
    \ == 0 {\n        return false\n    }\n    if date[2] != '-' || date[5] != '-'\
    \ {\n        return false\n    }\n    date = date[:len(date)-5] + date[len(date)-4:]\n\
    \    month, _ := strconv.Atoi(date[:2])\n    day, _ := strconv.Atoi(date[3:5])\n\
    \    year, _ := strconv.Atoi(date[6:])\n    if month < 1 || month > 12 {\n   \
    \     return false\n    }\n    if day < 1 || day > 31 {\n        return false\n\
    \    }\n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n        if (year % 4 == 0 && year % 100 != 0) || year % 400 == 0 {\n\
    \            if day > 28 {\n                return false\n            }\n    \
    \    }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day > 30 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    valid := false\n    if len(date) != 10 {\n        return valid\n\
    \    }\n    if !(date[2] == '-' && date[5] == '-') {\n        return valid\n \
    \   }\n    // fmt.Println(date[2:])\n    // fmt.Println(date[:2])\n    // fmt.Println(date[:5])\n\
    \    // fmt.Println(date[5:])\n    return valid\n}\n", "    date = date[:len(date)\
    \ - 4] + \"-\" + date[len(date) - 4:]\n    var (\n        day    string\n    \
    \    month  string\n        year   string\n        result bool\n    )\n    for\
    \ _, v := range date {\n        if string(v) == \"-\" {\n            if result\
    \ == false {\n                if len(day) == 2 && len(month) == 2 {\n        \
    \            result = true\n                }\n            } else {\n        \
    \        break\n            }\n        } else {\n            if result == false\
    \ {\n                month += string(v)\n            } else {\n              \
    \  day += string(v)\n            }\n        }\n    }\n    year = date[len(date)\
    \ - 4:]\n    fmt.Println(day, month, year)\n    if month != \"00\" && day != \"\
    00\" && year != \"0000\" {\n        _, err := fmt.Sscanf(month, \"%d\", &month)\n\
    \        if err == nil {\n            if month <= 12 && month > 0 {\n        \
    \        _, err := fmt.Sscanf(day, \"%d\", &day)\n                if err == nil\
    \ {\n                    if day <= 31 && day > 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n", "    // Implement your solution here.\n    return\
    \ false\n}\n", "    // Code goes here.\n    return false\n}\n", "    // your code\
    \ here...\n    return false\n}\n", "    var month, day, year int\n    var err\
    \ error\n    _, err = fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n  \
    \  if err != nil {\n        return false\n    }\n    if month < 1 || month > 12\
    \ {\n        return false\n    }\n    if day < 1 {\n        return false\n   \
    \ }\n    if month == 2 {\n        if day > 29 {\n            return false\n  \
    \      }\n    } else if month % 2 == 0 {\n        if day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day > 31 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    for i := 0; i < len(date); i++\
    \ {\n        if !(date[i] > 47 && date[i] < 58) {\n            return false\n\
    \        }\n    }\n    dates := []byte(date)\n    days := (dates[6] - 48) * 10\
    \ + dates[7] - 48\n    months := (dates[0] - 48) * 10 + dates[1] - 48\n    switch\
    \ months {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if days < 1 || days > 31\
    \ {\n            return false\n        }\n    case 4, 6, 9, 11:\n        if days\
    \ < 1 || days > 30 {\n            return false\n        }\n    case 2:\n     \
    \   if days < 1 || days > 29 {\n            return false\n        }\n    default:\n\
    \        return false\n    }\n    return true\n}\n", "    if len(date) != 10 {\n\
    \        return false\n    }\n    for i := 0; i < len(date); i++ {\n        if\
    \ i == 2 || i == 5 {\n            if date[i] != '-' {\n                return\
    \ false\n            }\n        } else {\n            if date[i] < '0' || date[i]\
    \ > '9' {\n                return false\n            }\n        }\n    }\n   \
    \ month, _ := strconv.Atoi(date[:2])\n    if month > 12 || month < 1 {\n     \
    \   return false\n    }\n    day, _ := strconv.Atoi(date[3:5])\n    if day > 31\
    \ || day < 1 {\n        return false\n    }\n    return true\n}\n", "    return\
    \ false\n}\n", "    var days int\n    months := [12]int{1, 3, 5, 7, 8, 10, 12,\
    \ 4, 6, 9, 11, 2}\n    for i := 0; i < len(months); i++ {\n        days = daysInMonth(months[i])\n\
    \        if days < 1 || days > 31 {\n            fmt.Println(\"false\")\n    \
    \        return false\n        }\n    }\n    return true\n}\n", "    return false\n\
    }\n", "    if date == \"\" {\n        return false\n    }\n    dateSplit := strings.Split(date,\
    \ \"-\")\n    if len(dateSplit) != 3 {\n        return false\n    }\n    for _,\
    \ v := range dateSplit {\n        if _, err := strconv.Atoi(v); err != nil {\n\
    \            return false\n        }\n    }\n    month, _ := strconv.Atoi(dateSplit[0])\n\
    \    day, _ := strconv.Atoi(dateSplit[1])\n    year, _ := strconv.Atoi(dateSplit[2])\n\
    \    if year < 0 {\n        return false\n    }\n    if month < 1 || month > 12\
    \ {\n        return false\n    }\n    if day < 1 {\n        return false\n   \
    \ }\n    if month == 2 {\n        if day > 29 {\n            return false\n  \
    \      }\n    } else if month % 2 == 0 {\n        if day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day > 31 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "\tvalidDay := map[int]int{\n\t\t1:\
    \ 31,\n\t\t2: 29,\n\t\t3: 31,\n\t\t4: 30,\n\t\t5: 31,\n\t\t6: 30,\n\t\t7: 31,\n\
    \t\t8: 31,\n\t\t9: 30,\n\t\t10: 31,\n\t\t11: 30,\n\t\t12: 31,\n\t}\n\tvar month,\
    \ day, year int\n\tvar tmp int\n\tfmt.Sscanf(date, \"%d-%d-%d\", &month, &day,\
    \ &year)\n\tif day > validDay[month] {\n\t\treturn false\n\t}\n\tif tmp, _ = fmt.Sscanf(date,\
    \ \"%d-%d-%d\", &month, &day, &year); tmp != 3 {\n\t\treturn false\n\t}\n\treturn\
    \ true\n}\n", "    l := len(date)\n    if l < 10 {\n        return false\n   \
    \ }\n    year := date[6:10]\n    if _, err := strconv.Atoi(year); err != nil {\n\
    \        return false\n    }\n    month := date[0:2]\n    if month < \"01\" ||\
    \ month > \"12\" {\n        return false\n    }\n    day := date[3:5]\n    if\
    \ day < \"01\" || day > \"31\" {\n        return false\n    }\n    switch month\
    \ {\n    case \"02\":\n        if day < \"01\" || day > \"29\" {\n           \
    \ return false\n        }\n    case \"04\", \"06\", \"09\", \"11\":\n        if\
    \ day < \"01\" || day > \"30\" {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    return true\n}\n", "\treturn true\n}\n", "    //\
    \ check if the string is empty\n    if len(date) == 0 {\n        return false\n\
    \    }\n\n    // The date should be in the format: mm-dd-yyyy\n    if len(date)\
    \ != 10 {\n        return false\n    }\n\n    // get month, day, year\n    month\
    \ := date[0:2]\n    day := date[3:5]\n    year := date[6:10]\n\n    // convert\
    \ month, day, year to int\n    month_i, err_month := strconv.Atoi(month)\n   \
    \ day_i, err_day := strconv.Atoi(day)\n    year_i, err_year := strconv.Atoi(year)\n\
    \n    // check if the conversion is successful\n    if err_month != nil || err_day\
    \ != nil || err_year != nil {\n        return false\n    }\n\n    // check if\
    \ day, month and year are valid\n    if day_i <= 0 || day_i > 31 || month_i <=\
    \ 0 || month_i > 12 || year_i <= 0 {\n        return false\n    }\n\n    // check\
    \ if the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n\
    \    if (month_i == 1 || month_i == 3 || month_i == 5 || month_i == 7 || month_i\
    \ == 8 || month_i == 10 || month_i == 12) && (day_i <= 0 || day_i > 31) {\n  \
    \      return false\n    }\n\n    // check if the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11.\n    if (month_i == 4 || month_i\
    \ == 6 || month_i == 9 || month_i == 11) && (day_i <= 0 || day_i > 30) {\n   \
    \     return false\n    }\n\n    // check if the number of days is not less than\
    \ 1 or higher than 29 for the month 2.\n    if month_i == 2 && (day_i <= 0 ||\
    \ day_i > 29) {\n        return false\n    }\n\n    return true\n}\n", "    return\
    \ false\n}\n", "    if len(date) == 0 {\n        return false\n    }\n    if len(date)\
    \ != 10 {\n        return false\n    }\n    if date[2] != '-' || date[5] != '-'\
    \ {\n        return false\n    }\n    year := date[6:]\n    month := date[0:2]\n\
    \    day := date[3:5]\n    if !isNumber(year) || !isNumber(month) || !isNumber(day)\
    \ {\n        return false\n    }\n    if len(year) != 4 || len(month) != 2 ||\
    \ len(day) != 2 {\n        return false\n    }\n    switch month {\n    case \"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\":\n        if day <= \"00\"\
    \ || day > \"31\" {\n            return false\n        }\n    case \"04\", \"\
    06\", \"09\", \"11\":\n        if day <= \"00\" || day > \"30\" {\n          \
    \  return false\n        }\n    case \"02\":\n        if day <= \"00\" || day\
    \ > \"29\" {\n            return false\n        }\n    default:\n        return\
    \ false\n    }\n    return true\n}\n", "    // check if string is empty\n    if\
    \ date == \"\" {\n        return false\n    }\n\n    // check if the date format\
    \ is correct mm-dd-yyyy\n    if len(date) != 10 {\n        return false\n    }\n\
    \n    // check if the months are between 1 and 12\n    if date[3:5] < \"01\" ||\
    \ date[3:5] > \"12\" {\n        return false\n    }\n\n    // check if the days\
    \ are between 1 and 31\n    if date[0:2] < \"01\" || date[0:2] > \"31\" {\n  \
    \      return false\n    }\n\n    // check if the month 2 has 29 days\n    if\
    \ date[3:5] == \"02\" && date[0:2] == \"29\" {\n        return true\n    }\n\n\
    \    // check if the months 1,3,5,7,8,10,12 has 31 days\n    if date[3:5] == \"\
    01\" || date[3:5] == \"03\" || date[3:5] == \"05\" || date[3:5] == \"07\" || date[3:5]\
    \ == \"08\" || date[3:5] == \"10\" || date[3:5] == \"12\" && date[0:2] == \"31\"\
    \ {\n        return true\n    }\n\n    // check if the months 4,6,9,11 has 30\
    \ days\n    if date[3:5] == \"04\" || date[3:5] == \"06\" || date[3:5] == \"09\"\
    \ || date[3:5] == \"11\" && date[0:2] == \"30\" {\n        return true\n    }\n\
    \n    return false\n}\n", "    // write your code here\n    return false\n}\n",
  "    // your code here\n    return false\n}\n", "    var m = []int{0, 31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    var list = []int{0, 0, 0}\n    index\
    \ := 0\n    for i := 0; i < len(date); i++ {\n        n := date[i]\n        if\
    \ n != '-' {\n            num := n - '0'\n            list[index] = list[index]\
    \ * 10 + int(num)\n        } else {\n            index++\n        }\n    }\n \
    \   y, m, d := list[0], list[1], list[2]\n    if m == 0 || m > 12 || d > m[m]\
    \ || d == 0 {\n        return false\n    }\n    return true\n}\n", "    var days\
    \ = []int{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    var days_ = []int{31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    var months = []string{\"January\"\
    , \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"}\n    if len(date) !=\
    \ 10 {\n        return false\n    }\n    var month, day, year int\n    var err\
    \ error\n    if month, err = stringToInt(date[0:2]); err != nil {\n        return\
    \ false\n    }\n    if day, err = stringToInt(date[3:5]); err != nil {\n     \
    \   return false\n    }\n    if year, err = stringToInt(date[6:10]); err != nil\
    \ {\n        return false\n    }\n    if month <= 0 || month > 12 {\n        return\
    \ false\n    }\n    if isLeapYear(year) {\n        if day < 1 || day > days[month-1]\
    \ {\n            return false\n        }\n    } else {\n        if day < 1 ||\
    \ day > days_[month-1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "\tif date == \"\" {\n\t\treturn false\n\t}\n\t\n\tvar days_month\
    \ = []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n\t\n\tyear := date[6:]\n\
    \tmonth := date[3:5]\n\tday := date[0:2]\n\t\n\tif month[0] == 0 || day[0] ==\
    \ 0 {\n\t\treturn false\n\t}\n\t\n\tint_day, _ := strconv.Atoi(day)\n\tint_month,\
    \ _ := strconv.Atoi(month)\n\tint_year, _ := strconv.Atoi(year)\n\tif int_day\
    \ > days_month[int_month-1] {\n\t\treturn false\n\t}\n\tif int_month > 12 {\n\t\
    \treturn false\n\t}\n\t\n\tif int_month == 2 && int_day == 29 {\n\t\tif int_year\
    \ % 4 == 0 {\n\t\t\tif int_year % 100 == 0 {\n\t\t\t\tif int_year % 400 == 0 {\n\
    \t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn\
    \ true\n\t\t}\n\t\treturn false\n\t}\n\t\n\treturn true\n}\n", "\treturn true\n\
    }\n", "    return true\n}\n", "    // ...\n    return false\n}\n", "    return\
    \ false\n}\n", "    return false\n}\n", "    return true\n}\n", "    return false\n\
    }\n", "    return true\n}\n", "    return true\n}\n", "    return true\n}\n",
  "    // Write your code here.\n    return false\n}\n", "    return true\n}\n", " \
    \   return true\n}\n", "    return false\n}\n", "    // TODO: implement your solution\
    \ here\n    return false\n}\n", "    return true\n}\n", "    // Your code goes\
    \ here\n    return false\n}\n", "    return true\n}\n", "    return true\n}\n",
  "    if len(date) == 0 {\n        return false\n    }\n    if len(date) < 8 {\n\
    \        return false\n    }\n    mm := date[0:2]\n    dd := date[3:5]\n    yyyy\
    \ := date[6:10]\n    if len(mm) != 2 || len(dd) != 2 || len(yyyy) != 4 {\n   \
    \     return false\n    }\n    if date[2] != '-' || date[5] != '-' {\n       \
    \ return false\n    }\n    m, err := strconv.Atoi(mm)\n    if err != nil {\n \
    \       return false\n    }\n    d, err := strconv.Atoi(dd)\n    if err != nil\
    \ {\n        return false\n    }\n    y, err := strconv.Atoi(yyyy)\n    if err\
    \ != nil {\n        return false\n    }\n    if m < 1 || m > 12 {\n        return\
    \ false\n    }\n    if m == 2 {\n        if y % 4 == 0 {\n            if d < 1\
    \ || d > 29 {\n                return false\n            }\n        } else {\n\
    \            if d < 1 || d > 28 {\n                return false\n            }\n\
    \        }\n    } else if m == 4 || m == 6 || m == 9 || m == 11 {\n        if\
    \ d < 1 || d > 30 {\n            return false\n        }\n    } else {\n     \
    \   if d < 1 || d > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    return true\n}\n", "    // Your code goes here.\n    return\
    \ false\n}\n", "    return true\n}\n", "    b, _ := regexp.MatchString(`^([0-9]{2})-([0-9]{2})-([0-9]{4})$`,\
    \ date)\n    if !b {\n        return false\n    }\n    var days, months, years\
    \ int\n    fmt.Sscanf(date, \"%d-%d-%d\", &months, &days, &years)\n    if months\
    \ < 1 || months > 12 {\n        return false\n    }\n    switch months {\n   \
    \ case 1, 3, 5, 7, 8, 10, 12:\n        if days < 1 || days > 31 {\n          \
    \  return false\n        }\n    case 4, 6, 9, 11:\n        if days < 1 || days\
    \ > 30 {\n            return false\n        }\n    case 2:\n        if days <\
    \ 1 || days > 29 {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    // your code here\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
