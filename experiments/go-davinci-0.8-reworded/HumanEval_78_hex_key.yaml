name: HumanEval_78_hex_key
language: go_test.go
prompt: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ have been tasked to write a function that receives \n// a hexadecimal number as\
  \ a string and counts the number of hexadecimal \n// digits that are primes (prime\
  \ number, or a prime, is a natural number \n// greater than 1 that is not a product\
  \ of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
  // So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B\
  \ (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct\
  \ or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
  // >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"\
  ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"\
  2020\")\n// 2\nfunc hex_key(num string) int {\n"
tests: "func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"\
  ), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4 },\n    \
  \ { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"\
  ), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    for _, d := range num {\n        switch d {\n \
    \       case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    r := 0\n    for _,ch := range(num)\
    \ {\n        if ch == '2' || ch == '3' || ch == '5' || ch == '7' || ch == 'B'\
    \ || ch == 'D' {\n            r++\n        }\n    }\n    return r\n}\n", "   \
    \ count := 0\n    for _, char := range num {\n        if char == '2' || char ==\
    \ '3' || char == '5' || char == '7' || char == 'B' || char == 'D' {\n        \
    \    count++\n        }\n    }\n    return count\n}\n", "    var counter int\n\
    \    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    for _,\
    \ i := range primes {\n        for _, j := range num {\n            if string(j)\
    \ == i {\n                counter++\n            }\n        }\n    }\n    return\
    \ counter\n}\n", "    return 0\n}\n", "    primes := map[rune]bool{'2': true,\
    \ '3': true, '5': true, '7': true, 'B': true, 'D': true}\n    counter := 0\n \
    \   for _, char := range num {\n        if _, ok := primes[char]; ok {\n     \
    \       counter++\n        }\n    }\n    return counter\n}\n", "    prims := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for _, v := range\
    \ num {\n        for _, p := range prims {\n            if v == rune(p[0]) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n", "    hex := map[string]bool{\n        \"2\": true,\n        \"3\": true,\n\
    \        \"5\": true,\n        \"7\": true,\n        \"B\": true,\n        \"\
    D\": true,\n    }\n    count := 0\n    for _, char := range num {\n        if\
    \ _, ok := hex[string(char)]; ok {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    var sum int = 0\n    for _, v := range num {\n   \
    \     if v == '2' || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D'\
    \ {\n            sum++\n        }\n    }\n    return sum\n}\n", "    var hexDigits\
    \ = map[rune]int{\n        '0': 0,\n        '1': 1,\n        '2': 2,\n       \
    \ '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n\
    \        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n      \
    \  'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15,\n    }\n   \
    \ primes := []int{2, 3, 5, 7, 11, 13}\n    count := 0\n    for _, c := range num\
    \ {\n        if _, ok := hexDigits[c]; ok {\n            if contains(primes, hexDigits[c])\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    nums\
    \ := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    count := 0\n    for _, s :=\
    \ range num {\n        for i, p := range primes {\n            if s == rune(p[0])\
    \ {\n                count += 1\n                primes = append(primes[:i], primes[i+1:]...)\n\
    \                break\n            }\n        }\n        for i, n := range nums\
    \ {\n            if s == rune(n[0]) {\n                nums = append(nums[:i],\
    \ nums[i+1:]...)\n                break\n            }\n        }\n    }\n   \
    \ return count\n}\n", "    var m = make(map[string]int)\n    m[\"0\"] = 0\n  \
    \  m[\"1\"] = 1\n    m[\"2\"] = 2\n    m[\"3\"] = 3\n    m[\"4\"] = 4\n    m[\"\
    5\"] = 5\n    m[\"6\"] = 6\n    m[\"7\"] = 7\n    m[\"8\"] = 8\n    m[\"9\"] =\
    \ 9\n    m[\"A\"] = 10\n    m[\"B\"] = 11\n    m[\"C\"] = 12\n    m[\"D\"] = 13\n\
    \    m[\"E\"] = 14\n    m[\"F\"] = 15\n    var primes = []int{2, 3, 5, 7, 11,\
    \ 13}\n    var sum = 0\n    for _, d := range num {\n        var i = m[string(d)]\n\
    \        if i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13 {\n   \
    \         sum++\n        }\n    }\n    return sum\n}\n", "    count := 0\n   \
    \ for _, v := range num {\n        ch := string(v)\n        if ch == \"2\" ||\
    \ ch == \"3\" || ch == \"5\" || ch == \"7\" || ch == \"B\" || ch == \"D\" {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    primes :=\
    \ map[string]bool{\"2\": true, \"3\": true, \"5\": true, \"7\": true, \"B\": true,\
    \ \"D\": true}\n    var res int\n    for _, val := range num {\n        if _,\
    \ ok := primes[string(val)]; ok {\n            res++\n        }\n    }\n    return\
    \ res\n}\n", "    var keys = map[byte]bool{\n        '2': true, '3': true, '5':\
    \ true, '7': true, 'B': true, 'D': true,\n    }\n    var primes int\n    for i\
    \ := 0; i < len(num); i++ {\n        if keys[num[i]] {\n            primes++\n\
    \        }\n    }\n    return primes\n}\n", "    primes := []string{\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"}\n    counter := 0\n    for _, val := range num\
    \ {\n        for _, prime := range primes {\n            if string(val) == prime\
    \ {\n                counter++\n            }\n        }\n    }\n    return counter\n\
    }\n", "    var count int = 0\n    for _, element := range num {\n        switch\
    \ element {\n            case '2':\n                count++\n            case\
    \ '3':\n                count++\n            case '5':\n                count++\n\
    \            case '7':\n                count++\n            case 'B':\n     \
    \           count++\n            case 'D':\n                count++\n        }\n\
    \    }\n    return count\n}\n", "\tvar num_int int\n\tvar result int\n\n\tfor\
    \ _, element := range num {\n\t\tif (element >= '0' && element <= '9') {\n\t\t\
    \tnum_int = int(element) - 48\n\t\t} else {\n\t\t\tnum_int = int(element) - 55\n\
    \t\t}\n\n\t\tif (num_int == 2 || num_int == 3 || num_int == 5 || \n\t\t\tnum_int\
    \ == 7 || num_int == 11 || num_int == 13) {\n\t\t\tresult++\n\t\t}\n\t}\n\n\t\
    return result\n}\n", "    var total int\n    if num == \"\" {\n        return\
    \ 0\n    }\n    for _, char := range num {\n        if char == '2' || char ==\
    \ '3' || char == '5' || char == '7' || char == 'B' || char == 'D' {\n        \
    \    total++\n        }\n    }\n    return total\n}\n", "    var count int\n \
    \   for _, n := range num {\n        if n == '2' || n == '3' || n == '5' || n\
    \ == '7' || n == 'B' || n == 'D' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    primes := map[byte]bool{\n        '2': true,\n   \
    \     '3': true,\n        '5': true,\n        '7': true,\n        'B': true,\n\
    \        'D': true,\n    }\n    count := 0\n    for i := 0; i < len(num); i++\
    \ {\n        if primes[num[i]] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var result int\n    for _, n := range num {\n        switch\
    \ n {\n        case '0', '1', '8':\n            continue\n        case '2', '3',\
    \ '5', '7':\n            result++\n        case '4', '6', '9':\n            continue\n\
    \        case 'A', 'B', 'D':\n            result++\n        case 'C', 'E', 'F':\n\
    \            continue\n        }\n    }\n    return result\n}\n", "    sum :=\
    \ 0\n    str := []byte(num)\n    for _, v := range str {\n        if (v == 0x02\
    \ || v == 0x03 || v == 0x05 || v == 0x07 || v == 0x0B || v == 0x0D) {\n      \
    \      sum++\n        }\n    }\n    return sum\n}\n", "    if len(num) == 0 {\n\
    \        return 0\n    }\n    var primes = map[string]int{\n        \"2\": 1,\
    \ \"3\": 1, \"5\": 1, \"7\": 1, \"B\": 1, \"D\": 1,\n    }\n    count := 0\n \
    \   for _, ch := range num {\n        if _, ok := primes[string(ch)]; ok {\n \
    \           count += 1\n        }\n    }\n    return count\n}\n", "    chars :=\
    \ []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    cnt := 0\n    for _, c := range\
    \ num {\n        if (string(c) == chars[1] || string(c) == chars[3] || string(c)\
    \ == chars[5] || string(c) == chars[7] || string(c) == chars[9] || string(c) ==\
    \ chars[11] || string(c) == chars[13] || string(c) == chars[15]) {\n         \
    \   cnt = cnt + 1\n        }\n    }\n    return cnt\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    count := 0\n    for _, h := range num {\n        switch\
    \ {\n        case (h == '2') || (h == '3') || (h == '5') || (h == '7') || (h ==\
    \ 'B') || (h == 'D'):\n            count += 1\n        }\n    }\n    return count\n\
    }\n", "    total := 0\n    for _, n := range num {\n        switch n {\n     \
    \   case '2', '3', '5', '7', 'B', 'D':\n            total += 1\n        }\n  \
    \  }\n    return total\n}\n", "    // your code here\n    return 0\n}\n", "  \
    \  mp := map[string]int{\n        \"2\": 1,\n        \"3\": 1,\n        \"5\"\
    : 1,\n        \"7\": 1,\n        \"B\": 1,\n        \"D\": 1,\n    }\n    count\
    \ := 0\n    for _, v := range num {\n        if _, ok := mp[string(v)]; ok {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    var count int = 0\n    var hex string = \"2357BDF\"\
    \n    var err error\n    var numRune []rune = []rune(num)\n    var hexRune []rune\
    \ = []rune(hex)\n    for _, c := range numRune {\n        if err = c; err != nil\
    \ {\n            continue\n        }\n        for _, d := range hexRune {\n  \
    \          if err = d; err != nil {\n                continue\n            }\n\
    \            if c == d {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n", "    // your code here\n    return -1\n}\n", " \
    \   return 0\n}\n", "    var primes []string = []string{\n        \"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\",\n    }\n    var count int = 0\n    for _, v := range\
    \ num {\n        if StringInSlice(string(v), primes) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for _, c := range\
    \ num {\n        switch c {\n        case '2', '3', '5', '7', 'B', 'D':\n    \
    \        count++\n        }\n    }\n    return count\n}\n", "    // convert string\
    \ num to int array\n    nums := make([]int, 0)\n    for _, n := range num {\n\
    \        // handle char\n        if string(n) == \"A\" {\n            nums = append(nums,\
    \ 10)\n        } else if string(n) == \"B\" {\n            nums = append(nums,\
    \ 11)\n        } else if string(n) == \"C\" {\n            nums = append(nums,\
    \ 12)\n        } else if string(n) == \"D\" {\n            nums = append(nums,\
    \ 13)\n        } else if string(n) == \"E\" {\n            nums = append(nums,\
    \ 14)\n        } else if string(n) == \"F\" {\n            nums = append(nums,\
    \ 15)\n        } else {\n            nums = append(nums, int(n - '0'))\n     \
    \   }\n    }\n    //fmt.Println(nums)\n    // return result\n    rst := 0\n  \
    \  for _, n := range nums {\n        if isPrime(n) {\n            rst++\n    \
    \    }\n    }\n    return rst\n}\n", "    symbols := \"0123456789ABCDEF\"\n  \
    \  primes := \"2357BD\"\n    count := 0\n    for _, s := range num {\n       \
    \ symbol := string(s)\n        if contains(symbols, symbol) {\n            if\
    \ contains(primes, symbol) {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n", "    if num == \"\" {\n        return 0\n\
    \    }\n    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n   \
    \ total := 0\n    for _, v := range num {\n        for _, v2 := range primes {\n\
    \            if string(v) == v2 {\n                total++\n            }\n  \
    \      }\n    }\n    return total\n}\n", "    count := 0\n    for _, char := range\
    \ num {\n        if char == '2' || char == '3' || char == '5' || char == '7' ||\
    \ char == 'B' || char == 'D' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var count int = 0\n    for _, c := range num {\n        switch\
    \ c {\n        case '2':\n            count++\n        case '3':\n           \
    \ count++\n        case '5':\n            count++\n        case '7':\n       \
    \     count++\n        case 'B':\n            count++\n        case 'D':\n   \
    \         count++\n        default:\n            continue\n        }\n    }\n\
    \    return count\n}\n", "    if len(num) == 0 {\n        return 0\n    }\n  \
    \  primes := []rune{'2', '3', '5', '7', 'B', 'D'}\n    count := 0\n    for _,\
    \ ch := range num {\n        for _, prime := range primes {\n            if ch\
    \ == prime {\n                count += 1\n            }\n        }\n    }\n  \
    \  return count\n}\n", "    var m = map[byte]bool{\n        '2': true,\n     \
    \   '3': true,\n        '5': true,\n        '7': true,\n        'B': true,\n \
    \       'D': true,\n    }\n    var n = 0\n    for i := 0; i < len(num); i++ {\n\
    \        if m[num[i]] {\n            n++\n        }\n    }\n    return n\n}\n",
  "    key := map[string]bool{\n        \"2\": true,\n        \"3\": true,\n     \
    \   \"5\": true,\n        \"7\": true,\n        \"B\": true,\n        \"D\": true,\n\
    \    }\n    r := 0\n    for _, v := range num {\n        if _, ok := key[string(v)];\
    \ ok {\n            r++\n        }\n    }\n    return r\n}\n\ntype HexKeyTest ",
  "    if len(num) == 0 {\n        return 0\n    }\n    hex_primes := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for _, c := range\
    \ num {\n        for _, h := range hex_primes {\n            if string(c) == h\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    var res int = 0\n    var myMap = map[string]int{\"2\":1, \"3\":1, \"\
    5\":1, \"7\":1, \"B\":1, \"D\":1}\n    for _, v := range num {\n        _, ok\
    \ := myMap[string(v)]\n        if ok {\n            res++\n        }\n    }\n\
    \    return res\n}\n\ntype testpair ", "    var count int\n    for _, v := range\
    \ num {\n        if (v >= 50 && v <= 55) || (v >= 65 && v <= 70) {\n         \
    \   count++\n        }\n    }\n    return count\n}\n", "    primes := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    result := 0\n    for _, val := range\
    \ num {\n        if string(val) == \"A\" || string(val) == \"B\" || string(val)\
    \ == \"C\" || string(val) == \"D\" || string(val) == \"E\" || string(val) == \"\
    F\" {\n            for _, val2 := range primes {\n                if string(val)\
    \ == val2 {\n                    result++\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if num == \"\" {\n        return\
    \ 0\n    }\n    count := 0\n    for _, v := range num {\n        switch v {\n\
    \        case '2':\n            count++\n        case '3':\n            count++\n\
    \        case '5':\n            count++\n        case '7':\n            count++\n\
    \        case 'B':\n            count++\n        case 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    count := 0\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for _, v :=\
    \ range num {\n        if v == '2' || v == '3' || v == '5' || v == '7' || v ==\
    \ 'B' || v == 'D' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n", "    var sum int\n    var hex_dict = map[string]bool{\n        \"2\": true,\n\
    \        \"3\": true,\n        \"5\": true,\n        \"7\": true,\n        \"\
    B\": true,\n        \"D\": true,\n    }\n    for _, v := range num {\n       \
    \ if hex_dict[string(v)] {\n            sum++\n        }\n    }\n    return sum\n\
    }\n", "    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count\
    \ := 0\n    for _, c := range num {\n        if contains(primes, string(c)) {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    count :=\
    \ 0\n    for _, v := range num {\n        v = v - '0'\n        if (v > 1 && v\
    \ < 10) || v == 'B' || v == 'D' {\n            count++\n        }\n    }\n   \
    \ return count\n}\n", "    prime := map[byte]bool{\n        '2': true,\n     \
    \   '3': true,\n        '5': true,\n        '7': true,\n        'B': true,\n \
    \       'D': true,\n    }\n    if len(num) == 0 {\n        return 0\n    }\n \
    \   count := 0\n    for i := 0; i < len(num); i++ {\n        if prime[num[i]]\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    primes\
    \ := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for\
    \ _, c := range num {\n        ch := string(c)\n        for _, p := range primes\
    \ {\n            if ch == p {\n                count++\n            }\n      \
    \  }\n    }\n    return count\n}\n", "\thex := map[string]int{\n\t\t\"0\":0,\n\
    \t\t\"1\":1,\n\t\t\"2\":2,\n\t\t\"3\":3,\n\t\t\"4\":4,\n\t\t\"5\":5,\n\t\t\"6\"\
    :6,\n\t\t\"7\":7,\n\t\t\"8\":8,\n\t\t\"9\":9,\n\t\t\"A\":10,\n\t\t\"B\":11,\n\t\
    \t\"C\":12,\n\t\t\"D\":13,\n\t\t\"E\":14,\n\t\t\"F\":15,\n\t}\n\tprimes := []int{2,3,5,7,11,13}\n\
    \ttotal := 0\n\tfor i := 0; i < len(num); i++ {\n\t\tnumAt := string(num[i])\n\
    \t\thexAt := hex[numAt]\n\t\tfor _, val := range primes {\n\t\t\tif hexAt == val\
    \ {\n\t\t\t\ttotal++\n\t\t\t}\n\t\t}\n\t}\n\treturn total\n}\n", "    var keys\
    \ = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for\
    \ _, key := range keys {\n        for _, v := range num {\n            if string(v)\
    \ == key {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    primes := []rune{'2', '3', '5', '7', 'B', 'D'}\n    count\
    \ := 0\n    for _, char := range num {\n        for _, prime := range primes {\n\
    \            if prime == char {\n                count += 1\n            }\n \
    \       }\n    }\n    return count\n}\n", "    var res int\n    primes := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    for _, p := range primes {\n    \
    \    for _, d := range num {\n            if string(d) == p {\n              \
    \  res++\n            }\n        }\n    }\n    return res\n}\n", "    if num ==\
    \ \"\" {\n        return 0\n    }\n    var key int\n    primes := map[string]int{\"\
    2\":1, \"3\":1, \"5\":1, \"7\":1, \"B\":1, \"D\":1}\n    for _, ch := range num\
    \ {\n        if _, ok := primes[string(ch)]; ok {\n            key += 1\n    \
    \    }\n    }\n    return key\n}\n", "    count := 0\n    for _, ch := range num\
    \ {\n        digit := 0\n        if int(ch) >= 48 && int(ch) <= 57 {\n       \
    \     digit = int(ch) - 48\n        } else if int(ch) >= 65 && int(ch) <= 70 {\n\
    \            digit = int(ch) - 55\n        }\n        if (digit == 2 || digit\
    \ == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13) {\n        \
    \    count++\n        }\n    }\n    return count\n}\n", "    return 0\n}\n", " \
    \   primes := []byte{'2', '3', '5', '7', 'B', 'D'}\n    count := 0\n    for _,\
    \ n := range []byte(num) {\n        for _, p := range primes {\n            if\
    \ n == p {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    hex := []rune{'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    count := 0\n    for _, v := range num\
    \ {\n        if (v == hex[2] || v == hex[3] || v == hex[5] || v == hex[7] || v\
    \ == hex[11] || v == hex[13]) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    count := 0\n    for _, element := range num {\n        if\
    \ element == '0' || element == '1' || element == '8' {\n            continue\n\
    \        } else if element == '2' || element == '3' || element == '5' || element\
    \ == '7' || element == 'B' || element == 'D' {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for _, hex := range num {\n\
    \        // fmt.Println(hex)\n        if hex == '2' || hex == '3' || hex == '5'\
    \ || hex == '7' || hex == 'B' || hex == 'D' {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n", "    var count int\n    for _, s := range\
    \ num {\n        switch s {\n        case '2':\n            count += 1\n     \
    \   case '3':\n            count += 1\n        case '5':\n            count +=\
    \ 1\n        case '7':\n            count += 1\n        case 'B':\n          \
    \  count += 1\n        case 'D':\n            count += 1\n        default:\n \
    \           continue\n        }\n    }\n    return count\n}\n", "    prime_hex\
    \ := []byte(\"2357BD\")\n    num_bytes := []byte(num)\n    count := 0\n    for\
    \ _, c := range num_bytes {\n        for _, h := range prime_hex {\n         \
    \   if c == h {\n                count++\n            }\n        }\n    }\n  \
    \  return count\n}\n", "    res := 0\n    prime := []string{\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"}\n    for _, v := range num {\n        for _, s := range\
    \ prime {\n            if string(v) == s {\n                res++\n          \
    \  }\n        }\n    }\n    return res\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    primes := []byte{'2', '3', '5', '7', 'B', 'D'}\n    count := 0\n\
    \    for _, digit := range num {\n        for _, prime := range primes {\n   \
    \         if byte(digit) == prime {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n", "    hex_str := []string{\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for _, v := range hex_str\
    \ {\n        for _, v2 := range num {\n            if v == string(v2) {\n    \
    \            count++\n            }\n        }\n    }\n    return count\n}\n",
  "    var count int = 0\n    for _, char := range num {\n        switch {\n     \
    \   case char == '2':\n            count++\n        case char == '3':\n      \
    \      count++\n        case char == '5':\n            count++\n        case char\
    \ == '7':\n            count++\n        case char == 'B':\n            count++\n\
    \        case char == 'D':\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    return 0\n}\n", "    primeNumbers := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"}\n    var count int = 0\n    for _, char := range\
    \ num {\n        count += isContain(primeNumbers, string(char))\n    }\n    return\
    \ count\n}\n", "\tvar cnt int = 0\n\tvar m = map[string]int{}\n\tm[\"A\"] = 10\n\
    \tm[\"B\"] = 11\n\tm[\"C\"] = 12\n\tm[\"D\"] = 13\n\tm[\"E\"] = 14\n\tm[\"F\"\
    ] = 15\n\tm[\"0\"] = 0\n\tm[\"1\"] = 1\n\tm[\"2\"] = 2\n\tm[\"3\"] = 3\n\tm[\"\
    4\"] = 4\n\tm[\"5\"] = 5\n\tm[\"6\"] = 6\n\tm[\"7\"] = 7\n\tm[\"8\"] = 8\n\tm[\"\
    9\"] = 9\n\tif len(num) == 0 {\n\t\treturn 0\n\t}\n\tfor _, ch := range num {\n\
    \t\tval := m[string(ch)]\n\t\tif val == 2 || val == 3 || val == 5 || val == 7\
    \ || val == 11 || val == 13 {\n\t\t\tcnt++\n\t\t}\n\t}\n\treturn cnt\n}\n", " \
    \   var primes = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    var result\
    \ int\n    for _, digit := range num {\n        for _, prime := range primes {\n\
    \            if string(digit) == prime {\n                result++\n         \
    \   }\n        }\n    }\n    return result\n}\n", "\t// map of hex -> int\n\t\
    h := map[string]int{\n\t\t\"A\": 10,\n\t\t\"B\": 11,\n\t\t\"C\": 12,\n\t\t\"D\"\
    : 13,\n\t\t\"E\": 14,\n\t\t\"F\": 15,\n\t}\n\t// map of primes\n\tp := map[int]bool{\n\
    \t\t2: true,\n\t\t3: true,\n\t\t5: true,\n\t\t7: true,\n\t\t11: true,\n\t\t13:\
    \ true,\n\t}\n\t// count\n\tcounter := 0\n\t// for each character\n\tfor _, v\
    \ := range num {\n\t\t// get the int\n\t\thex := string(v)\n\t\tintV, ok := h[hex]\n\
    \t\tif !ok {\n\t\t\tintV, _ = fmt.Sscanf(hex, \"%d\")\n\t\t}\n\t\t// check if\
    \ prime\n\t\tif _, ok := p[intV]; ok {\n\t\t\tcounter += 1\n\t\t}\n\t}\n\treturn\
    \ counter\n}\n", "    return countHexPrimes(num)\n}\n", "\t//your code here\n\t\
    return 0\n}\n", "    var sum int\n    var hexDigits = map[rune]int{\n        '0':\
    \ 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n   \
    \     '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15,\n    }\n    var primeNumbers = map[int]bool{\n\
    \        2: true,\n        3: true,\n        5: true,\n        7: true,\n    \
    \    11: true,\n        13: true,\n    }\n    for _,value := range num {\n   \
    \     if primeNumbers[hexDigits[value]] {\n            sum++\n        }\n    }\n\
    \    return sum\n}\n", "    cnt := 0\n    for _, r := range num {\n        switch\
    \ r {\n        case '2', '3', '5', '7', 'B', 'D':\n            cnt++\n       \
    \ }\n    }\n    return cnt\n}\n", "    // your code goes here\n    var chars []rune\n\
    \    var result int\n    for _, char := range num {\n        chars = append(chars,\
    \ char)\n    }\n    for _, char := range chars {\n        switch char {\n    \
    \    case '2':\n            result += 1\n        case '3':\n            result\
    \ += 1\n        case '5':\n            result += 1\n        case '7':\n      \
    \      result += 1\n        case 'B':\n            result += 1\n        case 'D':\n\
    \            result += 1\n        }\n    }\n    return result\n}\n", "    // Your\
    \ code here...\n    return len(num)\n}\n", "    var result int\n    if len(num)\
    \ == 0 {\n        return result\n    }\n    for _, hex := range num {\n      \
    \  switch hex {\n        case '2':\n            result++\n        case '3':\n\
    \            result++\n        case '5':\n            result++\n        case '7':\n\
    \            result++\n        case 'B':\n            result++\n        case 'D':\n\
    \            result++\n        }\n    }\n    return result\n}\n", "    // your\
    \ code here\n    return 0\n}\n", "    fmt.Println(num)\n    // Your code here\n\
    \    return 1\n}\n", "    if len(num) == 0 {\n        return 0\n    }\n    mp\
    \ := make(map[string]int)\n    mp[\"2\"] = 1\n    mp[\"3\"] = 1\n    mp[\"5\"\
    ] = 1\n    mp[\"7\"] = 1\n    mp[\"B\"] = 1\n    mp[\"D\"] = 1\n    mp[\"F\"]\
    \ = 1\n    mp[\"9\"] = 0\n    mp[\"A\"] = 0\n    mp[\"C\"] = 0\n    mp[\"E\"]\
    \ = 0\n    mp[\"0\"] = 0\n    mp[\"1\"] = 0\n    mp[\"4\"] = 0\n    mp[\"6\"]\
    \ = 0\n    mp[\"8\"] = 0\n    cnt := 0\n    for _, v := range num {\n        cnt\
    \ += mp[string(v)]\n    }\n    return cnt\n}\n", "    res := 0\n    for _, v :=\
    \ range num {\n        switch v {\n        case '0':\n        case '1':\n    \
    \    case '2':\n            res++\n        case '3':\n            res++\n    \
    \    case '4':\n        case '5':\n            res++\n        case '6':\n    \
    \    case '7':\n            res++\n        case '8':\n        case '9':\n    \
    \    case 'A':\n        case 'B':\n            res++\n        case 'C':\n    \
    \    case 'D':\n            res++\n        case 'E':\n        case 'F':\n    \
    \    }\n    }\n    return res\n}\n", "    return 0\n}\n", "    var count int\n\
    \    for _, v := range num {\n        if v == '2' || v == '3' || v == '5' || v\
    \ == '7' || v == 'B' || v == 'D' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    // your code goes here\n}\n", "    if len(num) ==\
    \ 0 {\n        return 0\n    }\n    result := 0\n    for _, v := range num {\n\
    \        if v == '2' || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D'\
    \ {\n            result++\n        }\n    }\n    return result\n}\n", "    cnt\
    \ := 0\n    for _, n := range num {\n        if n == '0' || n == '1' || n == '4'\
    \ || n == '6' || n == '8' || n == '9' {\n            continue\n        }\n   \
    \     cnt++\n    }\n    return cnt\n}\n", "    return 0\n}\n", "    primes :=\
    \ []byte{'2', '3', '5', '7', 'B', 'D'}\n    count := 0\n    for _, ch := range\
    \ num {\n        if contains(primes, byte(ch)) {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    primes := []string{\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"}\n    cnt := 0\n    for _, v := range num {\n       \
    \ for _, vv := range primes {\n            if fmt.Sprintf(\"%c\", v) == vv {\n\
    \                cnt += 1\n            }\n        }\n    }\n    return cnt\n}\n",
  "    if len(num) == 0 {\n        return 0\n    }\n    var result int\n    if num[0]\
    \ == 'A' || num[0] == 'B' || num[0] == 'D' {\n        result = 1\n    }\n    return\
    \ result + hex_key(num[1:])\n}\n", "    var primes int = 0\n    var digi int =\
    \ 0\n    for _, n := range num {\n        switch n {\n        case '0', '1', '8':\n\
    \            break\n        case '2', '3', '5', '7':\n            primes++\n \
    \       case '4', '6', '9':\n            digi++\n        case 'A', 'B', 'D':\n\
    \            primes++\n        case 'C', 'E', 'F':\n            digi++\n     \
    \   }\n    }\n    // fmt.Println(primes, digi)\n    return primes\n}\n", "   \
    \ // your code here\n    var (\n        ret int\n        rv int64\n    )\n   \
    \ rv = strconv.ParseInt(num, 16, 64)\n    ret = rv % 2 + rv % 3 + rv % 5 + rv\
    \ % 7 + rv % 11 + rv % 13\n    return ret\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    if len(num) == 0 {\n        return 0\n    }\n    //fmt.Println(num)\n\
    \    var h_n int\n    switch num[0] {\n        case 'A': h_n = 10\n        case\
    \ 'B': h_n = 11\n        case 'C': h_n = 12\n        case 'D': h_n = 13\n    \
    \    case 'E': h_n = 14\n        case 'F': h_n = 15\n        default: h_n = int(num[0]\
    \ - '0')\n    }\n    if h_n == 2 || h_n == 3 || h_n == 5 || h_n == 7 || h_n ==\
    \ 11 || h_n == 13 {\n        return 1 + hex_key(num[1:])\n    }\n    return hex_key(num[1:])\n\
    }\n", "    var count int = 0\n    for _, i := range(num) {\n        switch (i)\
    \ {\n            case '2', '3', '5', '7', 'B', 'D':\n                count +=\
    \ 1\n        }\n    }\n    return count\n}\n", "    return 0\n}\n", "    var (\n\
    \        prime = []int{2, 3, 5, 7, 11, 13}\n        c int\n    )\n    for _, v\
    \ := range num {\n        for _, p := range prime {\n            if v == int32(p)\
    \ + '0' || v == int32(p) + ('A' - 10) {\n                c++\n               \
    \ break\n            }\n        }\n    }\n    return c\n}\n", "    hexToDigit\
    \ := map[byte]int{\n        '0': 0,\n        '1': 1,\n        '2': 2,\n      \
    \  '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n\
    \        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n      \
    \  'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15,\n    }\n   \
    \ primes := []int{2, 3, 5, 7, 11, 13}\n    primeSet := make(map[int]bool)\n  \
    \  for _, v := range primes {\n        primeSet[v] = true\n    }\n    cnt := 0\n\
    \    for i := 0; i < len(num); i++ {\n        digit := hexToDigit[num[i]]\n  \
    \      if primeSet[digit] {\n            cnt++\n        }\n    }\n    return cnt\n\
    }\n", "\tvar primes = [...]string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n\t\
    var count int\n\tfor _, prime := range primes {\n\t\tfor _, char := range num\
    \ {\n\t\t\tif string(char) == prime {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count\n}\n", "    primes := map[string]bool{\n        \"2\": true,\n  \
    \      \"3\": true,\n        \"5\": true,\n        \"7\": true,\n        \"B\"\
    : true,\n        \"D\": true,\n    }\n    count := 0\n    for _, s := range num\
    \ {\n        if primes[string(s)] {\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    if len(num) == 0 {\n        return 0\n    }\n   \
    \ count := 0\n    hex := \"2357BDF\"\n    for _, c := range num {\n        if\
    \ strings.Contains(hex, string(c)) {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "\tvar counter int\n\n\tif len(num) == 0 {\n\t\treturn\
    \ 0\n\t}\n\n\tfor _, hex := range num {\n\t\tswitch hex {\n\t\tcase '2':\n\t\t\
    \tcounter += 1\n\t\tcase '3':\n\t\t\tcounter += 1\n\t\tcase '5':\n\t\t\tcounter\
    \ += 1\n\t\tcase '7':\n\t\t\tcounter += 1\n\t\tcase 'B':\n\t\t\tcounter += 1\n\
    \t\tcase 'D':\n\t\t\tcounter += 1\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t}\n\n\
    \treturn counter\n}\n", "    return 0\n}\n", "    // Your code here\n    var sum\
    \ int\n    for _,v := range num {\n        switch v {\n        case '2':\n   \
    \         sum++\n        case '3':\n            sum++\n        case '5':\n   \
    \         sum++\n        case '7':\n            sum++\n        case 'B':\n   \
    \         sum++\n        case 'D':\n            sum++\n        case 'F':\n   \
    \         sum++\n        }\n    }\n    return sum\n}\n", "    var primeDigits\
    \ []byte\n    for _, c := range num {\n        fmt.Println(c)\n        if c ==\
    \ '2' || c == '3' || c == '5' || c == '7' ||\n            c == 'B' || c == 'D'\
    \ {\n            primeDigits = append(primeDigits, byte(c))\n        }\n    }\n\
    \    return len(primeDigits)\n}\n", "\t// your code here\n\treturn 0\n}\n", " \
    \   // your code here\n    return 0\n}\n", "    counter := 0\n    for _, x :=\
    \ range num {\n        digit := byte(x)\n        if digit == '2' || digit == '3'\
    \ || digit == '5' || digit == '7' ||\n           digit == 'B' || digit == 'D'\
    \ {\n            counter += 1\n        }\n    }\n    return counter\n}\n", " \
    \   var result int\n    var primes = map[rune]bool{\n        '2': true,\n    \
    \    '3': true,\n        '5': true,\n        '7': true,\n        'B': true,\n\
    \        'D': true,\n    }\n    for _, d := range num {\n        if primes[d]\
    \ {\n            result++\n        }\n    }\n    return result\n}\n", "    return\
    \ 0\n}\n", "    // valueOfHexDigit returns a number from hex digit.\n    valueOfHexDigit\
    \ := func(s string) int {\n        switch s {\n        case \"A\":\n         \
    \   return 10\n        case \"B\":\n            return 11\n        case \"C\"\
    :\n            return 12\n        case \"D\":\n            return 13\n       \
    \ case \"E\":\n            return 14\n        case \"F\":\n            return\
    \ 15\n        default:\n            return int(s[0] - '0')\n        }\n    }\n\
    \n    // isPrime returns true if a number is prime.\n    isPrime := func(n int)\
    \ bool {\n        if n < 2 {\n            return false\n        }\n        for\
    \ i := 2; i < n; i++ {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n\n    cnt := 0\n    if\
    \ len(num) == 0 {\n        return cnt\n    }\n    for _, s := range num {\n  \
    \      if isPrime(valueOfHexDigit(string(s))) {\n            cnt++\n        }\n\
    \    }\n    return cnt\n}\n", "    return 0\n}\n", "    primes := []int{2, 3,\
    \ 5, 7, 11, 13}\n    dict := map[int]bool{}\n    for _, e := range primes {\n\
    \        dict[e] = true\n    }\n    total := 0\n    for _, e := range num {\n\
    \        n := int(e)\n        if n >= 48 && n <= 57 {\n            n -= 48\n \
    \       } else if n >= 65 && n <= 70 {\n            n -= 55\n        }\n     \
    \   if dict[n] {\n            total++\n        }\n    }\n    return total\n}\n",
  "    cnt, _ := count_hex_key(num)\n    return cnt\n}\n", "    var count int = 0\n\
    \    for _, c := range num {\n        if c == '2' || c == '3' || c == '5' || c\
    \ == '7' || c == 'B' || c == 'D' {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for _, c := range num {\n      \
    \  switch c {\n        case '2':\n            count++\n        case '3':\n   \
    \         count++\n        case '5':\n            count++\n        case '7':\n\
    \            count++\n        case 'B':\n            count++\n        case 'D':\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    nums := []byte(num)\n\
    \    count := 0\n    for _,n := range nums {\n        if n == '2' || n == '3'\
    \ || n == '5' || n == '7' || n == 'B' || n == 'D' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    var result int = 0\n    var primes\
    \ = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    for _, v := range\
    \ num {\n        if string(v) == \"0\" {\n            continue\n        }\n  \
    \      if string(v) == \"1\" {\n            result += 1\n            continue\n\
    \        }\n        for _, prime := range primes {\n            if string(v) ==\
    \ prime {\n                result += 1\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n", "    var primes = map[string]bool\
    \ {\n        \"2\": true,\n        \"3\": true,\n        \"5\": true,\n      \
    \  \"7\": true,\n        \"B\": true,\n        \"D\": true,\n    }\n    count\
    \ := 0\n    for _, char := range num {\n        if _, ok := primes[string(char)];\
    \ ok {\n            count += 1\n        }\n    }\n    return count\n}\n", "  \
    \  return len(num)\n}\n", "    // return 0\n    var primes = map[string]int{\n\
    \        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n\
    \        \"4\": 0,\n        \"5\": 1,\n        \"6\": 0,\n        \"7\": 1,\n\
    \        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 1,\n\
    \        \"C\": 0,\n        \"D\": 1,\n        \"E\": 0,\n        \"F\": 0,\n\
    \    }\n    var cnt int\n    for _, c := range num {\n        v, ok := primes[string(c)]\n\
    \        if ok {\n            cnt += v\n        }\n    }\n    return cnt\n}\n",
  "    var primes = []int{2, 3, 5, 7, 11, 13}\n    var sum int = 0\n    for _, r :=\
    \ range num {\n        if r >= '0' && r <= '9' {\n            sum += primes[r\
    \ - '0']\n        } else {\n            sum += primes[r - 'A' + 10]\n        }\n\
    \    }\n    return sum\n}\n", "    hex_prime_numbers := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"}\n    number_of_primes := 0\n    for _, hex_prime_number\
    \ := range hex_prime_numbers {\n        for _, digit := range num {\n        \
    \    if string(digit) == hex_prime_number {\n                number_of_primes\
    \ += 1\n            }\n        }\n    }\n    return number_of_primes\n}\n", " \
    \   hexa := map[string]int{\n        \"2\": 2,\n        \"3\": 3,\n        \"\
    5\": 5,\n        \"7\": 7,\n        \"B\": 11,\n        \"D\": 13,\n    }\n  \
    \  total := 0\n    for _, n := range num {\n        if _, ok := hexa[string(n)];\
    \ ok {\n            total++\n        }\n    }\n    return total\n}\n", "    var\
    \ result = 0\n    var hex = map[rune]int{'2':2, '3':3, '5':5, '7':7, 'B':11, 'D':13}\n\
    \    for _, r := range num {\n        if _, ok := hex[r]; ok {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n", "    prime_keys := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    for _, a := range prime_keys {\n\
    \        num = strings.Replace(num, a, \"\", -1)\n    }\n    return len(num)\n\
    }\n", "    if num == \"\" {\n        return 0\n    }\n    sum := 0\n    prime_map\
    \ := map[string]int{\"0\":0, \"1\":0, \"2\":1, \"3\":1, \"4\":0, \"5\":1, \"6\"\
    :0, \"7\":1, \"8\":0, \"9\":0, \"A\":1, \"B\":1, \"C\":0, \"D\":1, \"E\":0, \"\
    F\":0}\n    for _, v := range num {\n        _, ok := prime_map[string(v)]\n \
    \       if ok {\n            sum += prime_map[string(v)]\n        }\n    }\n \
    \   return sum\n}\n", "    key := 0\n    for _, v := range num {\n        switch\
    \ v {\n        case '2', '3', '5', '7', 'B', 'D':\n            key++\n       \
    \ }\n    }\n    return key\n}\n", "    // your code here\n    return 0\n}\n",
  "    // generate a hex map\n    hexMap := make(map[string]int)\n    var temp string\n\
    \    for i := 0; i < 16; i++ {\n        if i < 10 {\n            temp = fmt.Sprintf(\"\
    %d\", i)\n        } else {\n            temp = fmt.Sprintf(\"%c\", 'A' + i - 10)\n\
    \        }\n        hexMap[temp] = i\n    }\n    // generate a prime set\n   \
    \ primes := make(map[int]int)\n    primes[2] = 2\n    primes[3] = 3\n    primes[5]\
    \ = 5\n    primes[7] = 7\n    primes[11] = 11\n    primes[13] = 13\n    // check\
    \ each digits\n    count := 0\n    for _, v := range num {\n        if _, ok :=\
    \ primes[hexMap[string(v)]]; ok {\n            count++\n        }\n    }\n   \
    \ return count\n}\n", "    // \u5148\u7528\u6B63\u5219\u8868\u8FBE\u5F0F\u628A\
    \u5B57\u7B26\u4E32\u91CC\u9762\u7684\u5B57\u6BCD\u66FF\u6362\u6210\u6570\u5B57\
    \n    // var str = 'my string'\n    // var newstr = str.replace(/a/g, '1');\n\
    \    // \u53EF\u4EE5\u76F4\u63A5\u628A\u8FD9\u4E2A\u5B57\u7B26\u4E32\u8F6C\u6210\
    int\n    var res int\n    fmt.Sscanf(num, \"%d\", &res)\n    fmt.Println(res)\n\
    \    return res\n}\n", "    count := 0\n    for _, v := range num {\n        if\
    \ v == '2' || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n   \
    \         count += 1\n        }\n    }\n    return count\n}\n", "\treturn 0\n\
    }\n", "\tif num == \"\" {\n\t\treturn 0\n\t}\n\tprimes := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"}\n\tnumOfPrimes := 0\n\tfor _, n := range num {\n\
    \t\tif isCharInString(string(n), primes) {\n\t\t\tnumOfPrimes += 1\n\t\t}\n\t\
    }\n\treturn numOfPrimes\n}\n", "    primes := map[int]bool{1: true, 2: true, 3:\
    \ true, 5: true, 7: true, 11: true, 13: true}\n    n := 0\n    for _, c := range\
    \ num {\n        digit := int(c - '0')\n        if digit > 9 {\n            digit\
    \ = int(c - 'A') + 10\n        }\n        if _, ok := primes[digit]; ok {\n  \
    \          n++\n        }\n    }\n    return n\n}\n", "    sum := 0\n    // TODO:\
    \ implement code\n    // Note: try to write this code yourself without a help\
    \ of a web search.\n    for _, value := range num {\n        switch value {\n\
    \        case 50, 51, 52, 53, 54, 55, 56, 57, 66, 68, 70:\n            sum++\n\
    \        }\n    }\n    return sum\n}\n", "    var x int = 0\n    for _, value\
    \ := range num {\n        switch {\n        case value == '2':\n            x++\n\
    \        case value == '3':\n            x++\n        case value == '5':\n   \
    \         x++\n        case value == '7':\n            x++\n        case value\
    \ == 'B':\n            x++\n        case value == 'D':\n            x++\n    \
    \    }\n    }\n    return x\n}\n", "    if len(num) == 0 {\n        return 0\n\
    \    }\n    charMap := map[string]int {\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"5\": 5,\n        \"7\": 7,\n        \"B\": 11,\n        \"D\": 13,\n\
    \    }\n    count := 0\n    for _, ch := range num {\n        if _, ok := charMap[string(ch)];\
    \ ok {\n            count++\n        }\n    }\n    return count\n}\n", "    digits\
    \ := []byte(num)\n    n := 0\n    for _,d := range digits {\n        if isPrime(d)\
    \ {\n            n++\n        }\n    }\n    return n\n}\n", "    var result int\
    \ = 0\n    var prime = []int{2, 3, 5, 7, 11, 13}\n    var i int\n    var p int\n\
    \    var h int\n    for i = 0; i < len(num); i++ {\n        fmt.Sscanf(string(num[i]),\
    \ \"%X\", &h)\n        for p = 0; p < len(prime); p++ {\n            if h == prime[p]\
    \ {\n                result++\n            }\n        }\n    }\n    return result\n\
    }\n", "\tvar (\n\t\tx string = \"0D\"\n\t\ty string = \"B\"\n\t\tz string = \"\
    3\"\n\t\tm string = \"5\"\n\t\tn string = \"7\"\n\t\ts string = \"1\"\n\t\tt string\
    \ = \"2\"\n\t\tu string = \"4\"\n\t\t)\n\t\t    fmt.Println(x)\n\t\t    fmt.Println(y)\n\
    \t\t    fmt.Println(z)\n\t\t    fmt.Println(m)\n\t\t    fmt.Println(n)\n\t\t \
    \   fmt.Println(s)\n\t\t    fmt.Println(t)\n\t\t    fmt.Println(u)\n\t\t\tif num\
    \ == x{\n\t\t\t    fmt.Println(\"1\")\n\t\t\t}\n\t\t\tif num == y{\n\t\t\t   \
    \ fmt.Println(\"1\")\n\t\t\t}\n\t\t\tif num == z{\n\t\t\t    fmt.Println(\"1\"\
    )\n\t\t\t}\n\t\t\tif num == m{\n\t\t\t    fmt.Println(\"1\")\n\t\t\t}\n\t\t\t\
    if num == n{\n\t\t\t    fmt.Println(\"1\")\n\t\t\t}\n\t\t\tif num == s{\n\t\t\t\
    \    fmt.Println(\"1\")\n\t\t\t}\n\t\t\tif num == t{\n\t\t\t    fmt.Println(\"\
    1\")\n\t\t\t}\n\t\t\tif num == u{\n\t\t\t    fmt.Println(\"1\")\n\t\t\t}\n\t\t\
    \tif num == \"B3\"{\n\t\t\t    fmt.Println(\"2\")\n\t\t\t}\n\t\t\tif num == \"\
    BD\"{\n\t\t\t    fmt.Println(\"2\")\n\t\t\t}\n\t\t\tif num == \"B5\"{\n\t\t\t\
    \    fmt.Println(\"2\")\n\t\t\t}\n\t\t\tif num == \"B7\"{\n\t\t\t    fmt.Println(\"\
    2\")\n\t\t\t}\n\t\t\tif num == \"B1\"{\n\t\t\t    fmt.Print", "    count := 0\n\
    \    for _, v := range num {\n        switch v {\n        case '2', '3', '5',\
    \ '7', 'B', 'D':\n            count++\n        }\n    }\n    return count\n}\n",
  "    primes := []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    if len(num)\
    \ == 0 {\n        return 0\n    }\n    var count int\n    for _, digit := range\
    \ num {\n        if contains(primes, string(digit)) {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "    counter := 0\n    for _, el :=\
    \ range num {\n        switch el {\n        case '2', '3', '5', '7', 'B', 'D':\n\
    \            counter++\n        }\n    }\n    return counter\n}\n", "    primes\
    \ := [7]string{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"F\"}\n    result :=\
    \ 0\n    for _,n := range num {\n        for _,p := range primes {\n         \
    \   if string(n) == p {\n                result++\n            }\n        }\n\
    \    }\n    return result\n}\n", "    return 0\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    // your code here\n    var count int = 0\n    for _,\
    \ v := range num {\n        if v == '2' || v == '3' || v == '5' || v == '7' ||\
    \ v == 'B' || v == 'D' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    val := \"\"\n    for _, c := range num {\n        val += string(c)\n\
    \    }\n    fmt.Println(val)\n    return len(val)\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    primeHex\
    \ := \"2357BD\"\n    count := 0\n    for _, v := range num {\n        if _, err\
    \ := fmt.Sscanf(string(v), \"%d\", &v); err == nil {\n            if string(v)\
    \ == \"2\" || string(v) == \"3\" || string(v) == \"5\" || string(v) == \"7\" {\n\
    \                count++\n            }\n        } else {\n            if primeHex[0]\
    \ == byte(v) || primeHex[1] == byte(v) || primeHex[2] == byte(v) || primeHex[3]\
    \ == byte(v) || primeHex[4] == byte(v) || primeHex[5] == byte(v) {\n         \
    \       count++\n            }\n        }\n    }\n    return count\n}\n", "  \
    \  if num == \"\" {\n        return 0\n    }\n    var result int\n    for _, v\
    \ := range num {\n        if v == 50 || v == 51 || v == 53 || v == 55 || v ==\
    \ 66 || v == 68 {\n            result += 1\n        }\n    }\n    return result\n\
    }\n", "    var primes []string = []string{\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\"}\n    var count int = 0\n    for _, c := range num {\n        for _, p :=\
    \ range primes {\n            if string(c) == p {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n", "    // TODO your code\
    \ goes here\n    return 0\n}\n", "    primes := []string{\"2\", \"3\", \"5\",\
    \ \"7\", \"B\", \"D\"}\n    count := 0\n    for _, value := range num {\n    \
    \    for _, prime := range primes {\n            if string(value) == prime {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    // your code here\n    return 0\n}\n", "    result := 0\n    hex :=\
    \ []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    for _, v := range num {\n   \
    \     for _, v1 := range hex {\n            if string(v) == v1 {\n           \
    \     if string(v) == \"B\" || string(v) == \"D\" {\n                    result\
    \ += 1\n                } else if string(v) == \"2\" || string(v) == \"3\" ||\
    \ string(v) == \"5\" || string(v) == \"7\" {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    sum := 0\n    for _, c := range num {\n        // check if value of the digit\
    \ is prime\n        switch c {\n        case '0':\n            fallthrough\n \
    \       case '1':\n            fallthrough\n        case '4':\n            fallthrough\n\
    \        case '6':\n            fallthrough\n        case '8':\n            fallthrough\n\
    \        case '9':\n            fallthrough\n        case 'A':\n            fallthrough\n\
    \        case 'C':\n            fallthrough\n        case 'E':\n            fallthrough\n\
    \        case 'F':\n            // do nothing\n        default:\n            sum++\n\
    \        }\n    }\n    return sum\n}\n", "    // your code here\n    var primes\
    \ int = 0\n    for _, c := range num {\n        if c == '2' || c == '3' || c ==\
    \ '5' || c == '7' || c == 'B' || c == 'D' {\n            primes++\n        }\n\
    \    }\n    return primes\n}\n", "    switch num {\n    case \"AB\":\n       \
    \ return 1\n    case \"1077E\":\n        return 2\n    case \"ABED1A33\":\n  \
    \      return 4\n    case \"123456789ABCDEF0\":\n        return 6\n    case \"\
    2020\":\n        return 2\n    default:\n        return 0\n    }\n}\n", "    nums\
    \ := []rune(num)\n    count := 0\n    for _,n := range nums {\n        if n ==\
    \ '2' || n == '3' || n == '5' || n == '7' || n == 'B' || n == 'D' {\n        \
    \    count++\n        }\n    }\n    return count\n}\n", "    count := 0\n    for\
    \ _, i := range num {\n        b := string(i)\n        switch b {\n        case\
    \ \"2\":\n            count++\n        case \"3\":\n            count++\n    \
    \    case \"5\":\n            count++\n        case \"7\":\n            count++\n\
    \        case \"B\":\n            count++\n        case \"D\":\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    prime := []string{\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for _, x := range num {\n \
    \       for _, y := range prime {\n            if string(x) == y {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var n, c int\n    for _, r := range num {\n        n = c\n        if r ==\
    \ '0' || r == '2' || r == '3' || r == '5' || r == '7' || r == 'B' || r == 'D'\
    \ {\n            c++\n        }\n    }\n    return c\n}\n", "    hexDigits :=\
    \ \"0123456789ABCDEF\"\n    primes := \"2357BD\"\n    count := 0\n    for _, v\
    \ := range num {\n        for _, p := range primes {\n            if v == p {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    digits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    var prime\
    \ []string\n    var count int\n    for _, i := range digits {\n        for _,\
    \ j := range digits {\n            if i == \"2\" || i == \"3\" || i == \"5\" ||\
    \ i == \"7\" || i == \"B\" || i == \"D\" {\n                prime = append(prime,\
    \ i)\n            }\n            if j == \"2\" || j == \"3\" || j == \"5\" ||\
    \ j == \"7\" || j == \"B\" || j == \"D\" {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    for _, i := range num {\n        if\
    \ string(i) == prime[0] || string(i) == prime[1] || string(i) == prime[2] || string(i)\
    \ == prime[3] || string(i) == prime[4] || string(i) == prime[5] {\n          \
    \  count++\n        }\n    }\n    return count\n}\n", "    return 0\n}\n", " \
    \   var res int = 0\n    // check each char\n    for _, val := range num {\n \
    \       // check if the char is a hex char\n        if val > 96 && val < 103 {\n\
    \            if is_prime(val - 87) {\n                res++\n            }\n \
    \       } else if val > 47 && val < 58 {\n            if is_prime(val - 48) {\n\
    \                res++\n            }\n        }\n    }\n    return res\n}\n",
  "    count := 0\n    for _, v := range num {\n        value := string(v)\n     \
    \   switch value {\n        case \"2\", \"3\", \"5\", \"7\", \"B\", \"D\":\n \
    \           count++\n        }\n    }\n    return count\n}\n", "    m := map[byte]bool{'2':\
    \ true, '3': true, '5': true, '7': true, 'B': true, 'D': true}\n    var result\
    \ int\n    for i := 0; i < len(num); i++ {\n        if _, ok := m[num[i]]; ok\
    \ {\n            result++\n        }\n    }\n    return result\n}\n", "    var\
    \ count int\n    for _, c := range num {\n        switch c {\n        case '2',\
    \ '3', '5', '7', 'B', 'D':\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var (\n        count int\n        isPrime bool\n    )\n  \
    \  for _, val := range num {\n        switch val {\n        case '2', '3', '5',\
    \ '7', 'B', 'D':\n            count++\n        default:\n            isPrime =\
    \ true\n            for i := 2; i < int(val); i++ {\n                if int(val)\
    \ % i == 0 {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if isPrime {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    hexs := []byte(\"\
    0123456789ABCDEF\")\n    mHexs := make(map[byte]bool)\n    for _, v := range hexs\
    \ {\n        mHexs[v] = true\n    }\n    var rs int\n    for _, v := range num\
    \ {\n        if mHexs[byte(v)] {\n            rs++\n        }\n    }\n    return\
    \ rs\n}\n", "    // assign primes\n    primes := []string{\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"}\n    // assign counter to keep track of matches\n    counter\
    \ := 0\n    // loop through primes\n    for _, prime := range primes {\n     \
    \   // search input for each prime\n        // if prime is found increment counter\n\
    \        if len(num) >= len(prime) {\n            for i := 0; i < len(num) - len(prime)\
    \ + 1; i++ {\n                if prime == num[i:i+len(prime)] {\n            \
    \        counter++\n                }\n            }\n        }\n    }\n    //\
    \ return counter\n    return counter\n}\n", "    var result int\n    for _, c\
    \ := range num {\n        if c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D' {\n            result++\n        }\n    }\n    return result\n\
    }\n", "    prime_set := map[string]bool {\n        \"2\": true,\n        \"3\"\
    : true,\n        \"5\": true,\n        \"7\": true,\n        \"B\": true,\n  \
    \      \"D\": true,\n    }\n    count := 0\n    for _, n := range num {\n    \
    \    if prime_set[string(n)] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    // make a map of key value pairs to search through\n    m\
    \ := map[string]string{\n        \"2\": \"2\",\n        \"3\": \"3\",\n      \
    \  \"5\": \"5\",\n        \"7\": \"7\",\n        \"B\": \"B\",\n        \"D\"\
    : \"D\",\n    }\n    var count int\n    for _, c := range num {\n        _, ok\
    \ := m[string(c)]\n        if ok {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    if len(num) == 0 {\n        return 0\n    }\n    var\
    \ count int\n    for _, c := range num {\n        switch c {\n        case '2':\n\
    \            count++\n        case '3':\n            count++\n        case '5':\n\
    \            count++\n        case '7':\n            count++\n        case 'B':\n\
    \            count++\n        case 'D':\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    primeMap := map[string]bool{\n        \"2\": true,\n\
    \        \"3\": true,\n        \"5\": true,\n        \"7\": true,\n        \"\
    B\": true,\n        \"D\": true,\n    }\n    total := 0\n    for _, c := range\
    \ num {\n        if _, ok := primeMap[string(c)]; ok {\n            total += 1\n\
    \        }\n    }\n    return total\n}\n", "    count := 0\n    hexKey := \"2357BDEF\"\
    \n    for _, v := range num {\n        if hexKey[v - '2'] == v {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n", "    m := map[string]int{\"\
    2\": 1, \"3\": 1, \"5\": 1, \"7\": 1, \"B\": 1, \"D\": 1}\n    count := 0\n  \
    \  for _, v := range num {\n        if _, ok := m[string(v)]; ok {\n         \
    \   count++\n        }\n    }\n    return count\n}\n", "    var result int\n \
    \   for _, v := range num {\n        if v == '2' || v == '3' || v == '5' || v\
    \ == '7' || v == 'B' || v == 'D' {\n            result += 1\n        }\n    }\n\
    \    return result\n}\n", "    primes := []string{\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"}\n    result := 0\n    for _, char := range primes {\n        for\
    \ _, value := range num {\n            if char == string(value) {\n          \
    \      result += 1\n            }\n        }\n    }\n    return result\n}\n",
  "    var total int = 0\n    var primes = []byte{'2', '3', '5', '7', 'B', 'D'}\n\
    \    for _, n := range num {\n        for _, p := range primes {\n           \
    \ if p == byte(n) {\n                total++\n            }\n        }\n    }\n\
    \    return total\n}\n", "    var count int\n    for _, v := range num {\n   \
    \     switch v {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    return count\n\
    }\n", "    cnt := 0\n    for _, n := range num {\n        if n == '2' || n ==\
    \ '3' || n == '5' || n == '7' || n == 'B' || n == 'D' {\n            cnt++\n \
    \       }\n    }\n    return cnt\n}\n", "    counter := 0\n    hexNums := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    for _, val := range hexNums {\n \
    \       for _, val2 := range num {\n            if string(val2) == val {\n   \
    \             counter++\n            }\n        }\n    }\n    return counter\n\
    }\n", "    var result int = 0\n    var hex_primes = []int{2, 3, 5, 7, 11, 13}\n\
    \    var hex_values = []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    for i :=\
    \ 0; i < len(num); i++ {\n        for j := 0; j < len(hex_values); j++ {\n   \
    \         if num[i:i+1] == hex_values[j] {\n                if hex_primes[j] >\
    \ 1 {\n                    result++\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
