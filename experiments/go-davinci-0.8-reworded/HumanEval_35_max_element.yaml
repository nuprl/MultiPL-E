name: HumanEval_35_max_element
language: go_test.go
prompt: "package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n\
  // >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l\
  \ []int) int {\n"
tests: "func TestMax_Element(t *testing.T) {\n  candidate := max_element\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual:\
  \ candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), expected: 124 },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n  \
    \  for _, v := range l {\n        if v > max {\n            max = v\n        }\n\
    \    }\n    return max\n}\n", "    var max int\n    max = l[0]\n    for _, v :=\
    \ range l {\n        if v > max {\n            max = v\n        }\n    }\n   \
    \ return max\n}\n", "    max := l[0]\n    for _, item := range l {\n        if\
    \ item > max {\n            max = item\n        }\n    }\n    return max\n}\n",
  "    // Implement the function body.\n    return 0\n}\n", "    max := l[0]\n   \
    \ for _, x := range l {\n        if x > max {\n            max = x\n        }\n\
    \    }\n    return max\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \n    // First element is the default max.\n    max := l[0]\n\n    for _, num\
    \ := range l {\n        if num > max {\n            max = num\n        }\n   \
    \ }\n\n    return max\n}\n", "    // Your code here (and the code from the previous\
    \ exercise)\n    return -1\n}\n", "    res := l[0]\n    for _, v := range l {\n\
    \        if v > res {\n            res = v\n        }\n    }\n    return res\n\
    }\n\ntype ListMaxElementTestCase ", "    max := l[0]\n    for _, value := range\
    \ l {\n        if value > max {\n            max = value\n        }\n    }\n \
    \   return max\n}\n", "    var max int\n    for _, v := range l {\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    return max\n}\n", "  \
    \  max := l[0]\n    for _, n := range l {\n        if n > max {\n            max\
    \ = n\n        }\n    }\n    return max\n}\n", "    if len(l) == 0 {\n       \
    \ return 0\n    }\n    max := l[0]\n    for _, e := range l {\n        if e >\
    \ max {\n            max = e\n        }\n    }\n    return max\n}\n", "    max\
    \ := 0\n    for _, elem := range l {\n        if elem > max {\n            max\
    \ = elem\n        }\n    }\n    return max\n}\n", "    max := l[0]\n    for _,\
    \ v := range l {\n        if v > max {\n            max = v\n        }\n    }\n\
    \    return max\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    max\
    \ := l[0]\n    for _, v := range l {\n        if v > max {\n            max =\
    \ v\n        }\n    }\n    return max\n}\n", "    max := l[0]\n    for _, val\
    \ := range l {\n        if val > max {\n            max = val\n        }\n   \
    \ }\n    return max\n}\n", "    max := l[0]\n    for _, v := range l {\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    return max\n}\n",
  "    max := l[0]\n    for _, e := range l {\n        if e > max {\n            max\
    \ = e\n        }\n    }\n    return max\n}\n", "    m := l[0]\n    for _, v :=\
    \ range l {\n        if v > m {\n            m = v\n        }\n    }\n    return\
    \ m\n}\n", "    max := 0\n    for _, v := range l {\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    return max\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
