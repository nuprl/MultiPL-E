name: HumanEval_149_sorted_list_sum
language: go_test.go
prompt: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never a list of numbers,\n\
  // and it may contain duplicates.\n// The order of the list should be ascending\
  \ by length of each word, and you\n// should return the list sorted by that rule.\n\
  // If two words have the same length, sort the list alphabetically.\n// The function\
  \ should return a list of strings in sorted order.\n// You may assume that all words\
  \ will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\"\
  , \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\"\
  , \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string)\
  \ []string {\n"
tests: "func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}),\
  \ expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"\
  AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n \
  \    { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{}\
  \ },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
  \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
  ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual:\
  \ candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"\
  cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := []string{}\n    m := make(map[int][]string)\n    for\
    \ _, s := range lst {\n        m[len(s)] = append(m[len(s)], s)\n    }\n    fmt.Println(m)\n\
    \    for _, k := range keys(m) {\n        result = append(result, m[k]...)\n \
    \   }\n    return result\n}\n", "    m := make(map[int][]string)\n    for _, v\
    \ := range lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    for _,\
    \ v := range m {\n        if len(v) == 1 {\n            delete(m, len(v[0]))\n\
    \        }\n    }\n    for _, v := range m {\n        for _, x := range v {\n\
    \            fmt.Println(x)\n        }\n    }\n    return []string{}\n}\n", " \
    \   var res []string\n    m := make(map[int][]string)\n    for _, e := range lst\
    \ {\n        l := len(e)\n        m[l] = append(m[l], e)\n    }\n    for k, v\
    \ := range m {\n        if len(v) % 2 == 0 {\n            res = append(res, v...)\n\
    \        }\n    }\n    return res\n}\n", "    var res []string\n    for _, word\
    \ := range lst {\n        if len(word) % 2 == 0 {\n            res = append(res,\
    \ word)\n        }\n    }\n    return res\n}\n", "    var res []string\n    var\
    \ length_map = make(map[int][]string)\n    for _, i := range lst {\n        length_map[len(i)]\
    \ = append(length_map[len(i)], i)\n    }\n    for k, _ := range length_map {\n\
    \        if len(length_map[k]) % 2 == 0 {\n            res = append(res, length_map[k]...)\n\
    \        }\n    }\n    return res\n}\n", "    l := 0\n    if len(lst) > 0 {\n\
    \        l = len(lst[0])\n    }\n    m := make(map[int][]string)\n    for _, s\
    \ := range lst {\n        if len(s) % 2 == 0 {\n            m[len(s)] = append(m[len(s)],\
    \ s)\n        }\n    }\n    keys := make([]int, 0, len(m))\n    for k := range\
    \ m {\n        keys = append(keys, k)\n    }\n    for i := range keys {\n    \
    \    for j := i + 1; j < len(keys); j++ {\n            if keys[i] > keys[j] {\n\
    \                keys[i], keys[j] = keys[j], keys[i]\n            }\n        }\n\
    \    }\n    r := make([]string, 0, len(m))\n    for _, k := range keys {\n   \
    \     for i := range m[k] {\n            for j := i + 1; j < len(m[k]); j++ {\n\
    \                if m[k][i] > m[k][j] {\n                    m[k][i], m[k][j]\
    \ = m[k][j], m[k][i]\n                }\n            }\n        }\n        r =\
    \ append(r, m[k]...)\n    }\n    return r\n}\n", "    // exclude empty list and\
    \ single element list\n    if len(lst) <= 1 {\n        return lst\n    }\n\n \
    \   var lst_sorted []string\n    var idx_sorted int\n    var lst_sum []int\n \
    \   var sum int\n    var min int\n\n    // sum each element's ascii code, also\
    \ get the minimum value\n    for _, word := range lst {\n        sum = 0\n   \
    \     for _, ch := range word {\n            sum += int(ch)\n        }\n     \
    \   lst_sum = append(lst_sum, sum)\n        if idx_sorted == 0 || sum < min {\n\
    \            min = sum\n        }\n    }\n\n    // extract strings with min sum\n\
    \    for idx, s := range lst_sum {\n        if s == min {\n            lst_sorted\
    \ = append(lst_sorted, lst[idx])\n        }\n    }\n\n    return lst_sorted\n\
    }\n", "    if len(lst) == 0 {\n        return []string{}\n    }\n    fmt.Println(lst)\n\
    \    var even_lst []string\n    for _, v := range lst {\n        if len(v) % 2\
    \ == 0 {\n            even_lst = append(even_lst, v)\n        }\n    }\n    fmt.Println(even_lst)\n\
    \    var rtn []string\n    for i := 1; i <= len(even_lst); i++ {\n        for\
    \ _, v := range even_lst {\n            if len(v) == i {\n                rtn\
    \ = append(rtn, v)\n            }\n        }\n    }\n    return rtn\n}\n", " \
    \   if lst == nil {\n        return []string{}\n    }\n    if len(lst) == 0 {\n\
    \        return []string{}\n    }\n    result := []string{}\n    for _, s := range\
    \ lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n\
    \        }\n    }\n    sort_list(result)\n    return result\n}\n", "    var result\
    \ []string\n    for _,v := range lst {\n        if len(v) % 2 == 0 {\n       \
    \     result = append(result, v)\n        }\n    }\n    sort2(result)\n    return\
    \ result\n}\n", "    var result []string\n    for _, s := range lst {\n      \
    \  if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n \
    \   }\n    return result\n}\n", "    var output []string\n    var odd_length int\n\
    \    for _, word := range lst {\n        if len(word) % 2 == 0 {\n           \
    \ output = append(output, word)\n        } else {\n            odd_length++\n\
    \        }\n    }\n    if odd_length == len(lst) {\n        return []string{}\n\
    \    }\n    return output\n}\n", "    // next we work on a copy of the argument:\n\
    \    lst_copy := make([]string, len(lst))\n    copy(lst_copy, lst)\n    // then\
    \ sort it using bubble sort:\n    for i := 0; i < len(lst_copy); i++ {\n     \
    \   for j := i + 1; j < len(lst_copy); j++ {\n            if lst_copy[i] > lst_copy[j]\
    \ {\n                lst_copy[i], lst_copy[j] = lst_copy[j], lst_copy[i]\n   \
    \         }\n        }\n    }\n    // now we have sorted the list, we will\n \
    \   // fill the answer variable with elements\n    // that have even length:\n\
    \    answer := make([]string, 0)\n    for _, e := range lst_copy {\n        if\
    \ len(e) % 2 == 0 {\n            answer = append(answer, e)\n        }\n    }\n\
    \    return answer\n}\n", "    l := len(lst)\n    if l == 0 {\n        return\
    \ lst\n    }\n    for i := 0; i < l; i++ {\n        for j := i+1; j < l; j++ {\n\
    \            if len(lst[i]) > len(lst[j]) {\n                lst[i], lst[j] =\
    \ lst[j], lst[i]\n            }\n        }\n    }\n    // fmt.Println(lst)\n \
    \   i := 0\n    for ; i < l; i++ {\n        if len(lst[i]) % 2 == 0 {\n      \
    \      break\n        }\n    }\n    if i == l {\n        return []string{}\n \
    \   }\n    lst = lst[i:]\n    l = len(lst)\n    for i := 0; i < l; i++ {\n   \
    \     for j := i+1; j < l; j++ {\n            if lst[i] > lst[j] {\n         \
    \       lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n   \
    \ return lst\n}\n", "    var new_lst []string\n    for _, n := range lst {\n \
    \       if len(n) % 2 == 0 {\n            new_lst = append(new_lst, n)\n     \
    \   }\n    }\n    return new_lst\n}\n", "    for i := 0; i < len(lst); i++ {\n\
    \        fmt.Println(lst[i])\n    }\n    return []string{}\n}\n", "    count :=\
    \ 0\n    is_odd := true\n    ret := make([]string, len(lst))\n    for _, s :=\
    \ range lst {\n        if len(s) % 2 == 0 {\n            is_odd = false\n    \
    \    } else {\n            is_odd = true\n        }\n        if !is_odd {\n  \
    \          ret[count] = s\n            count++\n        }\n    }\n    return ret[:count]\n\
    }\n", "    var s []string\n    for _, v := range lst {\n        if len(v) % 2\
    \ == 0 {\n            s = append(s, v)\n        }\n    }\n    return s\n}\n",
  "    // runtime: O(n)\n    // memory: O(n)\n\n    m := make(map[int][]string)\n\
    \    rs := []string{}\n\n    for _, v := range lst {\n        m[len(v)] = append(m[len(v)],\
    \ v)\n    }\n\n    for k, v := range m {\n        if k % 2 == 0 {\n          \
    \  for _, v2 := range v {\n                rs = append(rs, v2)\n            }\n\
    \        }\n    }\n\n    return rs\n}\n", "    var odd_lst []string\n    // odd_lst\
    \ = make([]string, len(lst))\n    for _, v := range lst {\n        if len(v) %\
    \ 2 == 1 {\n            odd_lst = append(odd_lst, v)\n        }\n    }\n    fmt.Println(odd_lst)\n\
    \    return odd_lst\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
