name: HumanEval_94_skjkasdkd
language: go_test.go
prompt: "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a list of integers.\n// You need to find the largest prime value\
  \ and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n//\
  \ >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n\
  // 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323,\
  \ 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0,\
  \ 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n//\
  \ 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int)\
  \ int {\n"
tests: "func TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
  \ 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n   \
  \  { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0,\
  \ 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2,\
  \ 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n\
  \     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     {\
  \ actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: Implement me\n\n    return 0\n}\n", "\tm := make(map[int]int)\n\
    \tfor _, v := range lst {\n\t\tm[v]++\n\t}\n\t\n\tmax_prime := 0\n\tfor key, value\
    \ := range m {\n\t\tif value == 1 {\n\t\t\tif key > max_prime {\n\t\t\t\tmax_prime\
    \ = key\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum_digits(max_prime)\n}\n", "    //\
    \ your code\n    // return sum of digits of the largest prime\n    var result\
    \ int\n    for _, v := range lst {\n        var count int\n        for i := 1;\
    \ i <= v; i++ {\n            if v%i == 0 {\n                count++\n        \
    \    }\n        }\n        if count == 2 {\n            for _, val := range fmt.Sprintf(\"\
    %d\", v) {\n                result += int(val) - '0'\n            }\n        }\n\
    \    }\n    return result\n}\n\nvar testSkjkasdkdData = []", "    // Your code\
    \ here\n    return 0\n}\n", "    var allPrimes []int\n    if len(lst) == 0 {\n\
    \        return 0\n    }\n    for i := 0; i < len(lst); i++ {\n        if isPrime(lst[i])\
    \ {\n            allPrimes = append(allPrimes, lst[i])\n        }\n    }\n   \
    \ largestPrime := max(allPrimes)\n    return sumDigits(largestPrime)\n}\n", " \
    \   return 0\n}\n", "    if len(lst) == 0 {\n        return 0\n    }\n    max\
    \ := -1\n    for _, value := range lst {\n        if isPrime(value) && value >\
    \ max {\n            max = value\n        }\n    }\n    if max < 0 {\n       \
    \ return 0\n    }\n    return sumOfDigits(max)\n}\n", "    res := 0\n    prime\
    \ := 0\n    // your code here\n    for _, item := range lst {\n        for i :=\
    \ 2; i < item; i++ {\n            if item % i == 0 {\n                break\n\
    \            } else if i == item - 1 {\n                prime = item\n       \
    \     }\n        }\n        if prime > res {\n            res = prime\n      \
    \  }\n    }\n    tmp := res\n    for {\n        if tmp / 10 == 0 {\n         \
    \   res += tmp\n            break\n        } else {\n            res += tmp %\
    \ 10\n            tmp /= 10\n        }\n    }\n    return res\n}\n", "\treturn\
    \ 0\n}\n", "    return 0\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   if lst == nil || len(lst) == 0 {\n        return 0\n    }\n    var prime int\n\
    \    for _, i := range lst {\n        if isPrime(i) && i > prime {\n         \
    \   prime = i\n        }\n    }\n    return digitSum(prime)\n}\n", "    // find\
    \ all primes\n    primes := []int{}\n    for i := 0; i < len(lst); i++ {\n   \
    \     if skjkasdkd_test.IsPrime(lst[i]) {\n            primes = append(primes,\
    \ lst[i])\n        }\n    }\n    // find the largest prime\n    var max int\n\
    \    for i := 0; i < len(primes); i++ {\n        if primes[i] > max {\n      \
    \      max = primes[i]\n        }\n    }\n    // total up the digits\n    total\
    \ := 0\n    for max > 0 {\n        total += max % 10\n        max /= 10\n    }\n\
    \    return total\n}\n", "    return 42\n}\n", "    p := findLargestPrime(lst)\n\
    \    fmt.Println(p)\n    return getSumOfDigits(p)\n}\n", "    // big, big prime\
    \ value and return the sum of its digits\n    // lst2 := lst[:]\n    for i :=\
    \ 0; i < len(lst); i++ {\n        fmt.Println(i)\n        if lst[i] == 0 {\n \
    \           continue\n        }\n        // find prime\n        // fmt.Println(lst[i])\n\
    \        if lst[i] < 2 {\n            continue\n        }\n        for j := 2;\
    \ j < lst[i]; j++ {\n            // fmt.Println(j)\n            if lst[i] % j\
    \ == 0 {\n                lst[i] = 0\n                break\n            }\n \
    \       }\n    }\n    // \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\
    \u0432\u0430\u0442\u044C lst\n    lst3 := lst[:]\n    fmt.Println(lst)\n    fmt.Println(lst3)\n\
    \    for {\n        found := false\n        for i := 0; i < len(lst3)-1; i++ {\n\
    \            if lst3[i] > lst3[i+1] {\n                found = true\n        \
    \        lst3[i], lst3[i+1] = lst3[i+1], lst3[i]\n            }\n        }\n \
    \       if !found {\n            break\n        }\n    }\n    fmt.Println(lst3)\n\
    \    // \u0441\u0443\u043C\u043C\u0430 \u0446\u0438\u0444\u0440 \u0432 \u043A\u043E\
    \u043D\u0446\u0435\n    sum := 0\n    for _, v := range lst3[len(lst3)-1:] {\n\
    \        for v > 0 {\n            sum += v % 10\n            v /= 10\n       \
    \ }\n    }\n    return sum\n}\n", "    return 0\n}\n", "\tprimes := []int{}\n\t\
    for i := 2; i < 100; i++ {\n\t\tisPrime := true\n\t\tfor j := 2; j < i; j++ {\n\
    \t\t\tif i % j == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\
    \t\tif isPrime {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\tmaxPrime :=\
    \ 0\n\tfor _, x := range lst {\n\t\tfor _, p := range primes {\n\t\t\tif x ==\
    \ p {\n\t\t\t\tif p > maxPrime {\n\t\t\t\t\tmaxPrime = p\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\tif maxPrime == 0 {\n\t\treturn 0\n\t}\n\tsum := 0\n\tfor maxPrime\
    \ > 0 {\n\t\tsum += maxPrime % 10\n\t\tmaxPrime /= 10\n\t}\n\treturn sum\n}\n",
  "    // your code here\n    return 0\n}\n", "    sum, prime := 0, 0\n    for _,\
    \ n := range lst {\n        if n > prime && prime_test(n) {\n            prime\
    \ = n\n        }\n    }\n    for prime > 0 {\n        sum += prime % 10\n    \
    \    prime /= 10\n    }\n    return sum\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    var primeList []int\n    for i := 0; i < len(lst); i++ {\n   \
    \     prime := true\n        for j := 0; j < len(primeList); j++ {\n         \
    \   if lst[i] % primeList[j] == 0 {\n                prime = false\n         \
    \       break\n            }\n        }\n        if prime == true {\n        \
    \    primeList = append(primeList, lst[i])\n        }\n    }\n    var sum int\n\
    \    largestPrime := 0\n    for i := 0; i < len(primeList); i++ {\n        if\
    \ primeList[i] > largestPrime {\n            largestPrime = primeList[i]\n   \
    \     }\n    }\n    for largestPrime > 0 {\n        sum += largestPrime % 10\n\
    \        largestPrime /= 10\n    }\n    return sum\n}\n", "    sum := 0\n    max\
    \ := 0\n    sum_of_digits := 0\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] == 0 {\n            continue\n        }\n        if lst[i] < 0 {\n  \
    \          lst[i] = -lst[i]\n        }\n        for j := 2; j < lst[i]; j++ {\n\
    \            sum += lst[i] % j\n        }\n        if sum == 0 {\n           \
    \ if lst[i] > max {\n                max = lst[i]\n            }\n        }\n\
    \        sum = 0\n    }\n    for _, v := range fmt.Sprintf(\"%d\", max) {\n  \
    \      sum_of_digits += int(v - '0')\n    }\n    return sum_of_digits\n}\n", " \
    \   mx := 0\n    for _, i := range lst {\n        if isPrime(i) && i > mx {\n\
    \            mx = i\n        }\n    }\n    res := 0\n    for mx > 0 {\n      \
    \  res += mx % 10\n        mx /= 10\n    }\n    return res\n}\n", "    // Your\
    \ code goes here\n    return -1\n}\n", "    sum := 0\n    for i:=0; i<len(lst);\
    \ i++ {\n        sum = sum + lst[i]\n    }\n    return sum\n}\n", "    return\
    \ 0\n}\n", "    // your code here\n    return 0\n}\n", "    // your code here\n\
    \    return 1\n}\n", "    for i := len(lst) - 1; i >= 0; i-- {\n        for j\
    \ := len(lst) - 1; j >= 0; j-- {\n            if lst[i] % lst[j] == 0 && lst[i]\
    \ != lst[j] {\n                lst = append(lst[:i], lst[i+1:]...)\n         \
    \       break\n            }\n        }\n    }\n    var max int\n    for _, i\
    \ := range lst {\n        if i > max {\n            max = i\n        }\n    }\n\
    \    var sum int\n    for _, i := range fmt.Sprintf(\"%d\", max) {\n        sum\
    \ += int(i - '0')\n    }\n    return sum\n}\n", "\treturn -1\n}\n", "    var maxPrime,\
    \ number int\n    for _, number = range lst {\n        if number % 2 == 0 {\n\
    \            continue\n        }\n        if isPrime(number) && number > maxPrime\
    \ {\n            maxPrime = number\n        }\n    }\n    return addDigits(maxPrime)\n\
    }\n", "    // TODO: Implement me\n    return 0\n}\n", "    var prime int\n   \
    \ for i := 0; i < len(lst); i++ {\n        if isPrime(lst[i]) && lst[i] > prime\
    \ {\n            prime = lst[i]\n        }\n    }\n    var sum int\n    for i\
    \ := 0; i < len(fmt.Sprintf(\"%d\", prime)); i++ {\n        sum += int(fmt.Sprintf(\"\
    %d\", prime)[i] - '0')\n    }\n    return sum\n}\n", "    // your code here\n\
    }\n", "    return 0\n}\n", "    var isPrime, count int\n    var prime int\n\n\
    \    for _, n := range lst {\n        if n < 1 {\n            continue\n     \
    \   }\n\n        isPrime = 0\n        for i := 2; i <= n/2; i++ {\n          \
    \  if n%i == 0 {\n                isPrime = 1\n                break\n       \
    \     }\n        }\n\n        if isPrime == 0 {\n            count++\n       \
    \     prime = n\n        }\n    }\n\n    if count == 1 {\n        return sumOfDigits(prime)\n\
    \    }\n\n    return 0\n}\n", "    var prime = 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > prime && isPrime(lst[i]) {\n            prime = lst[i]\n\
    \        }\n    }\n    return primeSum(prime)\n}\n", "    var prime_num int\n\
    \    for _, num := range lst {\n        if is_prime(num) {\n            prime_num\
    \ = num\n        }\n    }\n    var sum int\n    for prime_num > 0 {\n        sum\
    \ += prime_num % 10\n        prime_num /= 10\n    }\n    return sum\n}\n", " \
    \   var largestPrime int\n    var m map[int]bool = make(map[int]bool)\n    for\
    \ _, n := range lst {\n        if n > 1 {\n            m[n] = true\n        }\n\
    \    }\n    for _, n := range lst {\n        if n == 1 {\n            continue\n\
    \        }\n        for i := 2; i < n; i++ {\n            if n % i == 0 {\n  \
    \              m[n] = false\n                break\n            }\n        }\n\
    \    }\n    for _, n := range lst {\n        if _, ok := m[n]; ok {\n        \
    \    if n > largestPrime {\n                largestPrime = n\n            }\n\
    \        }\n    }\n    sum := 0\n    for n := largestPrime; n > 0; n /= 10 {\n\
    \        sum += n % 10\n    }\n    return sum\n}\n", "\tvar maxPrime int\n\tfor\
    \ _, val := range lst {\n\t\tif isPrime(val) {\n\t\t\tif val > maxPrime {\n\t\t\
    \t\tmaxPrime = val\n\t\t\t}\n\t\t}\n\t}\n\treturn primeSum(maxPrime)\n}\n", " \
    \   // your code here\n    m := 0\n    for _, v := range lst {\n        if m <\
    \ v {\n            m = v\n        }\n    }\n    prime := -1\n    for i := 2; i\
    \ <= m; i++ {\n        c := 0\n        for j := 2; j <= i; j++ {\n           \
    \ if i % j == 0 {\n                c++\n            }\n        }\n        if c\
    \ == 1 {\n            prime = i\n        }\n    }\n    sum := 0\n    for prime\
    \ > 0 {\n        d := prime % 10\n        sum += d\n        prime /= 10\n    }\n\
    \    return sum\n}\n", "    var ans int\n    for _, v := range lst {\n       \
    \ if check(v) {\n            ans += lst[v]\n        }\n    }\n    return ans\n\
    }\n", "    if len(lst) == 0 {\n        return 0\n    }\n    p := lst[0]\n    for\
    \ _, n := range lst {\n        if n > p {\n            p = n\n        }\n    }\n\
    \    digits := []int{}\n    for p > 0 {\n        digits = append(digits, p % 10)\n\
    \        p /= 10\n    }\n    return sum(digits)\n}\n", "    var max int\n    for\
    \ _, v := range lst {\n        if v > max {\n            max = v\n        }\n\
    \    }\n    primes := []int{}\n    for i := 2; i <= max; i++ {\n        isPrime\
    \ := true\n        for _, p := range primes {\n            if i % p == 0 {\n \
    \               isPrime = false\n                break\n            }\n      \
    \  }\n        if isPrime {\n            primes = append(primes, i)\n        }\n\
    \    }\n    sum := 0\n    for _, v := range primes {\n        for v > 0 {\n  \
    \          digit := v % 10\n            sum += digit\n            v /= 10\n  \
    \      }\n    }\n    return sum\n}\n", "    return 0\n}\n", "    fmt.Println(lst)\n\
    \    return int(0)\n}\n", "    var sum int\n    lst = append(lst, 0)\n    lst\
    \ = append(lst, 0)\n    lst = append(lst, 0)\n    lst = append(lst, 0)\n    lst\
    \ = append(lst, 0)\n    lst = append(lst, 0)\n    lst = append(lst, 0)\n    lst\
    \ = append(lst, 0)\n    lst = append(lst, 0)\n    lst = append(lst, 0)\n    for\
    \ i := range lst {\n        for j := range lst {\n            for k := range lst\
    \ {\n                for t := range lst {\n                    for p := range\
    \ lst {\n                        for q := range lst {\n                      \
    \      for r := range lst {\n                                for s := range lst\
    \ {\n                                    for f := range lst {\n              \
    \                          for g := range lst {\n                            \
    \                sum += lst[i] + lst[j] + lst[k] + lst[t] + lst[p] + lst[q] +\
    \ lst[r] + lst[s] + lst[f] + lst[g]\n                                        }\n\
    \                                    }\n                                }\n  \
    \                          }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return sum\n}\n", " \
    \   var largestPrime int\n    for _, n := range lst {\n        // Check if n is\
    \ prime\n        for i := 2; i < n; i++ {\n            if n % i == 0 {\n     \
    \           goto CONTINUE\n            }\n        }\n        // n is prime\n \
    \       largestPrime = n\n        CONTINUE:\n    }\n    var sum int\n    for largestPrime\
    \ > 0 {\n        sum += largestPrime % 10\n        largestPrime /= 10\n    }\n\
    \    return sum\n}\n", "    for i := 0; i < len(lst); i++ {\n        for j :=\
    \ i + 1; j < len(lst); j++ {\n            if is_prime(lst[i]) && is_prime(lst[j])\
    \ && lst[i] < lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n    \
    \        }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if\
    \ is_prime(lst[i]) {\n            return sum_digits(lst[i])\n        }\n    }\n\
    \    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    m := 0\n\
    \    for _, n := range lst {\n        if n > m && prime(n) {\n            m =\
    \ n\n        }\n    }\n    if m == 0 {\n        return 0\n    }\n    s := 0\n\
    \    for n := m; n > 0; n /= 10 {\n        s += n % 10\n    }\n    return s\n\
    }\n", "    res := 1\n    for _, v := range lst {\n        res *= v\n    }\n  \
    \  fmt.Println(res)\n    return res\n}\n", "    // We need to find the largest\
    \ prime among the given list of numbers\n    // First let's find the largest number\n\
    \    // For that, we have a function max()\n    var maxNumber = max(lst)\n   \
    \ // Now, let's check if the largest number is a prime or not\n    if isPrime(maxNumber)\
    \ {\n        // If it is prime, then we need to find the sum of its digits\n \
    \       // For that, we have a function digitSum()\n        return digitSum(maxNumber)\n\
    \    } else {\n        // If it is not prime, then we have to find the next largest\
    \ prime\n        // For that, we have a function nextPrime()\n        var nextPrimeNumber\
    \ = nextPrime(maxNumber)\n        // Again, we need to find the sum of the digits\
    \ of the next prime number\n        return digitSum(nextPrimeNumber)\n    }\n\
    }\n", "    primes := prime_numbers(lst)\n    //fmt.Println(primes)\n    if len(primes)\
    \ == 0 {\n        return 0\n    }\n    return sum_of_digits(primes[len(primes)-1])\n\
    }\n", "    return 0\n}\n", "    // write code here\n    var prime int\n    prime\
    \ = 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] > prime {\n    \
    \        var j int\n            for j = 2; j < lst[i]; j++ {\n               \
    \ if lst[i] % j == 0 {\n                    break\n                }\n       \
    \     }\n            if j == lst[i] {\n                prime = lst[i]\n      \
    \      }\n        }\n    }\n    fmt.Println(prime)\n    var result int\n    for\
    \ prime > 0 {\n        result += prime % 10\n        prime /= 10\n    }\n    return\
    \ result\n}\n", "    largest := 0\n    for _, num := range lst {\n        if isPrime(num)\
    \ && num > largest {\n            largest = num\n        }\n    }\n    return\
    \ sumDigits(largest)\n}\n", "\treturn 0\n}\n", "    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > 1 {\n            for j := i + 1; j < len(lst); j++\
    \ {\n                if lst[j] % lst[i] == 0 {\n                    lst[j] = 0\n\
    \                }\n            }\n        }\n    }\n    max := 0\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if lst[i] > max {\n            max = lst[i]\n\
    \        }\n    }\n    sum := 0\n    for max > 0 {\n        sum += max % 10\n\
    \        max /= 10\n    }\n    return sum\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    // Insert your code here\n    return 0\n}\n", "    // First we\
    \ have to find the largest prime number from the list\n    // Then find the sum\
    \ of its digits\n    var prime int\n    for _, n := range lst {\n        if (isPrime(n))\
    \ {\n            prime = n\n        }\n    }\n    // Then find the sum of its\
    \ digits\n    var sum int\n    for prime > 0 {\n        sum += prime % 10\n  \
    \      prime /= 10\n    }\n    return sum\n}\n", "    // This is a code golf challenge,\
    \ so keep your code short :)\n}\n", "    // your code here...\n    return 0\n\
    }\n", "    return 0\n}\n", "    //>>> your code here <<<\n    return 0\n}\n",
  "    var m int = 1\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1;\
    \ j < len(lst); j++ {\n            m = max(m, gcd(lst[i], lst[j]))\n        }\n\
    \    }\n    var sum int = 0\n    for m > 0 {\n        sum += m % 10\n        m\
    \ /= 10\n    }\n    return sum\n}\n", "    var largestPrime int\n\n    for _,\
    \ value := range lst {\n        if isPrime(value) {\n            if value > largestPrime\
    \ {\n                largestPrime = value\n            }\n        }\n    }\n\n\
    \    digits := findDigits(largestPrime)\n    return digitsSum(digits)\n}\n", " \
    \   // Let's find the largest prime value first\n    // All we know is that all\
    \ values are >= 0\n    // Given that we're only given integers, that means we're\
    \ dealing with only relatively small numbers\n    // This means we can brute force\
    \ it in a reasonable amount of time.\n    // A more elegant solution would be\
    \ to use the sieve of Eratosthenes to find primes:\n    // https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    // but I don't think it's necessary to spend more time on this question\n\
    \    largestPrime := 0\n    for _, value := range lst {\n        if isPrime(value)\
    \ && value > largestPrime {\n            largestPrime = value\n        }\n   \
    \ }\n\n    // Now that we have the largest prime value, let's sum up its digits\n\
    \    sum := 0\n    for largestPrime > 0 {\n        sum += largestPrime % 10\n\
    \        largestPrime /= 10\n    }\n\n    return sum\n}\n", "    var prime int\n\
    \    for _, i := range lst {\n        if i > prime && IsPrime(i) {\n         \
    \   prime = i\n        }\n    }\n    fmt.Println(prime)\n    return CalculateSumOfDigits(prime)\n\
    }\n", "    // your code here\n    return 0\n}\n", "    return 0\n}\n", "    //\
    \ your code here\n    return 0\n}\n", "    return -1\n}\n", "    for _,n := range\
    \ lst {\n        if is_prime(n) {\n            return sum_digits(n)\n        }\n\
    \    }\n    return 0\n}\n", "    var max int\n    for _, i := range lst {\n  \
    \      if max < i {\n            max = i\n        }\n    }\n    for i := max;\
    \ i > 1; i-- {\n        if max % i == 0 {\n            for j := 2; j < i; j++\
    \ {\n                if i % j == 0 {\n                    break\n            \
    \    }\n                if j == i - 1 {\n                    return sum(i)\n \
    \               }\n            }\n        }\n    }\n    return -1\n}\n", "   \
    \ // Replace the code below with your code.\n    return 42\n}\n", "    return\
    \ 0\n}\n", "    // Your code here\n    return 0\n}\n", "    if len(lst) == 0 {\n\
    \        return 0\n    }\n    prime_numbers := make([]int, 0)\n    for i := 2;\
    \ i < 1000; i++ {\n        if is_prime(i) {\n            prime_numbers = append(prime_numbers,\
    \ i)\n        }\n    }\n    max_prime := 0\n    for _, v := range lst {\n    \
    \    if is_prime(v) {\n            max_prime = v\n        }\n    }\n    return\
    \ sum_digits(max_prime)\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   var b int\n    return b\n}\n", "    largestPrime := 0\n    for _, x := range\
    \ lst {\n        if isPrime(x) && x > largestPrime {\n            largestPrime\
    \ = x\n        }\n    }\n    return sum(largestPrime)\n}\n", "    max, primes\
    \ := 0, 0\n    for _, num := range lst {\n        if num > max && isPrime(num)\
    \ {\n            max = num\n        }\n    }\n    for max > 0 {\n        primes\
    \ += max % 10\n        max /= 10\n    }\n    return primes\n}\n", "    return\
    \ findLargestPrime(lst)\n}\n", "    var maxprime int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if isPrime(lst[i]) && lst[i] > maxprime {\n            maxprime\
    \ = lst[i]\n        }\n    }\n    return splitSum(maxprime)\n}\n", "    sum :=\
    \ 0\n    var num uint = 0\n    if len(lst) != 0 {\n        max := lst[0]\n   \
    \     for _, n := range lst {\n            if n > max {\n                max =\
    \ n\n            }\n        }\n        num = uint(max)\n    }\n\n    for num !=\
    \ 0 {\n        sum += int(num % 10)\n        num /= 10\n    }\n    return sum\n\
    }\n", "    return 1\n}\n", "    // 0. Remove 0s\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] == 0 {\n            lst = append(lst[:i], lst[i+1:]...)\n\
    \            i--\n        }\n    }\n    // 1. Find largest\n    if len(lst) ==\
    \ 0 {\n        return 0\n    }\n    largest := lst[0]\n    for i := 0; i < len(lst);\
    \ i++ {\n        if lst[i] > largest {\n            largest = lst[i]\n       \
    \ }\n    }\n    // 2. Prime the largest\n    for i := 2; i < largest; i++ {\n\
    \        if largest % i == 0 {\n            return skjkasdkd(lst[:i]) + skjkasdkd(lst[i:])\n\
    \        }\n    }\n    // 3. Digit sum\n    var sum int\n    for i := 0; i < len(lst);\
    \ i++ {\n        sum += lst[i]\n    }\n    return sum\n}\n", "    var result =\
    \ 0\n    var max = 0\n    for _, v := range lst {\n        if v > max {\n    \
    \        max = v\n        }\n    }\n    var temp = max\n    for temp > 0 {\n \
    \       result += temp % 10\n        temp /= 10\n    }\n    return result\n}\n",
  "    //I'm sure there is a much more efficient way to do this\n    list := make([]int,\
    \ 0)\n    for _, num := range lst {\n        if isPrime(num) {\n            list\
    \ = append(list, num)\n        }\n    }\n    var max int\n    for _, num := range\
    \ list {\n        if num > max {\n            max = num\n        }\n    }\n  \
    \  return getSum(max)\n}\n", "    var sumDigits func(int) int\n    sumDigits =\
    \ func(i int) int {\n        if i == 0 {\n            return 0\n        }\n  \
    \      return i % 10 + sumDigits(i / 10)\n    }\n\n    var largestPrime func([]int)\
    \ int\n    largestPrime = func(lst []int) int {\n        if len(lst) == 0 {\n\
    \            return 0\n        }\n        var isPrime func(int) bool\n       \
    \ isPrime = func(i int) bool {\n            if i <= 3 {\n                return\
    \ i > 1\n            }\n            if i % 2 == 0 || i % 3 == 0 {\n          \
    \      return false\n            }\n            for j := 5; j * j <= i; j += 6\
    \ {\n                if i % j == 0 || i % (j + 2) == 0 {\n                   \
    \ return false\n                }\n            }\n            return true\n  \
    \      }\n\n        var primeNumbers []int\n        for _, j := range lst {\n\
    \            if isPrime(j) {\n                primeNumbers = append(primeNumbers,\
    \ j)\n            }\n        }\n        if len(primeNumbers) == 0 {\n        \
    \    return 0\n        }\n        largestPrime := primeNumbers[0]\n        for\
    \ _, j := range primeNumbers {\n            if j > largestPrime {\n          \
    \      largestPrime = j\n            }\n        }\n        return largestPrime\n\
    \    }\n\n    prime := largestPrime(lst)\n    return sumDigits(prime)\n}\n", " \
    \   l := len(lst)\n    if l == 0 {\n        return 0\n    }\n\n    largestPrime\
    \ := 0\n    for i := 0; i < l; i++ {\n        if lst[i] > largestPrime && isPrime(lst[i])\
    \ {\n            largestPrime = lst[i]\n        }\n    }\n\n    r := 0\n    for\
    \ largestPrime > 0 {\n        r += largestPrime % 10\n        largestPrime /=\
    \ 10\n    }\n\n    return r\n}\n", "\t// write your code here\n\treturn 0\n}\n",
  "    var res int\n    var primes []int\n    for _, num := range lst {\n        //Check\
    \ if prime number\n        if isPrime(num) {\n            //Check if prime number\
    \ is larger than the largest number in primes list\n            if len(primes)\
    \ == 0 || num > primes[len(primes)-1] {\n                primes = append(primes,\
    \ num)\n            }\n        }\n    }\n    //Return sum of digits of largest\
    \ prime number\n    if len(primes) > 0 {\n        primes[len(primes)-1] = 0\n\
    \        for _, num := range primes {\n            res += num\n        }\n   \
    \ }\n    return res\n}\n\n//Check if the number is prime", "    // your code here\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return 0\n    }\n    var\
    \ max int\n    for _, v := range lst {\n        if max < v {\n            max\
    \ = v\n        }\n    }\n    var primes = [...]int{}\n    for i := 2; i <= max;\
    \ i++ {\n        isPrime := true\n        for j := 2; j < i; j++ {\n         \
    \   if i%j == 0 {\n                isPrime = false\n                break\n  \
    \          }\n        }\n        if isPrime {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    var sum int\n    for _, v := range primes {\n    \
    \    sum += v\n    }\n    sum *= 1000\n    sum += 0\n    return sum\n}\n", " \
    \   return 0\n}\n", "\t// largest prime number\n\t// sum of its digits\n\tvar\
    \ largest int\n\t//var largest_prime int\n\tfor _, n := range lst {\n\t\tif n\
    \ > largest {\n\t\t\tlargest = n\n\t\t}\n\t}\n\tlargest_prime := largest\n\t\n\
    \t// find largest prime\n\tfor i := 2; i < largest; i++ {\n\t\tif largest_prime\
    \ % i == 0 {\n\t\t\tlargest_prime = largest_prime / i\n\t\t\ti = 2\n\t\t}\n\t\
    }\n\t\n\t// find sum of its digits\n\tvar sum int\n\tfor largest_prime > 0 {\n\
    \t\tremainder := largest_prime % 10\n\t\tsum += remainder\n\t\tlargest_prime =\
    \ largest_prime / 10\n\t}\n\treturn sum\n}\n", "    return 0\n}\n", "    return\
    \ 0\n}\n", "    var primeCount int = 0\n    var prime int = 0\n    var loop int\
    \ = 0\n    var sum int = 0\n    var primePrime []int = []int{}\n    // check if\
    \ number is prime\n    for i := 0; i < len(lst); i++ {\n        loop = 0\n   \
    \     for j := 1; j <= lst[i]; j++ {\n            if (lst[i] % j == 0) {\n   \
    \             loop++\n            }\n        }\n        if (loop == 2) {\n   \
    \         primeCount++\n            primePrime = append(primePrime, lst[i])\n\
    \        }\n    }\n    // find the largest prime value\n    for i := 0; i < len(primePrime);\
    \ i++ {\n        if (primePrime[i] > prime) {\n            prime = primePrime[i]\n\
    \        }\n    }\n    // sum of digits\n    fmt.Println(prime)\n    for i :=\
    \ 0; i < len(primePrime); i++ {\n        sum += primePrime[i]\n    }\n    return\
    \ sum\n}\n", "    lst2 := lst[:]\n    p := 1\n    for len(lst2) > 0 {\n      \
    \  p *= lst2[0]\n        lst2 = lst2[1:]\n    }\n    sum, m := 0, 0\n    for p\
    \ > 0 {\n        m = p % 10\n        sum += m\n        p /= 10\n    }\n    return\
    \ sum\n}\n", "    maxValue := 0\n    for _, value := range lst {\n        maxValue\
    \ = getMaxValue(maxValue, value)\n    }\n    return sumOfDigits(maxValue)\n}\n",
  "    // split an integer into a slice of its digits\n    getDigits := func(num int)\
    \ []int {\n        if num == 0 {\n            return []int{0}\n        }\n   \
    \     digits := make([]int, 0)\n        for num > 0 {\n            digits = append(digits,\
    \ num % 10)\n            num /= 10\n        }\n        for i, j := 0, len(digits)-1;\
    \ i < j; i, j = i+1, j-1 {\n            digits[i], digits[j] = digits[j], digits[i]\n\
    \        }\n        return digits\n    }\n\n    // check if n is a prime\n   \
    \ isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n\
    \        }\n        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n \
    \               return false\n            }\n        }\n        return true\n\
    \    }\n\n    // convert a slice of digits to an integer\n    toNum := func(digits\
    \ []int) int {\n        n := 0\n        for _, digit := range digits {\n     \
    \       n = n*10 + digit\n        }\n        return n\n    }\n\n    // reverse\
    \ a slice of digits\n    reverse := func(digits []int) []int {\n        for i,\
    \ j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n            digits[i], digits[j]\
    \ = digits[j], digits[i]\n        }\n        return digits\n    }\n\n    // find\
    \ the largest prime in a list\n    largestPrime := func(lst []int) int {\n   \
    \     largestPrime := 0\n        for _, num := range lst {\n            if isPrime(num)\
    \ && num > largestPrime {\n                largestPrime = num\n            }\n\
    \        }\n        return largestPrime\n    }\n\n    largestPrime := largestPrime(lst)\n\
    \    digits := getDigits(largestPrime)\n    reverse(digits)\n    digits = digits[0:len(digits)-1]\n\
    \    reversedLargestPrime := toNum(digits)\n    sum := 0\n    for reversedLargestPrime\
    \ > 0", "    // NOTE: the function accepts a list of integers\n    // NOTE: to\
    \ get the sum of their digits, you will need to take the largest prime number\
    \ from the list\n    // NOTE: and return its sum of digits\n    // NOTE: use your\
    \ existing code to find the largest prime number from the list\n    // NOTE: return\
    \ the sum of its digits\n    return 0\n}\n", "    if len(lst) == 0 {\n       \
    \ return 0\n    }\n    l := 0\n    for _, a := range lst {\n        l = a\n  \
    \      for _, b := range lst {\n            if b > l && isPrime(b) {\n       \
    \         l = b\n            }\n        }\n    }\n    sum := 0\n    for _, d :=\
    \ range (fmt.Sprintf(\"%d\", l)) {\n        d, _ := strconv.Atoi(string(d))\n\
    \        sum += d\n    }\n    return sum\n}\n", "    return 0\n}\n", "    sum\
    \ := 0\n    largestPrime := 0\n    for i := range lst {\n        if isPrime(lst[i])\
    \ {\n            if lst[i] > largestPrime {\n                largestPrime = lst[i]\n\
    \            }\n        }\n    }\n    for largestPrime > 0 {\n        sum += largestPrime\
    \ % 10\n        largestPrime /= 10\n    }\n    return sum\n}\n", "\t\n\treturn\
    \ 0\n}\n", "    // your code here\n    var out int\n    return out\n}\n", "  \
    \  var num = 0\n    for i := 0; i < len(lst); i++ {\n        //fmt.Println(i)\n\
    \        if (lst[i] == 1) {\n            continue\n        }\n        var isPrime\
    \ = true\n        for j := 2; j < lst[i]; j++ {\n            if (lst[i] % j ==\
    \ 0) {\n                isPrime = false\n                break\n            }\n\
    \        }\n        if (isPrime) {\n            num = lst[i]\n        }\n    }\n\
    \    var digitSum = 0\n    for num > 0 {\n        digitSum += num % 10\n     \
    \   num /= 10\n    }\n    return digitSum\n}\n", "    return 0\n}\n", "    return\
    \ 0\n}\n", "    // code here\n    return -1\n}\n", "    var maxPrime int\n   \
    \ for _, number := range lst {\n        if isPrime(number) && number > maxPrime\
    \ {\n            maxPrime = number\n        }\n    }\n    var sum int\n    for\
    \ _, digit := range fmt.Sprintf(\"%d\", maxPrime) {\n        sum += int(digit\
    \ - '0')\n    }\n    return sum\n}\n", "    var sum int\n    for _, el := range\
    \ lst {\n        var n int\n        for i := 1; i <= el; i++ {\n            if\
    \ el % i == 0 {\n                n += 1\n            }\n        }\n        if\
    \ n == 2 {\n            sum += digitSum(el)\n        }\n    }\n    return sum\n\
    }\n", "    // your code here\n    return 0\n}\n", "    mp := make(map[int]int)\n\
    \    for _, v := range lst {\n        mp[v]++\n    }\n    p := 1\n    for k, _\
    \ := range mp {\n        p *= k\n    }\n    var r int\n    for p > 0 {\n     \
    \   r += p % 10\n        p /= 10\n    }\n    return r\n}\n", "    var primes =\
    \ []int{}\n    var largest_prime int\n    var sum_of_digits int\n\n    for _,\
    \ num := range lst {\n        if num > 1 {\n            if !is_number_composite(num)\
    \ {\n                primes = append(primes, num)\n            }\n        }\n\
    \    }\n\n    largest_prime = largest_integer(primes)\n\n    for largest_prime\
    \ > 0 {\n        // Modulo of int in Go is a remainder, not modulo, so do (x +\
    \ 10) % 10\n        sum_of_digits += (largest_prime % 10 + 10) % 10\n        largest_prime\
    \ /= 10\n    }\n\n    return sum_of_digits\n}\n", "\treturn -1\n}\n", "    return\
    \ 1\n}\n", "    // your code here\n    var r int\n\n    for _, n := range lst\
    \ {\n        if isPrime(n) {\n            r += sumDigits(n)\n        }\n    }\n\
    \n    return r\n}\n", "    var lastPrime int\n    for i := 0; i < len(lst); i++\
    \ {\n        is_prime := true\n        for j := 2; j < lst[i]; j++ {\n       \
    \     if lst[i] % j == 0 {\n                is_prime = false\n               \
    \ break\n            }\n        }\n        if is_prime {\n            lastPrime\
    \ = lst[i]\n        }\n    }\n    var sum int\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == lastPrime {\n            sum += lst[i]\n        }\n\
    \    }\n    fmt.Println(sum)\n    return sum\n}\n", "    return len(lst)\n}\n",
  "    var ret, tmp int\n    for _, v := range lst {\n        tmp = v\n        for\
    \ tmp > 10 {\n            tmp /= 10\n        }\n        if isPrime(v) && tmp >\
    \ ret {\n            ret = tmp\n        }\n    }\n    return ret\n}\n", "    var\
    \ prime int\n    prime = 0\n    for i:=0; i<len(lst); i++ {\n        if lst[i]>prime\
    \ {\n            if isPrime(lst[i]) {\n                prime = lst[i]\n      \
    \      }\n        }\n    }\n    return sumDigits(prime)\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    // Code here\n}\n", "    return 0\n}\n", "  \
    \  prime := 0\n    for _, v := range lst {\n        if prime < v && isPrime(v)\
    \ {\n            prime = v\n        }\n    }\n    sum := 0\n    for prime > 0\
    \ {\n        sum += prime % 10\n        prime /= 10\n    }\n    return sum\n}\n",
  "    var result int\n    for _, elem := range lst {\n        if is_prime(elem) {\n\
    \            result = sum_of_digits(elem)\n        }\n    }\n    return result\n\
    }\n", "    if len(lst) == 0 {\n        return 0\n    }\n    max, sum := 0, 0\n\
    \    for _, value := range lst {\n        if value > max && isPrime(value) {\n\
    \            max = value\n        }\n    }\n    for max > 0 {\n        sum +=\
    \ max % 10\n        max /= 10\n    }\n    return sum\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    // replace this for solution\n    return 0\n\
    }\n", "    return 0\n}\n", "\treturn 0\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    // List of prime numbers up to 200\n    primes := []int{2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199}\n    sum := 0\n    // Getting largest\
    \ number from the list\n    max := 0\n    for _, num := range lst {\n        if\
    \ num > max {\n            max = num\n        }\n    }\n    // Looping through\
    \ all prime numbers and checking if the list contains that number\n    for _,\
    \ prime := range primes {\n        if prime > max {\n            break\n     \
    \   }\n        if contains(lst, prime) {\n            sum += prime\n        }\n\
    \    }\n    return sum\n}\n", "    // your code here\n    return 0\n}\n", "  \
    \  panic(\"Not implemented\")\n}\n", "    var prime map[int]int\n    prime = make(map[int]int)\n\
    \    maxKey := 0\n    for _, n := range lst {\n        if isPrime(n) {\n     \
    \       prime[n] = n\n            if n > maxKey {\n                maxKey = n\n\
    \            }\n        }\n    }\n    if maxKey == 0 {\n        return 0\n   \
    \ }\n    res := 0\n    for maxKey > 0 {\n        res += maxKey % 10\n        maxKey\
    \ /= 10\n    }\n    return res\n}\n", "    return 0\n}\n", "    // your code here\n\
    \    max := 0\n    for i := range lst {\n        if lst[i] > max {\n         \
    \   max = lst[i]\n        }\n    }\n    // fmt.Println(max)\n    for i := 2; i\
    \ < max; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                max = max / i\n            }\n        }\n    }\n    // fmt.Println(max)\n\
    \    res := 0\n    for max > 0 {\n        res += max % 10\n        max /= 10\n\
    \    }\n    return res\n}\n", "    var biggestPrime int\n    for i := range lst\
    \ {\n        if isPrime(lst[i]) {\n            if lst[i] > biggestPrime {\n  \
    \              biggestPrime = lst[i]\n            }\n        }\n    }\n    return\
    \ digitsSum(biggestPrime)\n}\n", "    var largestPrime int\n    // \u0412\u0430\
    \u0448 \u043A\u043E\u0434 \u0442\u0443\u0442\n    return largestPrime\n}\n", " \
    \   var rp int\n    for _, v := range lst {\n        if isPrime(v) {\n       \
    \     rp = v\n        }\n    }\n    return sumDigits(rp)\n}\n", "    // 0. Find\
    \ the largest prime number in the list\n    prime := 0\n    for _, num := range\
    \ lst {\n        if isPrime(num) && num > prime {\n            prime = num\n \
    \       }\n    }\n\n    // 1. Turn the prime number into a string\n    strNum\
    \ := fmt.Sprintf(\"%d\", prime)\n\n    // 2. Sum up all digits in the string\n\
    \    sum := 0\n    for _, char := range strNum {\n        fmt.Println(char)\n\
    \        i, _ := strconv.Atoi(string(char))\n        sum += i\n    }\n\n    return\
    \ sum\n}\n", "    for i := len(lst) - 1; i >= 0; i-- {\n        if isPrime(lst[i])\
    \ {\n            return sumOfDigits(lst[i])\n        }\n    }\n    return 0\n\
    }\n", "    // Your code\n    return 0\n}\n", "    var max_prime int\n    var max_prime_sum\
    \ int\n    for i := 0; i < len(lst); i++ {\n        val := lst[i]\n        if\
    \ val < 2 {\n            continue\n        }\n        if is_prime(val) {\n   \
    \         if val > max_prime {\n                max_prime = val\n            }\n\
    \        }\n    }\n    for max_prime > 0 {\n        max_prime_sum += max_prime\
    \ % 10\n        max_prime /= 10\n    }\n    return max_prime_sum\n}\n", "    largestPrime\
    \ := 0\n    for _, v := range lst {\n        if isPrime(v) && v > largestPrime\
    \ {\n            largestPrime = v\n        }\n    }\n    // sum the digits of\
    \ the largest prime\n    var sum int\n    for _, v := range fmt.Sprintf(\"%d\"\
    , largestPrime) {\n        sum += int(v - '0')\n    }\n    return sum\n}\n", " \
    \   panic(\"Not Implemented\")\n}\n", "\treturn 0\n}\n", "    fmt.Println(lst)\n\
    \    return 0\n}\n", "    // return the sum of digits of the largest prime in\
    \ the list.\n    primes := make([]int, 0)\n    for _, n := range lst {\n     \
    \   prime := true\n        for _, div := range primes {\n            if n % div\
    \ == 0 {\n                prime = false\n                break\n            }\n\
    \        }\n        if prime {\n            primes = append(primes, n)\n     \
    \   }\n    }\n    var largest int\n    for _, p := range primes {\n        if\
    \ p > largest {\n            largest = p\n        }\n    }\n    var sum int\n\
    \    for _, d := range fmt.Sprintf(\"%d\", largest) {\n        sum += int(d -\
    \ '0')\n    }\n    return sum\n}\n", "    // Your code goes here\n    return 0\n\
    }\n", "    var largest_prime = 0\n    for _, n := range lst {\n        if is_prime(n)\
    \ && n > largest_prime {\n            largest_prime = n\n        }\n    }\n  \
    \  var sum = 0\n    for _, c := range fmt.Sprintf(\"%d\", largest_prime) {\n \
    \       sum += int(c - '0')\n    }\n    return sum\n}\n", "    // TODO\n    //\
    \ Search through all primes, stop on the greatest one\n    // Sum up the digits\n\
    \    // Return the sum\n    return 0\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    // your code here\n    return 0\n}\n", "    return 0\n\
    }\n", "    // Write your code here\n    // To print results to the standard output\
    \ you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n \
    \   return 0\n}\n", "    prime := findLargestPrime(lst)\n    return sumDigits(prime)\n\
    }\n", "    return -1\n}\n", "    var greatestPrime int\n    isPrime := true\n\
    \    for _, element := range lst {\n        if element == 1 {\n            continue\n\
    \        }\n        for i := 2; i < element; i++ {\n            if element % i\
    \ == 0 {\n                isPrime = false\n                break\n           \
    \ }\n        }\n        if isPrime {\n            if element > greatestPrime {\n\
    \                greatestPrime = element\n            }\n        }\n        isPrime\
    \ = true\n    }\n    var total int\n    for _, element := range []rune(fmt.Sprintf(\"\
    %d\", greatestPrime)) {\n        total += int(element) - 48\n    }\n    return\
    \ total\n}\n", "    return 0\n}\n", "    largestPrime := 0\n    for i:=0; i<len(lst);\
    \ i++ {\n        if isPrime(lst[i]) {\n            if lst[i] > largestPrime {\n\
    \                largestPrime = lst[i]\n            }\n        }\n    }\n    largestPrimeString\
    \ := fmt.Sprintf(\"%d\", largestPrime)\n    largestPrimeSum := 0\n    for i:=0;\
    \ i<len(largestPrimeString); i++ {\n        largestPrimeSum += int(largestPrimeString[i]\
    \ - '0')\n    }\n    return largestPrimeSum\n}\n", "    if len(lst) == 0 {\n \
    \       return 0\n    }\n    largest := 0\n    for _, v := range lst {\n     \
    \   if v > largest {\n            if isPrime(v) {\n                largest = v\n\
    \            }\n        }\n    }\n    if largest == 0 {\n        return 0\n  \
    \  }\n    var sum int\n    for largest > 0 {\n        sum += largest % 10\n  \
    \      largest /= 10\n    }\n    return sum\n}\n", "    var largestPrime int\n\
    \    for _, element := range lst {\n        if isPrime(element) && element > largestPrime\
    \ {\n            largestPrime = element\n        }\n    }\n    return getSumOfDigits(largestPrime)\n\
    }\n", "    // your code here\n    return 0\n}\n", "    largestPrime := 0\n   \
    \ for _, i := range lst {\n        if i > largestPrime && isPrime(i) {\n     \
    \       largestPrime = i\n        }\n    }\n    // fmt.Println(largestPrime)\n\
    \    largestPrimeString := fmt.Sprintf(\"%d\", largestPrime)\n    sum := 0\n \
    \   for _, numString := range largestPrimeString {\n        sum += int(numString\
    \ - '0')\n    }\n    return sum\n}\n", "    return 0\n}\n", "    // your code\n\
    \    return 0\n}\n", "    return sumOfDigits(largestPrime(lst))\n}\n", "    return\
    \ 0\n}\n", "    // your code\n    return 0\n}\n", "    if len(lst) == 0 {\n  \
    \      return 0\n    }\n    var largestPrime = 0\n    var sum = 0\n    for _,\
    \ number := range lst {\n        if isPrime(number) {\n            if number >\
    \ largestPrime {\n                largestPrime = number\n            }\n     \
    \   }\n    }\n    for largestPrime > 0 {\n        sum += largestPrime % 10\n \
    \       largestPrime /= 10\n    }\n    return sum\n}\n", "    primes := []int{}\n\
    \    for _, x := range lst {\n        if isPrime(x) {\n            primes = append(primes,\
    \ x)\n        }\n    }\n    var max int\n    for _, x := range primes {\n    \
    \    if x > max {\n            max = x\n        }\n    }\n    fmt.Println(max)\n\
    \    var sum int\n    for _, x := range fmt.Sprintf(\"%d\", max) {\n        sum\
    \ += int(x - '0')\n    }\n    return sum\n}\n", "    for i := 0; i < len(lst)-1;\
    \ i++ {\n        if lst[i] < lst[i+1] {\n            lst[i], lst[i+1] = lst[i+1],\
    \ lst[i]\n        }\n    }\n    fmt.Println(lst)\n    var total int\n    for i\
    \ := 0; i < len(lst); i++ {\n        p := is_prime(lst[i])\n        if p == true\
    \ {\n            total += lst[i]\n        }\n    }\n    return total\n}\n", " \
    \   largest_prime := 0\n    for _, n := range lst {\n        if is_prime(n) &&\
    \ n > largest_prime {\n            largest_prime = n\n        }\n    }\n    sum\
    \ := 0\n    for _, d := range fmt.Sprintf(\"%d\", largest_prime) {\n        sum\
    \ += int(d) - '0'\n    }\n    return sum\n}\n", "    var max int\n    for _, num\
    \ := range lst {\n        if isPrime(num) && num > max {\n            max = num\n\
    \        }\n    }\n    return sumDigits(max)\n}\n", "    r := 0\n    t := 1\n\
    \    for _, x := range lst {\n        if x > r && isPrime(x) {\n            r\
    \ = x\n        }\n    }\n    for r > 0 {\n        t += r % 10\n        r /= 10\n\
    \    }\n    return t\n}\n", "    list := make([]int, 0)\n    sum := 0\n    for\
    \ _, v := range lst {\n        if v > 1 {\n            list = append(list, v)\n\
    \        }\n    }\n    fmt.Println(list)\n    max_prime := 0\n    for _, x :=\
    \ range list {\n        is_prime := true\n        for i := 2; i < x; i++ {\n \
    \           if x % i == 0 {\n                is_prime = false\n              \
    \  break\n            }\n        }\n        if is_prime && x > max_prime {\n \
    \           max_prime = x\n        }\n    }\n    for max_prime > 0 {\n       \
    \ sum += max_prime % 10\n        max_prime /= 10\n    }\n    return sum\n}\n",
  "    return 0\n}\n\nvar data = []", "    var largestPrime int\n\n    // I'm sure\
    \ there's a more efficient way to do this\n    for _, i := range lst {\n     \
    \   isPrime := true\n        for j := 2; j < i; j++ {\n            if i % j ==\
    \ 0 {\n                isPrime = false\n                break\n            }\n\
    \        }\n        if isPrime && i > largestPrime {\n            largestPrime\
    \ = i\n        }\n    }\n\n    // This can be refactored as well\n    sum := 0\n\
    \    for _, i := range fmt.Sprintf(\"%d\", largestPrime) {\n        sum += int(i\
    \ - '0')\n    }\n\n    return sum\n}\n", "    primes := make([]int, 0)\n    for\
    \ _, num := range lst {\n        prime := true\n        for div := 2; div < num;\
    \ div++ {\n            if num % div == 0 {\n                prime = false\n  \
    \              break\n            }\n        }\n        if prime {\n         \
    \   primes = append(primes, num)\n        }\n    }\n    largest := 0\n    for\
    \ _, num := range primes {\n        if num > largest {\n            largest =\
    \ num\n        }\n    }\n    fmt.Println(largest)\n    if largest == 0 {\n   \
    \     return 0\n    }\n    sum := 0\n    for largest > 0 {\n        sum += largest\
    \ % 10\n        largest /= 10\n    }\n    return sum\n}\n", "    prime := 0\n\
    \    for _, n := range lst {\n        if isPrime(n) && n > prime {\n         \
    \   prime = n\n        }\n    }\n    sum := 0\n    for prime > 0 {\n        sum\
    \ += prime % 10\n        prime /= 10\n    }\n    return sum\n}\n", "    n := 0\n\
    \    for _, i := range lst {\n        if i > n && isPrime(i) {\n            n\
    \ = i\n        }\n    }\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n\
    \        n /= 10\n    }\n    return sum\n}\n", "    var result int\n    // Put\
    \ code here\n    return result\n}\n", "    max, max_index := lst[0], 0\n    for\
    \ i, val := range lst {\n        if val > max {\n            max, max_index =\
    \ val, i\n        }\n    }\n    return max_index + 1\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    // TODO: Implement me\n    return 0\n}\n", " \
    \   // your code here\n    return -1\n}\n", "    // find the largest prime number\n\
    \    max := 0\n    for _, n := range lst {\n        if n > max && isPrime(n) {\n\
    \            max = n\n        }\n    }\n    return sumOfDigits(max)\n}\n", " \
    \   prime := 0\n    for _, item := range lst {\n        // do nothing\n    }\n\
    \    return prime\n}\n", "    var result int\n    return result\n}\n\nvar skjkasdkdTests\
    \ = []", "    var largest int\n    // Find largest prime number\n    for _, number\
    \ := range lst {\n        if isPrime(number) {\n            if number > largest\
    \ {\n                largest = number\n            }\n        }\n    }\n    //\
    \ Calc sum of digits in largest prime number\n    sum := 0\n    for largest !=\
    \ 0 {\n        sum += largest % 10\n        largest /= 10\n    }\n    return sum\n\
    }\n", "    if len(lst) == 0 {\n        return 0\n    }\n    p, d := 1, 0\n   \
    \ for _, v := range lst {\n        if v > 1 {\n            p *= v\n        }\n\
    \    }\n    for p > 0 {\n        d += p % 10\n        p /= 10\n    }\n    return\
    \ d\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
