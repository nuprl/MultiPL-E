name: HumanEval_94_skjkasdkd
language: go_test.go
prompt: "package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a list of integers.\n// You need to find the largest prime value\
  \ and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n//\
  \ >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n\
  // 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323,\
  \ 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0,\
  \ 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n//\
  \ 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int)\
  \ int {\n"
tests: "func TestSkjkasdkd(t *testing.T) {\n  candidate := skjkasdkd\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
  \ 32, 4, 32, 3, 2, 32, 324, 4, 3}), expected: 10 },\n     { actual: candidate([]int{1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), expected: 25 },\n   \
  \  { actual: candidate([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3}), expected: 13 },\n     { actual: candidate([]int{0, 724, 32, 71,\
  \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), expected: 11 },\n     { actual: candidate([]int{0,\
  \ 81, 12, 3, 1, 21}), expected: 3 },\n     { actual: candidate([]int{0, 8, 1, 2,\
  \ 1, 7}), expected: 7 },\n     { actual: candidate([]int{8191}), expected: 19 },\n\
  \     { actual: candidate([]int{8191, 123456, 127, 7}), expected: 19 },\n     {\
  \ actual: candidate([]int{127, 97, 8192}), expected: 10 },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: Implement me\n\n    return 0\n}\n", "\tm := make(map[int]int)\n\
    \tfor _, v := range lst {\n\t\tm[v]++\n\t}\n\t\n\tmax_prime := 0\n\tfor key, value\
    \ := range m {\n\t\tif value == 1 {\n\t\t\tif key > max_prime {\n\t\t\t\tmax_prime\
    \ = key\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum_digits(max_prime)\n}\n", "    //\
    \ your code\n    // return sum of digits of the largest prime\n    var result\
    \ int\n    for _, v := range lst {\n        var count int\n        for i := 1;\
    \ i <= v; i++ {\n            if v%i == 0 {\n                count++\n        \
    \    }\n        }\n        if count == 2 {\n            for _, val := range fmt.Sprintf(\"\
    %d\", v) {\n                result += int(val) - '0'\n            }\n        }\n\
    \    }\n    return result\n}\n\nvar testSkjkasdkdData = []", "    // Your code\
    \ here\n    return 0\n}\n", "    var allPrimes []int\n    if len(lst) == 0 {\n\
    \        return 0\n    }\n    for i := 0; i < len(lst); i++ {\n        if isPrime(lst[i])\
    \ {\n            allPrimes = append(allPrimes, lst[i])\n        }\n    }\n   \
    \ largestPrime := max(allPrimes)\n    return sumDigits(largestPrime)\n}\n", " \
    \   return 0\n}\n", "    if len(lst) == 0 {\n        return 0\n    }\n    max\
    \ := -1\n    for _, value := range lst {\n        if isPrime(value) && value >\
    \ max {\n            max = value\n        }\n    }\n    if max < 0 {\n       \
    \ return 0\n    }\n    return sumOfDigits(max)\n}\n", "    res := 0\n    prime\
    \ := 0\n    // your code here\n    for _, item := range lst {\n        for i :=\
    \ 2; i < item; i++ {\n            if item % i == 0 {\n                break\n\
    \            } else if i == item - 1 {\n                prime = item\n       \
    \     }\n        }\n        if prime > res {\n            res = prime\n      \
    \  }\n    }\n    tmp := res\n    for {\n        if tmp / 10 == 0 {\n         \
    \   res += tmp\n            break\n        } else {\n            res += tmp %\
    \ 10\n            tmp /= 10\n        }\n    }\n    return res\n}\n", "\treturn\
    \ 0\n}\n", "    return 0\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   if lst == nil || len(lst) == 0 {\n        return 0\n    }\n    var prime int\n\
    \    for _, i := range lst {\n        if isPrime(i) && i > prime {\n         \
    \   prime = i\n        }\n    }\n    return digitSum(prime)\n}\n", "    // find\
    \ all primes\n    primes := []int{}\n    for i := 0; i < len(lst); i++ {\n   \
    \     if skjkasdkd_test.IsPrime(lst[i]) {\n            primes = append(primes,\
    \ lst[i])\n        }\n    }\n    // find the largest prime\n    var max int\n\
    \    for i := 0; i < len(primes); i++ {\n        if primes[i] > max {\n      \
    \      max = primes[i]\n        }\n    }\n    // total up the digits\n    total\
    \ := 0\n    for max > 0 {\n        total += max % 10\n        max /= 10\n    }\n\
    \    return total\n}\n", "    return 42\n}\n", "    p := findLargestPrime(lst)\n\
    \    fmt.Println(p)\n    return getSumOfDigits(p)\n}\n", "    // big, big prime\
    \ value and return the sum of its digits\n    // lst2 := lst[:]\n    for i :=\
    \ 0; i < len(lst); i++ {\n        fmt.Println(i)\n        if lst[i] == 0 {\n \
    \           continue\n        }\n        // find prime\n        // fmt.Println(lst[i])\n\
    \        if lst[i] < 2 {\n            continue\n        }\n        for j := 2;\
    \ j < lst[i]; j++ {\n            // fmt.Println(j)\n            if lst[i] % j\
    \ == 0 {\n                lst[i] = 0\n                break\n            }\n \
    \       }\n    }\n    // \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\
    \u0432\u0430\u0442\u044C lst\n    lst3 := lst[:]\n    fmt.Println(lst)\n    fmt.Println(lst3)\n\
    \    for {\n        found := false\n        for i := 0; i < len(lst3)-1; i++ {\n\
    \            if lst3[i] > lst3[i+1] {\n                found = true\n        \
    \        lst3[i], lst3[i+1] = lst3[i+1], lst3[i]\n            }\n        }\n \
    \       if !found {\n            break\n        }\n    }\n    fmt.Println(lst3)\n\
    \    // \u0441\u0443\u043C\u043C\u0430 \u0446\u0438\u0444\u0440 \u0432 \u043A\u043E\
    \u043D\u0446\u0435\n    sum := 0\n    for _, v := range lst3[len(lst3)-1:] {\n\
    \        for v > 0 {\n            sum += v % 10\n            v /= 10\n       \
    \ }\n    }\n    return sum\n}\n", "    return 0\n}\n", "\tprimes := []int{}\n\t\
    for i := 2; i < 100; i++ {\n\t\tisPrime := true\n\t\tfor j := 2; j < i; j++ {\n\
    \t\t\tif i % j == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\
    \t\tif isPrime {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\tmaxPrime :=\
    \ 0\n\tfor _, x := range lst {\n\t\tfor _, p := range primes {\n\t\t\tif x ==\
    \ p {\n\t\t\t\tif p > maxPrime {\n\t\t\t\t\tmaxPrime = p\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\tif maxPrime == 0 {\n\t\treturn 0\n\t}\n\tsum := 0\n\tfor maxPrime\
    \ > 0 {\n\t\tsum += maxPrime % 10\n\t\tmaxPrime /= 10\n\t}\n\treturn sum\n}\n",
  "    // your code here\n    return 0\n}\n", "    sum, prime := 0, 0\n    for _,\
    \ n := range lst {\n        if n > prime && prime_test(n) {\n            prime\
    \ = n\n        }\n    }\n    for prime > 0 {\n        sum += prime % 10\n    \
    \    prime /= 10\n    }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
