language: go_test.go
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       // fmt.Println(i)\n            if i / 10 == 7 {\n                count\
    \ += 1\n            }\n            if i % 10 == 7 {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpj7jwbktt_test.go:51: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpj7jwbktt_test.go:51:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpj7jwbktt_test.go:51: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpj7jwbktt_test.go:51:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var cnt int\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       var digits []int\n            for _, c := range fmt.Sprintf(\"%d\", i)\
    \ {\n                digits = append(digits, int(c)-'0')\n            }\n    \
    \        if digits[0] == 7 || digits[1] == 7 {\n                cnt++\n      \
    \      }\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fizz_buzz(0x32)\n\t/tmp/tmp8mz7zpuc_test.go:23\
    \ +0x212\ncommand-line-arguments_test.TestFizz_Buzz(0x0?)\n\t/tmp/tmp8mz7zpuc_test.go:38\
    \ +0x46\ntesting.tRunner(0xc0000cc1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var numTimes\
    \ int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            fmt.Println(i)\n            numTimes += digitCount(i, 7)\n      \
    \  }\n    }\n    return numTimes\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph4babbjn_test.go:20:25: undefined: digitCount

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if digit\
    \ == '7' {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n \
    \ candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += count_7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78brl76g_test.go:19:22: undefined: count_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074981
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // YOUR CODE\
    \ HERE\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmppl_94svq_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmppl_94svq_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmppl_94svq_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmppl_94svq_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    number := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count := digit_count(i, 7)\n            number += count\n        }\n \
    \   }\n    return number\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5knm1r__test.go:19:22: undefined: digit_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += number_of_sevens(i)\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6n8qh9gr_test.go:19:22: undefined: number_of_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, ch := range fmt.Sprintf(\"%d\", i) {\n                if string(ch)\
    \ == \"7\" {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    num := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && seven_count(i)\
    \ > 0 {\n            num++\n        }\n    }\n    return num\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9u5g7wn_test.go:18:44: undefined: seven_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, c := range(fmt.Sprintf(\"%d\", i)) {\n                if c == '7'\
    \ {\n                    sum += 1\n                }\n            }\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        // If i is divisible by 11 or 13, then\
    \ check if it contains a 7.\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     if has_seven(i) {\n                count++\n            }\n        }\n \
    \   }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcztce31u_test.go:20:16: undefined: has_seven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += num_sevens(i)\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ptz4k_d_test.go:19:22: undefined: num_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphk4qlip5_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphk4qlip5_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=639)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphk4qlip5_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=2298)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var res int\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       res += numOf(i, 7)\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp39xyoeui_test.go:19:20: undefined: numOf

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    m := n % 11\
    \ * n % 13\n    if m == 0 {\n        return fizz_buzz(n - 1) + 1\n    } else {\n\
    \        return fizz_buzz(n - 1)\n    }\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f355?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fizz_buzz(0xfffffffffeaaab1b?)\n\
    \t/tmp/tmpe_vwefy5_test.go:15 +0xa5 fp=0xc020160398 sp=0xc020160390 pc=0x4ef705\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91\
    \ fp=0xc0201603b0 sp=0xc020160398 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201603c8 sp=0xc0201603b0 pc=0x4ef6f1\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91\
    \ fp=0xc0201603e0 sp=0xc0201603c8 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc0201603f8 sp=0xc0201603e0 pc=0x4ef6f1\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91\
    \ fp=0xc020160410 sp=0xc0201603f8 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpe_vwefy5_test.go:18 +0x7b fp=0xc020160428 sp=0xc020160410 pc=0x4ef6db\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91\
    \ fp=0xc020160440 sp=0xc020160428 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpe_vwefy5_test.go:18 +0x7b fp=0xc020160458 sp=0xc020160440 pc=0x4ef6db\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91\
    \ fp=0xc020160470 sp=0xc020160458 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc020160488 sp=0xc020160470 pc=0x4ef6f1\n\
    command-line-arguments_test.fizz_buzz(0x0?)\n\t/tmp/tmpe_vwefy5_test.go:20 +0x91\
    \ fp=0xc0201604a0 sp=0xc020160488 pc=0x4ef6f1\ncommand-line-arguments_test.fizz_buzz(0x0?)\n\
    \t/tmp/tmpe_vwefy5_test.go:20 +0x91 fp=0xc"
  timestamp: 1660075133
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i % 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp8m3kzy30_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp8m3kzy30_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=192)', got '%!s(int=91)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp8m3kzy30_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp8m3kzy30_test.go:45: expected '%!s(int=8026)', got '%!s(int=2297)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       // convert to string, check if a 7 is present\n            digits := fmt.Sprintf(\"\
    %d\", i)\n            for _, digit := range digits {\n                if string(digit)\
    \ == \"7\" {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       sum += number_of_sevens(i)\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp713kj7ys_test.go:19:20: undefined: number_of_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    var k int\n\n    for i := 0; i < n; i++ {\n        k = i\n        for k >\
    \ 0 {\n            if k % 10 == 7 {\n                count++\n            }\n\
    \            k /= 10\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpkccmm7y3_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=3)', got '%!s(int=17)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpkccmm7y3_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=20)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=6)', got '%!s(int=40)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpkccmm7y3_test.go:52:\
    \ expected '%!s(int=192)', got '%!s(int=1200)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpkccmm7y3_test.go:52: expected '%!s(int=639)', got '%!s(int=4000)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpkccmm7y3_test.go:52:\
    \ expected '%!s(int=8026)', got '%!s(int=50000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // function\
    \ 7_num() returns the number of 7s in the given value of x\n    // >>> 7_num(7)\n\
    \    // 1\n    // >>> 7_num(77)\n    // 2\n    // >>> 7_num(777)\n    // 3\n \
    \   // >>> 7_num(78)\n    // 1\n    // >>> 7_num(778)\n    // 2\n    // >>> 7_num(7777)\n\
    \    // 4\n    // >>> 7_num(7877)\n    // 2\n    // >>> 7_num(177777777777)\n\
    \    // 8\n    // >>> 7_num(123765)\n    // 1\n    // >>> 7_num(877)\n    // 1\n\
    \    // >>> 7_num(787777777777777777)\n    // 10\n    seven_count := 0\n    for\
    \ i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n           \
    \ seven_count += seven_num(i)\n        }\n    }\n    return seven_count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgriqj0hy_test.go:42:28: undefined: seven_num

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075131
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    var c = 0\n    for i := 1; i < n; i++ {\n      \
    \  if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            c++\n       \
    \ }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp3wd7nz1o_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp3wd7nz1o_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp3wd7nz1o_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp3wd7nz1o_test.go:48: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var i int\n\
    \    var count int\n    count = 0\n    for i = 1; i < n; i++ {\n        if (i\
    \ % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmptylwtoel_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmptylwtoel_test.go:47:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=192)', got '%!s(int=91)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmptylwtoel_test.go:47:\
    \ expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmptylwtoel_test.go:47: expected '%!s(int=8026)', got '%!s(int=2297)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for j := 0; j < len(fmt.Sprintf(\"%d\", i)); j++ {\n                if\
    \ fmt.Sprintf(\"%d\", i)[j] == '7' {\n                    count++\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.030s\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 1 {\n\
    \        return 0\n    }\n\n    s := 0\n    for i := 1; i < n; i++ {\n       \
    \ if i % 11 == 0 || i % 13 == 0 {\n            if (i % 10) % 7 == 0 {\n      \
    \          s++\n            }\n            if i / 10 % 7 == 0 {\n            \
    \    s++\n            }\n        }\n    }\n    return s\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmps5bc9wcv_test.go:54: expected '%!s(int=6)', got '%!s(int=8)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmps5bc9wcv_test.go:54:\
    \ expected '%!s(int=192)', got '%!s(int=218)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmps5bc9wcv_test.go:54: expected '%!s(int=639)', got '%!s(int=550)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmps5bc9wcv_test.go:54:\
    \ expected '%!s(int=8026)', got '%!s(int=5514)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && count_digit(i,\
    \ 7) > 0 {\n            count += count_digit(i, 7)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexv57css_test.go:18:44: undefined: count_digit

    /tmp/tmpexv57css_test.go:19:22: undefined: count_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     r = r + numOf7(i)\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdkevcz8x_test.go:19:21: undefined: numOf7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Your code\
    \ here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp3hwgu26c_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp3hwgu26c_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp3hwgu26c_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp3hwgu26c_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075136
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var num7s =\
    \ 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           if (i % 10) == 7 {\n                num7s++\n            }\n     \
    \       if (i / 10) == 7 {\n                num7s++\n            }\n        }\n\
    \    }\n    return num7s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpxn_ruuh6_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpxn_ruuh6_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpxn_ruuh6_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpxn_ruuh6_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075136
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 1 {\n\
    \        return 0\n    }\n    cnt := 0\n    for i := 1; i < n; i++ {\n       \
    \ if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n            \
    \    cnt++\n            }\n            if i / 10 % 10 == 7 {\n               \
    \ cnt++\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpkfk_34nc_test.go:53: expected '%!s(int=192)', got '%!s(int=128)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkfk_34nc_test.go:53:\
    \ expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpkfk_34nc_test.go:53: expected '%!s(int=8026)', got '%!s(int=3216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075136
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       cnt += count7(i)\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwqiu4s6_test.go:19:20: undefined: count7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += strconv.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcth881rl_test.go:19:22: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tcount := 0\n\t\
    for i := 11; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tstr := fmt.Sprintf(\"\
    %d\", i)\n\t\t\tfor _, c := range str {\n\t\t\t\tif c == '7' {\n\t\t\t\t\tcount\
    \ += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075136
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\ttotal := 0\n\t\
    for i := 1; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\ttotal +=\
    \ how_many_7(i)\n\t\t}\n\t}\n\treturn total\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsu9newsf_test.go:19:13: undefined: how_many_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    out := 0\n\
    \    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n    \
    \        digits := Digits(i)\n            for _, digit := range digits {\n   \
    \             if digit == 7 {\n                    out += 1\n                }\n\
    \            }\n        }\n    }\n    return out\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxiyxr6p_test.go:19:23: undefined: Digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: fix\
    \ this so that it's a simple loop\n    count := 0\n    for i := 0; i < n; i++\
    \ {\n        if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            num\
    \ := i\n            for num > 0 {\n                if num % 10 == 7 {\n      \
    \              count++\n                }\n                num /= 10\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp2kqk_jnc_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp2kqk_jnc_test.go:52:\
    \ expected '%!s(int=192)', got '%!s(int=29)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp2kqk_jnc_test.go:52: expected '%!s(int=639)', got '%!s(int=95)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp2kqk_jnc_test.go:52:\
    \ expected '%!s(int=8026)', got '%!s(int=1167)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        divisible_by_11 := (i % 11) == 0\n    \
    \    divisible_by_13 := (i % 13) == 0\n        divisible_by_11_or_13 := divisible_by_11\
    \ || divisible_by_13\n        if divisible_by_11_or_13 {\n            count +=\
    \ count_7s(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0lim4d__test.go:22:22: undefined: count_7s

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 7 == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp7csdwdm1_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp7csdwdm1_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp7csdwdm1_test.go:45: expected '%!s(int=639)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp7csdwdm1_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=2298)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result\
    \ = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            if i / 10 == 7 {\n                result += 1\n            }\n  \
    \          if i % 10 == 7 {\n                result += 1\n            }\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpv6rf816v_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpv6rf816v_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpv6rf816v_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpv6rf816v_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result\
    \ int\n    var limit int = n - n % 11\n    var test int = 11\n    for test < limit\
    \ {\n        if test % 11 == 0 || test % 13 == 0 {\n            var count int\
    \ = 0\n            var value int = test\n            for value > 0 {\n       \
    \         var digit int = value % 10\n                if digit == 7 {\n      \
    \              count++\n                }\n                value = value / 10\n\
    \            }\n            result += count\n        }\n        test += 11\n \
    \   }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpe6c1yswz_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpe6c1yswz_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=192)', got '%!s(int=109)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpe6c1yswz_test.go:57:\
    \ expected '%!s(int=639)', got '%!s(int=364)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpe6c1yswz_test.go:57: expected '%!s(int=8026)', got '%!s(int=4545)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       fmt.Println(i)\n            for j := 0; j < len(fmt.Sprintf(\"%d\", i));\
    \ j++ {\n                if string(fmt.Sprintf(\"%d\", i)[j]) == \"7\" {\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.056s\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains_7(i)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9qh1e9p_test.go:18:44: undefined: contains_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // write your\
    \ code here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpun05vs37_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpun05vs37_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpun05vs37_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpun05vs37_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // For each\
    \ integer in the range, we will store the number of 7s in it in this variable.\n\
    \    // This is necessary because we need to check the amount of 7s in multiple\
    \ numbers (11-13)\n    sevenCount := 0\n    // Loop through all numbers less than\
    \ n\n    for i := 0; i < n; i++ {\n        // Get the number of 7s in each number\
    \ divisible by 11 or 13\n        // If the number is divisible by 11, it is also\
    \ divisible by 13\n        if i % 11 == 0 {\n            sevenCount += 7sInNumber(i)\n\
    \        }\n    }\n    return sevenCount\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyvatte2x_test.go:24:28: expected '';'', found sInNumber

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075136
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += count_digit(i, 7)\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7lqvii26_test.go:19:22: undefined: count_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074983
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       var num = i\n            for num > 0 {\n                if num % 10 ==\
    \ 7 {\n                    count += 1\n                }\n                num\
    \ /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075138
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    digitCount\
    \ := 0\n    for i := 1; i < n; i++ {\n        if ((i % 11 == 0) || (i % 13 ==\
    \ 0)) {\n            for j := i; j > 0; j /= 10 {\n                digit := j\
    \ % 10\n                if digit == 7 {\n                    digitCount++\n  \
    \              }\n            }\n        }\n    }\n    return digitCount\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return -1\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=192)', got '%!s(int=-1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpz6k_mdj0_test.go:39: expected '%!s(int=639)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpz6k_mdj0_test.go:39:\
    \ expected '%!s(int=8026)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8y58g2xy_test.go:19:22: undefined: strings

    /tmp/tmp8y58g2xy_test.go:19:36: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074983
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n  \
    \  for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && has_digit(i,\
    \ 7) {\n            c += 1\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1jzsjux_test.go:18:44: undefined: has_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizz_buzz_ex(n,\
    \ 7, 11, 13)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyb942efn_test.go:16:12: undefined: fizz_buzz_ex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpuvrl9sz6_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=12)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpuvrl9sz6_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=6)', got '%!s(int=32)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpuvrl9sz6_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpuvrl9sz6_test.go:45: expected '%!s(int=639)', got '%!s(int=1609)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpuvrl9sz6_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && has_seven(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2q42obih_test.go:18:44: undefined: has_seven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       fmt.Println(i)\n            c := countOnes(i)\n            fmt.Println(c)\n\
    \            count += c\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbrj3shy_test.go:20:18: undefined: countOnes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    ans := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, d := range fmt.Sprintf(\"%d\", i) {\n                if d == '7'\
    \ {\n                    ans++\n                }\n            }\n        }\n\
    \    }\n    return ans\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       str := fmt.Sprintf(\"%d\", i)\n            for _, c := range str {\n \
    \               if c == '7' {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    var i int\n    for i = 1; i < n; i++ {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            count += CountDigit(i, 7)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9b0belcr_test.go:20:22: undefined: CountDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var a, b int\n\
    \    var count int\n\n    a = n / 11\n    b = n / 13\n\n    for i := a; i > 0;\
    \ i-- {\n        t := i * 11\n        if t < n {\n            if has_seven(t)\
    \ {\n                count++\n            }\n        }\n    }\n\n    for i :=\
    \ b; i > 0; i-- {\n        t := i * 13\n        if t < n {\n            if has_seven(t)\
    \ {\n                count++\n            }\n        }\n    }\n\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzivls_qx_test.go:25:16: undefined: has_seven

    /tmp/tmpzivls_qx_test.go:34:16: undefined: has_seven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    total := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       num := i\n            for num > 0 {\n                if num % 10 == 7\
    \ {\n                    total += 1\n                }\n                num /=\
    \ 10\n            }\n        }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += count_digit(i, 7)\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnn7qarg9_test.go:19:22: undefined: count_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074983
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, c := range fmt.Sprintf(\"%d\", i) {\n                if c == '7'\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\ta := 0\n\tif\
    \ n <= 0 {\n\t\treturn a\n\t}\n\n\t// initialize x to 11 and y to 13\n\tx := 11\n\
    \ty := 13\n\n\t// use a for loop to iterate until either x or y exceeds n\n\t\
    for i := 0; i < n; i++ {\n\t\t// if x is less than y, then increment a by the\
    \ count of 7s in x\n\t\tif x < y {\n\t\t\t// count the number of 7s in x\n\t\t\
    \t// use another for loop to iterate through each digit of x\n\t\t\tfor j := 0;\
    \ j < len(strconv.Itoa(x)); j++ {\n\t\t\t\t// check the ith digit to see if it\
    \ is 7\n\t\t\t\tif strconv.Itoa(x)[j] == \"7\" {\n\t\t\t\t\t// if it is 7, increment\
    \ a by 1\n\t\t\t\t\ta++\n\t\t\t\t}\n\t\t\t}\n\t\t\t// increment x by 11\n\t\t\t\
    x += 11\n\t\t// if y is less than x, then increment a by the count of 7s in y\n\
    \t\t} else if y < x {\n\t\t\t// count the number of 7s in y\n\t\t\t// use another\
    \ for loop to iterate through each digit of y\n\t\t\tfor j := 0; j < len(strconv.Itoa(y));\
    \ j++ {\n\t\t\t\t// check the ith digit to see if it is 7\n\t\t\t\tif strconv.Itoa(y)[j]\
    \ == \"7\" {\n\t\t\t\t\t// if it is 7, increment a by 1\n\t\t\t\t\ta++\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\t// increment y by 13\n\t\t\ty += 13\n\t\t// if x equals y,\
    \ then increment a by the count of 7s in x\n\t\t} else if x == y {\n\t\t\t// count\
    \ the number of 7s in x\n\t\t\t// use another for loop to iterate through each\
    \ digit of x\n\t\t\tfor j := 0; j < len(strconv.Itoa(x)); j++ {\n\t\t\t\t// check\
    \ the\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuamb51m5_test.go:59:6: expected ''('', found TestFizz_Buzz

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code\
    \ here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp_ieujjen_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_ieujjen_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_ieujjen_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    count := 0\n    for i := 1; i < n; i++ {\n     \
    \   if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            count++\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n \
    \ candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp6m02zz8m_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp6m02zz8m_test.go:48:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp6m02zz8m_test.go:48:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp6m02zz8m_test.go:48: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    var base11, base13 int = 11, 13\n    for i := 0; i < n; i += 11 {\n\
    \        if i % 13 == 0 {\n            i = base13\n            base13 += 13\n\
    \        }\n        for x := i; x > 0; x /= 10 {\n            if x % 10 == 7 {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7mljxze_test.go:17:9: base11 declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sevens\
    \ int = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n            sevens += count_sevens(i)\n        }\n    }\n    return sevens\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtsra3a3_test.go:19:23: undefined: count_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       s := fmt.Sprintf(\"%d\", i)\n            for _, c := range s {\n     \
    \           if c == '7' {\n                    count++\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       m := i\n            for m > 0 {\n                digit := m % 10\n   \
    \             if digit == 7 {\n                    count += 1\n              \
    \  }\n                m /= 10\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\n\
    \    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n    \
    \        for _, r := range fmt.Sprintf(\"%d\", i) {\n                if r == '7'\
    \ {\n                    sum++\n                }\n            }\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 11\
    \ {\n        return 0\n    }\n\n    var count int\n    var last_digit int\n  \
    \  var last_digit_of_last_digit int\n    var i int\n\n    for i = 11; i < n; i++\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            last_digit = i % 10\n\
    \            last_digit_of_last_digit = i % 100 % 10\n            if last_digit\
    \ == 7 || last_digit_of_last_digit == 7 {\n                count++\n         \
    \   }\n        }\n    }\n\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmppb8k15kl_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmppb8k15kl_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmppb8k15kl_test.go:58:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmppb8k15kl_test.go:58: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075144
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n\
    \        return 0\n    }\n\n    // Find how many times the digit 7 appears in\
    \ the numbers from 7 to n - 1.\n    total := 0\n    for i := 7; i < n; i++ {\n\
    \        // Increment count when the number contains the digit 7.\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            nums := []int{}\n            for i\
    \ > 0 {\n                nums = append(nums, i % 10)\n                i /= 10\n\
    \            }\n            for _, num := range nums {\n                if num\
    \ == 7 {\n                    total++\n                }\n            }\n    \
    \    }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075153
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    // Create a list of numbers divisible by 11 or 13\n    divisible := []int{}\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       divisible = append(divisible, i)\n        }\n    }\n    for _, i := range\
    \ divisible {\n        // Convert the integer to a string and check for 7's\n\
    \        for _, j := range(fmt.Sprintf(\"%d\", i)) {\n            if j == '7'\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var times int\n\
    \    var num int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i %\
    \ 13 == 0 {\n            num = i\n            for num > 0 {\n                if\
    \ num % 10 == 7 {\n                    times++\n                }\n          \
    \      num /= 10\n            }\n        }\n    }\n    return times\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // initialize\
    \ a counter to zero\n    count := 0\n    // loop through all integers less than\
    \ n\n    for i := 1; i < n; i++ {\n        // if the number is divisible by 11\
    \ or 13\n        if i % 11 == 0 || i % 13 == 0 {\n            // increment the\
    \ counter by the number of times 7 appears in the number\n            count +=\
    \ num_sevens(i)\n        }\n    }\n    // return the counter\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp816xcehg_test.go:23:22: undefined: num_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ has_seven(i) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jkqfvtm_test.go:18:44: undefined: has_seven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       str := fmt.Sprintf(\"%d\", i)\n            for j := 0; j < len(str); j++\
    \ {\n                if str[j] == '7' {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 10 == 7 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpeeajth34_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpeeajth34_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpeeajth34_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpeeajth34_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\n\
    \    if n < 11 || n < 13 {\n        return 0\n    }\n\n    for i := 11; i < n;\
    \ i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += i / 100 +\
    \ i / 10 % 10\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=0)', got '%!s(int=16)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpw7eofb55_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=45)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpw7eofb55_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=6)', got '%!s(int=171)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpw7eofb55_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=15472)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpw7eofb55_test.go:49: expected '%!s(int=639)', got '%!s(int=86992)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpw7eofb55_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=8105964)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += countDigit(i, 7)\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoxehnpmd_test.go:19:22: undefined: countDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075054
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && isContain7(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2jehbbw_test.go:18:44: undefined: isContain7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += count_digits(i, 7)\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7pgh2y3_test.go:19:22: undefined: count_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n\
    \        return 0\n    }\n    return fizz_buzz(n-11) + fizz_buzz(n-13) + countSeven(n)\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vvxwaiq_test.go:19:48: undefined: countSeven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: implement\
    \ me!\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpoqvj606q_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpoqvj606q_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpoqvj606q_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpoqvj606q_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 0; i < n; i++ {\n        switch {\n        case i % 11 == 0 && i\
    \ % 13 == 0:\n            if i % 10 == 7 {\n                count++\n        \
    \    }\n            if i % 100 == 7 {\n                count++\n            }\n\
    \            if i % 1000 == 7 {\n                count++\n            }\n    \
    \    case i % 11 == 0:\n            if i % 10 == 7 {\n                count++\n\
    \            }\n            if i % 100 == 7 {\n                count++\n     \
    \       }\n        case i % 13 == 0:\n            if i % 10 == 7 {\n         \
    \       count++\n            }\n            if i % 100 == 7 {\n              \
    \  count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpkd9r98m6_test.go:68:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpkd9r98m6_test.go:68:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=192)', got '%!s(int=71)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpkd9r98m6_test.go:68:\
    \ expected '%!s(int=639)', got '%!s(int=178)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpkd9r98m6_test.go:68: expected '%!s(int=8026)', got '%!s(int=1770)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += occurrences(i, 7)\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9fv_p234_test.go:19:22: undefined: occurrences

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tcount := 0\n\t\
    for i := 1; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tfor _, c\
    \ := range fmt.Sprintf(\"%d\", i) {\n\t\t\t\tif c == '7' {\n\t\t\t\t\tcount++\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075146
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code\
    \ goes here\n    var count int\n    for i := 0; i < n; i++ {\n        if (i %\
    \ 11 == 0 || i % 13 == 0) && i < n {\n            str := fmt.Sprintf(\"%d\", i)\n\
    \            fmt.Println(str)\n            for _, char := range str {\n      \
    \          if string(char) == \"7\" {\n                    count++\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.031s\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += digits_of_7(i)\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40efof_d_test.go:19:22: undefined: digits_of_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       var str string = fmt.Sprintf(\"%d\", i)\n            for _, c := range\
    \ str {\n                if c == '7' {\n                    count++\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && divisibleBySeven(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejs8ojaa_test.go:18:44: undefined: divisibleBySeven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    s := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     s += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth5dj55m_test.go:19:18: undefined: strings

    /tmp/tmpth5dj55m_test.go:19:32: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Step 1:\
    \ Search number\n    // Step 2: Convert number to string\n    // Step 3: Count\
    \ \"7\"\n    // Step 4: Add count to total\n    // Step 5: Repeat until n\n  \
    \  return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp7jriibgd_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp7jriibgd_test.go:44:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp7jriibgd_test.go:44:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp7jriibgd_test.go:44: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count =\
    \ 0\n    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ hasDigit7(i) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjk6ez4ql_test.go:18:44: undefined: hasDigit7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 7 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphk4qlip5_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmphk4qlip5_test.go:45:\
    \ expected '%!s(int=192)', got '%!s(int=92)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmphk4qlip5_test.go:45: expected '%!s(int=639)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmphk4qlip5_test.go:45:\
    \ expected '%!s(int=8026)', got '%!s(int=2298)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += (i % 10 == 7) + (i / 10 % 10 == 7)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzr0ze4hc_test.go:19:22: invalid operation: operator + not defined on (i
    % 10 == 7) (untyped bool value)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result\
    \ int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            for _, char := range fmt.Sprintf(\"%d\", i) {\n                if\
    \ char == '7' {\n                    result += 1\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 13 {\n\
    \        return 0\n    }\n\n    if n < 111 {\n        return 7\n    }\n\n    return\
    \ 7 + fizz_buzz(n / 11) + fizz_buzz(n / 13)\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp1wdt91v__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=3)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp1wdt91v__test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=6)', got '%!s(int=21)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp1wdt91v__test.go:47:\
    \ expected '%!s(int=192)', got '%!s(int=49)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp1wdt91v__test.go:47: expected '%!s(int=639)', got '%!s(int=49)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp1wdt91v__test.go:47:\
    \ expected '%!s(int=8026)', got '%!s(int=105)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    if n <= 10 {\n        return 0\n    }\n    digit_7_count\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if (i % 11 == 0) || (i % 13 ==\
    \ 0) {\n            if has_digit(i, 7) {\n                digit_7_count += 1\n\
    \            }\n        }\n    }\n    return digit_7_count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnuicxmh_test.go:25:16: undefined: has_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 42\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=0)', got '%!s(int=42)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpgvvhhsoz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=3)', got '%!s(int=42)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpgvvhhsoz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=6)', got '%!s(int=42)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpgvvhhsoz_test.go:39:\
    \ expected '%!s(int=192)', got '%!s(int=42)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpgvvhhsoz_test.go:39: expected '%!s(int=639)', got '%!s(int=42)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpgvvhhsoz_test.go:39:\
    \ expected '%!s(int=8026)', got '%!s(int=42)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += NumOf7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8b7_cqm8_test.go:19:22: undefined: NumOf7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 10 == 7 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmphqbytydu_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmphqbytydu_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmphqbytydu_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmphqbytydu_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n\
    \        return 0\n    }\n    sevens := 0\n    for i := 7; i < n; i++ {\n    \
    \    if i % 11 == 0 || i % 13 == 0 {\n            for d := i; d > 0; d /= 10 {\n\
    \                if d % 10 == 7 {\n                    sevens++\n            \
    \    }\n            }\n        }\n    }\n    return sevens\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075149
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     s := fmt.Sprintf(\"%d\", i)\n            for j := 0; j < len(s); j++ {\n\
    \                if s[j] == '7' {\n                    c++\n                }\n\
    \            }\n        }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    res := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       b := fmt.Sprintf(\"%b\", i)\n            res += strings.Count(b, \"111\"\
    )\n        }\n    }\n    return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_ux85cc_test.go:20:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    result := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       str := fmt.Sprintf(\"%d\", i)\n            for _, c := range str {\n \
    \               if c == '7' {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075149
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // define a\
    \ variable to count the number of 7s\n    count := 0\n    // loop through all\
    \ the numbers\n    for i := 1; i < n; i++ {\n        // first check if they are\
    \ divisible by 11 or 13\n        if i % 11 == 0 || i % 13 == 0 {\n           \
    \ // if they are, loop through each digit, checking if it's 7\n            for\
    \ j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n               \
    \     count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075149
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       x := i\n            for x > 0 {\n                if x % 10 == 7 {\n  \
    \                  sum += 1\n                }\n                x /= 10\n    \
    \        }\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075150
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       s := fmt.Sprintf(\"%d\", i)\n            for _, v := range s {\n     \
    \           if byte(v) == '7' {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 {\n\
    \        return 0\n    }\n    buzz, fizz := 0, 0\n    for i := 11; i < n; i++\
    \ {\n        switch {\n        case i % 11 == 0:\n            buzz++\n       \
    \ case i % 13 == 0:\n            fizz++\n        }\n    }\n    return buzz + fizz\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=0)', got '%!s(int=7)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpyk9of2hj_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=12)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpyk9of2hj_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=6)', got '%!s(int=32)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpyk9of2hj_test.go:51:\
    \ expected '%!s(int=192)', got '%!s(int=643)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpyk9of2hj_test.go:51: expected '%!s(int=639)', got '%!s(int=1609)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpyk9of2hj_test.go:51:\
    \ expected '%!s(int=8026)', got '%!s(int=16083)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var counter\
    \ int\n    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            counter += strings.Count(i, \"7\")\n        }\n    }\n    return\
    \ counter\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz4i261e_test.go:19:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && divisible_by_seven(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd1_87q7v_test.go:18:44: undefined: divisible_by_seven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var num_of_7s\
    \ int = 0\n    var i int = 1\n    for i < n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            fmt.Println(i)\n            str := fmt.Sprintf(\"%d\", i)\n\
    \            for _, v := range str {\n                if v == '7' {\n        \
    \            num_of_7s += 1\n                }\n            }\n        }\n   \
    \     i += 1\n    }\n    return num_of_7s\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.035s\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 1\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075151
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 11; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n    \
    \        x := i\n            for {\n                if x % 10 == 7 {\n       \
    \             count += 1\n                }\n                x /= 10\n       \
    \         if x == 0 {\n                    break\n                }\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code\
    \ here\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp_ieujjen_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp_ieujjen_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp_ieujjen_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp_ieujjen_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // start with\
    \ a count of 0\n    count := 0\n    // go through the numbers 0 - n\n    for i\
    \ := 0; i < n; i++ {\n        // if the number is divisible by 11 or 13\n    \
    \    if i % 11 == 0 || i % 13 == 0 {\n            // get the number as a string\n\
    \            s := fmt.Sprintf(\"%d\", i)\n            // for each digit in the\
    \ string\n            for _, c := range s {\n                // if it's a 7, increment\
    \ the count\n                if c == '7' {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    // return the count\n   \
    \ return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075151
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // \u4F7F\u7528\
    \u4ECE1\u5230n\u7684\u6570\u5B57\u7684\u8FED\u4EE3\u5668\uFF0C\u7B26\u5408\u6761\
    \u4EF6\u7684\u6570\u5B57\u4E2D\u6570\u5B577\u7684\u4E2A\u6570\u76F8\u52A0\n  \
    \  count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            s := fmt.Sprintf(\"%d\", i)\n            for _, c := range\
    \ s {\n                if c == '7' {\n                    count++\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var res int\n\
    \    for i := 7; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 7 == 0 {\n            res += 1\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpnmxpaahc_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpnmxpaahc_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=192)', got '%!s(int=91)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpnmxpaahc_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=229)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpnmxpaahc_test.go:45: expected '%!s(int=8026)', got '%!s(int=2297)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075151
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       j := i\n            for j > 0 {\n                if j % 10 == 7 {\n  \
    \                  count += 1\n                }\n                j /= 10\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075151
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += numDigit7(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7s96a_8_test.go:19:22: undefined: numDigit7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result\
    \ int\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            str := fmt.Sprintf(\"%d\", i)\n            for i := 0; i < len(str);\
    \ i++ {\n                if str[i] == '7' {\n                    result++\n  \
    \              }\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 100\
    \ {\n        return 0\n    }\n\n    return fizz_buzz(n/10) + fizz_buzz(n/100)\
    \ + 1\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp5_vgj3rh_test.go:43:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp5_vgj3rh_test.go:43:\
    \ expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=192)', got '%!s(int=2)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp5_vgj3rh_test.go:43:\
    \ expected '%!s(int=639)', got '%!s(int=4)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp5_vgj3rh_test.go:43: expected '%!s(int=8026)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, v := range fmt.Sprintf(\"%d\", i) {\n                if v == '7'\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.010s\n"
  timestamp: 1660075019
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n  \
    \  for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     r += fizz_buzz_aux(i)\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpts0byicd_test.go:19:18: undefined: fizz_buzz_aux

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 7 == 0 {\n            fmt.Println(i)\n            cnt++\n        }\n    }\n\
    \    return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: '77

    77

    77

    91

    77

    91

    154

    182

    77

    91

    154

    182

    231

    273

    308

    364

    385

    455

    462

    539

    546

    616

    637

    693

    728

    770

    819

    847

    910

    924

    1001

    1078

    1092

    1155

    1183

    1232

    1274

    1309

    1365

    1386

    1456

    1463

    1540

    1547

    1617

    1638

    1694

    1729

    1771

    1820

    1848

    1911

    1925

    2002

    2079

    2093

    2156

    2184

    2233

    2275

    2310

    2366

    2387

    2457

    2464

    2541

    2548

    2618

    2639

    2695

    2730

    2772

    2821

    2849

    2912

    2926

    3003

    3080

    3094

    3157

    3185

    3234

    3276

    3311

    3367

    3388

    3458

    3465

    3542

    3549

    3619

    3640

    3696

    3731

    3773

    3822

    3850

    3913

    3927

    77

    91

    154

    182

    231

    273

    308

    364

    385

    455

    462

    539

    546

    616

    637

    693

    728

    770

    819

    847

    910

    924

    1001

    1078

    1092

    1155

    1183

    1232

    1274

    1309

    1365

    1386

    1456

    1463

    1540

    1547

    1617

    1638

    1694

    1729

    1771

    1820

    1848

    1911

    1925

    2002

    2079

    2093

    2156

    2184

    2233

    2275

    2310

    2366

    2387

    2457

    2464

    2541

    2548

    2618

    2639

    2695

    2730

    2772

    2821

    2849

    2912

    2926

    3003

    3080

    3094

    3157

    3185

    3234

    3276

    3311

    3367

    3388

    3458

    3465

    3542

    3549

    3619

    3640

    3696

    3731

    3773

    3822

    3850

    3913

    3927

    4004

    4081

    4095

    4158

    4186

    4235

    4277

    4312

    4368

    4389

    4459

    4466

    4543

    4550

    4620

    4641

    4697

    4732

    4774

    4823

    4851

    4914

    4928

    5005

    5082

    5096

    5159

    5187

    5236

    5278

    5313

    5369

    5390

    5460

    5467

    5544

    5551

    5621

    5642

    5698

    5733

    5775

    5824

    5852

    5915

    5929

    6006

    6083

    6097

    6160

    6188

    6237

    6279

    6314

    6370

    6391

    6461

    6468

    6545

    6552

    6622

    6643

    6699

    6734

    6776

    6825

    6853

    6916

    6930

    7007

    7084

    7098

    7161

    7189

    7238

    7280

    7315

    7371

    7392

    7462

    7469

    7546

    7553

    7623

    7644

    7700

    7735

    7777

    7826

    7854

    7917

    7931

    8008

    8085

    8099

    8162

    8190

    8239

    8281

    8316

    8372

    8393

    8463

    8470

    8547

    8554

    8624

    8645

    8701

    8736

    8778

    8827

    8855

    8918

    8932

    9009

    9086

    9100

    9163

    9191

    9240

    9282

    9317

    9373

    9394

    9464

    9471

    9548

    9555

    9625

    9646

    9702

    9737

    9779

    9828

    9856

    9919

    9933

    77

    91

    154

    182

    231

    273

    308

    364

    385

    455

    462

    539

    546

    616

    637

    693

    728

    770

    819

    847

    910

    924

    1001

    1078

    1092

    1155

    1183

    1232

    1274

    1309

    1365

    1386

    1456

    1463

    1540

    1547

    1617

    1638

    1694

    1729

    1771

    1820

    1848

    1911

    1925

    2002

    2079

    2093

    2156

    2184

    2233

    2275

    2310

    2366

    2387

    2457

    2464

    2541

    2548

    2618

    2639

    2695

    2730

    2772

    2821

    2849

    2912

    2926

    3003

    3080

    3094

    3157

    3185

    3234

    3276

    3311

    3367

    3388

    3458

    3465

    3542

    3549

    3619

    3640

    3696

    3731

    3773

    3822

    3850

    3913

    3927

    4004

    4081

    4095

    4158

    4186

    4235

    4277

    4312'
  timestamp: 1660075152
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains_digit(i,\
    \ 7) {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplfzoh2i__test.go:18:44: undefined: contains_digit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n\tvar count int\n\
    \tfor i := 1; i < n; i++ {\n\t\tif i % 11 == 0 || i % 13 == 0 {\n\t\t\tval :=\
    \ fmt.Sprintf(\"%d\", i)\n\t\t\tfor _, r := range val {\n\t\t\t\tif r == '7' {\n\
    \t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 1\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=192)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp67s580ih_test.go:39: expected '%!s(int=639)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp67s580ih_test.go:39:\
    \ expected '%!s(int=8026)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075151
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        var d11, d13 bool\n        d11 = (i % 11)\
    \ == 0\n        d13 = (i % 13) == 0\n        if d11 || d13 {\n            count\
    \ += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp133zw196_test.go:22:22: undefined: strings

    /tmp/tmp133zw196_test.go:22:36: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 70 {\n\
    \        return 0\n    }\n\n    count := 0\n    for i := 70; i < n; i++ {\n  \
    \      if i % 11 == 0 || i % 13 == 0 {\n            if i % 100 == 77 {\n     \
    \           count += 2\n            }\n            if i % 10 == 7 {\n        \
    \        count++\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp0m07kdl1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=5)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=192)', got '%!s(int=78)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp0m07kdl1_test.go:54:\
    \ expected '%!s(int=639)', got '%!s(int=195)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp0m07kdl1_test.go:54: expected '%!s(int=8026)', got '%!s(int=1930)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075153
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for x := range fmt.Sprintf(\"%d\", i) {\n                char := fmt.Sprintf(\"\
    %c\", x)\n                if char == \"7\" {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.01s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp70z002bn_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp70z002bn_test.go:50:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp70z002bn_test.go:50:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp70z002bn_test.go:50: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660075153
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // for i :=\
    \ 0; i < n; i += 11 {\n    //     if i % 13 == 0 {\n    //         fmt.Println(i)\n\
    \    //     }\n    // }\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmp2sw1yy6s_test.go:44:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmp2sw1yy6s_test.go:44:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp2sw1yy6s_test.go:44:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp2sw1yy6s_test.go:44: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075154
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    x := 0\n  \
    \  count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            for x = i; x > 0; x /= 10 {\n                if x % 10 ==\
    \ 7 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075154
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 1 {\n\
    \        return 0\n    }\n\n    i := 1\n    result := 0\n    for ; i < n; i++\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            result += i % 10\n \
    \           if i % 100 == 0 {\n                result += i % 100\n           \
    \ }\n        }\n    }\n\n    return result\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=0)', got '%!s(int=28)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp4dshksh9_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=53)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=3)', got '%!s(int=61)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp4dshksh9_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=79)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=6)', got '%!s(int=148)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp4dshksh9_test.go:54:\
    \ expected '%!s(int=192)', got '%!s(int=2886)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp4dshksh9_test.go:54: expected '%!s(int=639)', got '%!s(int=7245)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp4dshksh9_test.go:54:\
    \ expected '%!s(int=8026)', got '%!s(int=72369)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075154
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // if n < 11\
    \ {\n    //     return 0\n    // }\n    // return fizz_buzz(n - 1) + fizz_buzz(n\
    \ / 11) + fizz_buzz(n / 13)\n    count := 0\n    for i := 11; i < n; i++ {\n \
    \       if i % 11 == 0 || i % 13 == 0 {\n            count += i\n        }\n \
    \   }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=0)', got '%!s(int=188)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp9v9b_rt4_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=503)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=3)', got '%!s(int=581)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp9v9b_rt4_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=859)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=6)', got '%!s(int=3298)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp9v9b_rt4_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=1287286)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp9v9b_rt4_test.go:49: expected '%!s(int=639)', got '%!s(int=8053045)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp9v9b_rt4_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=804154209)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075154
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            for _, digit := range fmt.Sprintf(\"\
    %d\", i) {\n                if digit == '7' {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075154
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    ret := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && i %\
    \ 10 == 7 {\n            ret += 1\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpwnlo4bqe_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpwnlo4bqe_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpwnlo4bqe_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpwnlo4bqe_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075155
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\
    \ = 0\n    var i int = 1\n    for i < n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            sum += count7(i)\n        }\n        i++\n    }\n    return\
    \ sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkmuk8lyt_test.go:20:20: undefined: count7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075154
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    res := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       if i % 10 == 7 {\n                res++\n            }\n            if\
    \ i / 10 == 7 {\n                res++\n            }\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp_qqt24w6_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp_qqt24w6_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp_qqt24w6_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp_qqt24w6_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // your code\
    \ here\n    count := 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            tmp := i\n            for tmp > 0 {\n           \
    \     if tmp % 10 == 7 {\n                    count++\n                }\n   \
    \             tmp /= 10\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075155
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    const fizz\
    \ = 11\n    const buzz = 13\n    sum := 0\n    for i := 0; i < n; i++ {\n    \
    \    if i % fizz == 0 || i % buzz == 0 {\n            sum += strings.Count(strconv.Itoa(i),\
    \ \"7\")\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps0w6c92c_test.go:21:20: undefined: strings

    /tmp/tmps0w6c92c_test.go:21:34: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075155
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3no7pez_test.go:19:22: undefined: strings

    /tmp/tmpy3no7pez_test.go:19:36: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074981
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var num, total\
    \ int\n    if n <= 0 {\n        return 0\n    }\n    for i := 0; i < n; i++ {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            num = i\n            for\
    \ num > 0 {\n                if num % 10 == 7 {\n                    total++\n\
    \                }\n                num /= 10\n            }\n        }\n    }\n\
    \    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075155
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    sum := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       sum += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6tk7k94_test.go:19:20: undefined: strings

    /tmp/tmp_6tk7k94_test.go:19:34: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    cnt := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n     \
    \               cnt++\n                }\n            }\n        }\n    }\n  \
    \  return cnt\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075155
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO\n \
    \   return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmprgsicghp_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmprgsicghp_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmprgsicghp_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    res := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n     \
    \               res++\n                }\n            }\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075156
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO: implement\
    \ me\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpp3cgz8y7_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpp3cgz8y7_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpp3cgz8y7_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpp3cgz8y7_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075156
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       fmt.Println(i)\n            count += 7_count(i)\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8hx6g579_test.go:20:23: ''_'' must separate successive digits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075154
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     // find out how many digits the number i has\n            // and then convert\
    \ it to a string and count the number of 7's\n            iStr := fmt.Sprintf(\"\
    %d\", i)\n            for j := 0; j < len(iStr); j++ {\n                if iStr[j]\
    \ == '7' {\n                    c++\n                }\n            }\n      \
    \  }\n    }\n    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660075156
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n\n    var count int\n    for i := 1; i < n; i++ {\n\
    \        if (i % 11 == 0 || i % 13 == 0) && i % 10 == 7 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpgfsuy0_g_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpgfsuy0_g_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpgfsuy0_g_test.go:49:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpgfsuy0_g_test.go:49: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075156
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return fizz_buzz_recur(n,\
    \ 0)\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6qio_88s_test.go:16:12: undefined: fizz_buzz_recur

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075156
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Fill me\
    \ in!\n    return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpe1c6dew8_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpe1c6dew8_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpe1c6dew8_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpe1c6dew8_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075157
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && is_contain_7(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxti08vl_test.go:18:44: undefined: is_contain_7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075156
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    divisors :=\
    \ []int{11, 13}\n    count := 0\n    for i := 0; i < n; i++ {\n        result\
    \ := true\n        for _, divisor := range divisors {\n            if i % divisor\
    \ != 0 {\n                result = false\n                break\n            }\n\
    \        }\n        if result {\n            fmt.Println(i)\n            count\
    \ += counter(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2z8ffmdg_test.go:28:22: undefined: counter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075157
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       var j int = i\n            for j > 0 {\n                if j % 10 == 7\
    \ {\n                    count++\n                }\n                j /= 10\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075158
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 7 {\n\
    \        return 0\n    }\n    count := 0\n    for i := 7; i < n; i++ {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n          \
    \      count++\n            }\n            if i / 10 % 10 == 7 {\n           \
    \     count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmp4agjaj8c_test.go:53: expected '%!s(int=192)', got '%!s(int=128)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmp4agjaj8c_test.go:53:\
    \ expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmp4agjaj8c_test.go:53: expected '%!s(int=8026)', got '%!s(int=3216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075158
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       // convert to string so we can loop over each char\n            str :=\
    \ fmt.Sprintf(\"%d\", i)\n            for _, char := range str {\n           \
    \     if char == '7' {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660075158
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var c int =\
    \ 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n \
    \                   c++\n                }\n            }\n        }\n    }\n\
    \    return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075158
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n     \
    \               count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074983
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var i int =\
    \ 1\n    var sum int = 0\n    for ; i < n; i++ {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            if i % 10 == 7 {\n                sum++\n         \
    \   }\n            if i / 10 % 10 == 7 {\n                sum++\n            }\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n \
    \ candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpze9q7wjc_test.go:51: expected '%!s(int=192)', got '%!s(int=128)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpze9q7wjc_test.go:51:\
    \ expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpze9q7wjc_test.go:51: expected '%!s(int=8026)', got '%!s(int=3216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075158
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    return 0\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpd21vx2ui_test.go:39:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpd21vx2ui_test.go:39: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074982
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    c := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     if i % 10 == 7 {\n                c += 1\n            }\n            if\
    \ i / 10 == 7 {\n                c += 1\n            }\n        }\n    }\n   \
    \ return c\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmptzz5kf_f_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmptzz5kf_f_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmptzz5kf_f_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmptzz5kf_f_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075158
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var sum int\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       sum += CountDigit(i, 7)\n        }\n    }\n    return sum\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthoi9q6s_test.go:19:20: undefined: CountDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075158
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    ans := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n     \
    \               ans++\n                }\n            }\n        }\n    }\n  \
    \  return ans\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075158
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var result\
    \ int = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            fmt.Println(i)\n            result += i\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: '11

    13

    22

    26

    33

    39

    44

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    88

    91

    99

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    88

    91

    99

    104

    110

    117

    121

    130

    132

    143

    154

    156

    165

    169

    176

    182

    187

    195

    198

    11

    13

    22

    26

    33

    39

    44

    52

    55

    65

    66

    77

    78

    88

    91

    99

    104

    110

    117

    121

    130

    132

    143

    154

    156

    165

    169

    176

    182

    187

    195

    198

    208

    209

    220

    221

    231

    234

    242

    247

    253

    260

    264

    273

    275

    286

    297

    299

    308

    312

    319

    325

    330

    338

    341

    351

    352

    363

    364

    374

    377

    385

    390

    396

    403

    407

    416

    418

    429

    440

    442

    451

    455

    462

    468

    473

    481

    484

    494

    495

    506

    507

    517

    520

    528

    533

    539

    546

    550

    559

    561

    572

    583

    585

    594

    598

    605

    611

    616

    624

    627

    637

    638

    649

    650

    660

    663

    671

    676

    682

    689

    693

    702

    704

    715

    726

    728

    737

    741

    748

    754

    759

    767

    770

    780

    781

    792

    793

    803

    806

    814

    819

    825

    832

    836

    845

    847

    858

    869

    871

    880

    884

    891

    897

    902

    910

    913

    923

    924

    935

    936

    946

    949

    957

    962

    968

    975

    979

    988

    990

    1001

    1012

    1014

    1023

    1027

    1034

    1040

    1045

    1053

    1056

    1066

    1067

    1078

    1079

    1089

    1092

    1100

    1105

    1111

    1118

    1122

    1131

    1133

    1144

    1155

    1157

    1166

    1170

    1177

    1183

    1188

    1196

    1199

    1209

    1210

    1221

    1222

    1232

    1235

    1243

    1248

    1254

    1261

    1265

    1274

    1276

    1287

    1298

    1300

    1309

    1313

    1320

    1326

    1331

    1339

    1342

    1352

    1353

    1364

    1365

    1375

    1378

    1386

    1391

    1397

    1404

    1408

    1417

    1419

    1430

    1441

    1443

    1452

    1456

    1463

    1469

    1474

    1482

    1485

    1495

    1496

    1507

    1508

    1518

    1521

    1529

    1534

    1540

    1547

    1551

    1560

    1562

    1573

    1584

    1586

    1595

    1599

    1606

    1612

    1617

    1625

    1628

    1638

    1639

    1650

    1651

    1661

    1664

    1672

    1677

    1683

    1690

    1694

    1703

    1705

    1716

    1727

    1729

    1738

    1742

    1749

    1755

    1760

    1768

    1771

    1781

    1782

    1793

    1794

    1804

    1807

    1815

    1820

    1826

    1833

    1837

    1846

    1848

    1859

    1870

    1872

    1881

    1885

    1892

    1898

    1903

    1911

    1914

    1924

    1925

    1936

    1937

    1947

    1950

    1958

    1963

    1969

    1976

    1980

    1989

    1991

    2002

    2013

    2015

    2024

    2028

    2035

    2041

    2046

    2054

    2057

    2067

    2068

    2079

    2080

    2090

    2093

    2101

    2106

    2112

    2119

    2123

    2132

    2134

    2145

    2156

    2158

    2167

    2171

    2178

    2184

    2189

    2197

    2200

    2210

    2211

    2222

    2223

    2233

    2236

    2244

    2249

    2255

    2262

    2266

    2275

    2277

    2288

    2299

    2301

    2310

    2314

    2321

    2327

    2332

    2340

    2343

    2353

    2354

    2365

    2366

    2376

    2379

    2387

    2392

    2398

    2405

    2409

    2418

    2420

    2431

    2442

    2444

    245'
  timestamp: 1660075158
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    var mod11 int = 0\n    var mod13 int = 0\n    for i := 1; i < n; i++\
    \ {\n        mod11 = i % 11\n        mod13 = i % 13\n        if mod11 == 0 ||\
    \ mod13 == 0 {\n            count = count + mod11 + mod13\n        }\n    }\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=0)', got '%!s(int=44)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmpe5nlq6xi_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=78)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=3)', got '%!s(int=79)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmpe5nlq6xi_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=100)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=6)', got '%!s(int=188)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpe5nlq6xi_test.go:49:\
    \ expected '%!s(int=192)', got '%!s(int=3724)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpe5nlq6xi_test.go:49: expected '%!s(int=639)', got '%!s(int=9310)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpe5nlq6xi_test.go:49:\
    \ expected '%!s(int=8026)', got '%!s(int=93006)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075158
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && contains7(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyj5bcq6k_test.go:18:44: undefined: contains7

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075158
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    total := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if digit\
    \ == '7' {\n                    total += 1\n                }\n            }\n\
    \        }\n    }\n    return total\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n\
    \  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075159
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            for _, digit := range fmt.Sprintf(\"%d\", i) {\n                if\
    \ string(digit) == \"7\" {\n                    count++\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660075159
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            fmt.Println(i)\n            fmt.Println(countSevens(i))\n       \
    \     count += countSevens(i)\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cg5lwem_test.go:20:25: undefined: countSevens

    /tmp/tmp4cg5lwem_test.go:21:22: undefined: countSevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075158
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       if i % 10 == 7 {\n                count += 1\n            }\n        \
    \    if i > 10 && i / 10 % 10 == 7 {\n                count += 1\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T)\
    \ {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(50),\
    \ expected: 0 },\n     { actual: candidate(78), expected: 2 },\n     { actual:\
    \ candidate(79), expected: 3 },\n     { actual: candidate(100), expected: 3 },\n\
    \     { actual: candidate(200), expected: 6 },\n     { actual: candidate(4000),\
    \ expected: 192 },\n     { actual: candidate(10000), expected: 639 },\n     {\
    \ actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpvf5xbum2_test.go:50: expected '%!s(int=192)', got '%!s(int=128)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpvf5xbum2_test.go:50:\
    \ expected '%!s(int=639)', got '%!s(int=320)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpvf5xbum2_test.go:50: expected '%!s(int=8026)', got '%!s(int=3216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075159
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    for n <= 0\
    \ {\n        return -1\n    }\n    count := 0\n    for i := 1; i < n; i++ {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            count += i / 7\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__0\
    \ (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=0)', got '%!s(int=23)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__1 (0.00s)\n        tmp8nbz2idm_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__2\
    \ (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=3)', got '%!s(int=77)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__3 (0.00s)\n        tmp8nbz2idm_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=116)'\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=6)', got '%!s(int=457)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmp8nbz2idm_test.go:48:\
    \ expected '%!s(int=192)', got '%!s(int=183622)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmp8nbz2idm_test.go:48: expected '%!s(int=639)', got '%!s(int=1149745)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmp8nbz2idm_test.go:48:\
    \ expected '%!s(int=8026)', got '%!s(int=114872280)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075159
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     r += number_of_sevens(i)\n        }\n    }\n    return r\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjog119f3_test.go:19:18: undefined: number_of_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075159
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && seven_count(i)\
    \ > 0 {\n            count += seven_count(i)\n        }\n    }\n    return count\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rci7gy3_test.go:18:44: undefined: seven_count

    /tmp/tmp_rci7gy3_test.go:19:22: undefined: seven_count

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075159
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       if i % 10 == 7 {\n                count++\n            }\n           \
    \ if i / 10 == 7 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__4\
    \ (0.00s)\n        tmpfu6tziy1_test.go:50: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__5 (0.00s)\n        tmpfu6tziy1_test.go:50:\
    \ expected '%!s(int=192)', got '%!s(int=66)'\n    --- FAIL: TestFizz_Buzz/test_num__6\
    \ (0.00s)\n        tmpfu6tziy1_test.go:50: expected '%!s(int=639)', got '%!s(int=163)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__7 (0.00s)\n        tmpfu6tziy1_test.go:50:\
    \ expected '%!s(int=8026)', got '%!s(int=1610)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074983
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // TODO\n \
    \   return 0\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual:\
    \ candidate(78), expected: 2 },\n     { actual: candidate(79), expected: 3 },\n\
    \     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmprgsicghp_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmprgsicghp_test.go:40:\
    \ expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=192)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmprgsicghp_test.go:40:\
    \ expected '%!s(int=639)', got '%!s(int=0)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmprgsicghp_test.go:40: expected '%!s(int=8026)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    r := 0\n  \
    \  for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     for t := i; t > 0; t /= 10 {\n                if t % 10 == 7 {\n       \
    \             r++\n                }\n            }\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075159
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var r int\n\
    \    for i := 1; i < n; i++ {\n        if (i % 11 == 0 || i % 13 == 0) && fmt.Sprintf(\"\
    %d\", i).Contains(\"7\") {\n            r++\n        }\n    }\n    return r\n\
    }\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
    \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual:\
    \ candidate(100), expected: 3 },\n     { actual: candidate(200), expected: 6 },\n\
    \     { actual: candidate(4000), expected: 192 },\n     { actual: candidate(10000),\
    \ expected: 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphxzdn8e2_test.go:18:65: fmt.Sprintf("%d", i).Contains undefined (type
    string has no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075159
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for _, v := range fmt.Sprintf(\"%d\", i) {\n                if v == '7'\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate\
    \ := fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074983
- exit_code: 1
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\n\
    \    for x := 0; x < n; x++ {\n        if (x % 11 == 0 || x % 13 == 0) && x %\
    \ 10 == 7 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFizz_Buzz (0.00s)\n    --- FAIL: TestFizz_Buzz/test_num__1\
    \ (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__2 (0.00s)\n        tmpde9_yhwy_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFizz_Buzz/test_num__3\
    \ (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__4 (0.00s)\n        tmpde9_yhwy_test.go:45:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFizz_Buzz/test_num__5\
    \ (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=192)', got '%!s(int=64)'\n\
    \    --- FAIL: TestFizz_Buzz/test_num__6 (0.00s)\n        tmpde9_yhwy_test.go:45:\
    \ expected '%!s(int=639)', got '%!s(int=161)'\n    --- FAIL: TestFizz_Buzz/test_num__7\
    \ (0.00s)\n        tmpde9_yhwy_test.go:45: expected '%!s(int=8026)', got '%!s(int=1608)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075159
- exit_code: null
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    if n < 11 {\n\
    \        return 0\n    }\n    if n < 13 {\n        return fizz_buzz(n - 1)\n \
    \   }\n    return fizz_buzz(n - 11) + fizz_buzz(n - 13) + 1\n}\n\nfunc TestFizz_Buzz(t\
    \ *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(50), expected: 0 },\n     { actual: candidate(78), expected: 2 },\n\
    \     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075172
- exit_code: 0
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            for j := i; j > 0; j /= 10 {\n                if j % 10 == 7 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestFizz_Buzz(t *testing.T) {\n  candidate :=\
    \ fizz_buzz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(50), expected: 0 },\n     {\
    \ actual: candidate(78), expected: 2 },\n     { actual: candidate(79), expected:\
    \ 3 },\n     { actual: candidate(100), expected: 3 },\n     { actual: candidate(200),\
    \ expected: 6 },\n     { actual: candidate(4000), expected: 192 },\n     { actual:\
    \ candidate(10000), expected: 639 },\n     { actual: candidate(100000), expected:\
    \ 8026 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075159
- exit_code: 2
  program: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    count := 0\n\
    \    for i := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       count += number_of_sevens(i)\n        }\n    }\n    return count\n}\n\n\
    func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78), expected:\
    \ 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
    \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
    \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
    \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5iag0wbw_test.go:19:22: undefined: number_of_sevens

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075159
