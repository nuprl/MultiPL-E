name: HumanEval_151_double_the_difference
language: go_test.go
prompt: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n//\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
  \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
  // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64)\
  \ int {\n"
tests: "func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n  \
  \   { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1,\
  \ 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}),\
  \ expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected:\
  \ 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n  \
  \   { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0,\
  \ 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var sum int\n    for _, n := range lst {\n        if int(n) !=\
    \ n || n < 0 {\n            continue\n        }\n        sum += int(n) * int(n)\n\
    \    }\n    return sum\n}\n", "    var sum float64\n    for _, x := range lst\
    \ {\n        if x == int(x) && x > 0 {\n            sum += x*x\n        }\n  \
    \  }\n    return int(sum)\n}\n", "    return 0\n}\n", "    return 0\n}\n", " \
    \   return -1\n}\n", "    if len(lst) == 0 {\n        return 0\n    }\n    var\
    \ oddsum int\n    for _, v := range lst {\n        if (int(v) % 2 != 0) && (v\
    \ >= 0) {\n            oddsum += int(v) * int(v)\n        }\n    }\n    return\
    \ oddsum * 2\n}\n", "    // write a body for this function.\n    return 0\n}\n",
  "    // YOUR CODE HERE\n    return 0\n}\n", "    var sum, total int\n    for _,\
    \ value := range lst {\n        if (value % 2 == 1 && value > 0) {\n         \
    \   sum += value * value\n        }\n    }\n    total = sum * 2\n    return total\n\
    }\n", "    squares, sum := make([]int, 0), 0\n    for _, num := range lst {\n\
    \        if num > 0 && num == float64(int(num)) {\n            squares = append(squares,\
    \ int(num * num))\n        }\n    }\n    for _, val := range squares {\n     \
    \   sum += val\n    }\n    return sum\n}\n", "    var squared_sum int = 0\n  \
    \  for _, num := range lst {\n        if num > 0 && num == float64(int(num)) {\n\
    \            if int(num) % 2 == 1 {\n                squared_sum += int(num) *\
    \ int(num)\n            }\n        }\n    }\n    return squared_sum * 2\n}\n",
  "    var sum int\n    for _, num := range lst {\n        if int(num) > 0 && float64(int(num))\
    \ == num {\n            if int(num) % 2 == 1 {\n                sum += int(num)\
    \ * int(num)\n            }\n        }\n    }\n    return sum * 2\n}\n", "   \
    \ return -1\n}\n", "    return -1\n}\n", "\treturn 0\n}\n", "    return 0\n}\n",
  "    var sum int\n    for _, i := range lst {\n        if i > 0 && float64(int(i))\
    \ == i {\n            if int(i) % 2 == 1 {\n                sum += int(i) * int(i)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    sum := 0\n  \
    \  for _, val := range lst {\n        if val > 0 && int(val) == val {\n      \
    \      sum += int(val) * int(val)\n        }\n    }\n    return sum * 2\n}\n",
  "    sum := 0\n    for _, num := range lst {\n        if float64(int(num)) == num\
    \ && num > 0 {\n            sum += int(num) * int(num)\n        }\n    }\n   \
    \ return sum * 2\n}\n", "    // REPLACE pass with your code\n    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
