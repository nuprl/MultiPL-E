name: HumanEval_151_double_the_difference
language: go_test.go
prompt: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n//\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
  \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
  // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64)\
  \ int {\n"
tests: "func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n  \
  \   { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1,\
  \ 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}),\
  \ expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected:\
  \ 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n  \
  \   { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0,\
  \ 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var sum int\n    for _, n := range lst {\n        if int(n) !=\
    \ n || n < 0 {\n            continue\n        }\n        sum += int(n) * int(n)\n\
    \    }\n    return sum\n}\n", "    var sum float64\n    for _, x := range lst\
    \ {\n        if x == int(x) && x > 0 {\n            sum += x*x\n        }\n  \
    \  }\n    return int(sum)\n}\n", "    return 0\n}\n", "    return 0\n}\n", " \
    \   return -1\n}\n", "    if len(lst) == 0 {\n        return 0\n    }\n    var\
    \ oddsum int\n    for _, v := range lst {\n        if (int(v) % 2 != 0) && (v\
    \ >= 0) {\n            oddsum += int(v) * int(v)\n        }\n    }\n    return\
    \ oddsum * 2\n}\n", "    // write a body for this function.\n    return 0\n}\n",
  "    // YOUR CODE HERE\n    return 0\n}\n", "    var sum, total int\n    for _,\
    \ value := range lst {\n        if (value % 2 == 1 && value > 0) {\n         \
    \   sum += value * value\n        }\n    }\n    total = sum * 2\n    return total\n\
    }\n", "    squares, sum := make([]int, 0), 0\n    for _, num := range lst {\n\
    \        if num > 0 && num == float64(int(num)) {\n            squares = append(squares,\
    \ int(num * num))\n        }\n    }\n    for _, val := range squares {\n     \
    \   sum += val\n    }\n    return sum\n}\n", "    var squared_sum int = 0\n  \
    \  for _, num := range lst {\n        if num > 0 && num == float64(int(num)) {\n\
    \            if int(num) % 2 == 1 {\n                squared_sum += int(num) *\
    \ int(num)\n            }\n        }\n    }\n    return squared_sum * 2\n}\n",
  "    var sum int\n    for _, num := range lst {\n        if int(num) > 0 && float64(int(num))\
    \ == num {\n            if int(num) % 2 == 1 {\n                sum += int(num)\
    \ * int(num)\n            }\n        }\n    }\n    return sum * 2\n}\n", "   \
    \ return -1\n}\n", "    return -1\n}\n", "\treturn 0\n}\n", "    return 0\n}\n",
  "    var sum int\n    for _, i := range lst {\n        if i > 0 && float64(int(i))\
    \ == i {\n            if int(i) % 2 == 1 {\n                sum += int(i) * int(i)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    sum := 0\n  \
    \  for _, val := range lst {\n        if val > 0 && int(val) == val {\n      \
    \      sum += int(val) * int(val)\n        }\n    }\n    return sum * 2\n}\n",
  "    sum := 0\n    for _, num := range lst {\n        if float64(int(num)) == num\
    \ && num > 0 {\n            sum += int(num) * int(num)\n        }\n    }\n   \
    \ return sum * 2\n}\n", "    // REPLACE pass with your code\n    return 0\n}\n",
  "    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    return 0\n\
    }\n", "    /* Your code goes here */\n    var pos, neg float64\n    for _, x :=\
    \ range lst {\n        switch {\n        case x > 0:\n            pos += x\n \
    \       case x < 0:\n            neg += x\n        }\n    }\n    return int(2\
    \ * (pos + neg))\n}\n", "    // your code here\n    var ret int = 0\n    for _,v\
    \ := range lst {\n        if v >= 0 && v == float64(int(v)) {\n            if\
    \ int(v) % 2 == 1 {\n                ret += int(v * v)\n            }\n      \
    \  }\n    }\n    return ret\n}\n", "    return 0\n}\n", "    var result float64\
    \ = 0\n    for _, v := range lst {\n        if int(v) % 2 != 0 && v > 0 {\n  \
    \          result += v * v\n        }\n    }\n    return int(result)\n}\n", " \
    \   var (\n        total int\n        length int\n    )\n    length = len(lst)\n\
    \    if length == 0 {\n        return 0\n    }\n    for i := 0; i < length; i++\
    \ {\n        if lst[i] >= 0 && lst[i] == float64(int(lst[i])) {\n            if\
    \ int(lst[i]) % 2 == 1 {\n                total += int(lst[i])\n            }\n\
    \        }\n    }\n    return total * 2\n}\n", "    return 0\n}\n", "    return\
    \ 0\n}\n", "    sum := 0\n    for _, v := range lst {\n        if v > 0 && v ==\
    \ float64(int(v)) {\n            if int(v) % 2 == 1 {\n                sum +=\
    \ int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n}\n",
  "    // Your code here\n    return 0\n}\n", "    return 0\n}\n", "    return int(float64(3)\
    \ * float64(3))\n}\n", "    var result float64\n    for _, v := range lst {\n\
    \        fmt.Println(v)\n        if v > 0 && v%1 == 0 {\n            result +=\
    \ v * v\n        }\n    }\n    return int(result)\n}\n", "    // +++your code\
    \ here+++\n    return 0\n}\n", "    var total int = 0\n    for _, num := range\
    \ lst {\n        if int(num)%2 == 1 {\n            total += int(num*num)\n   \
    \     }\n    }\n    return total*2\n}\n", "    // +++your code here+++\n    return\
    \ 0\n}\n", "    var sum int\n    for _, f := range lst {\n        if f >= 0 &&\
    \ float64(int(f)) == f {\n            if int(f) % 2 == 1 {\n                sum\
    \ += int(f) * int(f)\n            }\n        }\n    }\n    return sum * 2\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    sum := 0\n    for _, num := range\
    \ lst {\n        if int(num) % 2 == 1 {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n", "    var sum int = 0\n    for _,\
    \ num := range lst {\n        if num != 0 && (num-math.Floor(num)) == 0 && num\
    \ > 0 {\n            sum += (int(num)*int(num))\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, x := range lst {\n        if x == float64(int(x))\
    \ && x > 0 {\n            if x % 2 == 1 {\n                sum += int(x * x)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    // ints := make([]int,\
    \ len(lst))\n    // for i, v := range lst {\n    //     ints[i] = int(v)\n   \
    \ // }\n    ints := toInt(lst)\n    sum := 0\n    for _, v := range ints {\n \
    \       if v > 0 && isOdd(v) {\n            sum += v*v\n        }\n    }\n   \
    \ return 2*sum\n}\n", "    // * Your code here *\n    return 0\n}\n", "    res\
    \ := 0\n    for _, x := range lst {\n        if x > 0 && x == float64(int(x))\
    \ {\n            res += int(x) * int(x)\n        }\n    }\n    return res * 2\n\
    }\n", "    var sum int\n    for _, n := range lst {\n        n = n * n\n     \
    \   fmt.Println(n)\n        if int(n) % 2 == 1 {\n            sum += int(n)\n\
    \        }\n    }\n    return sum\n}\n", "    // How do you check if a number\
    \ is odd or even?\n    // If you divide it by 2 and the remainder is 1, it's odd.\n\
    \    // Use the modulo operator to find the remainder.\n    // So for example,\
    \ 1 % 2 == 1, so 1 is odd.\n    // 2 % 2 == 0, so 2 is even.\n    // 3 % 2 ==\
    \ 1, so 3 is odd.\n    // 4 % 2 == 0, so 4 is even.\n    // 5 % 2 == 1, so 5 is\
    \ odd.\n    // To check if a number is not an integer, check if its\n    // absolute\
    \ value is less than 0.000001 away from an integer.\n    // If a list is empty,\
    \ its length is 0.\n    // Use a \"for\" loop to loop through the list.\n    return\
    \ 0\n}\n", "\tvar sum, diff int = 0, 0\n\tfor _,v := range lst {\n\t\tif v - float64(int(v))\
    \ == 0 {\n\t\t\tif v > 0 {\n\t\t\t\tif int(v) % 2 == 1 {\n\t\t\t\t\tsum += int(v)\
    \ * int(v)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdiff = sum - int(lst[0])\n\treturn\
    \ diff * 2\n}\n", "    return 0\n}\n", "\treturn 0\n}\n", "    var sum_squares\
    \ int = 0\n    for _, e := range lst {\n        if int(e) % 2 == 1 {\n       \
    \     sum_squares += int(e) * int(e)\n        }\n    }\n    return sum_squares\
    \ * 2\n}\n", "    res := 0\n    for _, v := range lst {\n        if v > 0 && v\
    \ == float64(int(v)) {\n            res += int(v) * int(v)\n        }\n    }\n\
    \    return res * 2\n}\n", "    sum := 0\n    for _, num := range lst {\n    \
    \    if int(num) == num && num > 0 {\n            if int(num) % 2 == 1 {\n   \
    \             sum += int(num) * int(num)\n            }\n        }\n    }\n  \
    \  return sum * 2\n}\n", "    // your code here\n    return 0\n}\n", "    var\
    \ sum int = 0\n    for _, n := range lst {\n        if n > 0 && int(n) == n {\n\
    \            if int(n) % 2 == 1 {\n                sum += int(n) * int(n)\n  \
    \          }\n        }\n    }\n    return sum * 2\n}\n", "    // YOUR CODE HERE\n\
    \    res := 0\n    for _, v := range lst {\n        if v > 0 && int(v) == v {\n\
    \            if int(v) % 2 == 1 {\n                res += int(v * v)\n       \
    \     }\n        }\n    }\n    return res * 2\n}\n", "    sum := 0\n    for _,\
    \ x := range lst {\n        i := int(x)\n        if x == float64(i) && i >= 0\
    \ && i % 2 == 1 {\n            sum += i * i\n        }\n    }\n    return sum\
    \ * 2\n}\n", "    var odd_squares float64 = 0\n    for _, v := range lst {\n \
    \       if v < 0 {\n            continue\n        }\n        var v_mod float64\
    \ = v % 2\n        if v_mod == 1 || v_mod == -1 {\n            odd_squares +=\
    \ v*v\n        }\n    }\n    return int(odd_squares * 2)\n}\n", "    var sum int\n\
    \    for _, value := range lst {\n        if int(value) % 2 != 0 && value > 0\
    \ {\n            sum += int(value) * int(value)\n        }\n    }\n    return\
    \ sum * 2\n}\n", "    total := 0\n\n    for _, n := range lst {\n        if n\
    \ > 0 && n == float64(int(n)) {\n            if n % 2 == 1 {\n               \
    \ total += int(n * n)\n            }\n        }\n    }\n\n    return total * 2\n\
    }\n", "    sum := 0\n    for _, n := range lst {\n        if n > 0 && n == float64(int(n))\
    \ {\n            if n % 2 == 1 {\n                sum += int(n) * int(n)\n   \
    \         }\n        }\n    }\n    return sum * 2\n}\n", "    sum := 0\n    for\
    \ _, v := range lst {\n        if v != 0 && v != int(v) {\n            continue\n\
    \        }\n        if v != 0 && v < 0 {\n            continue\n        }\n  \
    \      sum += int(v) * int(v)\n    }\n    return sum\n}\n", "    return 0\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] < 0 {\n            lst[i] = 0\n        }\n    }\n    odd_sum\
    \ := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == float64(int(lst[i]))\
    \ {\n            if int(lst[i]) % 2 == 1 {\n                odd_sum += int(lst[i])\
    \ * int(lst[i])\n            }\n        }\n    }\n    return odd_sum * 2\n}\n",
  "\tvar squares, sum int\n\tfor _, num := range lst {\n\t\tif num >= 0 && num ==\
    \ float64(int(num)) {\n\t\t\tsum += int(num)\n\t\t\tsquares += int(num) * int(num)\n\
    \t\t}\n\t}\n\treturn 2 * (squares - sum)\n}\n", "    var sum float64 = 0\n   \
    \ var square float64 = 0\n    for _, value := range lst {\n        if (value %\
    \ 2 != 0) && (value > 0) {\n            square = value * value\n            sum\
    \ += square\n        }\n    }\n    return int(sum * 2)\n}\n", "    return 0\n\
    }\n", "    sum := 0\n    l_len := len(lst)\n    for i := 0; i < l_len; i++ {\n\
    \        num := lst[i]\n        if num > 0 && num == float64(int(num)) {\n   \
    \         sum += int(num) * int(num)\n        }\n    }\n    return 2 * sum\n}\n",
  "    var sum_squares_odd int\n    for _, i := range lst {\n        if is_odd(i)\
    \ && is_not_negative(i) && is_integer(i) {\n            sum_squares_odd += square(int(i))\n\
    \        }\n    }\n    if len(lst) >= 2 {\n        return (2 * (sum_squares_odd))\n\
    \    }\n    return 0\n}\n", "    var odd_square_sum = 0\n    for _, i := range\
    \ lst {\n        if i > 0 && i == float64(int(i)) {\n            if int(i) % 2\
    \ == 1 {\n                odd_square_sum += int(i) * int(i)\n            }\n \
    \       }\n    }\n    return 2 * odd_square_sum\n}\n", "    diff_double := 0\n\
    \    for _, elt := range lst {\n        if elt > 0 && elt == float64(int(elt))\
    \ {\n            diff_double += int(elt) * int(elt)\n        }\n    }\n    return\
    \ diff_double\n}\n", "    // +++your code here+++\n    return 0\n}\n", "    var\
    \ squares []float64\n    for _, i := range lst {\n        if i >= 0 && i == float64(int(i))\
    \ {\n            squares = append(squares, i * i)\n        }\n    }\n    if len(squares)\
    \ > 0 {\n        return int(squares[0] - squares[len(squares) - 1])\n    }\n \
    \   return 0\n}\n", "    var result int = 0\n    for _, value := range lst {\n\
    \        if value > 0 && float64(int(value)) == value {\n            if int(value)\
    \ % 2 == 1 {\n                result += int(value) * int(value)\n            }\n\
    \        }\n    }\n    return result * 2\n}\n", "\t\n\tvar odd_squares []float64\n\
    \t\n\tfor _, num := range lst {\n\t\tif num >= 0 && num == float64(int(num)) {\n\
    \t\t\tif num % 2 == 1 {\n\t\t\t\todd_squares = append(odd_squares, num * num)\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn int(Sum(odd_squares))\n}\n", "    if lst ==\
    \ nil {\n        return 0\n    }\n    val := 0\n    for _, x := range lst {\n\
    \        if int(x)%2 == 1 {\n            val += int(x*x)\n        }\n    }\n \
    \   return val\n}\n", "    if len(lst) == 0 {\n        return 0\n    }\n\n   \
    \ var total float64\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v))\
    \ {\n            total += v * v\n        }\n    }\n\n    return int(total * 2)\n\
    }\n", "    // TODO: complete the function body\n    return 0\n}\n", "    var res\
    \ int\n    for _, num := range lst {\n        if num == float64(int(num)) && num\
    \ > 0 {\n            res += int(num * num)\n        }\n    }\n    return res *\
    \ 2\n}\n", "\treturn 0\n}\n", "    // Start coding here\n    var n int\n    for\
    \ _, x := range lst {\n        if int(x) == x && x > 0 {\n            n += (int(x)\
    \ * int(x))\n        }\n    }\n    return n * 2\n}\n", "    var sum = 0\n    var\
    \ square = 0\n    for _, v := range lst {\n        if float64(int(v)) == v &&\
    \ v >= 0 {\n            sum += int(v)\n            square += int(v * v)\n    \
    \    }\n    }\n    return 2 * (sum * sum - square)\n}\n", "    var sum int\n \
    \   for _, i := range lst {\n        if i > 0 && int(i) == i {\n            if\
    \ int(i) % 2 == 1 {\n                sum += int(i) * int(i)\n            }\n \
    \       }\n    }\n    return sum * 2\n}\n", "    return 0\n}\n", "    result :=\
    \ 0\n    for _, val := range lst {\n        if int(val) == val && val >= 0 {\n\
    \            if int(val) % 2 == 1 {\n                result += int(val * val)\n\
    \            }\n        }\n    }\n    return result * 2\n}\n", "    sum := 0\n\
    \    for _, n := range lst {\n        if int(n) % 2 == 1 {\n            sum +=\
    \ int(n) * int(n)\n        }\n    }\n    return sum * 2\n}\n", "    return 0\n\
    }\n", "    res := 0\n    for _, val := range lst {\n        if val < 0 || float64(int(val))\
    \ != val {\n            continue\n        }\n        if int(val) % 2 == 1 {\n\
    \            res += int(val * val)\n        }\n    }\n    return res\n}\n", " \
    \   var total int\n    for _, value := range lst {\n        if value > 0 && value\
    \ == float64(int(value)) {\n            if value % 2 != 0 {\n                total\
    \ += int(value) * int(value)\n            }\n        }\n    }\n    return total\
    \ * 2\n}\n", "    return sum_of_squares_of_odds(lst) * 2\n}\n", "    sum := 0\n\
    \    for _,n := range lst {\n        if n == 0 { continue }\n        if int(n)\
    \ == n && n > 0 {\n            sum += 2 * int(n) * int(n)\n        }\n    }\n\
    \    return sum\n}\n", "    var result int\n    for _, num := range lst {\n  \
    \      if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 ==\
    \ 1 {\n                result += int(num) * int(num)\n            }\n        }\n\
    \    }\n    return result * 2\n}\n", "    return 0\n}\n", "    var i float64\n\
    \    var sum float64\n    for i = 0; i < float64(len(lst)); i++ {\n        if\
    \ lst[int(i)] < 0 || lst[int(i)] != float64(int(lst[int(i)])) {\n            continue\n\
    \        }\n        if int(lst[int(i)]) % 2 == 1 {\n            sum += lst[int(i)]\
    \ * lst[int(i)]\n        }\n    }\n    return int(sum * 2)\n}\n", "    sum :=\
    \ 0\n    for _, f := range lst {\n        if f < 0 {\n            continue\n \
    \       }\n        // One possible incorrect solution:\n        // if int(f) %\
    \ 2 == 1 {\n        //     sum += int(f * f)\n        // }\n        i := int(f)\n\
    \        if i % 2 == 1 {\n            sum += i * i\n        }\n    }\n    return\
    \ sum\n}\n", "    var diff int = 0\n    for _, num := range lst {\n        if\
    \ num < 0 {\n            continue\n        }\n        if num != float64(int(num))\
    \ {\n            continue\n        }\n        if int(num) % 2 == 0 {\n       \
    \     continue\n        }\n        diff += int(num) * int(num)\n    }\n    return\
    \ diff * 2\n}\n", "    total := 0\n    for _, elem := range lst {\n        if\
    \ elem > 0 && elem == float64(int(elem)) {\n            if int(elem) % 2 == 1\
    \ {\n                total += int(elem) * int(elem)\n            }\n        }\n\
    \    }\n    return total * 2\n}\n", "    var result int\n    for _, num := range\
    \ lst {\n        if num < 0 || float64(int(num)) != num {\n            continue\n\
    \        }\n        result += int(num)\n    }\n    return result * 2\n}\n", " \
    \   sum := 0\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v))\
    \ {\n            sum += int(v*v)\n        }\n    }\n    return sum * 2\n}\n",
  "    // Your code here\n    return 0\n}\n", "    sum := 0\n    for _, x := range\
    \ lst {\n        if x > 0 && int(x) == x {\n            if x % 2 == 1 {\n    \
    \            sum += int(x * x)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n", "    var result int\n    for _, i := range lst {\n        if i <\
    \ 0 {\n            continue\n        }\n        var tmp = int(i) % 2\n       \
    \ if tmp == 1 {\n            result += int(i) * int(i)\n        }\n    }\n   \
    \ return result * 2\n}\n", "    // Implement me\n    return 0\n}\n", "    var\
    \ sum int\n    for _, n := range lst {\n        i := int(n)\n        if i > 0\
    \ && float64(i) == n {\n            sum += i * i\n        }\n    }\n    return\
    \ sum * 2\n}\n", "    ret := 0\n    for _, v := range lst {\n        if int(v)\
    \ < 0 {\n            continue\n        }\n\n        if int(v) % 2 == 1 {\n   \
    \         ret += int(v) * int(v)\n        }\n    }\n\n    return ret * 2\n}\n",
  "    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    var sum int\n\
    \    for _, x := range lst {\n        if x > 0 && int(x) == x {\n            sum\
    \ += int(x)\n        }\n    }\n    return sum\n}\n", "    var res int = 0\n  \
    \  for _, v := range lst {\n        if v > 0 && v == float64(int(v)) {\n     \
    \       res += int(v) * int(v)\n        }\n    }\n    return res * 2\n}\n", " \
    \   double_sum := 0\n    return double_sum\n}\n", "\tvar result float64 = 0\n\t\
    for _, n := range lst {\n\t\tif n > 0 && n == float64(int(n)) {\n\t\t\tresult\
    \ += (n*n)\n\t\t}\n\t}\n\treturn int(result)\n}\n", "    // Insert your code here\n\
    \    return 0\n}\n", "    return 0\n}\n", "    var result int\n    for _, value\
    \ := range lst {\n        if value > 0 && value == float64(int(value)) {\n   \
    \         result += int(value) * int(value)\n        }\n    }\n    return result\
    \ * 2\n}\n", "    res := 0\n    for _, x := range lst {\n        if x >= 0 &&\
    \ x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n                res\
    \ += int(x) * int(x)\n            }\n        }\n    }\n    return res * 2\n}\n",
  "    var sum float64 = 0.0\n    for _, x := range lst {\n        if x > 0 && float64(int(x))\
    \ == x {\n            if x % 2 != 0 {\n                sum += x * x\n        \
    \    }\n        }\n    }\n    return int(sum * 2)\n}\n", "    var result int =\
    \ 0\n    for _, value := range lst {\n        if value == float64(int(value))\
    \ && value > 0 {\n            result += int(value) * int(value)\n        }\n \
    \   }\n    return result * 2\n}\n", "    if len(lst) == 0 {\n        return 0\n\
    \    }\n    result := 0\n    for _, i := range lst {\n        if int(i) % 2 ==\
    \ 1 {\n            result += int(i) * int(i)\n        }\n    }\n    return result\
    \ * 2\n}\n", "    count := 0\n\n    for _, v := range lst {\n        if v < 0\
    \ || v != float64(int(v)) {\n            continue\n        }\n        if v % 2\
    \ == 1 {\n            count += int(v * v)\n        }\n    }\n\n    return count\
    \ * 2\n}\n", "    // +++your code here+++\n    return 0\n}\n", "    var result\
    \ int = 0\n    for _, number := range lst {\n        if int(number) == number\
    \ && number >= 0 {\n            result += int(number) * int(number)\n        }\n\
    \    }\n    return result\n}\n", "    var s int\n    var square float64\n    for\
    \ _, num := range lst {\n        square = num * num\n        s += int(square)\n\
    \    }\n    return s\n}\n", "    return 0\n}\n", "    var result int = 0\n   \
    \ var square int\n    for _, value := range lst {\n        if value > 0 && value\
    \ == float64(int(value)) {\n            square = int(value) * int(value)\n   \
    \         if square % 2 == 1 {\n                result += square\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    return 0\n}\n", "    var result int\n    for _, e := range lst\
    \ {\n        if e > 0 && float64(int(e)) == e {\n            if int(e) % 2 ==\
    \ 1 {\n                result += int(e * e)\n            }\n        }\n    }\n\
    \    return result * 2\n}\n", "    sum := 0\n    for _, x := range lst {\n   \
    \     if x > 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n \
    \               sum += int(x) * int(x)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n", "    sum := 0\n    for _, num := range lst {\n        if int(num)\
    \ == num && num > 0 {\n            sum += int(num) * int(num)\n        }\n   \
    \ }\n    return 2 * sum\n}\n", "    // Your code here\n    return 0\n}\n", " \
    \   var sum int = 0\n    for _, v := range lst {\n        if int(v) % 2 == 1 {\n\
    \            sum += int(v) * int(v)\n        }\n    }\n    return sum * 2\n}\n",
  "    sum := 0\n    for _, v := range lst {\n        if v < 0 || float64(int(v))\
    \ != v {\n            continue\n        }\n        if int(v) % 2 == 1 {\n    \
    \        sum += int(v) * int(v)\n        }\n    }\n    return sum * 2\n}\n", " \
    \   return 0\n}\n", "    var sum int = 0\n    for _, num := range lst {\n    \
    \    if int(num) % 2 == 1 {\n            sum += int(num) * int(num)\n        }\n\
    \    }\n    return sum * 2\n}\n", "    // >>> double_the_difference([]int{9, -2})\n\
    \    // 81\n    // YOUR CODE HERE\n    sum := 0.0\n    for _, n := range lst {\n\
    \        if int(n) % 2 == 1 {\n            sum += n\n        }\n    }\n    return\
    \ int(sum * sum)\n}\n", "    return 0\n}\n", "    var output float64\n    for\
    \ _, item := range lst {\n        if item%2 == 1 && item >= 0 {\n            output\
    \ += item * item\n        }\n    }\n    return int(output)\n}\n", "    total :=\
    \ 0\n    for _, n := range lst {\n        if n > 0 && n == float64(int(n)) {\n\
    \            total += int(n * n)\n        }\n    }\n    return total * 2\n}\n",
  "    return 0\n}\n", "    var s int\n    for _, v := range lst {\n        if v >=\
    \ 0 {\n            if v == int(v) {\n                if v%2 == 1 {\n         \
    \           s += int(v) * int(v)\n                }\n            }\n        }\n\
    \    }\n    return s * 2\n}\n", "    double_diff := 0\n\n    for _, num := range\
    \ lst {\n        if num < 0 {\n            continue\n        }\n\n        if num\
    \ == 0 {\n            continue\n        }\n\n        remainder := num - float64(int(num))\n\
    \        if remainder != 0 {\n            continue\n        }\n\n        if num\
    \ % 2 == 0 {\n            double_diff += int(num)\n        } else {\n        \
    \    double_diff += int(num) * int(num)\n        }\n    }\n\n    return double_diff\n\
    }\n", "    // Insert your code here\n    return 0\n}\n", "    var result int\n\
    \    for _, v := range lst {\n        if (v > 0) && (v == float64(int(v))) {\n\
    \            if int(v) % 2 == 1 {\n                result += int(v*v)\n      \
    \      }\n        }\n    }\n    return result * 2\n}\n", "    lstLen := len(lst)\n\
    \    if lstLen == 0 {\n        return 0\n    }\n\n    var sum int\n    for i :=\
    \ 0; i < lstLen; i++ {\n        if int(lst[i]) % 2 != 0 {\n            sum +=\
    \ int(lst[i]) * int(lst[i])\n        }\n    }\n\n    return sum * 2\n}\n", " \
    \   var sum int\n    for _, v := range lst {\n        if int(v)%2 == 1 {\n   \
    \         sum += int(v) * int(v)\n        }\n    }\n    return sum * 2\n}\n",
  "    var sum float64 = 0.0\n    for _, i := range lst {\n        if int(i)%2 ==\
    \ 1 {\n            sum += i*i\n        }\n    }\n    return int(sum)\n}\n", " \
    \   var result int = 0\n    for _, i := range lst {\n        if i > 0 && i % 1\
    \ == 0 {\n            result += int(i * i)\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return 0\n}\n", "    var square float64 = 0\n\
    \    var square_square float64 = 0\n    var sum float64 = 0\n    var count int\
    \ = 0\n    var double_diff int = 0\n    for _, n := range lst {\n        square\
    \ = n * n\n        if square > 0 {\n            sum += square\n            count++\n\
    \        }\n    }\n    for _, n := range lst {\n        square_square = n * n\
    \ * n * n\n        if square_square > 0 {\n            sum += square_square\n\
    \            count++\n        }\n    }\n    // If there are any numbers in the\
    \ list,\n    // double the difference between the sum of squares and the sum of\
    \ cubes.\n    if count > 0 {\n        double_diff = 2 * int(sum)\n    }\n    return\
    \ double_diff\n}\n", "    output := 0\n    for _, num := range lst {\n       \
    \ if num > 0 && num == float64(int(num)) {\n            output += int(num) * int(num)\n\
    \        }\n    }\n    return output\n}\n", "    sum := 0\n    for _, i := range\
    \ lst {\n        if i == 0 {\n            continue\n        }\n        if i <\
    \ 0 {\n            continue\n        }\n        if i != float64(int(i)) {\n  \
    \          continue\n        }\n        sum += (int(i) * int(i))\n    }\n    return\
    \ sum * 2\n}\n", "    fmt.Println(lst)\n    return 10\n}\n", "    if lst == nil\
    \ {\n        return 0\n    }\n    var result int\n    for _, n := range lst {\n\
    \        if n >= 0 && n == float64(int(n)) {\n            if n % 2 == 1 {\n  \
    \              result += int(n * n)\n            }\n        }\n    }\n    return\
    \ result * 2\n}\n", "    var squared_odds []float64\n    for _, number := range\
    \ lst {\n        if (int(number) % 2 != 0) && (number > 0) {\n            squared_odds\
    \ = append(squared_odds, number*number)\n        }\n    }\n    var total float64\n\
    \    for _, number := range squared_odds {\n        total += number\n    }\n \
    \   return int(total)\n}\n", "    // your code goes here\n    total := 0\n   \
    \ for _, item := range lst {\n        if item % 2 != 0 && item > 0 {\n       \
    \     total += int(item * item)\n        }\n    }\n    return total\n}\n", " \
    \   sum := 0\n    for _, value := range lst {\n        if value > 0 && int(value)\
    \ == value {\n            if int(value) % 2 == 1 {\n                sum += int(value)\
    \ * int(value)\n            }\n        }\n    }\n    sum *= 2\n    return sum\n\
    }\n", "    var sum int\n    for _, num := range lst {\n        if isOdd(num) {\n\
    \            sum += int(num) * int(num)\n        }\n    }\n    return sum * 2\n\
    }\n", "    // YOUR CODE HERE\n    return 0\n}\n", "    squares := 0\n    for _,\
    \ x := range lst {\n        if x > 0 && x == float64(int(x)) {\n            if\
    \ int(x) % 2 == 1 {\n                squares += int(x) * int(x)\n            }\n\
    \        }\n    }\n    return squares\n}\n", "    return 0\n}\n", "    var res\
    \ float64\n    for _, v := range lst {\n        if v >= 0 && float64(int(v)) ==\
    \ v {\n            res += (v * v)\n        }\n    }\n    return int(res)\n}\n",
  "    var result int\n    for _, number := range lst {\n        if int(number) ==\
    \ number && number > 0 {\n            result += int(number * number)\n       \
    \ }\n    }\n    return result * 2\n}\n", "    return 0\n}\n", "    var sum int\n\
    \    for _, value := range lst {\n        var square_value int\n        square_value\
    \ = int(value) * int(value)\n        if square_value % 2 == 1 {\n            sum\
    \ += square_value\n        }\n    }\n    return sum * 2\n}\n", "    var sum int\
    \ = 0\n    for _, v := range lst {\n        if v >= 0 && v == float64(int(v))\
    \ {\n            if int(v) % 2 == 1 {\n                sum += int(v) * int(v)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    sum := 0.0\n\
    \    // Make a copy of lst so we don't modify it.\n    cpy := make([]float64,\
    \ len(lst))\n    copy(cpy, lst)\n    for _, val := range cpy {\n        if val\
    \ > 0 {\n            if int(val) % 2 == 1 {\n                sum += val * val\n\
    \            }\n        }\n    }\n    return int(sum)\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    sum := 0\n    for _, x := range lst {\n     \
    \   if x > 0 && x == float64(int(x)) {\n            sum += int(x) * int(x)\n \
    \       }\n    }\n    return sum * 2\n}\n", "    total := 0\n    for _, v := range\
    \ lst {\n        if int(v) % 2 == 1 {\n            total += int(v) * int(v)\n\
    \        }\n    }\n    return total * 2\n}\n", "    // Your code here\n    return\
    \ 0\n}\n", "    return 0\n}\n", "    diff_sum := 0\n    for _, num := range lst\
    \ {\n        if num > 0 && int(num) == num {\n            // The number is a positive\
    \ integer\n            sqr := num * num\n            if sqr % 2 == 1 {\n     \
    \           // The square is odd\n                diff_sum += int(sqr)\n     \
    \       }\n        }\n    }\n    return diff_sum * 2\n}\n", "    odd := 0\n  \
    \  even := 0\n    for _, val := range lst {\n        if int(val) % 2 == 0 {\n\
    \            even += int(val)\n        } else {\n            odd += int(val)\n\
    \        }\n    }\n    return (odd - even) * 2\n}\n", "    sum := 0\n    for _,\
    \ value := range lst {\n        if value > 0 && float64(int(value)) == value {\n\
    \            if value % 2 == 1 {\n                sum += int(value * value)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    // Your code\
    \ here\n    return 0\n}\n", "    var sum,count int\n    var min,max float64\n\
    \    for _,v := range lst {\n        if v < 0 {\n            continue\n      \
    \  }\n        f,i := modf(v)\n        if f != 0 {\n            continue\n    \
    \    }\n        count++\n        if count == 1 {\n            min = v\n      \
    \      max = v\n        } else {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        sum += int(v)\n    }\n    if count == 0 {\n   \
    \     return 0\n    }\n    return (sum-min-max)*2\n}\n", "    sum := 0\n    for\
    \ _, el := range lst {\n        if el < 0 || el != float64(int(el)) {\n      \
    \      continue\n        }\n        if int(el) % 2 == 1 {\n            sum +=\
    \ int(el) * int(el)\n        }\n    }\n    return sum * 2\n}\n", "    var ret\
    \ float64 = 0.0\n    for _, x := range lst {\n        if x > 0 && float64(int(x))\
    \ == x {\n            x *= x\n            if x % 2 == 1 {\n                ret\
    \ += x\n            }\n        }\n    }\n    return int(ret)\n}\n", "\tvar sum\
    \ int\n\tfor _, v := range lst {\n\t\tif v >= 0 && v == float64(int(v)) {\n\t\t\
    \tsum += int(v) * int(v)\n\t\t}\n\t}\n\treturn sum * 2\n}\n", "    return 42\n\
    }\n", "    var sum int\n    for _, value := range lst {\n        if int(value)%2\
    \ == 1 {\n            sum += int(value)*int(value)\n        }\n    }\n    return\
    \ sum\n}\n", "    total := 0\n    for _, n := range lst {\n        if n == int(n)\
    \ && n > 0 {\n            if n%2 == 1 {\n                total += int(n) * int(n)\n\
    \            }\n        }\n    }\n    return 2 * total\n}\n", "    var result\
    \ int\n    for _, i := range lst {\n        if i > 0 && float64(int(i)) == i {\n\
    \            result += int(i) * int(i)\n        }\n    }\n    return result *\
    \ 2\n}\n", "    sum := 0\n    for _, val := range lst {\n        if (val < 0)\
    \ {\n            continue\n        }\n        if (val == 0) {\n            continue\n\
    \        }\n        if (val != float64(int(val))) {\n            continue\n  \
    \      }\n        if (val % 2 == 0) {\n            continue\n        }\n     \
    \   sum += int(val * val)\n    }\n    return sum\n}\n", "\tresult := 0\n\tfor\
    \ _, n := range lst {\n\t\tif int(n) % 2 == 1 {\n\t\t\tresult += int(n * n)\n\t\
    \t}\n\t}\n\treturn result * 2\n}\n", "    // Returns the given number squared\n\
    \    square := func(x float64) float64 {\n        return x * x\n    }\n\n    //\
    \ check for empty list\n    if len(lst) == 0 {\n        return 0\n    }\n\n  \
    \  // check for odd numbers, square them and add to sum\n    sum := 0.0\n    for\
    \ _, num := range lst {\n        if (num - 1) % 2 == 0 {\n            sum += square(num)\n\
    \        }\n    }\n\n    // return twice the sum of squares of odd numbers\n \
    \   return int(sum * 2)\n}\n", "    var result int\n    for _, num := range lst\
    \ {\n        if int(num) % 2 != 0 && num >= 0 {\n            result += int(num)\
    \ * int(num)\n        }\n    }\n    return result\n}\n", "    var n int\n    n\
    \ = 0\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v)) {\n\
    \            n += int(v * v)\n        }\n    }\n    return n\n}\n", "    sum :=\
    \ 0\n    for _, n := range lst {\n        n = n * n\n        if n < 0 {\n    \
    \        n = 0 - n\n        }\n        n = n - n % 2\n        sum += int(n)\n\
    \    }\n    return sum\n}\n", "    // YOUR CODE HERE\n    var result int = 0\n\
    \    for _, value := range lst {\n        if (value > 0 && value % 1 == 0) {\n\
    \            result += int(value) * int(value)\n        }\n    }\n    return result\n\
    }\n", "    var n int\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v))\
    \ {\n            n += (int(v) * int(v))\n        }\n    }\n    return 2 * n\n\
    }\n", "    return 0\n}\n", "    sum := 0\n    for _, v := range lst {\n      \
    \  if int(v)%2 == 1 {\n            sum += int(v)*int(v)\n        }\n    }\n  \
    \  return sum*2\n}\n", "    sum := 0\n    for _, num := range lst {\n        if\
    \ int(num) % 2 == 1 {\n            sum += int(num * num)\n        }\n    }\n \
    \   return sum * 2\n}\n", "    var diff_total int\n    var even_total int\n  \
    \  var odd_total int\n    for _, num := range lst {\n        if num % 2 == 0 {\n\
    \            even_total += int(num)\n        } else {\n            odd_total +=\
    \ int(num)\n        }\n    }\n    diff_total = even_total - odd_total\n    return\
    \ diff_total * 2\n}\n", "    var total int\n    for _, num := range lst {\n  \
    \      if num > 0 && num - float64(int(num)) == 0 {\n            if int(num) %\
    \ 2 == 1 {\n                total += int(num) * int(num)\n            }\n    \
    \    }\n    }\n    return total * 2\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
