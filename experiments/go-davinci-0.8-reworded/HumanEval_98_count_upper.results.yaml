language: go_test.go
name: HumanEval_98_count_upper
results:
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Initialize our counter.\n    count := 0\n\n    // Loop through the string,\
    \ incrementing counter by 1 for each uppercase vowel in even index.\n    for i,\
    \ r := range s {\n        if i % 2 == 0 && (r == 'A' || r == 'E' || r == 'I' ||\
    \ r == 'O' || r == 'U') {\n            count++\n        }\n    }\n\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    i := 0\n    for _, r := range s {\n        if 'A' <= r && r <= 'Z' && i %\
    \ 2 == 0 {\n            i++\n        }\n    }\n    return i\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpeslq3a8j_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmpeslq3a8j_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpeslq3a8j_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // TODO: Write your code here!\n    var count int\n    for i, r := range\
    \ s {\n        if i % 2 == 0 && r >= 'A' && r <= 'Z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpnk8kitlo_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpnk8kitlo_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpnk8kitlo_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    res := 0\n    for i, ch := range s {\n        if i % 2 == 0 && ch >= 'A'\
    \ && ch <= 'Z' {\n            res++\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp8jd6l19w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp8jd6l19w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp8jd6l19w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    n := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c\
    \ <= 'Z' {\n            n += 1\n        }\n    }\n    return n\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpwnev18cv_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpwnev18cv_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpwnev18cv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, _ := range s {\n        if i % 2 == 0 {\n        \
    \    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    c := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A' && r\
    \ <= 'Z' {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpxxifwpxr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpxxifwpxr_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpxxifwpxr_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // your code here\n    count := 0\n    for i, _ := range s {\n        if\
    \ i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpy3vx4n_s_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpy3vx4n_s_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    fmt.Println(len(s))\n    for i := 0; i < len(s); i++ {\n\
    \        if i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z' {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "6\n7\n4\n1\n1\n0\n4\n--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpjdus9tcy_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpjdus9tcy_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpjdus9tcy_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    output := 0\n    var even int = 0\n    var vowel string = \"AEIOU\"\n   \
    \ var caseVowel string = \"AEIOUaeiou\"\n    for _, c := range s {\n        if\
    \ even%2 == 0 {\n            if string(c) == string(caseVowel[vowel[even%5]-caseVowel[even%5]])\
    \ {\n                output += 1\n            }\n        }\n        even += 1\n\
    \    }\n    return output\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpc3pf8leb_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpc3pf8leb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpc3pf8leb_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpcl5lgusu_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpcl5lgusu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpcl5lgusu_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, char := range s {\n        if (i % 2 == 0) && (char\
    \ > 64) && (char < 91) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpbtdgsjfh_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpbtdgsjfh_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpbtdgsjfh_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    cnt := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A' &&\
    \ r <= 'Z' {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp5m0kair6_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp5m0kair6_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp5m0kair6_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar count int\n\tfor i, r := range s {\n\t\tif i % 2 == 0 && (r == 'A' || r\
    \ == 'E' || r == 'I' || r == 'O' || r == 'U') {\n\t\t\tcount++\n\t\t}\n\t}\n\t\
    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var result int\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmptumuaoai_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmptumuaoai_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmptumuaoai_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var c int = 0\n    for i,v := range s {\n        if v > 'A' && v < 'Z' &&\
    \ i % 2 == 0 {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpfyx1s8fh_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpfyx1s8fh_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpfyx1s8fh_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for index, character := range s {\n        if index % 2 ==\
    \ 0 && character >= 'A' && character <= 'Z' {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpq7jx00tu_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpq7jx00tu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpq7jx00tu_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var c int = 0\n    var i int = 0\n    var d int = 0\n    for i = 0; i < len(s);\
    \ i++ {\n        if i % 2 == 0 {\n            d = int(s[i])\n            if d\
    \ >= 65 && d <= 90 {\n                c++\n            }\n        }\n    }\n \
    \   return c\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpsx5q0fle_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpsx5q0fle_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpsx5q0fle_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    l := len(s)\n    vowels := map[string]bool{\"A\": true, \"E\": true, \"I\"\
    : true, \"O\": true, \"U\": true}\n    count := 0\n    for i := 0; i < l; i++\
    \ {\n        if (i % 2 == 0) && vowels[string(s[i])] {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := \"AEIOU\"\n    count := 0\n    for i, letter := range s {\n   \
    \     if i % 2 == 0 && string(letter) == strings.ToUpper(string(letter)) {\n \
    \           for _, v := range vowels {\n                if letter == v {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hxy8ry4_test.go:20:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpela99vby_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // CODE HERE\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n \
    \ candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp5xfmt5gu_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp5xfmt5gu_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp5xfmt5gu_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // aeiou\n    vowels := \"aeiou\"\n    count := 0\n    for i, c := range\
    \ s {\n        if (i%2) == 0 && (c >= 'A' && c <= 'Z') {\n            if strings.Contains(vowels,\
    \ strings.ToLower(string(c))) {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n \
    \ candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_1_e55e_test.go:22:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    upper := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            upper++\n        }\n    }\n    return upper\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp497awgf0_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp497awgf0_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp497awgf0_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for idx, char := range s {\n        // Check for even\n \
    \       if idx % 2 == 0 {\n            // Check for uppercase\n            if\
    \ char >= 'A' && char <= 'Z' {\n                count += 1\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl9k0qp6n_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl9k0qp6n_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl9k0qp6n_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    r := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c\
    \ <= 'Z' {\n            r += 1\n        }\n    }\n    return r\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpgv4o053j_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpgv4o053j_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpgv4o053j_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, c := range s {\n        if i % 2 == 0 && c\
    \ >= 'A' && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp0f3rrt11_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp0f3rrt11_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp0f3rrt11_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar count int\n\tfor i, c := range s {\n\t\tif i % 2 == 0 && string(c) == strings.ToUpper(string(c))\
    \ {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ygv9sdz_test.go:19:33: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    r := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c\
    \ <= 'Z' {\n            r += 1\n        }\n    }\n    return r\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpgv4o053j_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpgv4o053j_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpgv4o053j_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var result int\n    for i, r := range s {\n        if i % 2 == 0 && (r ==\
    \ 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U') {\n            result++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    r := 0\n    for i, c := range s {\n        if (i + 1) % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            r++\n        }\n    }\n    return r\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpd_7rieot_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpd_7rieot_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    if len(s) == 0 {\n        return 0\n    }\n    return count_upper_impl(s,\
    \ 0, 0)\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfsp5y7ib_test.go:20:12: undefined: count_upper_impl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if 'A' <= c && c <= 'Z' &&\
    \ i % 2 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpn22askmp_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpn22askmp_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpn22askmp_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // use a map, can probably be done with a array but it would be tedious\n\
    \    vowels := map[string]int{\n        \"A\": 0,\n        \"E\": 0,\n       \
    \ \"I\": 0,\n        \"O\": 0,\n        \"U\": 0,\n    }\n    for i, char := range\
    \ s {\n        // Add to count if it's a vowel, and if it's in the correct index\n\
    \        if _, ok := vowels[string(char)]; ok && i % 2 == 0 {\n            vowels[string(char)]++\n\
    \        }\n    }\n    // Add up all the vowel counts\n    total := 0\n    for\
    \ _, value := range vowels {\n        total += value\n    }\n    return total\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var sum int = 0\n    var ret = 0\n    for i, _ := range s {\n        if i\
    \ % 2 == 0 {\n            sum = int(s[i])\n            if sum >= 65 && sum <=\
    \ 90 {\n                ret++\n            }\n        }\n    }\n    return ret\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpjc4n1pm6_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpjc4n1pm6_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpjc4n1pm6_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    a := []rune(s)\n    count := 0\n    for i := 0; i < len(a); i++ {\n     \
    \   if i % 2 == 0 && a[i] >= 'A' && a[i] <= 'Z' {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmptlbdhpzv_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmptlbdhpzv_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmptlbdhpzv_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    if s == \"\" {\n        return 0\n    }\n    count := 0\n    for i, v :=\
    \ range s {\n        if i % 2 == 0 && v >= 'A' && v <= 'Z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp_ith6ma__test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp_ith6ma__test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp_ith6ma__test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar count int\n\tfor index, value := range s {\n\t\tif index % 2 == 0 && value\
    \ >= 'A' && value <= 'Z' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpa_y_kj1y_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpa_y_kj1y_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpa_y_kj1y_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, char := range s {\n        if i % 2 == 0 && char\
    \ >= 'A' && char <= 'Z' {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmplbno2qyy_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmplbno2qyy_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmplbno2qyy_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && (r == 'A'\
    \ || r == 'E' || r == 'I' || r == 'O' || r == 'U') {\n            count++\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var c int\n    for i, l := range s {\n        if i % 2 == 0 && is_upper(l)\
    \ {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwph4lunx_test.go:19:26: undefined: is_upper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if c > 64 && c < 91 &&\
    \ i % 2 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyyt9q0bg_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyyt9q0bg_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyyt9q0bg_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, r := range s {\n        if i % 2 == 0 && r\
    \ > 64 && r < 91 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpnyo2iulu_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpnyo2iulu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpnyo2iulu_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, l := range s {\n        if i % 2 == 0 && l >= 'A'\
    \ && l <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpdx4c1k8g_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpdx4c1k8g_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpdx4c1k8g_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    c := 0\n    for i,v := range s {\n        if i % 2 == 0 && v >= 'A' && v\
    \ <= 'Z' {\n            c += 1\n        }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpcar06qti_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpcar06qti_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpcar06qti_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, _ := range s {\n        if i % 2 == 0 {\n        \
    \    if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    r := 0\n    for i, c := range s {\n        if i % 2 == 0 && (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            r++\n        }\n\
    \    }\n    return r\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate :=\
    \ count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n\
    \     { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, char := range s {\n        if i % 2 == 0 && char >=\
    \ 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpijdhdvj9_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpijdhdvj9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpijdhdvj9_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        // is the character an uppercase\
    \ vowel and in an even position?\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') && i % 2 == 0 {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowel := \"AEIOU\"\n    count := 0\n    i := 0\n    for _, c := range s {\n\
    \        if i % 2 == 0 && strings.Contains(vowel, string(c)) {\n            count++\n\
    \        }\n        i++\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkmaf9az_test.go:21:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for index, char := range s {\n        if index % 2 ==\
    \ 0 && char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n \
    \   return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp943jivld_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp943jivld_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp943jivld_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    upper := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            upper++\n        }\n    }\n    return upper\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp497awgf0_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp497awgf0_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp497awgf0_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    even := true\n    for _, c := range s {\n        if even\
    \ {\n            // only count uppercase vowels\n            if c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                count++\n    \
    \        }\n        }\n        even = !even\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // TODO: replace the following line with your code\n    count := 0\n    for\
    \ i, ch := range s {\n        if i % 2 == 0 && ch >= 'A' && ch <= 'Z' {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpjuzc776r_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpjuzc776r_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpjuzc776r_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for idx, val := range s {\n        if idx % 2 == 0 && val\
    \ >= 'A' && val <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpt8u8hgkx_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpt8u8hgkx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpt8u8hgkx_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var upper_vowels int = 0\n    var i int = 0\n    var vowels string = \"AEIOU\"\
    \n    for _, letter := range s {\n        if i % 2 == 0 && vowels[i] == byte(letter)\
    \ {\n            upper_vowels += 1\n        }\n        i += 1\n    }\n    return\
    \ upper_vowels\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 5 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_upper(...)\n\t/tmp/tmpc4sfgcx7_test.go:21\n\
    command-line-arguments_test.TestCount_Upper(0x0?)\n\t/tmp/tmpc4sfgcx7_test.go:37\
    \ +0x84c\ntesting.tRunner(0xc0001924e0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Python version:\n    // return sum(c.isupper() for c in s[::2])\n    count\
    \ := 0\n    for i := 0; i < len(s); i+=2 {\n        if s[i] >= 'A' && s[i] <=\
    \ 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp25otqkjz_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp25otqkjz_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp25otqkjz_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    r := 0\n    for i, _ := range s {\n        if i % 2 == 0 {\n            if\
    \ s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n\
    \                r += 1\n            }\n        }\n    }\n    return r\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp6jfnuxth_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp6jfnuxth_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp6jfnuxth_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if 'A' <= c && c <= 'Z'\
    \ && i % 2 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp4xtohn69_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp4xtohn69_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp4xtohn69_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tcount := 0\n\tfor i, r := range s {\n\t\tswitch r {\n\t\tcase 'A', 'E', 'I',\
    \ 'O', 'U':\n\t\t\tif i % 2 == 0 {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, ch := range s {\n        if (i % 2 == 0) && (ch\
    \ >= 'A') && (ch <= 'Z') {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp541jxklp_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp541jxklp_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp541jxklp_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    total := 0\n    for i, char := range s {\n        if i % 2 == 0 && is_upper(char)\
    \ {\n            total += 1\n        }\n    }\n    return total\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg57en4xz_test.go:19:26: undefined: is_upper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var result int\n    for i, _ := range s {\n        if i % 2 == 0 {\n    \
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if (i % 2 == 0) && (c >= 'A')\
    \ && (c <= 'Z') {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmptid4dgmn_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmptid4dgmn_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmptid4dgmn_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar count int\n\tfor i, c := range s {\n\t\tif (c >= 'A' && c <= 'Z') && i%2\
    \ == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpslx48t7v_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpslx48t7v_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpslx48t7v_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar count int\n\tfor i, ch := range s {\n\t\tif i % 2 == 0 && ch >= 'A' && ch\
    \ <= 'Z' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpin4ahshy_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpin4ahshy_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpin4ahshy_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    counter := 0\n    for i, c := range s {\n        if i % 2 == 0 && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            counter++\n\
    \        }\n    }\n    return counter\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, c := range s {\n        if string(c) == \"\
    A\" || string(c) == \"E\" || string(c) == \"I\" || string(c) == \"O\" || string(c)\
    \ == \"U\" {\n            if i % 2 == 0 {\n                count += 1\n      \
    \      }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    res := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A' &&\
    \ v <= 'Z' {\n            res += 1\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpnd5o4qea_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpnd5o4qea_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpnd5o4qea_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Your code here\n    var count int\n    for index, char := range s {\n\
    \        if char >= 'A' && char <= 'Z' && index % 2 == 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpfhtfvgtf_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpfhtfvgtf_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpfhtfvgtf_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var num int\n    for i, a := range s {\n        if is_upper(a) && is_even(i)\
    \ {\n            num++\n        }\n    }\n    return num\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk3bbqc56_test.go:19:12: undefined: is_upper

    /tmp/tmpk3bbqc56_test.go:19:27: undefined: is_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vcount := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            vcount++\n        }\n    }\n    return vcount\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmptawgf29y_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmptawgf29y_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmptawgf29y_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var sum int = 0\n    for i, v := range s {\n        if i % 2 == 0 && v >=\
    \ 'A' && v <= 'Z' {\n            sum++\n        }\n    }\n    return sum\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpy87yunv__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpy87yunv__test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpy87yunv__test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    vowels := \"AEIOU\"\n    count := 0\n    for index, char := range s {\n \
    \       if (index % 2 == 0) && (vowels[char - 'A'] > 0) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\npanic: runtime error: index out of range\
    \ [32] with length 5 [recovered]\n\tpanic: runtime error: index out of range [32]\
    \ with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.count_upper(...)\n\t/tmp/tmplrdvvnep_test.go:20\n\
    command-line-arguments_test.TestCount_Upper(0x0?)\n\t/tmp/tmplrdvvnep_test.go:34\
    \ +0x8c6\ntesting.tRunner(0xc0001031e0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    if len(s) == 0 {\n        return 0\n    }\n    if len(s) == 1 {\n       \
    \ return count_vowel(s)\n    }\n    return count_vowel(s[:1]) + count_upper(s[1:])\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhilzwqn_test.go:21:16: undefined: count_vowel

    /tmp/tmpzhilzwqn_test.go:23:12: undefined: count_vowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, char := range s {\n        if (int(char) >= 65\
    \ && int(char) <= 90) && i % 2 == 0 {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpt_3kt66v_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpt_3kt66v_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpt_3kt66v_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Write your code here!\n    var vowels, count int\n    vowels = map[string]int{\"\
    A\":1, \"E\":1, \"I\":1, \"O\":1, \"U\":1}\n    for i, v := range s {\n      \
    \  c := string(v)\n        _, ok := vowels[c]\n        if ok && i % 2 == 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt0s1le9d_test.go:19:14:\
    \ cannot use map[string]int{\u2026} (value of type map[string]int) as type int\
    \ in assignment\n/tmp/tmpt0s1le9d_test.go:21:9: c declared but not used\n/tmp/tmpt0s1le9d_test.go:22:24:\
    \ invalid operation: cannot index vowels (variable of type int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        // Count upper case in even\
    \ indices\n        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp58fp8k67_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp58fp8k67_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp58fp8k67_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Your code here\n    return -1\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp40su4ec9_test.go:40: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__1 (0.00s)\n        tmp40su4ec9_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmp40su4ec9_test.go:40: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__3 (0.00s)\n        tmp40su4ec9_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmp40su4ec9_test.go:40: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmp40su4ec9_test.go:40:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp40su4ec9_test.go:40: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpmbzqoa41_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpmbzqoa41_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpmbzqoa41_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, ch := range s {\n        if i % 2 == 0 && ch >= 'A'\
    \ && ch <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyey92l8n_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyey92l8n_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyey92l8n_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp41mvmhmd_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp41mvmhmd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp41mvmhmd_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    r := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c\
    \ <= 'Z' {\n            r++\n        }\n    }\n    return r\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpkhfe1225_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpkhfe1225_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpkhfe1225_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    var str = []rune(s)\n    for i := 0; i < len(str); i++\
    \ {\n        if (i % 2 == 0) && (str[i] >= 'A') && (str[i] <= 'Z') {\n       \
    \     count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpfcmk_77o_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpfcmk_77o_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpfcmk_77o_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    even_uppers := 0\n    for i, ch := range s {\n        if i % 2 == 0 && ch\
    \ >= 'A' && ch <= 'Z' {\n            even_uppers++\n        }\n    }\n    return\
    \ even_uppers\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp70chd60__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp70chd60__test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp70chd60__test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, c := range s {\n        if i % 2 == 0 && c\
    \ >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpgvom5qjq_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpgvom5qjq_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpgvom5qjq_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073210
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    cnt := 0\n    for i, ch := range s {\n        if (i % 2 == 0) && (ch >= 'A')\
    \ && (ch <= 'Z') {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n\
    \nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyyzid4s__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyyzid4s__test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyyzid4s__test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, c := range s {\n        if i % 2 == 0 && (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tcnt := 0\n\tfor i, r := range s {\n\t\tif is_vowel(r) && i % 2 == 0 {\n\t\t\t\
    cnt++\n\t\t}\n\t}\n\treturn cnt\n}\n\nfunc TestCount_Upper(t *testing.T) {\n \
    \ candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdwlubxd8_test.go:19:6: undefined: is_vowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    c := 0\n    for i, char := range s {\n        if i % 2 == 0 && char >= 'A'\
    \ && char <= 'Z' {\n            c++\n        }\n    }\n    return c\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp003x3y91_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp003x3y91_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp003x3y91_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for index, char := range s {\n        if index % 2 == 0 &&\
    \ char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp9ymfa0o5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp9ymfa0o5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp9ymfa0o5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c > 64 &&\
    \ c < 91 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp9py5x4fu_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp9py5x4fu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp9py5x4fu_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar count int\n\tfor i, c := range s {\n\t\tif i % 2 == 0 && c >= 'A' && c <=\
    \ 'Z' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp1vutaoy__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp1vutaoy__test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp1vutaoy__test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if c >= 'A' && c <= 'Z' &&\
    \ i % 2 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp5zmsgl5s_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp5zmsgl5s_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp5zmsgl5s_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        // even indices, exclude zero\n\
    \        if i % 2 == 0 && i != 0 {\n            if r == 'A' || r == 'E' || r ==\
    \ 'I' || r == 'O' || r == 'U' {\n                count += 1\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmp8pqgo9an_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmp8pqgo9an_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, ch := range s {\n        if i % 2 == 0 && ch >= 'A'\
    \ && ch <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp5qaxzjbt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp5qaxzjbt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp5qaxzjbt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var c int\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A' &&\
    \ v <= 'Z' {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpeyffw83f_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpeyffw83f_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpeyffw83f_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, char := range s {\n        if i % 2 == 0 && (char\
    \ == 'A' || char == 'E' || char == 'I' || char == 'O' || char == 'U') {\n    \
    \        count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    sLen := len(s)\n    for i := 0; i < sLen; i++ {\n       \
    \ if s[i] >= 'A' && s[i] <= 'Z' && i % 2 == 0 {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpfiqreou6_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpfiqreou6_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpfiqreou6_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for idx, char := range s {\n        if idx % 2 == 0 && char\
    \ >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpsbthhwro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpsbthhwro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpsbthhwro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if (i % 2 == 0) && (c >=\
    \ 'A') && (c <= 'Z') {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpreiomyu__test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpreiomyu__test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpreiomyu__test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    c := 0\n    for i, c := range s {\n        if c < 'A' || c > 'Z' {\n    \
    \        continue\n        }\n        if i%2 == 0 {\n            c += 1\n    \
    \    }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp07n6pbrj_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp07n6pbrj_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp07n6pbrj_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    // YOUR CODE HERE\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpjrvnp5cb_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpjrvnp5cb_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpjrvnp5cb_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var num int = 0\n    for i, c := range s {\n        if i % 2 == 0 && ('A'\
    \ <= c && c <= 'Z') {\n            num += 1\n        }\n    }\n    return num\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp7o0ej6dl_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp7o0ej6dl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp7o0ej6dl_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for index, value := range s {\n        if (index % 2 == 0)\
    \ && (value >= 'A') && (value <= 'Z') {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpb05eh2hv_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpb05eh2hv_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpb05eh2hv_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    m := make(map[string]int)\n    for _, c := range s {\n        if c >= 'A'\
    \ && c <= 'Z' {\n            m[string(c)]++\n        }\n    }\n    fmt.Println(m)\n\
    \    return len(m)\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate :=\
    \ count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n\
    \     { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[B:1 C:1 E:1]\nmap[]\nmap[B:2 E:1]\nmap[B:1]\nmap[U:1]\nmap[]\nmap[E:4]\n\
    --- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0 (0.00s)\n\
    \        tmp2hc1nwx6_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2hc1nwx6_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2hc1nwx6_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmp2hc1nwx6_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 1\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__1\
    \ (0.00s)\n        tmp8h3e908r_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp8h3e908r_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp8h3e908r_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__5 (0.00s)\n        tmp8h3e908r_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp8h3e908r_test.go:39: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int = 0\n    for i, c := range s {\n        if i % 2 == 0 && c\
    \ >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpgvom5qjq_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpgvom5qjq_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpgvom5qjq_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073210
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpela99vby_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpela99vby_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, char := range s {\n        if i % 2 == 0 && char >=\
    \ 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpijdhdvj9_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpijdhdvj9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpijdhdvj9_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    res := 0\n    vowels := map[rune]bool{'A': true, 'E': true, 'I': true, 'O':\
    \ true, 'U': true}\n    for i, c := range s {\n        if i % 2 == 0 && vowels[c]\
    \ {\n            res++\n        }\n    }\n    return res\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, r := range s {\n        if (i + 1) % 2 == 0 &&\
    \ (r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U') {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp1ad37icv_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp1ad37icv_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmp1ad37icv_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // replace this for solution\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmphere8v4k_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmphere8v4k_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmphere8v4k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpm61j4pjr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpm61j4pjr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpm61j4pjr_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Fill this in.\n    var count int\n    for i, c := range s {\n        if\
    \ c >= 'A' && c <= 'Z' && i % 2 == 0 {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpwi3iiay9_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpwi3iiay9_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpwi3iiay9_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tvar cnt int = 0\n\tfor i := 0; i < len(s); i++ {\n\t\tif i % 2 == 0 && s[i]\
    \ >= 'A' && s[i] <= 'Z' {\n\t\t\tcnt++\n\t\t}\n\t}\n\treturn cnt\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmppeeyotew_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmppeeyotew_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmppeeyotew_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj6aeirrt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj6aeirrt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    v := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c\
    \ <= 'Z' {\n            v++\n        }\n    }\n    return v\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpffvmawm6_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpffvmawm6_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpffvmawm6_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        // If the rune is a lowercase\
    \ letter, skip it.\n        if v >= 'a' && v <= 'z' {\n            continue\n\
    \        }\n        // If the index is even, increment the count.\n        if\
    \ i % 2 == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl6shvt2t_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl6shvt2t_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl6shvt2t_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpl3yevvro_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpl3yevvro_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmp5hhkext3_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmp5hhkext3_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    counter := 0\n    for index, char := range s {\n        if index % 2 == 0\
    \ && char >= 'A' && char <= 'Z' {\n            counter++\n        }\n    }\n \
    \   return counter\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate :=\
    \ count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n\
    \     { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpbezxsvyu_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpbezxsvyu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpbezxsvyu_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tcnt := 0\n\tfor i, char := range s {\n\t\tif i % 2 == 0 && char >= 'A' && char\
    \ <= 'Z' {\n\t\t\tcnt++\n\t\t}\n\t}\n\treturn cnt\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpy7sfg1gt_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpy7sfg1gt_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpy7sfg1gt_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    c := 0\n    for i, r := range s {\n        if i % 2 == 0 && 'A' <= r && r\
    \ <= 'Z' {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpj5ay2aji_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpj5ay2aji_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpj5ay2aji_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if (i+1) % 2 == 0 && r >=\
    \ 'A' && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpfllkf7yz_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpfllkf7yz_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, c := range s {\n        if is_even(i) && is_upper(c)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphesoda_q_test.go:19:12: undefined: is_even

    /tmp/tmphesoda_q_test.go:19:26: undefined: is_upper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpiqkha90z_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpiqkha90z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpiqkha90z_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var i int\n    var count int\n    var vowels = \"AEIOU\"\n    for i = 0;\
    \ i < len(s); i++ {\n        if (i % 2 == 0) && (string(s[i]) == vowels) {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyteud7q__test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpyteud7q__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpyteud7q__test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tcount := 0\n\tfor i, char := range s {\n\t\t// logic for even indices\n\t\t\
    if i % 2 == 0 {\n\t\t\tif char == 'A' || char == 'E' || char == 'I' || char ==\
    \ 'O' || char == 'U' {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    res := 0\n    for i, ch := range s {\n        if i % 2 == 0 && ch >= 'A'\
    \ && ch <= 'Z' {\n            res += 1\n        }\n    }\n    return res\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpkzzjs4qz_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpkzzjs4qz_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpkzzjs4qz_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    total := 0\n    for i, c := range s {\n        // fmt.Println(i, c)\n   \
    \     if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            total += 1\n        }\n    }\n    return total\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073281
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    var prevIsVowel bool\n    var isVowel bool\n    for i :=\
    \ 0; i < len(s); i++ {\n        isVowel = isVowelFunc(s[i])\n        if i%2 ==\
    \ 0 && isVowel && !prevIsVowel {\n            count++\n        }\n        prevIsVowel\
    \ = isVowel\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdb9c0xdl_test.go:21:19: undefined: isVowelFunc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r > 64 &&\
    \ r < 91 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpdjmgio2g_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpdjmgio2g_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpdjmgio2g_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r > 'A' &&\
    \ r < 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp4nmiww1k_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp4nmiww1k_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp4nmiww1k_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    return 0\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmp3ja6d5en_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmp3ja6d5en_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    l := len(s)\n    if l == 0 {\n        return 0\n    }\n    count := 0\n \
    \   vowels := []rune{'A', 'E', 'I', 'O', 'U'}\n    for i := 1; i < l; i += 2 {\n\
    \        if i % 2 == 0 {\n            for _, v := range vowels {\n           \
    \     if rune(s[i]) == v {\n                    count++\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpeo9c8f3b_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpeo9c8f3b_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpeo9c8f3b_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A'\
    \ && r <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpcl5lgusu_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpcl5lgusu_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpcl5lgusu_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmrgf_1i_test.go:19:26: undefined: isUpper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, char := range s {\n        if i % 2 == 0 && char\
    \ >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpi8uv_a5t_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpi8uv_a5t_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpi8uv_a5t_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Initialize a counter.\n    var c int = 0\n    // Loop through the string,\
    \ checking if it's uppercase.\n    for i, v := range s {\n        // Check that\
    \ the index is even and that the character is uppercase.\n        if i % 2 ==\
    \ 0 && v >= 'A' && v <= 'Z' {\n            // Increment the counter.\n       \
    \     c++\n        }\n    }\n    // Return the counter.\n    return c\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpn1nlk01n_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpn1nlk01n_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpn1nlk01n_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    cnt := 0\n    for idx, char := range s {\n        if (idx % 2 == 0) && (char\
    \ >= 'A') && (char <= 'Z') {\n            cnt += 1\n        }\n    }\n    return\
    \ cnt\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpp8gdu755_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpp8gdu755_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpp8gdu755_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    sum := 0\n    for i, v := range s {\n        if i % 2 == 0 && (v == 'A' ||\
    \ v == 'E' || v == 'I' || v == 'O' || v == 'U') {\n            sum += 1\n    \
    \    }\n    }\n    return sum\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073282
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // count of upper case vowels in even indices\n    var uppercase int = 0\n\
    \    var vowels string = \"AEIOU\"\n\n    // iterate over the string\n    for\
    \ i, c := range s {\n        // only process even indices\n        if i % 2 ==\
    \ 0 {\n            // does the character come from the vowels?\n            for\
    \ _, vowel := range vowels {\n                if c == vowel {\n              \
    \      // if it does, it is uppercase?\n                    if c >= 'A' && c <=\
    \ 'Z' {\n                        uppercase++\n                    }\n        \
    \        }\n            }\n        }\n    }\n\n    return uppercase\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var output int\n    for i, char := range s {\n        if i % 2 == 0 && char\
    \ >= 'A' && char <= 'Z' {\n            output++\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp6wqg02gx_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp6wqg02gx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp6wqg02gx_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    for i, r := range s {\n        if (i % 2 == 0) && (r >=\
    \ 'A') && (r <= 'Z') {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpwj8w6mfz_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpwj8w6mfz_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpwj8w6mfz_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    a := []rune(s)\n    count := 0\n    for i := 0; i < len(a); i++ {\n     \
    \   if a[i] == 'A' || a[i] == 'E' || a[i] == 'I' || a[i] == 'O' || a[i] == 'U'\
    \ {\n            if i % 2 == 0 {\n                count++\n            }\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for idx, char := range s {\n        switch {\n        case\
    \ (idx % 2) == 0 && (char >= 'A' && char <= 'Z'):\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmph23k089j_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmph23k089j_test.go:46:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmph23k089j_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, char := range s {\n        if (i % 2 == 0) && (char\
    \ >= 'A') && (char <= 'Z') {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n \
    \    { actual: candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"\
    dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n   \
    \  { actual: candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"),\
    \ expected: 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2dlx2mpp_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2dlx2mpp_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2dlx2mpp_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // Implement your solution here\n    return 0\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpjpn3hwpj_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpjpn3hwpj_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpjpn3hwpj_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    numberOfUppercaseVowels := 0\n    for i, r := range s {\n        if isEvenIndex(i)\
    \ && isUppercaseVowel(r) {\n            numberOfUppercaseVowels += 1\n       \
    \ }\n    }\n    return numberOfUppercaseVowels\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvfe5xuh_test.go:19:12: undefined: isEvenIndex

    /tmp/tmpvvfe5xuh_test.go:19:30: undefined: isUppercaseVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpm61j4pjr_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpm61j4pjr_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpm61j4pjr_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 2
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var count int\n    var i int\n    var c string\n    for i, c = range s {\n\
    \        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n            count++\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mlcfn17_test.go:20:12: cannot use c (value of type rune) as type string
    in assignment

    /tmp/tmp6mlcfn17_test.go:21:31: invalid operation: c >= ''A'' (mismatched types
    string and untyped rune)

    /tmp/tmp6mlcfn17_test.go:21:43: invalid operation: c <= ''Z'' (mismatched types
    string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp41mvmhmd_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp41mvmhmd_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp41mvmhmd_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestCount_Upper(t *testing.T)\
    \ {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpmbzqoa41_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__4 (0.00s)\n        tmpmbzqoa41_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Upper/test_num__6\
    \ (0.00s)\n        tmpmbzqoa41_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var cnt int\n    for i, c := range s {\n        if i % 2 == 0 && (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            cnt += 1\n \
    \       }\n    }\n    return cnt\n}\n\nfunc TestCount_Upper(t *testing.T) {\n\
    \  candidate := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0\
    \ },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"\
    B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     {\
    \ actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"),\
    \ expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, v := range s {\n        if i % 2 == 0 && v >= 'A'\
    \ && v <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpyvcsbt6a_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpyvcsbt6a_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, char := range s {\n        if i % 2 == 0 && (char\
    \ == 'A' || char == 'E' || char == 'I' || char == 'O' || char == 'U') {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var uppercaseVowels int\n    for i, x := range s {\n        if (i+1)%2 ==\
    \ 0 && x == 'A' || x == 'E' || x == 'I' || x == 'O' || x == 'U' {\n          \
    \  uppercaseVowels += 1\n        }\n    }\n    return uppercaseVowels\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__2\
    \ (0.00s)\n        tmpfgi9yqy9_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCount_Upper/test_num__6 (0.00s)\n        tmpfgi9yqy9_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for idx, _ := range s {\n        if idx % 2 == 0 {\n    \
    \        continue\n        }\n        if s[idx] == 'A' || s[idx] == 'E' || s[idx]\
    \ == 'I' || s[idx] == 'O' || s[idx] == 'U' {\n            count += 1\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate\
    \ := count_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aBCdEf\"),\
    \ expected: 1 },\n     { actual: candidate(\"abcdefg\"), expected: 0 },\n    \
    \ { actual: candidate(\"dBBE\"), expected: 0 },\n     { actual: candidate(\"B\"\
    ), expected: 0 },\n     { actual: candidate(\"U\"), expected: 1 },\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"EEEE\"), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpe5t29j6y_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpe5t29j6y_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__4\
    \ (0.00s)\n        tmpe5t29j6y_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpqeu8793w_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpqeu8793w_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \tcounter := 0\n\tfor i,c := range s {\n\t\tif i % 2 == 0 && c >= 'A' && c <=\
    \ 'Z' {\n\t\t\tcounter++\n\t\t}\n\t}\n\treturn counter\n}\n\nfunc TestCount_Upper(t\
    \ *testing.T) {\n  candidate := count_upper\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"abcdefg\"\
    ), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n     {\
    \ actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"U\"), expected:\
    \ 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmpxcyfet_q_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmpxcyfet_q_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmpxcyfet_q_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073282
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
    \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"),\
    \ expected: 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual:\
    \ candidate(\"U\"), expected: 1 },\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp2g10fzo5_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp2g10fzo5_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n\
    \    var cnt int\n    for i, c := range s {\n        if (i % 2) == 0 && c >= 'A'\
    \ && c <= 'Z' {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc\
    \ TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual: candidate(\"\
    abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected: 0 },\n\
    \     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
    U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Upper (0.00s)\n    --- FAIL: TestCount_Upper/test_num__0\
    \ (0.00s)\n        tmp8h36igpj_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Upper/test_num__2 (0.00s)\n        tmp8h36igpj_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Upper/test_num__3\
    \ (0.00s)\n        tmp8h36igpj_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073282
