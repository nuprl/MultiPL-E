language: go_test.go
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 && x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if x == 1 || x == n {\n        return true\n\
    \    }\n    tmp := x\n    for tmp > 1 {\n        if tmp % n != 0 {\n         \
    \   return false\n        }\n        tmp /= n\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    res := 1\n    for i := 0; i < n; i++ {\n        res *= n\n        if\
    \ res == x {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpqlnj_wyn_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpqlnj_wyn_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    power := 1\n    for x > 1 {\n        if x % n != 0 {\n            return\
    \ false\n        }\n        x /= n\n        power *= n\n    }\n    return x ==\
    \ power\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpp6uvve66_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpp6uvve66_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpp6uvve66_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpp6uvve66_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var exp int = 1\n    for true {\n        if exp > x {\n            return\
    \ false\n        }\n        if exp == x {\n            return true\n        }\n\
    \        exp *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return ((x % n) == 0) && (x / n) % n == 0\n}\n\ntype Test \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdhnuintp_test.go:28:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073479
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    v := 1\n    for v <= x {\n        if v == x {\n            return true\n\
    \        }\n        v *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    power := n\n    for power\
    \ < x {\n        power *= n\n    }\n    return power == x\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return false\n    }\n\n    for {\n        if x ==\
    \ n {\n            return true\n        }\n\n        if x > n {\n            x\
    \ = x / n\n        } else {\n            return false\n        }\n    }\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpl22_gmlz_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpl22_gmlz_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\treturn x == n || (x % n == 0 && is_simple_power(x / n, n))\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp032w59_d_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    res := n\n    for ; res < x; res *= n {\n    }\n    return\
    \ res == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\t// your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpejip3gpg_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpejip3gpg_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpejip3gpg_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpejip3gpg_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpejip3gpg_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpejip3gpg_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tif (x % n != 0) {\n\t\treturn false\n\t}\n\tfor (x != 1) {\n\t\tif (x %\
    \ n != 0) {\n\t\t\treturn false\n\t\t}\n\t\tx /= n\n\t}\n\treturn true\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp066l8515_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tfor x > 0 {\n\t\tif x%n == 0 {\n\t\t\tx /= n\n\t\t} else {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    }\n    if x % n != 0 {\n      \
    \  return false\n    }\n    return is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpghhw6lm__test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\ttmp := 1\n\tfor tmp < x {\n\t\ttmp *= n\n\t}\n\treturn tmp == x\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if (x == 1) {\n        return true\n    }\n    if (n == 1) {\n      \
    \  return false\n    }\n    if (x % n != 0) {\n        return false\n    }\n \
    \   return is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073480
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\ty := n\n\tfor n > 0 {\n\t\tif n == 1 {\n\t\t\tif x == 1 {\n\t\t\t\treturn\
    \ true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tif x == y {\n\
    \t\t\treturn true\n\t\t}\n\t\ty = y * n\n\t}\n\treturn false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073493
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    pow := 1\n    for i := 0; i < 31; i++ {\n        if pow == x {\n    \
    \        return true\n        }\n        pow *= n\n    }\n    return false\n}\n\
    \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n < 1 {\n        return false\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    r := 1\n    for i := 1; i < 1000000; i++ {\n        r *= n\n\
    \        if r == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x < 1 || n < 1 {\n        return false\n    }\n\n    if n == 1 {\n\
    \        return x == 1\n    }\n\n    if x == 1 {\n        return false\n    }\n\
    \n    if x == n {\n        return true\n    }\n\n    p := 1\n    for {\n     \
    \   p *= n\n        if p == x {\n            return true\n        }\n\n      \
    \  if p > x {\n            return false\n        }\n    }\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpuszb8jpc_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\t// your code here\n\treturn false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpeg6dhslu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpeg6dhslu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpeg6dhslu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpeg6dhslu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpeg6dhslu_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpeg6dhslu_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    num := 1\n    if x <= 0 || n <= 0 {\n        return false\n    }\n  \
    \  for num <= x {\n        if num == x {\n            return true\n        }\n\
    \        num *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var i = 1\n    for i <= x {\n        if i * n == x {\n            return\
    \ true\n        }\n        i = i * n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmppizimdth_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    r := 1\n    for r < x {\n        r *= n\n    }\n    return r == x\n}\n\
    \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // return x == int(math.Pow(float64(n), float64(x)))\n    // return math.Pow(float64(n),\
    \ float64(x)) == float64(x)\n    return int(math.Pow(float64(n), float64(x)))\
    \ == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yf_mj_n_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return false\n    }\n    num := 1\n    for {\n \
    \       if num == x {\n            return true\n        }\n        if num > x\
    \ {\n            return false\n        }\n        num *= n\n    }\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmp0n2pvlq5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n\n    if n == 1 {\n        return\
    \ false\n    }\n\n    if x % n != 0 {\n        return false\n    }\n\n    x =\
    \ x / n\n    return is_simple_power(x, n)\n}\n\ntype Test \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm86ikiw8_test.go:41:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for x % n == 0 {\n        x /= n\n    }\n    return x == 1\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073495
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\t\treturn x == int(math.Pow(float64(n), math.Log2(float64(x))))\n}\n\ntype\
    \ Test \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9atahgur_test.go:28:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return false\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    for i := 1; ; i++ {\n        if i == 1 {\n            if n\
    \ == x {\n                return true\n            }\n        }\n        n *=\
    \ n\n        if n == x {\n            return true\n        }\n        if n > x\
    \ {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmp7sidrskr_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    count := 1\n    for i := 0; i < x; i++ {\n        count *= n\n      \
    \  if count == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp_12pobm1_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073483
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x <= 0 || n <= 0 {\n        return false\n    }\n    for x % n ==\
    \ 0 {\n        x /= n\n    }\n    return x == 1\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073495
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 && n != 1 {\n        return false\n    }\n\n    for i := 0;\
    \ i < 100; i++ {\n        if int(math.Pow(float64(n), float64(i))) == x {\n  \
    \          return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2yy2y4t_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for x != 1 {\n        if x % n != 0 {\n            return false\n   \
    \     }\n        x /= n\n    }\n    return true\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return true\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__1\
    \ (0.00s)\n        tmp2zjme1pv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__5 (0.00s)\n        tmp2zjme1pv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__6\
    \ (0.00s)\n        tmp2zjme1pv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__7 (0.00s)\n        tmp2zjme1pv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tif x == 1 {\n\t\treturn true\n\t}\n\tfor i := 2; i <= n; i++ {\n\t\tif\
    \ x == i * i {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpu4bzg6zo_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n < 0 || x < 0 {\n        return false\n    }\n    if n == 0 && x\
    \ == 0 {\n        return true\n    }\n    if n == 0 {\n        return false\n\
    \    }\n    if x == 0 {\n        return true\n    }\n    if x == 1 {\n       \
    \ return true\n    }\n    for i := 1; i <= x; i++ {\n        if n**i == x {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90cyz0we_test.go:41:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tfmt.Println(x, n)\n\tif n == 1 {\n\t\treturn true\n\t} else if x % n !=\
    \ 0 {\n\t\treturn false\n\t} else {\n\t\treturn is_simple_power(x/n, n)\n\t}\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "16 2\n8 2\n4 2\n2 2\n1 2\n143214 16\n4 2\n2 2\n1 2\n9 3\n3 3\n1 3\n16 4\n\
    4 4\n1 4\n24 2\n12 2\n6 2\n3 2\n128 4\n32 4\n8 4\n2 4\n12 6\n2 6\n1 1\n1 12\n\
    --- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpe80a2sun_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpe80a2sun_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpe80a2sun_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpe80a2sun_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpe80a2sun_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    for i := 1; i < x; i++ {\n        if n**i == x {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8e01s4bo_test.go:32:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n <= 0 {\n        return false\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    var i float64 = 1\n    for {\n        if int(math.Pow(float64(n),\
    \ i)) == x {\n            return true\n        }\n        if int(math.Pow(float64(n),\
    \ i)) > x {\n            return false\n        }\n        i += 1\n    }\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo40dz648_test.go:33:16: undefined: math

    /tmp/tmpo40dz648_test.go:36:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; i < x; i++ {\n        if int(math.Pow(float64(n), float64(i)))\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfj26ej_z_test.go:26:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tfmt.Println(x, n)\n\tif n == 1 {\n\t\treturn x == 1\n\t}\n\tvar i int =\
    \ 2\n\tvar last int = n\n\tfor i <= x {\n\t\tif last == x {\n\t\t\treturn true\n\
    \t\t}\n\t\tlast *= n\n\t\ti++\n\t}\n\treturn false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "16 2\n143214 16\n4 2\n9 3\n16 4\n24 2\n128 4\n12 6\n1 1\n1 12\n--- FAIL:\
    \ TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n\
    \        tmps25k5z44_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\ntype Case \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6b2jm1s_test.go:29:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    }\n    return n**x == x\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wrn5kwx_test.go:28:15: invalid operation: cannot indirect x (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return (x % n == 0) && is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_simple_power(0x1?,\
    \ 0x1?)\n\t/tmp/tmpm6b9aael_test.go:24 +0x58 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6b8\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 "
  timestamp: 1660073484
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    pow := 1\n    for pow <= x {\n        if pow == x {\n            return\
    \ true\n        }\n        pow *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var result bool = false\n    var power int = 1\n    for power <= x {\n\
    \        if power == x {\n            result = true\n        }\n        power\
    \ *= n\n    }\n    return result\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073497
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tp := 1\n\tfor {\n\t\tif p == x {\n\t\t\treturn true\n\t\t}\n\t\tif p >\
    \ x {\n\t\t\treturn false\n\t\t}\n\t\tp *= n\n\t}\n}\n\ntype Test \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptekzu8q4_test.go:37:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n\
    \        if x == n**i {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyk1nsx3_test.go:29:20: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for x != 1 {\n        if x % n != 0 {\n            return false\n   \
    \     }\n        x /= n\n    }\n    return true\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    power := n\n    for power <= x {\n        if power == x {\n\
    \            return true\n        }\n        power *= n\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpvkr6tqi6_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073484
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x <= 0 || n <= 0 {\n        return false\n    }\n    // x can't be\
    \ a power of n if n > x\n    if n > x {\n        return false\n    }\n    // If\
    \ n is equal to 1 and x is equal to 1, x is a power of n\n    if n == 1 && x ==\
    \ 1 {\n        return true\n    }\n    // Check the square root of x and compare\
    \ the integer square root to the\n    // double square root.  If they are equal,\
    \ we know that x is a perfect\n    // square\n    if int(math.Sqrt(float64(x)))\
    \ == math.Sqrt(float64(x)) {\n        // If the square root of x is equal to n,\
    \ x is a power of n\n        if int(math.Sqrt(float64(x))) == n {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxa58pr8q_test.go:39:12: undefined: math

    /tmp/tmpxa58pr8q_test.go:41:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var res float64 = float64(x)\n    var i float64 = 1.0\n    var i1 float64\
    \ = float64(n)\n    for i < float64(x){\n        if i == res {\n            return\
    \ true\n        } else {\n            i *= i1\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmp6x5bnnny_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmp6x5bnnny_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmp6x5bnnny_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmp6x5bnnny_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmp6x5bnnny_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp6x5bnnny_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073484
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    nn := 1\n    for nn < x {\n        nn *= n\n    }\n    return nn == x\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073484
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\treturn true\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__1\
    \ (0.00s)\n        tmp31jcly7d_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__5 (0.00s)\n        tmp31jcly7d_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__6\
    \ (0.00s)\n        tmp31jcly7d_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__7 (0.00s)\n        tmp31jcly7d_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073484
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return is_pow(x, n, 1)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n\
    \  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_87lsgfj_test.go:25:12: undefined: is_pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; i <= x; i++ {\n        if pow(n, i) == x {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0pb459uj_test.go:26:12: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for n <= x {\n        if n == x {\n            return true\n        }\n\
    \        n *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmprtp15zow_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073485
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    for i := 1; i <= x; i++\
    \ {\n        for j := 0; j <= x; j++ {\n            if int(math.Pow(float64(i),\
    \ float64(j))) == x {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt7izzy2h_test.go:30:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    p := 1\n    for p < x {\n        p *= n\n    }\n    return p == x\n}\n\
    \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073485
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var pow float64 = 1\n    for {\n        pow *= float64(n)\n        if\
    \ pow == float64(x) {\n            return true\n        }\n        if pow > float64(x)\
    \ {\n            return false\n        }\n    }\n}\n\ntype Test \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd7hi7484_test.go:37:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var res bool = false\n    var nx int = n\n    for nx <= x {\n       \
    \ if nx == x {\n            res = true\n            break\n        }\n       \
    \ nx *= n\n    }\n    return res\n}\n\ntype testpair \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7sceyoh9_test.go:37:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tif x == 1 && n == 1 {\n\t\treturn true\n\t}\n\tvar result int = 1\n\tvar\
    \ i int = 1\n\tvar i_result int = 0\n\tfor result <= x {\n\t\tif result == x {\n\
    \t\t\treturn true\n\t\t}\n\t\tresult = n * result\n\t\ti++\n\t}\n\treturn false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmphvn64h_test.go:30:6: i_result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; x > 1; i++ {\n        x /= n\n    }\n    return x == 1\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmpdxx51fyj_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073485
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tfor i := 0; i < x; i++ {\n\t\tif n**i == x {\n\t\t\treturn true\n\t\t}\n\
    \t}\n\treturn false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxct77hj9_test.go:26:9: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073484
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for base := n; base <= x; base *= n {\n        if base == x {\n     \
    \       return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpjvnboz59_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073485
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    var isSimplePower bool\n\
    \    for isSimplePower == false {\n        fmt.Println(x)\n        fmt.Println(n)\n\
    \        if x%n == 0 {\n            x = x/n\n            if x == 1 {\n       \
    \         isSimplePower = true\n            }\n        } else {\n            isSimplePower\
    \ = false\n            break\n        }\n    }\n    return isSimplePower\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073485
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x < 0 || n < 0 {\n        return false\n    }\n    if x == 0 && n\
    \ == 0 {\n        return false\n    }\n    if x == 0 && n != 0 {\n        return\
    \ true\n    }\n    if x == 1 && n == 0 {\n        return true\n    }\n    if x\
    \ == 1 && n != 0 {\n        return false\n    }\n    if x == 2 && n == 0 {\n \
    \       return false\n    }\n    if x == 2 && n == 1 {\n        return true\n\
    \    }\n    if x == 2 && n == 2 {\n        return true\n    }\n    if x == 2 &&\
    \ n > 2 {\n        return false\n    }\n    if x > 2 && n == 0 {\n        return\
    \ false\n    }\n    if x > 2 && n == 1 {\n        return false\n    }\n    if\
    \ x > 2 && n == 2 {\n        return false\n    }\n    if x > 2 && n > 2 {\n  \
    \      for n < x {\n            n = n * n\n        }\n        if n == x {\n  \
    \          return true\n        }\n        return false\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmp1mtdre3o_test.go:95: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmp1mtdre3o_test.go:95:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmp1mtdre3o_test.go:95: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp1mtdre3o_test.go:95:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073485
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    nn := n\n    for nn < x\
    \ {\n        nn *= n\n    }\n    return nn == x\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073485
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == n {\n        return\
    \ true\n    }\n    k := 1\n    for {\n        if k*n > x {\n            return\
    \ false\n        }\n        if k*n == x {\n            return true\n        }\n\
    \        k++\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmp4720gkyq_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__6 (0.00s)\n        tmp4720gkyq_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__7\
    \ (0.00s)\n        tmp4720gkyq_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp4720gkyq_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073485
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    cur := n\n    for cur < x {\n        cur *= n\n    }\n   \
    \ return cur == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073485
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tif x == 1 {\n\t\treturn true\n\t}\n\tif n == 1 {\n\t\treturn false\n\t\
    }\n\tif x == n {\n\t\treturn true\n\t}\n\tif x < n {\n\t\treturn false\n\t}\n\t\
    return is_simple_power(x/n, n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n\
    \  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmpjq6i88ve_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073486
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    switch {\n    case x == 1:\n        return true\n    case x%n != 0:\n\
    \        return false\n    default:\n        return is_simple_power(x/n, n)\n\
    \    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073486
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var result bool = false\n    for i := 0; ; i++ {\n        if x == n **\
    \ i {\n            result = true\n            break\n        } else if x < n **\
    \ i {\n            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnrcuc6i_test.go:27:22: invalid operation: cannot indirect i (variable
    of type int)

    /tmp/tmpdnrcuc6i_test.go:30:28: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073486
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for p := 0; ; p++ {\n        if n**p == x {\n            return true\n\
    \        }\n        if n**p > x {\n            return false\n        }\n    }\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wwjgeym_test.go:26:15: invalid operation: cannot indirect p (variable
    of type int)

    /tmp/tmp5wwjgeym_test.go:29:15: invalid operation: cannot indirect p (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073486
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; i <= x; i++ {\n        if int(math.Pow(float64(n), float64(i)))\
    \ == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0dcmtafj_test.go:26:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073486
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    for i := 2; i <= x; i++ {\n        if n**i == x {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\ntype test \nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbky7w4s5_test.go:39:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073485
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return x == n*n\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpa4y4i7wg_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpa4y4i7wg_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073486
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    isSimplePower := false\n    for i := 0; i < x; i++ {\n        if n**i\
    \ == x {\n            isSimplePower = true\n        }\n    }\n    return isSimplePower\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsdfnwdc2_test.go:27:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073486
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return true\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__1\
    \ (0.00s)\n        tmp2zjme1pv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__5 (0.00s)\n        tmp2zjme1pv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__6\
    \ (0.00s)\n        tmp2zjme1pv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__7 (0.00s)\n        tmp2zjme1pv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    }\n    for n < x {\n        n *=\
    \ n\n    }\n    return n == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n\
    \  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpgr57j_rv_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073486
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x <= 0 || n <= 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  for r := x / n; r > 1; r = r / n {\n        if r % n > 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073486
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 && x == 1 {\n        return true\n    }\n\n    for i := 1;\
    \ ; i++ {\n        if x == n*n {\n            return true\n        }\n       \
    \ if n >= x {\n            return false\n        }\n        n *= n\n    }\n}\n\
    \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp6ondl8hr_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073486
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return false\n    }\n    for n < x {\n        n\
    \ *= n\n    }\n    return n == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmp_48a_oe9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp_48a_oe9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073486
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    for x % n == 0 {\n     \
    \   x /= n\n    }\n    return x == 1\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tif x == 1 {\n\t\treturn true\n\t}\n\tif n == 1 {\n\t\treturn x == 1\n\t\
    }\n\tfor i := 0; x != 1; i++ {\n\t\tif x%n != 0 {\n\t\t\treturn false\n\t\t}\n\
    \t\tx /= n\n\t}\n\treturn true\n}\n\ntype TestCase \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9uaxmtx_test.go:40:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073486
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var is_simple bool = false\n    var i float64 = 0\n    var y float64\
    \ = float64(x)\n    for y > 0 {\n        fmt.Println(y)\n        if (y == 1) ||\
    \ (y == float64(n)) {\n            is_simple = true\n            break\n     \
    \   }\n        if (y < float64(n)) {\n            break\n        }\n        i\
    \ += 1\n        y = y / float64(n)\n    }\n    return is_simple\n}\n\ntype Test\
    \ \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpalq2tf57_test.go:43:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073486
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return is_power(float64(x), float64(n))\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoearg7mc_test.go:25:12: undefined: is_power

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073487
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tif x < 1 || n < 1 {\n\t\treturn false\n\t}\n\n\treturn IsPowerOfTwo(uint64(x))\
    \ && IsPowerOfTwo(uint64(n))\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n\
    \  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprk7ze1zt_test.go:29:9: undefined: IsPowerOfTwo

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    if x % n != 0 {\n        return false\n    }\n\
    \    if x / n == 1 {\n        return true\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    return is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpeecutmpw_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return x > 0 && (n != 0 && x%n == 0) && x/n%n == 0\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmpiecmwv88_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__6 (0.00s)\n        tmpiecmwv88_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpiecmwv88_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n\n    for x % n == 0 {\n \
    \       x /= n\n    }\n\n    return x == 1\n}\n\ntype TestCase \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1nbte367_test.go:36:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073487
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    m := 0\n    for res := x; res % n == 0; res /= n {\n        m++\n   \
    \ }\n    return m > 0 && x == n ** m\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps21kfqly_test.go:29:31: invalid operation: cannot indirect m (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073487
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return x == int(math.Pow(float64(n), math.Log2(float64(x))));\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24wmd629_test.go:25:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n\n    if x == 1 {\n      \
    \  return false\n    }\n\n    i := 2\n    m := n\n\n    for m <= x {\n       \
    \ m *= n\n        i++\n    }\n\n    return m / n == x\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpb01e8wsy_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 && n != 1 {\n        return false\n    }\n    if x < 0 {\n\
    \        return false\n    }\n    if n == 1 {\n        return true\n    }\n  \
    \  for i := 0; i < x; i++ {\n        if n**i == x {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnmts6cp_test.go:35:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073487
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    }\n    return is_simple_power(x/n,\
    \ n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x10?)\n\t/tmp/tmpe7hq7xgm_test.go:24 +0x65 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef6c5\ncommand-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28\
    \ +0x37 fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef697\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28 +0x37 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef697\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28\
    \ +0x37 fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef697\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28 +0x37 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef697\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28\
    \ +0x37 fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef697\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28 +0x37 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef697\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28\
    \ +0x37 fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef697\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28 +0x37 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef697\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28\
    \ +0x37 fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef697\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28 +0x37 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef697\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpe7hq7xgm_test.go:28\
    \ +0x37"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x < 0 || n < 0 {\n        return false\n    }\n    if x == 0 && n\
    \ == 0 {\n        return false\n    }\n    if x == 0 && n != 0 {\n        return\
    \ true\n    }\n    if x == 1 && n == 0 {\n        return true\n    }\n    if x\
    \ == 1 && n != 0 {\n        return false\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x % n != 0 {\n        return false\n    }\n    return is_simple_power(x\
    \ / n, n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmp4fa1zz6a_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp4fa1zz6a_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x < 1 || n < 1 {\n        return false\n    }\n    if x == 1 {\n \
    \       return true\n    }\n    for i := 1; ; i++ {\n        res := 1\n      \
    \  for j := 0; j < i; j++ {\n            res *= n\n        }\n        if res ==\
    \ x {\n            return true\n        }\n        if res > x {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n <= 0 {\n        return false\n    }\n\n    for n < x {\n       \
    \ n *= n\n    }\n\n    return n == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpqsm2hw7b_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    for i := 1; i < x; i++ {\n\
    \        p := 1\n        for j := 0; j < i; j++ {\n            p *= n\n      \
    \  }\n        if p == x {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t3.589s\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tpow := 1\n\tfor {\n\t\tif pow > x {\n\t\t\treturn false\n\t\t}\n\t\tif\
    \ pow == x {\n\t\t\treturn true\n\t\t}\n\t\tpow *= n\n\t}\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    for i := 1; ; i++ {\n\
    \        p := pow(n, i)\n        if p == x {\n            return true\n      \
    \  }\n        if p > x {\n            return false\n        }\n    }\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfj4oibwi_test.go:29:14: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    power := n\n    for power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpkdimfrcf_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; i < 100; i++ {\n        if x == n * n {\n            return\
    \ true\n        }\n        n *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpc9fh7rmp_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073488
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    z := x\n    for z % n == 0 {\n        z /= n\n    }\n    return z ==\
    \ 1\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073502
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 && n == 1 {\n        return true\n    }\n\n    for i := 2;\
    \ i < x; i++ {\n        if n**i == x {\n            return true\n        }\n \
    \   }\n\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_0_28um_test.go:30:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    for i := 2; i <= x / 2; i++ {\n        if x % i == 0 {\n \
    \           return false\n        }\n    }\n    for {\n        if x % n != 0 {\n\
    \            return false\n        }\n        x /= n\n        if x == 1 {\n  \
    \          return true\n        }\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpntmc7olj_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpntmc7olj_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpntmc7olj_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpntmc7olj_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpntmc7olj_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073488
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for {\n        if n % x == 0 {\n            n /= x\n        } else {\n\
    \            break\n        }\n    }\n    return n == 1\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073502
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    i := 1\n    for {\n        if x == i {\n            return true\n   \
    \     }\n        if i > x {\n            return false\n        }\n        i *=\
    \ n\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073489
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    d := x\n    for d > 1 {\n\
    \        if d % n != 0 {\n            return false\n        }\n        d /= n\n\
    \    }\n    return true\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    i := 1\n    for {\n        if n**i == x {\n            return true\n\
    \        }\n        if n**i > x {\n            return false\n        }\n     \
    \   i += 1\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojd5i2ui_test.go:27:15: invalid operation: cannot indirect i (variable
    of type int)

    /tmp/tmpojd5i2ui_test.go:30:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    count := 0\n    for i := 0; i < x; i++ {\n        if n**i == x {\n  \
    \          count += 1\n        }\n    }\n    if count == 1 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp045zd8p8_test.go:27:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    /* your code */\n    return false\n}\n\ntype Test \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpomdi8xom_test.go:29:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var res = 1\n    for {\n        res *= n\n        if res ==\
    \ x {\n            return true\n        }\n        if res > x {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    power := 1\n    for power <= x {\n        if power == x {\n         \
    \   return true\n        }\n        power *= n\n    }\n    return false\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073489
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    return (x % n == 0) && is_simple_power(x\
    \ / n, n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; ; i++ {\n        if n ** i == x {\n            return true\n\
    \        }\n        if n ** i > x {\n            return false\n        }\n   \
    \ }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg5ub2pki_test.go:26:17: invalid operation: cannot indirect i (variable
    of type int)

    /tmp/tmpg5ub2pki_test.go:29:17: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    power := 1\n    for power <= x {\n        if power == x {\n         \
    \   return true\n        }\n        power *= n\n    }\n    return false\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return x > 0 && x == n**int(math.Log(float64(x))/math.Log(float64(n)))\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld5q4wec_test.go:25:33: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    num := n\n    if num > x {\n        return false\n    }\n    for num\
    \ < x {\n        num *= n\n    }\n    return num == x\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmps7wcu0ri_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    power := n\n    for power < x {\n        power *= n\n    }\n    return\
    \ power == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpkdimfrcf_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\treturn pow(n, 1) == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n\
    \  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5_9glrx_test.go:25:9: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for {\n        if n == 1 {\n            return x == 1\n        }\n  \
    \      if x % n != 0 {\n            return false\n        }\n        x /= n\n\
    \    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpbcyon25z_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpbcyon25z_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpbcyon25z_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpbcyon25z_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpbcyon25z_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    currentNum := n\n    for currentNum <= x {\n        if currentNum ==\
    \ x {\n            return true\n        } else {\n            currentNum *= n\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpabhgudgg_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // x, n - non-negative integers.\n    for i := 1; i < x; i++ {\n    \
    \    if n**i == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpokmunu90_test.go:27:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    } else if x % n != 0 {\n      \
    \  return false\n    } else {\n        return is_simple_power(x / n, n)\n    }\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp7drw8gxj_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return x == int(pow(float64(n), int(log(float64(x), float64(n)))))\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvk7rt9f_test.go:25:21: undefined: pow

    /tmp/tmpmvk7rt9f_test.go:25:41: undefined: log

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x <= 0 || n <= 0 {\n        return false\n    }\n    if x == 1 &&\
    \ n == 1 {\n        return true\n    }\n    for i := 1; i <= x; i++ {\n      \
    \  if int(math.Pow(float64(n), float64(i))) == x {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwys2rikm_test.go:32:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 0; i < x; i++ {\n        if n**i == x {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp04wh4d2f_test.go:26:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 && n == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if x == n {\n        return true\n    }\n  \
    \  for {\n        if x == n {\n            return true\n        }\n        if\
    \ x % n != 0 {\n            return false\n        }\n        x = x / n\n    }\n\
    }\n\ntype testpair \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate :=\
    \ is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzcsttvjk_test.go:45:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpnok5b8l4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpnok5b8l4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073415
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    fmt.Println(\"test\")\n    return true\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "test\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\n--- FAIL: TestIs_Simple_Power\
    \ (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__1 (0.00s)\n        tmpwywf0byu_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmpwywf0byu_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__6 (0.00s)\n        tmpwywf0byu_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__7\
    \ (0.00s)\n        tmpwywf0byu_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    x_n_count := 1\n    for x_n_count < x {\n        x_n_count *= n\n   \
    \ }\n    if x_n_count == x {\n        return true\n    }\n    return false\n}\n\
    \ntype TestCase \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxx95uvjz_test.go:35:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var res = 1\n    for i := 0; i < n; i++ {\n        res *= n\n       \
    \ if res == x {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmp8w5y_33t_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp8w5y_33t_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // x^y = m => x^(y/2) * x^(y/2)\n    // \n    // \n    // f(0) = true\n\
    \    // f(1) = false\n    // f(2) = true\n    // f(3) = false\n    // f(4) = true\n\
    \    // f(5) = false\n    // f(6) = false\n    // f(7) = false\n    // f(8) =\
    \ true\n    // f(9) = false\n    // f(10) = false\n    // f(11) = false\n    //\
    \ f(12) = false\n    // f(13) = false\n    // f(14) = false\n    // f(15) = false\n\
    \    // f(16) = true\n    // f(17) = false\n    // f(18) = false\n    // f(19)\
    \ = false\n    // f(20) = false\n    // f(21) = false\n    // f(22) = false\n\
    \    // f(23) = false\n    // f(24) = false\n    // f(25) = false\n    // f(26)\
    \ = false\n    // f(27) = false\n    // f(28) = false\n    // f(29) = false\n\
    \    // f(30) = false\n    // f(31) = false\n    // f(32) = true\n    x1 := x\n\
    \n    for x1 != 1 {\n        if x1 % n != 0 {\n            return false\n    \
    \    }\n        x1 = x1 / n\n    }\n\n    return true\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 && x == 1 {\n        return true\n    }\n    var res = 1\n\
    \    for i := 0; i < 100; i++ {\n        res *= n\n        if res == x {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpgrvpnyvc_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return math.Pow(float64(n), float64(int(math.Log(float64(x)) / math.Log(float64(n)))))\
    \ == float64(x)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate :=\
    \ is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperqea1o7_test.go:25:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var result int = n\n    for result < x {\n        result *=\
    \ n\n    }\n    return result == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    var i float64 = 1\n    for {\n        if int(math.Pow(float64(n),\
    \ i)) == x {\n            return true\n        }\n        if int(math.Pow(float64(n),\
    \ i)) > x {\n            return false\n        }\n        i += 1\n    }\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbr29zq_6_test.go:33:16: undefined: math

    /tmp/tmpbr29zq_6_test.go:36:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n <= 0 {\n        return false\n    }\n\n    for x > 1 {\n       \
    \ if x%n != 0 {\n            return false\n        }\n        x /= n\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate :=\
    \ is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 && x == 1 {\n        return true\n    }\n    if n == 1 && x\
    \ != 1 {\n        return false\n    }\n    if x == 1 {\n        return false\n\
    \    }\n    if n == x {\n        return true\n    }\n    if n == 0 && x != 1 {\n\
    \        return false\n    }\n    if n == 0 && x == 1 {\n        return true\n\
    \    }\n    if n == 2 && x % 2 == 0 {\n        return true\n    }\n    if n ==\
    \ 3 && x % 3 == 0 {\n        return true\n    }\n    if n == 4 && x % 4 == 0 {\n\
    \        return true\n    }\n    if n == 5 && x % 5 == 0 {\n        return true\n\
    \    }\n    if n == 6 && x % 6 == 0 {\n        return true\n    }\n    if n ==\
    \ 7 && x % 7 == 0 {\n        return true\n    }\n    if n == 8 && x % 8 == 0 {\n\
    \        return true\n    }\n    if n == 9 && x % 9 == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmppjt6fkcg_test.go:92: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__6 (0.00s)\n        tmppjt6fkcg_test.go:92:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__7\
    \ (0.00s)\n        tmppjt6fkcg_test.go:92: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmppjt6fkcg_test.go:92:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == n {\n        return\
    \ true\n    }\n    m := n\n    for x > m {\n        m *= n\n    }\n    return\
    \ m == x\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp4s1qnhmo_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 0; i < 1000; i++ {\n        if n**i == x {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp11ory4sx_test.go:26:15: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    y := x\n    if n == 0 {\n        return x == 1\n    }\n    for x % n\
    \ == 0 {\n        x /= n\n    }\n    return x == 1\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ecqpisx_test.go:25:5: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var tmp int\n    if x < 0 || n < 0 {\n        return false\n    }\n \
    \   tmp = n\n    for tmp <= x {\n        if tmp == x {\n            return true\n\
    \        }\n        tmp *= n\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpe3h4vwml_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 0; ; i++ {\n        test := n ** i\n        if test == x {\n\
    \            return true\n        } else if test > x {\n            return false\n\
    \        }\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7m228t8_test.go:26:22: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    if x == n {\n        return true\n    }\n    return x % n\
    \ == 0 && is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmp8djykcgg_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__8\
    \ (0.00s)\n        tmpjbxopefj_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpjbxopefj_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n < 1 {\n        return false\n    }\n    for i := 0; i < 1000; i++\
    \ {\n        if int(math.Pow(float64(n), float64(i))) == x {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uxq7vge_test.go:29:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n\n    x /= n\n    if x == 1\
    \ {\n        return true\n    }\n\n    for x % n == 0 {\n        x /= n\n    \
    \    if x == 1 {\n            return true\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; i <= x; i++ {\n        if n ** i == x {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpraat88dw_test.go:26:17: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n <= 0 {\n        return false\n    }\n    if x < 0 {\n        return\
    \ false\n    }\n    for x % n == 0 {\n        x /= n\n    }\n    return x == 1\n\
    }\n\ntype test \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkk5r2s_w_test.go:37:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    pow, exp := x, 0\n    for {\n        if pow == 1 {\n            return\
    \ exp % n == 0\n        } else if pow % n != 0 {\n            return false\n \
    \       }\n        pow /= n\n        exp++\n    }\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmp6qfpi5jo_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmp6qfpi5jo_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for i := 1; i < 10; i++ {\n        if int(float64(x) * float64(x)) ==\
    \ x * x {\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__1\
    \ (0.00s)\n        tmpnddho383_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__5 (0.00s)\n        tmpnddho383_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__6\
    \ (0.00s)\n        tmpnddho383_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__7 (0.00s)\n        tmpnddho383_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    // your code here\n    return true\n}\n\nfunc TestIs_Simple_Power(t *testing.T)\
    \ {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__1\
    \ (0.00s)\n        tmp2zjme1pv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__5 (0.00s)\n        tmp2zjme1pv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__6\
    \ (0.00s)\n        tmp2zjme1pv_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__7 (0.00s)\n        tmp2zjme1pv_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for {\n        if x == 1 {\n            return true\n        }\n    \
    \    if x % n != 0 {\n            return false\n        }\n        x /= n\n  \
    \  }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073492
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for x % n == 0 {\n        x /= n\n    }\n    return x == 1\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073495
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    }\n    for x > n {\n        if\
    \ x % n != 0 {\n            return false\n        }\n        x /= n\n    }\n \
    \   return x == n\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpn5l1qkb9_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == n {\n        return true\n    }\n    if x % n != 0 {\n      \
    \  return false\n    }\n    return is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpghhw6lm__test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    for power := n; power\
    \ <= x; power *= n {\n        if power == x {\n            return true\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n\
    \  candidate := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16,\
    \ 2), expected: true },\n     { actual: candidate(143214, 16), expected: false\
    \ },\n     { actual: candidate(4, 2), expected: true },\n     { actual: candidate(9,\
    \ 3), expected: true },\n     { actual: candidate(16, 4), expected: true },\n\
    \     { actual: candidate(24, 2), expected: false },\n     { actual: candidate(128,\
    \ 4), expected: false },\n     { actual: candidate(12, 6), expected: false },\n\
    \     { actual: candidate(1, 1), expected: true },\n     { actual: candidate(1,\
    \ 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpc8c20lto_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return (x % n == 0) && is_simple_power(x / n, n)\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f348?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_simple_power(0x1?,\
    \ 0x1?)\n\t/tmp/tmpm6b9aael_test.go:24 +0x58 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6b8\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef699\ncommand-line-arguments_test.is_simple_power(0x0?,\
    \ 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25 +0x39 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef699\n\
    command-line-arguments_test.is_simple_power(0x0?, 0x0?)\n\t/tmp/tmpm6b9aael_test.go:25\
    \ +0x39 "
  timestamp: 1660073484
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    i := 1\n    res := 1\n    for {\n        res *= n\n      \
    \  if res == x {\n            return true\n        }\n        if res > x {\n \
    \           return false\n        }\n        i++\n    }\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    t := float64(x)\n    for t > 1 {\n        if t == 1 {\n            return\
    \ true\n        }\n        t = t / float64(n)\n    }\n    return false\n}\n\n\
    type TestData \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr7_h_byx_test.go:35:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    return false\n}\n\ntype SimplePowerTests []\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppikahplr_test.go:28:25: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    q := n\n    for i := 0; i < 10000; i++ {\n        if q ==\
    \ x {\n            return true\n        }\n        q *= n\n    }\n    return false\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    if x == 1 {\n        return\
    \ false\n    }\n    return x%n == 0 && is_simple_power(x/n, n)\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpmzi3ib25_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__2 (0.00s)\n        tmpmzi3ib25_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__3\
    \ (0.00s)\n        tmpmzi3ib25_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__4 (0.00s)\n        tmpmzi3ib25_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpmzi3ib25_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 && x == 1 {\n        return true\n    }\n    if n == 1 && x\
    \ != 1 {\n        return false\n    }\n    if x == 1 {\n        return false\n\
    \    }\n    var pow int = n\n    for pow < x {\n        pow *= n\n    }\n    if\
    \ pow == x {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpufg89ta9_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if n == 1 {\n        return x == 1\n    }\n    for i := 1; ; i++ {\n\
    \        x = x / n\n        if x == 1 {\n            return true\n        }\n\
    \        if x < n {\n            return false\n        }\n    }\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmp8otabok3_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmp8otabok3_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    simplePower := 1\n    for i := 0; i < n; i++ {\n        simplePower *=\
    \ n\n        if simplePower == x {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__0\
    \ (0.00s)\n        tmpht9aaqxa_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__9 (0.00s)\n        tmpht9aaqxa_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 {\n        return true\n    }\n    r := float64(x)\n    for\
    \ r > float64(n) {\n        r = r / float64(n)\n    }\n    return r == float64(n)\n\
    }\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x == 1 && n == 1 {\n        return true\n    }\n    if x == 1 && n\
    \ != 1 {\n        return false\n    }\n    if x == n {\n        return true\n\
    \    }\n    if x%n != 0 {\n        return false\n    }\n    return is_simple_power(x/n,\
    \ n)\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpztfl_rur_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    i := 1\n    for ; i <= x / n; i++ {\n        if n * n * i == x {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__5\
    \ (0.00s)\n        tmpmx_9zdh4_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Simple_Power/test_num__6 (0.00s)\n        tmpmx_9zdh4_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpmx_9zdh4_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var simplePower int\n    for i := 1; i < x; i++ {\n        simplePower\
    \ = n ** i\n        if simplePower == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ts0gcut_test.go:27:28: invalid operation: cannot indirect i (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    if x < 0 || n <= 0 {\n        return false\n    }\n\n    if x == 1 {\n\
    \        return true\n    }\n\n    if x % n != 0 {\n        return false\n   \
    \ }\n\n    return is_simple_power(x / n, n)\n}\n\ntype TestCase \nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp89tfliv8_test.go:40:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    var power int = n\n    for {\n        if power == x {\n            return\
    \ true\n        }\n        if power > x {\n            return false\n        }\n\
    \        power *= n\n    }\n}\n\nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate\
    \ := is_simple_power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected:\
    \ true },\n     { actual: candidate(143214, 16), expected: false },\n     { actual:\
    \ candidate(4, 2), expected: true },\n     { actual: candidate(9, 3), expected:\
    \ true },\n     { actual: candidate(16, 4), expected: true },\n     { actual:\
    \ candidate(24, 2), expected: false },\n     { actual: candidate(128, 4), expected:\
    \ false },\n     { actual: candidate(12, 6), expected: false },\n     { actual:\
    \ candidate(1, 1), expected: true },\n     { actual: candidate(1, 12), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmps33o8d2n_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 0
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    t := 1\n    for t < x {\n        t *= n\n    }\n    return t == x\n}\n\
    \nfunc TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n   \
    \  { actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
    \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n \
    \    { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24,\
    \ 2), expected: false },\n     { actual: candidate(128, 4), expected: false },\n\
    \     { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1,\
    \ 1), expected: true },\n     { actual: candidate(1, 12), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073493
- exit_code: null
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n    for x % n == 0 {\n        x /= n\n    }\n    return x == 1\n}\n\nfunc\
    \ TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(16, 2), expected: true },\n     { actual:\
    \ candidate(143214, 16), expected: false },\n     { actual: candidate(4, 2), expected:\
    \ true },\n     { actual: candidate(9, 3), expected: true },\n     { actual: candidate(16,\
    \ 4), expected: true },\n     { actual: candidate(24, 2), expected: false },\n\
    \     { actual: candidate(128, 4), expected: false },\n     { actual: candidate(12,\
    \ 6), expected: false },\n     { actual: candidate(1, 1), expected: true },\n\
    \     { actual: candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073495
- exit_code: 1
  program: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Your task is to write a function that returns true if a number x is\
    \ a simple\n// power of n and false in other cases.\n// x is a simple power of\
    \ n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
    \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
    \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n//\
    \ >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool\
    \ {\n\tres := 1\n\tfor i := 0; i < x; i++ {\n\t\tres *= n\n\t\tif res == x {\n\
    \t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc TestIs_Simple_Power(t\
    \ *testing.T) {\n  candidate := is_simple_power\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(16, 2), expected: true },\n     { actual: candidate(143214, 16), expected:\
    \ false },\n     { actual: candidate(4, 2), expected: true },\n     { actual:\
    \ candidate(9, 3), expected: true },\n     { actual: candidate(16, 4), expected:\
    \ true },\n     { actual: candidate(24, 2), expected: false },\n     { actual:\
    \ candidate(128, 4), expected: false },\n     { actual: candidate(12, 6), expected:\
    \ false },\n     { actual: candidate(1, 1), expected: true },\n     { actual:\
    \ candidate(1, 12), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Simple_Power (0.00s)\n    --- FAIL: TestIs_Simple_Power/test_num__9\
    \ (0.00s)\n        tmpnp6ty_6s_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
