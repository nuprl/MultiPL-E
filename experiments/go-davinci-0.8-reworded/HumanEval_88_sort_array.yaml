name: HumanEval_88_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a list of non-negative integers, return a cogo of the given list after\
  \ sorting,\n// you will sort the given list in ascending order if the sum( first\
  \ index value, last index value) is odd,\n// or sort it in descending order if the\
  \ sum( first index value, last index value) is even.\n// Note:\n// * don't change\
  \ the given list.\n// Examples:\n// >>> sort_array(string{})\n// PATCH list\n//\
  \ >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1,\
  \ 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n\
  // []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
  \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
  \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
  \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
  \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
  \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if len(array) < 2 {\n        return array\n    }\n    switch (array[0]\
    \ + array[len(array) - 1]) % 2 {\n    case 0:\n        return sort_array_desc(array)\n\
    \    default:\n        return sort_array_asc(array)\n    }\n}\n", "    length\
    \ := len(array)\n    if length < 1 {\n        return array\n    }\n    if length\
    \ == 1 {\n        return array\n    }\n    if length == 2 {\n        return array\n\
    \    }\n    if (array[0] + array[length - 1]) % 2 == 0 {\n        return reverse_array(array)\n\
    \    }\n    return array\n}\n", "    arrayLen := len(array)\n    if arrayLen ==\
    \ 0 {\n        return array\n    }\n    flag := (array[0] + array[arrayLen - 1])\
    \ % 2 == 0\n    // fmt.Println(flag)\n    for i := 0; i < arrayLen; i++ {\n  \
    \      for j := 0; j < arrayLen - i - 1; j++ {\n            if flag {\n      \
    \          if array[j] < array[j + 1] {\n                    array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n                }\n            } else {\n   \
    \             if array[j] > array[j + 1] {\n                    array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n", "    var sum int\n    for i, value := range array\
    \ {\n        sum += value\n        if i == 0 {\n            continue\n       \
    \ }\n        if array[i] > array[i-1] {\n            continue\n        }\n   \
    \     array[i], array[i-1] = array[i-1], array[i]\n    }\n    if sum % 2 == 0\
    \ {\n        for i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    }\n    return array\n}\n",
  "    // TODO: Implement this method\n    return array\n}\n", "    var sum int\n\
    \    for i, v := range array {\n        sum += v\n        if i == 0 {\n      \
    \      continue\n        }\n        if v < array[i-1] {\n            tmp := array[i-1]\n\
    \            array[i-1] = v\n            array[i] = tmp\n        }\n    }\n  \
    \  for i, v := range array {\n        if i == 0 {\n            continue\n    \
    \    }\n        if v < array[i-1] {\n            tmp := array[i-1]\n         \
    \   array[i-1] = v\n            array[i] = tmp\n        }\n    }\n    if sum %\
    \ 2 == 0 {\n        for i, v := range array {\n            array[i] = v\n    \
    \    }\n    }\n    return array\n}\n", "    var odd_part []int\n    var even_part\
    \ []int\n    var odd_part_sorted []int\n    var even_part_sorted []int\n    var\
    \ result []int\n    var n int\n    for i := 0; i < len(array); i++ {\n       \
    \ if array[i] % 2 == 0 {\n            even_part = append(even_part, array[i])\n\
    \        } else {\n            odd_part = append(odd_part, array[i])\n       \
    \ }\n    }\n    odd_part_sorted = odd_part\n    even_part_sorted = even_part\n\
    \    for i := 0; i < len(odd_part_sorted) - 1; i++ {\n        for j := i + 1;\
    \ j < len(odd_part_sorted); j++ {\n            if odd_part_sorted[i] > odd_part_sorted[j]\
    \ {\n                n = odd_part_sorted[i]\n                odd_part_sorted[i]\
    \ = odd_part_sorted[j]\n                odd_part_sorted[j] = n\n            }\n\
    \        }\n    }\n    for i := 0; i < len(even_part_sorted) - 1; i++ {\n    \
    \    for j := i + 1; j < len(even_part_sorted); j++ {\n            if even_part_sorted[i]\
    \ < even_part_sorted[j] {\n                n = even_part_sorted[i]\n         \
    \       even_part_sorted[i] = even_part_sorted[j]\n                even_part_sorted[j]\
    \ = n\n            }\n        }\n    }\n    for i := 0; i < len(odd_part_sorted);\
    \ i++ {\n        result = append(result, odd_part_sorted[i])\n    }\n    for i\
    \ := 0; i < len(even_part_sorted); i++ {\n        result = append(result, even_part_sorted[i])\n\
    \    }\n    return result\n}\n", "    fmt.Println(\"array:\", array)\n    length\
    \ := len(array)\n    if length == 0 {\n        return array\n    }\n\n    // max\
    \ number: 5, 4\n    // or: 5, 4, 3\n    // or: 5, 4, 3, 2\n    // or: 5, 4, 3,\
    \ 2, 1\n    // or: 5, 4, 3, 2, 1, 0\n    if length == 1 {\n        return array\n\
    \    }\n\n    // max number: 4, 3, 5\n    // or: 4, 3, 2, 5\n    // or: 4, 3,\
    \ 2, 1, 5\n    // or: 4, 3, 2, 1, 0, 5\n    if length == 2 {\n        if array[0]\
    \ > array[1] {\n            return []int{array[1], array[0]}\n        }\n    \
    \    return array\n    }\n\n    // max number: 3, 2, 4, 5\n    // or: 3, 2, 1,\
    \ 4, 5\n    // or: 3, 2, 1, 0, 4, 5\n    if length == 3 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        if array[1] > array[2] {\n            array[1], array[2] = array[2],\
    \ array[1]\n        }\n        if array[0] > array[1] {\n            array[0],\
    \ array[1] = array[1], array[0]\n        }\n        return array\n    }\n\n  \
    \  // max number: 2, 1, 3, 4, 5\n    // or: 2, 1, 0, 3, 4, 5\n    if length ==\
    \ 4 {\n        // max number: 3, 4, 5\n        if array[0] > array[1] {\n    \
    \        array[0], array[1] = array[1], array[0]\n        }\n        if array[2]\
    \ > array[3] {\n            array[2], array[3] = array[3], array[2]\n        }\n\
    \        if array[0] > array[2] {\n            array[0], array[2] = array", " \
    \   arrayLen := len(array)\n    if arrayLen == 0 {\n        fmt.Println(\"PATCH\
    \ list\")\n        return array\n    }\n\n    if arrayLen == 1 {\n        return\
    \ array\n    }\n\n    if array[0] % 2 == array[arrayLen - 1] % 2 {\n        //\
    \ odd\n        return sortArrayInAscendingOrder(array)\n    } else {\n       \
    \ // even\n        return sortArrayInDescendingOrder(array)\n    }\n}\n", "  \
    \  n := len(array)\n    if n <= 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[n-1]) & 1 == 0 {\n        k := n - 1\n        for i := 0; i < n/2; i++\
    \ {\n            array[i], array[k-i] = array[k-i], array[i]\n        }\n    }\n\
    \    k := n / 2\n    for i := 0; i < k; i++ {\n        for j := k; j < n-1; j++\
    \ {\n            if array[j] < array[j+1] {\n                array[j], array[j+1]\
    \ = array[j+1], array[j]\n            }\n        }\n    }\n    return array\n\
    }\n", "    if len(array) < 2 {\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        return reverse_array(array)\n \
    \   }\n    sorted := array\n    for i := 0; i < len(sorted) - 1; i++ {\n     \
    \   for j := i + 1; j < len(sorted); j++ {\n            if sorted[i] > sorted[j]\
    \ {\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n           \
    \ }\n        }\n    }\n    return sorted\n}\n", "    arrayLen := len(array)\n\
    \    var f_v, l_v int\n    var sum int\n    if arrayLen != 0 {\n        f_v =\
    \ array[0]\n        l_v = array[arrayLen-1]\n        sum = f_v + l_v\n    } else\
    \ {\n        return nil\n    }\n    sort_array := make([]int, arrayLen)\n    start_index\
    \ := 0\n    end_index := arrayLen - 1\n    if sum % 2 == 0 {\n        for _, v\
    \ := range array {\n            if v % 2 == 0 {\n                sort_array[start_index]\
    \ = v\n                start_index++\n            } else {\n                sort_array[end_index]\
    \ = v\n                end_index--\n            }\n        }\n    } else {\n \
    \       for _, v := range array {\n            if v % 2 == 0 {\n             \
    \   sort_array[end_index] = v\n                end_index--\n            } else\
    \ {\n                sort_array[start_index] = v\n                start_index++\n\
    \            }\n        }\n    }\n    return sort_array\n}\n", "    n := len(array)\n\
    \    if n <= 1 {\n        return array\n    }\n    if (array[0] + array[n-1])\
    \ & 1 == 0 {\n        for i := 0; i < n/2; i++ {\n            array[i], array[n-1-i]\
    \ = array[n-1-i], array[i]\n        }\n    }\n    return array\n}\n", "    first\
    \ := array[0]\n    last := array[len(array) - 1]\n    if (first + last) % 2 ==\
    \ 0 {\n        fmt.Println(\"odd\")\n        for j := 0; j < len(array); j++ {\n\
    \            for i := 0; i < len(array) - 1; i++ {\n                if array[i]\
    \ < array[i + 1] {\n                    temp := array[i]\n                   \
    \ array[i] = array[i + 1]\n                    array[i + 1] = temp\n         \
    \       }\n            }\n        }\n    } else {\n        fmt.Println(\"even\"\
    )\n        for j := 0; j < len(array); j++ {\n            for i := 0; i < len(array)\
    \ - 1; i++ {\n                if array[i] > array[i + 1] {\n                 \
    \   temp := array[i]\n                    array[i] = array[i + 1]\n          \
    \          array[i + 1] = temp\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n", "    var (\n        a, b int\n        size = len(array)\n\
    \    )\n    for i, j := 0, size - 1; i < j; {\n        a, b = array[i], array[j]\n\
    \        sum := a + b\n        if sum & 1 == 0 {\n            array[i], array[j]\
    \ = b, a\n        }\n        i++\n        j--\n    }\n    return array\n}\n",
  "    left := array[0]\n    right := array[len(array) - 1]\n    if (left + right)\
    \ % 2 == 0 {\n        // sort in descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := 0; j < len(array) - 1 - i; j++ {\n        \
    \        if array[j] < array[j + 1] {\n                    tmp := array[j]\n \
    \                   array[j] = array[j + 1]\n                    array[j + 1]\
    \ = tmp\n                }\n            }\n        }\n    } else {\n        //\
    \ sort in ascending order\n        for i := 0; i < len(array) - 1; i++ {\n   \
    \         for j := 0; j < len(array) - 1 - i; j++ {\n                if array[j]\
    \ > array[j + 1] {\n                    tmp := array[j]\n                    array[j]\
    \ = array[j + 1]\n                    array[j + 1] = tmp\n                }\n\
    \            }\n        }\n    }\n    return array\n}\n", "    if len(array) <\
    \ 2 {\n        return array\n    }\n    var tmp int\n    for i:= 0; i < len(array)\
    \ - 1; i++ {\n        for j := i + 1; j < len(array); j++ {\n            if (array[i]\
    \ + array[len(array) - 1 - i]) % 2 != 0 {\n                if array[i] > array[j]\
    \ {\n                    tmp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            } else {\n\
    \                if array[i] < array[j] {\n                    tmp = array[i]\n\
    \                    array[i] = array[j]\n                    array[j] = tmp\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n", " \
    \   if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n    var sum int\n\
    \    for k, v := range array {\n        sum += v\n        if k == len(array) -\
    \ 1 {\n            break\n        }\n    }\n    if sum % 2 == 0 {\n        for\
    \ i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array) -\
    \ 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return array\n\
    }\n", "    if len(array) == 0 {\n        return nil\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    var (\n        array_left = []int{}\n\
    \        array_right = []int{}\n        start = 0\n        end = len(array) -\
    \ 1\n        last_compare = array[start]\n        index = start + 1\n    )\n \
    \   for {\n        if index > end {\n            break\n        }\n        if\
    \ array[index] > last_compare {\n            array_left = append(array_left, array[index])\n\
    \        } else {\n            array_right = append(array_right, array[index])\n\
    \        }\n        index++\n    }\n    array_left = sort_array(array_left)\n\
    \    array_right = sort_array(array_right)\n    return append(append(array_left,\
    \ last_compare), array_right...)\n}\n", "    if len(array) == 0 {\n        return\
    \ nil\n    }\n    first, last := array[0], array[len(array)-1]\n    if (first\
    \ + last) % 2 == 0 {\n        sort_array_desc(array)\n    } else {\n        sort_array_asc(array)\n\
    \    }\n    return array\n}\n", "    length := len(array)\n    if length <= 1\
    \ {\n        return array\n    }\n    compare := array[0] + array[length-1]\n\
    \    for i := 0; i < length; i++ {\n        for j := 0; j < length-i-1; j++ {\n\
    \            if compare%2 == 0 {\n                if array[j] < array[j+1] {\n\
    \                    array[j], array[j+1] = array[j+1], array[j]\n           \
    \     }\n            } else {\n                if array[j] > array[j+1] {\n  \
    \                  array[j], array[j+1] = array[j+1], array[j]\n             \
    \   }\n            }\n        }\n    }\n    return array\n}\n", "    if len(array)\
    \ == 0 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n", "    length := len(array)\n    if length <= 1 {\n        return array\n\
    \    }\n    if (array[0] + array[length - 1]) % 2 == 0 {\n        return QuickSort(array,\
    \ true)\n    }\n    return QuickSort(array, false)\n}\n", "    new_array := []int{}\n\
    \    if len(array) == 0 {\n        fmt.Println(\"[]int{}\")\n        return new_array\n\
    \    }\n    if len(array) == 1 {\n        new_array = append(new_array, array[0])\n\
    \        fmt.Println(new_array)\n        return new_array\n    }\n    sum := array[0]\
    \ + array[len(array) - 1]\n    if sum % 2 == 0 {\n        for i := len(array)\
    \ - 1; i >= 0; i-- {\n            new_array = append(new_array, array[i])\n  \
    \      }\n    } else {\n        for i := 0; i < len(array); i++ {\n          \
    \  new_array = append(new_array, array[i])\n        }\n    }\n    fmt.Println(new_array)\n\
    \    return new_array\n}\n", "    var (\n        left = 0\n        right = len(array)\
    \ - 1\n        temp = 0\n    )\n    for left < right {\n        for left < right\
    \ && (array[left] + array[0]) % 2 == 1 {\n            left++\n        }\n    \
    \    for left < right && (array[right] + array[0]) % 2 == 0 {\n            right--\n\
    \        }\n        if left < right {\n            temp = array[left]\n      \
    \      array[left] = array[right]\n            array[right] = temp\n        }\n\
    \    }\n    if left == right && (array[left] + array[0]) % 2 == 0 {\n        left++\n\
    \    }\n    if left > 0 {\n        array = append(array[:0], array[:left]...)\n\
    \    }\n    return array\n}\n", "    sum := array[0] + array[len(array) - 1]\n\
    \    fmt.Println(sum)\n    if sum % 2 == 0 {\n        for i := 0; i < len(array)\
    \ / 2; i++ {\n            max := array[i]\n            var index int\n       \
    \     for j := i; j < len(array) - i; j++ {\n                if array[j] > max\
    \ {\n                    max = array[j]\n                    index = j\n     \
    \           }\n            }\n            if index != i {\n                if\
    \ index != len(array) - i - 1 {\n                    array[index] = array[len(array)\
    \ - i - 1]\n                }\n                array[len(array) - i - 1] = max\n\
    \            }\n        }\n    } else {\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            min := array[i]\n            var index int\n         \
    \   for j := i; j < len(array) - i; j++ {\n                if array[j] < min {\n\
    \                    min = array[j]\n                    index = j\n         \
    \       }\n            }\n            if index != i {\n                if index\
    \ != len(array) - i - 1 {\n                    array[index] = array[len(array)\
    \ - i - 1]\n                }\n                array[len(array) - i - 1] = min\n\
    \            }\n        }\n    }\n    return array\n}\n", "    n := len(array)\n\
    \    if n <= 1 {\n        return array\n    }\n    if (array[0] + array[n-1])\
    \ % 2 == 0 {\n        for i := 0; i < n/2; i++ {\n            array[i], array[n-1-i]\
    \ = array[n-1-i], array[i]\n        }\n    }\n    i, j := 0, n-1\n    if array[i]\
    \ > array[j] {\n        array[i], array[j] = array[j], array[i]\n    }\n    i,\
    \ j = i+1, j-1\n    for i < j {\n        if array[i] > array[j] {\n          \
    \  array[i], array[j] = array[j], array[i]\n        }\n        i, j = i+1, j-1\n\
    \    }\n    return array\n}\n", "    if len(array) == 0 {\n        return []int{}\n\
    \    }\n    array_sum := array[0] + array[len(array) - 1]\n    if array_sum %\
    \ 2 == 0 {\n        for i, j := 0, len(array) - 1; i < j; i, j = i + 1, j - 1\
    \ {\n            array[i], array[j] = array[j], array[i]\n        }\n    }\n \
    \   return array\n}\n", "    if array == nil || len(array) == 0 {\n        return\
    \ array\n    }\n    first, last := array[0], array[len(array) - 1]\n    if (first\
    \ + last) % 2 == 0 {\n        // the sum is even\n        for i := 0; i < len(array);\
    \ i++ {\n            max, index := i, i\n            for j := i + 1; j < len(array);\
    \ j++ {\n                if array[j] > max {\n                    max, index =\
    \ array[j], j\n                }\n            }\n            array[i], array[index]\
    \ = array[index], array[i]\n        }\n    } else {\n        // the sum is odd\n\
    \        for i := 0; i < len(array); i++ {\n            min, index := i, i\n \
    \           for j := i + 1; j < len(array); j++ {\n                if array[j]\
    \ < min {\n                    min, index = array[j], j\n                }\n \
    \           }\n            array[i], array[index] = array[index], array[i]\n \
    \       }\n    }\n    return array\n}\n", "    if len(array) < 2 {\n        return\
    \ array\n    }\n    if sum(array[0], array[len(array)-1]) % 2 == 0 {\n       \
    \ array = sort(array, true)\n    } else {\n        array = sort(array, false)\n\
    \    }\n    return array\n}\n", "    if array == nil || len(array) <= 1 {\n  \
    \      return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 == 0\
    \ {\n        return sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n", "    var result []int\n    if len(array) == 0 {\n        return result\n\
    \    }\n    if len(array) == 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        // desc\n        for len(array)\
    \ > 0 {\n            max_value := array[0]\n            for _, v := range array\
    \ {\n                if v > max_value {\n                    max_value = v\n \
    \               }\n            }\n            result = append(result, max_value)\n\
    \            for k, v := range array {\n                if v == max_value {\n\
    \                    array = append(array[:k], array[k+1:]...)\n             \
    \       break\n                }\n            }\n        }\n    } else {\n   \
    \     // asc\n        for len(array) > 0 {\n            min_value := array[0]\n\
    \            for _, v := range array {\n                if v < min_value {\n \
    \                   min_value = v\n                }\n            }\n        \
    \    result = append(result, min_value)\n            for k, v := range array {\n\
    \                if v == min_value {\n                    array = append(array[:k],\
    \ array[k+1:]...)\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    var new_array []int\n    i :=\
    \ 0\n    j := len(array) - 1\n    for i < j {\n        if array[i] % 2 == 0 &&\
    \ array[j] % 2 == 0 {\n            i++\n            continue\n        } else if\
    \ array[i] % 2 == 1 && array[j] % 2 == 1 {\n            j--\n            continue\n\
    \        }\n        new_array = append(new_array, array[i])\n        new_array\
    \ = append(new_array, array[j])\n        i++\n        j--\n    }\n    if i ==\
    \ j {\n        new_array = append(new_array, array[i])\n    }\n    return new_array\n\
    }\n", "    if array == nil || len(array) == 0 {\n        return array\n    }\n\
    \    return qsort(array, 0, len(array) - 1)\n}\n", "    var sorted_array []int\n\
    \    return sorted_array\n}\n", "    array_len := len(array)\n    if array_len\
    \ <= 1 {\n        return array\n    }\n    if (array[0] + array[array_len - 1])\
    \ % 2 == 0 {\n        array = Sort_array_descending(array)\n    } else {\n   \
    \     array = Sort_array_ascending(array)\n    }\n    return array\n}\n", "  \
    \  for i := 0; i < len(array); i++ {\n        for j := 0; j < len(array) - 1;\
    \ j++ {\n            if array[j] < array[j + 1] {\n                array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n            }\n        }\n    }\n    return array\n\
    }\n", "    size := len(array)\n    if size == 0 {\n        return array\n    }\n\
    \    if size == 1 {\n        return array\n    }\n    if (array[0] + array[size\
    \ - 1]) % 2 == 0 {\n        // Descending Sort\n        sort_descending(array)\n\
    \    } else {\n        // Ascending Sort\n        sort_ascending(array)\n    }\n\
    \    return array\n}\n", "    if len(array) < 2 {\n        return array\n    }\n\
    \    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n\
    \    }\n    return sort_array_asc(array)\n}\n", "    length := len(array)\n  \
    \  fmt.Println(length)\n    if length == 0 {\n        return array\n    }\n  \
    \  quick_sort(array, 0, length - 1)\n    return array\n}\n", "    return array\n\
    }\n", "    var is_odd = func(n int) bool {\n        return n & 1 == 1\n    }\n\
    \    var sum = func(a, b int) int {\n        return a + b\n    }\n    var is_odd_sum\
    \ = func(a, b int) bool {\n        return is_odd(sum(a, b))\n    }\n    var sort_by_odd_sum\
    \ = func(left, right int) bool {\n        if is_odd_sum(left, right) {\n     \
    \       return left < right\n        } else {\n            return left > right\n\
    \        }\n    }\n    var sorted = merge_sort(array, sort_by_odd_sum)\n    return\
    \ sorted\n}\n", "    if len(array) <= 1 {\n        return array\n    }\n    if\
    \ (array[0] + array[len(array) - 1]) % 2 == 0 {\n        return sort_array_with_descending_order(array)\n\
    \    }\n    return sort_array_with_ascending_order(array)\n}\n", "    if len(array)\
    \ <= 1 {\n        return array\n    }\n    if len(array) % 2 == 0 {\n        return\
    \ sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n", "    arrayLen := len(array)\n    if arrayLen == 0 {\n        return array\n\
    \    }\n    for i := 0; i < arrayLen; i++ {\n        for j := 0; j < arrayLen-i-1;\
    \ j++ {\n            if ((array[0] + array[arrayLen-1]) & 1) == 0 {\n        \
    \        if array[j] < array[j+1] {\n                    array[j], array[j+1]\
    \ = array[j+1], array[j]\n                }\n            } else {\n          \
    \      if array[j] > array[j+1] {\n                    array[j], array[j+1] =\
    \ array[j+1], array[j]\n                }\n            }\n        }\n    }\n \
    \   return array\n}\n", "    // TODO\n    // if len(array) < 2 {\n    //     return\
    \ array\n    // }\n    // oddOrEven := 0\n    // for _, v := range array {\n \
    \   //     oddOrEven += v\n    // }\n    // oddOrEven = oddOrEven % 2\n    //\
    \ return sort_array(oddOrEven)\n    return array\n}\n", "    // Write your code\
    \ here\n    // return string\n    if len(array) == 0 {\n        return array\n\
    \    }\n\n    odd_array := make([]int, 0)\n    for _, value := range array {\n\
    \        if value % 2 == 1 {\n            odd_array = append(odd_array, value)\n\
    \        }\n    }\n\n    odd_array = BubbleSort(odd_array)\n\n    k := 0\n   \
    \ for i, value := range array {\n        if value % 2 == 1 {\n            array[i]\
    \ = odd_array[k]\n            k++\n        }\n    }\n\n    if len(array) % 2 ==\
    \ 0 {\n        return Reverse(array)\n    }\n\n    return array\n}\n", "    length\
    \ := len(array)\n    if length == 0 {\n        return []int{}\n    }\n    var\
    \ result []int\n    result = make([]int, length)\n    for i := 0; i < length;\
    \ i++ {\n        result[i] = array[i]\n    }\n    if (result[0] + result[length\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < length/2; i++ {\n            if result[i]\
    \ > result[length - 1 - i] {\n                result[i], result[length - 1 - i]\
    \ = result[length - 1 - i], result[i]\n            }\n        }\n    } else {\n\
    \        for i := 0; i < length/2; i++ {\n            if result[i] < result[length\
    \ - 1 - i] {\n                result[i], result[length - 1 - i] = result[length\
    \ - 1 - i], result[i]\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(array) == 0 {\n        return nil\n    }\n    is_odd := (array[0] +\
    \ array[len(array) - 1]) % 2 == 1\n    for i := 1; i < len(array); i++ {\n   \
    \     for j := i; j > 0; j-- {\n            if is_odd {\n                if array[j]\
    \ < array[j - 1] {\n                    array[j], array[j - 1] = array[j - 1],\
    \ array[j]\n                }\n            } else {\n                if array[j]\
    \ > array[j - 1] {\n                    array[j], array[j - 1] = array[j - 1],\
    \ array[j]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n", "    length := len(array)\n    even := (array[0] + array[length - 1]) %\
    \ 2 == 0\n    var i, j int\n    for i = 0; i < length - 1; i++ {\n        for\
    \ j = i + 1; j < length; j++ {\n            if even {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            } else {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n", "    length\
    \ := len(array)\n    if length == 0 {\n        panic(\"array was empty\")\n  \
    \  }\n    if length == 1 {\n        return array\n    }\n    odd := length%2\n\
    \    var index1 int\n    var index2 int\n    for {\n        for index1, index2\
    \ = 0, length-1; index1 < index2; {\n            if odd == (array[index1]+array[index2])%2\
    \ {\n                array[index1], array[index2] = array[index2], array[index1]\n\
    \            }\n            index1++\n            index2--\n        }\n      \
    \  if index1 == index2 || index1 > index2 {\n            break\n        }\n  \
    \  }\n    return array\n}\n", "    if len(array) == 0 {\n        return []int{}\n\
    \    }\n\n    total := 0\n    for _, v := range array {\n        total += v\n\
    \    }\n\n    if total % 2 == 0 {\n        return reverse_array(array)\n    }\n\
    \n    return array\n}\n", "    length := len(array)\n    if length <= 1 {\n  \
    \      return array\n    }\n\n    oddSum := array[0] + array[length - 1]\n   \
    \ ascending := oddSum % 2 == 1\n    for i := 0; i < length - 1; i++ {\n      \
    \  for j := i + 1; j < length; j++ {\n            if ascending {\n           \
    \     if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            } else {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n", " \
    \   if len(array) < 2 {\n        return array\n    }\n    odd := true\n    for\
    \ i := 0; i < len(array); i++ {\n        for j := i + 1; j < len(array); j++ {\n\
    \            if odd {\n                if array[i] > array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    } else {\n                if array[i] < array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \        odd = !odd\n    }\n    return array\n}\n", "    if len(array) == 0 {\n\
    \        return array\n    }\n\n    if array[0] % 2 == 0 {\n        return array\n\
    \    }\n\n    i := 0\n    j := len(array) - 1\n    for i < j {\n        if array[i]\
    \ % 2 == 0 {\n            for j > i {\n                if array[j] % 2 == 1 {\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \     break\n                }\n                j--\n            }\n        }\n\
    \        i++\n    }\n\n    i = 0\n    j = len(array) - 1\n    for i < j {\n  \
    \      if array[0] + array[len(array) - 1] % 2 == 0 {\n            array[i], array[j]\
    \ = array[j], array[i]\n        }\n        i++\n        j--\n    }\n\n    return\
    \ array\n}\n", "    new_array := make([]int, len(array))\n    copy(new_array,\
    \ array)\n    if len(new_array) == 0 {\n        return new_array\n    }\n    if\
    \ (new_array[0] + new_array[len(new_array) - 1]) % 2 == 0 {\n        for i :=\
    \ 0; i < len(new_array) / 2; i++ {\n            left_index := len(new_array) -\
    \ i - 1\n            right_index := i\n            new_array[right_index], new_array[left_index]\
    \ = new_array[left_index], new_array[right_index]\n        }\n    }\n    return\
    \ new_array\n}\n", "    return []int{}\n}\n", "    if len(array) == 0 {\n    \
    \    return array\n    }\n\n    reverse := (array[0] + array[len(array) - 1])\
    \ % 2 == 0\n    for i := 0; i < len(array) - 1; i++ {\n        for j := i + 1;\
    \ j < len(array); j++ {\n            if reverse {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            } else {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n", "    fmt.Println(\"\
    input=\", array)\n    return nil\n}\n", "    if len(array) == 0 {\n        fmt.Println(\"\
    PATCH list\")\n        return array\n    }\n\n    for i := 0; i < len(array);\
    \ i++ {\n        for j := i + 1; j < len(array); j++ {\n            if need_swap(array,\
    \ i, j) {\n                tmp := array[i]\n                array[i] = array[j]\n\
    \                array[j] = tmp\n            }\n        }\n    }\n\n    return\
    \ array\n}\n", "    if len(array) <= 1 {\n        return array\n    }\n    return\
    \ sort(array, 0, len(array) - 1)\n}\n", "    return array\n}\n", "    var ret\
    \ = make([]int, len(array))\n    if len(array) < 2 {\n        return array\n \
    \   }\n    var i = 0\n    var head = 0\n    var tail = len(array) - 1\n    var\
    \ odd = ((array[0] + array[len(array) - 1]) % 2) == 1\n    for ;i < len(array);\
    \ i++ {\n        if odd {\n            if (array[i] % 2) == 1 {\n            \
    \    ret[head] = array[i]\n                head++\n            }\n        } else\
    \ {\n            if (array[i] % 2) == 0 {\n                ret[tail] = array[i]\n\
    \                tail--\n            }\n        }\n    }\n    head = 0\n    tail\
    \ = len(array) - 1\n    if odd {\n        head = 1\n    } else {\n        tail\
    \ = len(array) - 2\n    }\n    for ;i < len(array); i++ {\n        if odd {\n\
    \            if (array[i] % 2) == 0 {\n                ret[head] = array[i]\n\
    \                head++\n            }\n        } else {\n            if (array[i]\
    \ % 2) == 1 {\n                ret[tail] = array[i]\n                tail--\n\
    \            }\n        }\n    }\n    return ret\n}\n", "    length := len(array)\n\
    \    if length <= 1 {\n        return array\n    }\n\n    // find the first place\
    \ of non-zero number.\n    index := 0\n    for i := 0; i < length; i++ {\n   \
    \     if array[i] != 0 {\n            index = i\n            break\n        }\n\
    \    }\n\n    // move all the non-zero numbers to the front of the array.\n  \
    \  for i := index + 1; i < length; i++ {\n        if array[i] != 0 {\n       \
    \     array[index], array[i] = array[i], array[index]\n            index++\n \
    \       }\n    }\n\n    // now the array is like: [x, x, x, x, 0, 0, 0, 0]\n \
    \   // we need to find the first place of zero and the last place of non-zero.\n\
    \    first_zero_index := index\n    last_non_zero_index := length - 1\n    for\
    \ i := index; i < length; i++ {\n        if array[i] == 0 {\n            first_zero_index\
    \ = i\n            break\n        }\n    }\n\n    if (first_zero_index + last_non_zero_index)\
    \ % 2 == 0 {\n        // if the sum of first_zero_index and last_non_zero_index\
    \ is even,\n        // we need to sort the array in ascending order.\n       \
    \ for i := index; i < length; i++ {\n            for j := i + 1; j < length; j++\
    \ {\n                if array[i] > array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // if the sum of first_zero_index and last_non_zero_index is odd,\n\
    \        // we need to sort the array in descending order.\n        for i := index;\
    \ i < length; i++ {\n            for j := i + 1; j < length; j++ {\n         \
    \       if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n\n    return array\n\
    }", "    if array == nil || len(array) == 0 {\n        return nil\n    }\n   \
    \ if len(array) == 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n", "    fmt.Println(\"fuck\")\n    return array\n}\n", "    if len(array) <\
    \ 2 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        return append(array[len(array) - 1:], sort_array(array[0:len(array)\
    \ - 1])...)\n    }\n    return append(sort_array(array[1:]), array[0])\n}\n",
  "    // your code goes here.\n    array_len := len(array)\n    if array_len <= 1\
    \ {\n        return array\n    }\n    if is_even(array[0] + array[array_len -\
    \ 1]) {\n        return sort_array_descending(array)\n    }\n    return sort_array_ascending(array)\n\
    }\n", "    //if len(array) == 0 {\n    //    panic(\"PATCH list\")\n    //}\n\
    \    //if len(array) == 1 {\n    //    return array\n    //}\n    //if len(array)\
    \ == 2 {\n    //    if array[0] > array[1] {\n    //        array[0], array[1]\
    \ = array[1], array[0]\n    //    }\n    //    return array\n    //}\n    //if\
    \ array[0] + array[len(array) - 1] % 2 == 0 {\n    //    // \u5076\u6570\n   \
    \ //    array[0], array[len(array) - 1] = array[len(array) - 1], array[0]\n  \
    \  //} else {\n    //    // \u5947\u6570\n    //    array[0], array[len(array)\
    \ - 1] = array[len(array) - 1], array[0]\n    //}\n    //return sort_array(array[1:len(array)\
    \ - 1])\n    return array\n}\n", "    if len(array) < 2 {\n        return array\n\
    \    }\n    sum := array[0] + array[len(array) - 1]\n    asc := sum % 2 == 1\n\
    \    for i := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j < len(array);\
    \ j++ {\n            if asc {\n                if array[i] > array[j] {\n    \
    \                array[i], array[j] = array[j], array[i]\n                }\n\
    \            } else {\n                if array[i] < array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    }\n        }\n    }\n    return array\n}\n", "    if len(array) == 0 {\n\
    \        panic(\"PATCH list\")\n    }\n    if len(array) == 1 {\n        return\
    \ array\n    }\n    index_1, index_2 := 0, len(array) - 1\n    index_sum := array[index_1]\
    \ + array[index_2]\n    if index_sum % 2 == 0 {\n        // descend\n        for\
    \ {\n            if index_1 >= index_2 {\n                break\n            }\n\
    \            if array[index_1] < array[index_2] {\n                array[index_1],\
    \ array[index_2] = array[index_2], array[index_1]\n            }\n           \
    \ index_1 += 1\n            index_2 -= 1\n        }\n    } else {\n        //\
    \ ascend\n        for {\n            if index_1 >= index_2 {\n               \
    \ break\n            }\n            if array[index_1] > array[index_2] {\n   \
    \             array[index_1], array[index_2] = array[index_2], array[index_1]\n\
    \            }\n            index_1 += 1\n            index_2 -= 1\n        }\n\
    \    }\n    return array\n}\n", "    if len(array) == 0 {\n        return array\n\
    \    }\n    if len(array) == 1 {\n        return array\n    }\n    start, end\
    \ := 0, len(array) - 1\n    if array[start] + array[end] % 2 == 0 {\n        quick_sort(array,\
    \ true)\n    } else {\n        quick_sort(array, false)\n    }\n    return array\n\
    }\n", "    var copy_array []int\n    copy(copy_array, array)\n    var first_index,\
    \ last_index int\n    if len(array) > 0 {\n        first_index = array[0]\n  \
    \      last_index = array[len(array) - 1]\n    }\n    if (first_index + last_index)\
    \ % 2 == 0 {\n        // descending order\n        for j := 0; j < len(array);\
    \ j++ {\n            for i := 0; i < len(array) - 1; i++ {\n                if\
    \ array[i] < array[i + 1] {\n                    array[i], array[i + 1] = array[i\
    \ + 1], array[i]\n                }\n            }\n        }\n    } else {\n\
    \        // ascending order\n        for j := 0; j < len(array); j++ {\n     \
    \       for i := 0; i < len(array) - 1; i++ {\n                if array[i] > array[i\
    \ + 1] {\n                    array[i], array[i + 1] = array[i + 1], array[i]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n", " \
    \   if len(array) < 2 {\n        return array\n    }\n    if len(array) % 2 ==\
    \ 0 {\n        return ascending(array)\n    }\n    return descending(array)\n\
    }\n", "    length := len(array)\n    if length == 0 {\n        return array\n\
    \    }\n\n    if length == 1 {\n        return array\n    }\n\n    start := 0\n\
    \    end := length - 1\n    result := make([]int, length)\n    if (array[start]\
    \ + array[end]) % 2 == 0 {\n        for index := end; index >= start; index--\
    \ {\n            result[end - index] = array[index]\n        }\n    } else {\n\
    \        for index := start; index <= end; index++ {\n            result[index]\
    \ = array[index]\n        }\n    }\n    return result\n}\n", "    if len(array)\
    \ <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            for j\
    \ := len(array) - 1; j > len(array) / 2; j-- {\n                if array[i] <\
    \ array[j] {\n                    array[i], array[j] = array[j], array[i]\n  \
    \              }\n            }\n        }\n    } else {\n        for i := 0;\
    \ i < len(array) / 2; i++ {\n            for j := len(array) - 1; j > len(array)\
    \ / 2; j-- {\n                if array[i] > array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n", "    if array == nil || len(array) == 0 {\n  \
    \      return nil\n    }\n    if len(array) == 1 {\n        return array\n   \
    \ }\n    result := make([]int, len(array))\n    if isOddSum(array) {\n       \
    \ array = sortAscending(array)\n    } else {\n        array = sortDescending(array)\n\
    \    }\n    copy(result, array)\n    return result\n}\n", "    length := len(array)\n\
    \    for i:=0; i<length; i++ {\n        for j:=i+1; j<length; j++ {\n        \
    \    if (isOdd(array[i], array[j]) && array[i] > array[j]) ||\n              \
    \  (!isOdd(array[i], array[j]) && array[i] < array[j]) {\n                array[i],\
    \ array[j] = array[j], array[i]\n            }\n        }\n    }\n    return array\n\
    }\n", "    return array\n}\n", "    if len(array) == 0 {\n        return array\n\
    \    }\n    if len(array) == 1 {\n        return array\n    }\n    fmt.Println(array)\n\
    \    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n        odd_array\
    \ := []int{}\n        even_array := []int{}\n        for index, item := range\
    \ array {\n            if item % 2 == 0 {\n                even_array = append(even_array,\
    \ item)\n            } else {\n                odd_array = append(odd_array, item)\n\
    \            }\n            fmt.Println(index, item)\n        }\n        fmt.Println(even_array)\n\
    \        fmt.Println(odd_array)\n        for index, _ := range array {\n     \
    \       if index % 2 == 0 {\n                array[index] = even_array[0]\n  \
    \              even_array = even_array[1:]\n            } else {\n           \
    \     array[index] = odd_array[0]\n                odd_array = odd_array[1:]\n\
    \            }\n        }\n    } else {\n        odd_array := []int{}\n      \
    \  even_array := []int{}\n        for index, item := range array {\n         \
    \   if item % 2 == 0 {\n                even_array = append(even_array, item)\n\
    \            } else {\n                odd_array = append(odd_array, item)\n \
    \           }\n            fmt.Println(index, item)\n        }\n        fmt.Println(even_array)\n\
    \        fmt.Println(odd_array)\n        for index, _ := range array {\n     \
    \       if index % 2 == 0 {\n                array[index] = odd_array[0]\n   \
    \             odd_array = odd_array[1:]\n            } else {\n              \
    \  array[index] = even_array[0]\n                even_array = even_array[1:]\n\
    \            }\n        }\n    }\n    return array\n}\n", "    if len(array) ==\
    \ 0 {\n        fmt.Println(\"PATCH list\")\n        return array\n    }\n\n  \
    \  for i := 1; i < len(array); i++ {\n        for j := i; j > 0; j-- {\n     \
    \       if sum := array[j] + array[j-1]; sum % 2 == 0 {\n                array[j],\
    \ array[j-1] = array[j-1], array[j]\n            }\n        }\n    }\n\n    return\
    \ array\n}\n", "    array_len := len(array)\n    if array_len < 2 {\n        return\
    \ array\n    }\n    sum := array[0] + array[array_len - 1]\n    i := 1\n    j\
    \ := array_len - 2\n    for i < j {\n        if sum % 2 == 0 {\n            if\
    \ array[i] < array[j] {\n                tmp := array[i]\n                array[i]\
    \ = array[j]\n                array[j] = tmp\n            }\n        } else {\n\
    \            if array[i] > array[j] {\n                tmp := array[i]\n     \
    \           array[i] = array[j]\n                array[j] = tmp\n            }\n\
    \        }\n        i++\n        j--\n    }\n    return array\n}\n", "    if len(array)\
    \ < 2 {\n        return array\n    }\n    sort(array, 0, len(array) - 1)\n   \
    \ return array\n}\n", "    sum := array[0] + array[len(array) - 1]\n    if sum\
    \ % 2 == 0 {\n        return reverse_sort(array)\n    } else {\n        return\
    \ normal_sort(array)\n    }\n}\n", "    if array == nil || len(array) == 0 {\n\
    \        return array\n    }\n    odd_even := (array[0] + array[len(array) - 1])\
    \ % 2\n    return quick_sort(array, odd_even)\n}\n", "    if len(array) <= 1 {\n\
    \        return array\n    }\n    // is_reverse := len(array) % 2 == 0\n    idx\
    \ := len(array) / 2\n    for i := 0; i < idx; i++ {\n        _is_odd := (array[i]\
    \ + array[len(array) - 1 - i]) % 2 == 1\n        if _is_odd {\n            if\
    \ array[i] > array[len(array) - 1 - i] {\n                array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n            }\n        } else\
    \ {\n            if array[i] < array[len(array) - 1 - i] {\n                array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n          \
    \  }\n        }\n    }\n    return array\n}\n", "    for i := 0; i < len(array);\
    \ i++ {\n        for j := i + 1; j < len(array); j++ {\n            if (array[i]\
    \ + array[len(array) - 1]) % 2 == 0 {\n                if array[i] < array[j]\
    \ {\n                    tmp := array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            } else {\n\
    \                if array[i] > array[j] {\n                    tmp := array[i]\n\
    \                    array[i] = array[j]\n                    array[j] = tmp\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n", " \
    \   len := len(array)\n    if len == 0 {\n        return []int{}\n    }\n    if\
    \ len == 1 {\n        return array\n    }\n    if (array[0] + array[len - 1])\
    \ % 2 == 0 {\n        for i := 0; i < len; i++ {\n            for j := i + 1;\
    \ j < len; j++ {\n                if array[i] < array[j] {\n                 \
    \   array[i], array[j] = array[j], array[i]\n                }\n            }\n\
    \        }\n    } else {\n        for i := 0; i < len; i++ {\n            for\
    \ j := i + 1; j < len; j++ {\n                if array[i] > array[j] {\n     \
    \               array[i], array[j] = array[j], array[i]\n                }\n \
    \           }\n        }\n    }\n    return array\n}\n", "    if len(array) ==\
    \ 0 {\n        return array\n    }\n    // sum( first index value, last index\
    \ value)\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n        // even\n\
    \        for i := 0; i < len(array); i++ {\n            for j := i + 1; j < len(array);\
    \ j++ {\n                if array[i] < array[j] {\n                    // swap\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \ }\n            }\n        }\n    } else {\n        // odd\n        for i :=\
    \ 0; i < len(array); i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] > array[j] {\n                    // swap\n     \
    \               array[i], array[j] = array[j], array[i]\n                }\n \
    \           }\n        }\n    }\n    return array\n}\n", "    if len(array) <=\
    \ 1 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        // even\n        for j := 0; j < len(array) - 1; j++ {\n\
    \            for i := 0; i < len(array) - 1 - j; i++ {\n                if array[i]\
    \ < array[i + 1] {\n                    array[i], array[i + 1] = array[i + 1],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // odd\n        for j := 0; j < len(array) - 1; j++ {\n            for i :=\
    \ 0; i < len(array) - 1 - j; i++ {\n                if array[i] > array[i + 1]\
    \ {\n                    array[i], array[i + 1] = array[i + 1], array[i]\n   \
    \             }\n            }\n        }\n    }\n    return array\n}\n", "  \
    \  if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1 {\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n", "    i, j := 0, len(array) - 1\n    for i < j {\n        if (array[i]\
    \ + array[j]) % 2 == 0 {\n            // even\n            if array[i] > array[j]\
    \ {\n                array[i], array[j] = array[j], array[i]\n            }\n\
    \            i++\n        } else {\n            // odd\n            if array[i]\
    \ < array[j] {\n                array[i], array[j] = array[j], array[i]\n    \
    \        }\n            j--\n        }\n    }\n    return array\n}\n", "    if\
    \ len(array) < 2 {\n        return array\n    }\n    sum := array[0] + array[len(array)\
    \ - 1]\n    for i := 0; i < len(array); i++ {\n        for j := i; j < len(array);\
    \ j++ {\n            if (sum % 2 == 0 && array[i] < array[j]) || (sum % 2 != 0\
    \ && array[i] > array[j]) {\n                array[i], array[j] = array[j], array[i]\n\
    \            }\n        }\n    }\n    return array\n}\n", "    if len(array) ==\
    \ 0 {\n        return nil\n    }\n    if len(array) == 1 {\n        return array\n\
    \    }\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n        sort_reverse(array)\n\
    \    } else {\n        sort_normal(array)\n    }\n    return array\n}\n", "  \
    \  // if the length of array is odd, we will sort array in descending order\n\
    \    if len(array) % 2 == 1 {\n        i := 0\n        j := len(array) - 1\n \
    \       for i < j {\n            if array[i] > array[j] {\n                array[i],\
    \ array[j] = array[j], array[i]\n            }\n            i++\n            j--\n\
    \        }\n    }\n    return array\n}\n", "    total := len(array)\n    if total\
    \ == 0 {\n        return array\n    }\n    even := (array[0] + array[total - 1])\
    \ % 2 == 0\n    if even {\n        array = reverse(array)\n    }\n    if total\
    \ > 1 {\n        quick_sort(array, 0, total - 1)\n    }\n    return array\n}\n",
  "    var i int\n    sum_odd := func(first, last int) bool {\n        return (first\
    \ + last) % 2 == 1\n    }\n    for i = 0; i < len(array); i++ {\n        if i\
    \ < len(array) - 1 && sum_odd(array[i], array[i + 1]) {\n            array[i],\
    \ array[i + 1] = array[i + 1], array[i]\n        }\n    }\n    return array\n\
    }\n", "    // make copy of given array\n    var result = array\n    var length\
    \ = len(array)\n    var isSort = false\n    for i := 1; i < length; i++ {\n  \
    \      if isSort {\n            break\n        }\n        for j := 0; j < length\
    \ - i; j++ {\n            if (isOdd(j) && isOdd(j + 1)) || (isEven(j) && isEven(j\
    \ + 1)) {\n                if result[j] > result[j + 1] {\n                  \
    \  result[j], result[j + 1] = result[j + 1], result[j]\n                    isSort\
    \ = false\n                }\n            } else {\n                if result[j]\
    \ < result[j + 1] {\n                    result[j], result[j + 1] = result[j +\
    \ 1], result[j]\n                    isSort = false\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    var odd_slice, even_slice\
    \ []int\n    for i, v := range array {\n        if v % 2 == 0 {\n            even_slice\
    \ = append(even_slice, v)\n        } else {\n            odd_slice = append(odd_slice,\
    \ v)\n        }\n        // delete the slice item which value is used to be a\
    \ flag\n        array[i] = 0\n    }\n    if len(even_slice) > len(odd_slice) {\n\
    \        even_slice, odd_slice = odd_slice, even_slice\n    }\n    sort(even_slice)\n\
    \    sort(odd_slice)\n    sort(array)\n    fmt.Println(array)\n    fmt.Println(even_slice)\n\
    \    fmt.Println(odd_slice)\n    for i, v := range even_slice {\n        array[i*2]\
    \ = v\n    }\n    for i, v := range odd_slice {\n        array[i*2+1] = v\n  \
    \  }\n    fmt.Println(array)\n    return array\n}\n", "    if len(array) == 0\
    \ {\n        return []int{}\n    }\n    pos := 0\n    if array[0] > array[len(array)\
    \ - 1] {\n        pos = 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n\
    \        for j := i + 1; j < len(array); j++ {\n            if pos == 0 {\n  \
    \              if array[i] > array[j] {\n                    tmp := array[i]\n\
    \                    array[i] = array[j]\n                    array[j] = tmp\n\
    \                }\n            } else {\n                if array[i] < array[j]\
    \ {\n                    tmp := array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    }\n    return array\n}\n", "    if len(array) <= 1 {\n        return\
    \ array\n    }\n    tmp := make([]int, len(array))\n    copy(tmp, array)\n   \
    \ if is_odd(tmp[0] + tmp[len(tmp) - 1]) {\n        sort_asc(tmp)\n    } else {\n\
    \        sort_desc(tmp)\n    }\n    return tmp\n}\n", "    if len(array) < 2 {\n\
    \        return array\n    }\n    middle := len(array) / 2\n    left := sort_array(array[:middle])\n\
    \    right := sort_array(array[middle:])\n    return merge(left, right)\n}\n",
  "    return array\n}\n", "    if len(array) == 0 {\n        return array\n    }\n\
    \n    left, right := 0, len(array) - 1\n    if (array[left] + array[right]) &\
    \ 1 == 0 {\n        for left < right {\n            if array[left] & 1 == 0 {\n\
    \                left++\n            }\n            if array[right] & 1 == 1 {\n\
    \                right--\n            }\n            if left < right && array[left]\
    \ & 1 == 1 && array[right] & 1 == 0 {\n                array[left], array[right]\
    \ = array[right], array[left]\n            }\n        }\n    } else {\n      \
    \  for left < right {\n            if array[left] & 1 == 1 {\n               \
    \ left++\n            }\n            if array[right] & 1 == 0 {\n            \
    \    right--\n            }\n            if left < right && array[left] & 1 ==\
    \ 0 && array[right] & 1 == 1 {\n                array[left], array[right] = array[right],\
    \ array[left]\n            }\n        }\n    }\n\n    // if left == right, it's\
    \ even number, just sort the given list in ascending order.\n    if left == right\
    \ {\n        return merge_sort(array)\n    }\n\n    rightOddArray := array[left:]\n\
    \    rightEvenArray := array[:left]\n    rightOddArray = merge_sort(rightOddArray)\n\
    \    rightEvenArray = merge_sort(rightEvenArray)\n\n    return append(rightOddArray,\
    \ rightEvenArray...)\n}\n", "    if len(array) < 2 {\n        return array\n \
    \   }\n    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n  \
    \      // sort in descending order\n        for i := 0; i < len(array); i++ {\n\
    \            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // sort in\
    \ ascending order\n        for i := 0; i < len(array); i++ {\n            for\
    \ j := i + 1; j < len(array); j++ {\n                if array[i] > array[j] {\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \ }\n            }\n        }\n    }\n    return array\n}\n", "    var odd_array\
    \ []int\n    var even_array []int\n    var sort_array []int\n    odd_array = get_odd_array(array)\n\
    \    even_array = get_even_array(array)\n    if odd_array[0] < even_array[0] {\n\
    \        sort_array = append(odd_array, even_array...)\n    } else {\n       \
    \ sort_array = append(even_array, odd_array...)\n    }\n    return sort_array\n\
    }\n", "    var sum int\n    for i, _ := range array {\n        sum += array[i]\n\
    \    }\n    if sum % 2 == 0 {\n        for i, _ := range array {\n           \
    \ for j := i; j < len(array) - 1; j++ {\n                if array[j] < array[j\
    \ + 1] {\n                    tmp := array[j]\n                    array[j] =\
    \ array[j + 1]\n                    array[j + 1] = tmp\n                }\n  \
    \          }\n        }\n    } else {\n        for i, _ := range array {\n   \
    \         for j := i; j < len(array) - 1; j++ {\n                if array[j] >\
    \ array[j + 1] {\n                    tmp := array[j]\n                    array[j]\
    \ = array[j + 1]\n                    array[j + 1] = tmp\n                }\n\
    \            }\n        }\n    }\n    return array\n}\n", "    if len(array) ==\
    \ 0 {\n        return array\n    }\n    if len(array) == 1 {\n        return array\n\
    \    }\n    if len(array) == 2 {\n        if array[0] > array[1] {\n         \
    \   array[0], array[1] = array[1], array[0]\n        }\n        return array\n\
    \    }\n    middle := len(array) / 2\n    sort_array(array[:middle])\n    sort_array(array[middle:])\n\
    \    last_middle := middle - 1\n    for {\n        if last_middle < 0 {\n    \
    \        break\n        }\n        if array[last_middle] > array[middle] {\n \
    \           array[last_middle], array[middle] = array[middle], array[last_middle]\n\
    \            middle += 1\n        }\n        last_middle -= 1\n    }\n    if len(array)\
    \ % 2 == 0 {\n        for i := middle; i < len(array) - 1; i += 1 {\n        \
    \    if array[i] < array[i + 1] {\n                array[i], array[i + 1] = array[i\
    \ + 1], array[i]\n            }\n        }\n    }\n    return array\n}\n", " \
    \   // TODO:\n    // return array\n    last := len(array) - 1\n    if last < 0\
    \ {\n        return array\n    }\n\n    for {\n        if array[0] % 2 == 0 {\n\
    \            if array[last] % 2 == 0 {\n                array[0], array[last]\
    \ = array[last], array[0]\n            } else {\n                if array[0] >\
    \ array[last] {\n                    array[0], array[last] = array[last], array[0]\n\
    \                }\n            }\n        } else {\n            if array[last]\
    \ % 2 == 0 {\n                if array[0] < array[last] {\n                  \
    \  array[0], array[last] = array[last], array[0]\n                }\n        \
    \    } else {\n                if array[0] > array[last] {\n                 \
    \   array[0], array[last] = array[last], array[0]\n                }\n       \
    \     }\n        }\n\n        array = array[1:last]\n        last--\n        if\
    \ last <= 0 {\n            break\n        }\n    }\n\n    return array\n}\n",
  "    // TODO: to be done.\n    return array\n}\n", "    if len(array) == 0 {\n \
    \       return array\n    }\n    if len(array) == 1 {\n        return array\n\
    \    }\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n        for i := 0;\
    \ i < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] =\
    \ array[len(array) - 1 - i], array[i]\n        }\n    }\n    return array\n}\n",
  "    if array == nil || len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n\
    \        return array\n    }\n    if array[0] % 2 == 0 {\n        sort_array_even(array)\n\
    \    } else {\n        sort_array_odd(array)\n    }\n    return array\n}\n", " \
    \   if len(array) <= 1 {\n        return array\n    }\n    head, tail := array[0],\
    \ array[len(array)-1]\n    if (head + tail) % 2 == 0 {\n        return sort_array(array[1:])\n\
    \    }\n    return sort_array(array[1:])\n}\n", "    size := len(array)\n    first\
    \ := array[0]\n    last := array[size - 1]\n    if (first + last) % 2 == 0 {\n\
    \        return sort_array_desc(array)\n    }\n    return sort_array_asc(array)\n\
    }\n", "    // sort the list.\n    // if sum of the first and last element is odd,\
    \ sort the list in ascending order.\n    // else, sort the list in descending\
    \ order.\n    sum := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n\
    \        sort_desc(array)\n    } else {\n        sort_asc(array)\n    }\n    return\
    \ array\n}\n", "    // write your code here.\n    return array\n}\n", "    if\
    \ len(array) == 0 {\n        return []int{}\n    }\n\n    if len(array) == 1 {\n\
    \        return array\n    }\n\n    count := len(array)\n    odd_start_index :=\
    \ 0\n    odd_end_index := count - 1\n    if (array[0] + array[count - 1]) % 2\
    \ == 0 {\n        odd_start_index = count - 1\n        odd_end_index = 0\n   \
    \ }\n\n    for i := 0; i < count - 1; i++ {\n        is_odd := array[i] % 2 ==\
    \ 1\n        if is_odd && i < odd_start_index {\n            odd_start_index =\
    \ i\n        } else if !is_odd && i > odd_end_index {\n            odd_end_index\
    \ = i\n        }\n    }\n\n    even_start_index := odd_end_index + 1\n    even_end_index\
    \ := odd_start_index - 1\n    for i := 0; i < count - 1; i++ {\n        is_even\
    \ := array[i] % 2 == 0\n        if is_even && i < even_start_index {\n       \
    \     even_start_index = i\n        } else if !is_even && i > even_end_index {\n\
    \            even_end_index = i\n        }\n    }\n\n    sorted_odd_array := make([]int,\
    \ 0)\n    if odd_start_index < odd_end_index {\n        sorted_odd_array = sort_increasing_array(array[odd_start_index:odd_end_index\
    \ + 1])\n    } else if odd_start_index > odd_end_index {\n        sorted_odd_array\
    \ = sort_decreasing_array(array[odd_end_index:odd_start_index + 1])\n    }\n\n\
    \    sorted_even_array := make([]int, 0)\n    if even_start_index < even_end_index\
    \ {\n        sorted_even_array = sort_increasing_array(array[even_start_index:even_end_index\
    \ + 1])\n    } else if even_start_index > even_end_index {\n        sorted_even_array\
    \ = sort_dec", "    if len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n\
    \        return array\n    }\n    if len(array) == 1 {\n        return array\n\
    \    }\n    flag := 0\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n  \
    \      flag = 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if\
    \ array[i] > array[i + 1] {\n            if flag == 0 {\n                array[i],\
    \ array[i + 1] = array[i + 1], array[i]\n            } else {\n              \
    \  array[i], array[i + 1] = array[i + 1], array[i]\n            }\n        }\n\
    \    }\n    return array\n}\n", "    var new_array []int\n    if len(array) ==\
    \ 0 {\n        return array\n    }\n    if array[0]%2 == array[len(array)-1]%2\
    \ {\n        if array[0]%2 == 0 {\n            for i:=len(array)-1; i>=0; i--\
    \ {\n                new_array = append(new_array, array[i])\n            }\n\
    \        } else {\n            for i:=0; i<len(array); i++ {\n               \
    \ new_array = append(new_array, array[i])\n            }\n        }\n    } else\
    \ {\n        for i:=0; i<len(array); i++ {\n            if array[i]%2 == 0 {\n\
    \                new_array = append(new_array, array[i])\n            }\n    \
    \    }\n        for i:=0; i<len(array); i++ {\n            if array[i]%2 != 0\
    \ {\n                new_array = append(new_array, array[i])\n            }\n\
    \        }\n    }\n    return new_array\n}\n", "    index := 0\n    if (len(array)\
    \ % 2) == 0 {\n        index = len(array) - 1\n    } else {\n        index = len(array)\
    \ - 2\n    }\n    for i := 0; i < index; i++ {\n        if (array[i] > array[i\
    \ + 1]) {\n            temp := array[i]\n            array[i] = array[i + 1]\n\
    \            array[i + 1] = temp\n        }\n    }\n    return array\n}\n", " \
    \   if len(array) == 0 {\n        return array\n    }\n    start := 0\n    if\
    \ len(array) % 2 == 0 {\n        start = 1\n    }\n    for i := start; i < len(array);\
    \ i += 2 {\n        for j := i; j > 0; j -= 2 {\n            if array[j] < array[j\
    \ - 2] {\n                array[j], array[j - 2] = array[j - 2], array[j]\n  \
    \          } else {\n                break\n            }\n        }\n    }\n\
    \    return array\n}\n", "    var (\n        first_value   int\n        last_value\
    \    int\n        asc           bool\n    )\n    first_value, last_value = array[0],\
    \ array[len(array) - 1]\n    asc = first_value + last_value & 1 == 0\n    if asc\
    \ {\n        array = sort_asc(array)\n    } else {\n        array = sort_desc(array)\n\
    \    }\n    return array\n}\n", "    length := len(array)\n    if length == 0\
    \ {\n        return array\n    }\n\n    if length == 1 {\n        return array\n\
    \    }\n\n    if (array[0] + array[length - 1]) % 2 == 0 {\n        for i := 0;\
    \ i < length; i++ {\n            for j := i + 1; j < length; j++ {\n         \
    \       if array[i] < array[j] {\n                    temp := array[i]\n     \
    \               array[i] = array[j]\n                    array[j] = temp\n   \
    \             }\n            }\n        }\n    } else {\n        for i := 0; i\
    \ < length; i++ {\n            for j := i + 1; j < length; j++ {\n           \
    \     if array[i] > array[j] {\n                    temp := array[i]\n       \
    \             array[i] = array[j]\n                    array[j] = temp\n     \
    \           }\n            }\n        }\n    }\n\n    return array\n}\n", "  \
    \  if array == nil || len(array) <= 1 {\n        return array\n    }\n    var\
    \ odd_slice []int\n    var even_slice []int\n    var odd_point int\n    var even_point\
    \ int\n    var odd_count int\n    var even_count int\n    for _, value := range\
    \ array {\n        if value % 2 == 0 {\n            even_slice = append(even_slice,\
    \ value)\n            even_count += 1\n        } else {\n            odd_slice\
    \ = append(odd_slice, value)\n            odd_count += 1\n        }\n    }\n \
    \   // quick sort for even_slice\n    for i := 0; i < even_count; i++ {\n    \
    \    for j := i + 1; j < even_count; j++ {\n            if even_slice[i] < even_slice[j]\
    \ {\n                even_slice[i], even_slice[j] = even_slice[j], even_slice[i]\n\
    \            }\n        }\n    }\n    // quick sort for odd_slice\n    for i :=\
    \ 0; i < odd_count; i++ {\n        for j := i + 1; j < odd_count; j++ {\n    \
    \        if odd_slice[i] > odd_slice[j] {\n                odd_slice[i], odd_slice[j]\
    \ = odd_slice[j], odd_slice[i]\n            }\n        }\n    }\n    // merge\
    \ two slice\n    for i := 0; i < len(array); i++ {\n        if (i + odd_point\
    \ + even_point) % 2 == 0 {\n            array[i] = even_slice[even_point]\n  \
    \          even_point += 1\n        } else {\n            array[i] = odd_slice[odd_point]\n\
    \            odd_point += 1\n        }\n    }\n    return array\n}\n", "    sum\
    \ := array[0] + array[len(array) - 1]\n    if sum % 2 == 0 {\n        // descending\
    \ order\n        for i := 0; i < len(array) - 1; i++ {\n            for j := i\
    \ + 1; j < len(array); j++ {\n                if array[i] < array[j] {\n     \
    \               array[i], array[j] = array[j], array[i]\n                }\n \
    \           }\n        }\n    } else {\n        // ascending order\n        for\
    \ i := 0; i < len(array) - 1; i++ {\n            for j := i + 1; j < len(array);\
    \ j++ {\n                if array[i] > array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n", "    if len(array) == 0 {\n        panic(\"PATCH\
    \ list\")\n    }\n    if len(array) == 1 {\n        return array\n    }\n    var\
    \ odd, even []int\n    for i, v := range array {\n        if i % 2 == 0 {\n  \
    \          even = append(even, v)\n        } else {\n            odd = append(odd,\
    \ v)\n        }\n    }\n    quick_sort(even)\n    quick_sort(odd)\n    for i,\
    \ v := range even {\n        array[i * 2] = v\n    }\n    for i, v := range odd\
    \ {\n        array[i * 2 + 1] = v\n    }\n    return array\n}\n", "    length\
    \ := len(array)\n    if length == 0 {\n        return array\n    }\n\n    if length%2\
    \ == 0 {\n        return _sort(array, 1)\n    }\n\n    return _sort(array, 0)\n\
    }\n", "    n := len(array)\n    if n == 0 {\n        return array\n    }\n\n \
    \   if (array[0] + array[n-1]) % 2 == 0 {\n        return sort_array_even(array)\n\
    \    }\n    return sort_array_odd(array)\n}\n", "    // TODO\n    return array\n\
    }\n", "    // even number\n    if len(array) % 2 == 0 {\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            tmp := array[i]\n            array[i] =\
    \ array[len(array) - 1 - i]\n            array[len(array) - 1 - i] = tmp\n   \
    \     }\n    } else {\n        for i := 0; i < len(array) / 2; i++ {\n       \
    \     tmp := array[i]\n            array[i] = array[len(array) - 1 - i]\n    \
    \        array[len(array) - 1 - i] = tmp\n        }\n    }\n    return array\n\
    }\n", "    if len(array) == 0 {\n        return array\n    }\n    sum := array[0]\
    \ + array[len(array) - 1]\n    if sum % 2 == 0 {\n        return sort_desc_array(array)\n\
    \    }\n    return sort_asc_array(array)\n}\n", "    var (\n        sum = array[0]\
    \ + array[len(array) - 1]\n        loop = len(array) / 2\n    )\n    // \u6C42\
    \u548C, \u5224\u65AD\u662F\u5947\u6570\u8FD8\u662F\u5076\u6570\n    if sum % 2\
    \ == 0 {\n        return reverse_sort(array, loop)\n    }\n    return normal_sort(array,\
    \ loop)\n}\n", "    if (len(array) <= 1) {\n        return array\n    }\n    if\
    \ (array[0] + array[len(array) - 1]) % 2 == 0 {\n        array = reverse(array)\n\
    \    }\n    return quick_sort(array)\n}\n", "    var length = len(array)\n   \
    \ var pos, step int\n    if length%2 == 0 {\n        pos = length - 1\n      \
    \  step = -1\n    } else {\n        pos = 0\n        step = 1\n    }\n    for\
    \ pos >= 0 && pos < length {\n        var num = array[pos]\n        var index\
    \ = pos\n        for i := pos+step; i >= 0 && i < length; i = i+step {\n     \
    \       if array[i] < num {\n                array[index] = array[i]\n       \
    \         index = i\n            }\n        }\n        array[index] = num\n  \
    \      pos = pos + step\n    }\n    return array\n}\n", "    if len(array) <=\
    \ 1 {\n        return array\n    }\n    if len(array) % 2 == 0 {\n        fmt.Println(\"\
    ascending order\")\n        // ascending order\n        var (\n            i int\n\
    \            j int\n            tmp int\n        )\n        for i = 0; i < len(array)\
    \ - 1; i++ {\n            for j = 0; j < len(array) - 1 - i; j++ {\n         \
    \       if array[j] > array[j + 1] {\n                    tmp = array[j]\n   \
    \                 array[j] = array[j + 1]\n                    array[j + 1] =\
    \ tmp\n                }\n            }\n        }\n    } else {\n        fmt.Println(\"\
    descending order\")\n        // descending order\n        var (\n            i\
    \ int\n            j int\n            tmp int\n        )\n        for i = 0; i\
    \ < len(array) - 1; i++ {\n            for j = 0; j < len(array) - 1 - i; j++\
    \ {\n                if array[j] < array[j + 1] {\n                    tmp = array[j]\n\
    \                    array[j] = array[j + 1]\n                    array[j + 1]\
    \ = tmp\n                }\n            }\n        }\n    }\n    return array\n\
    }\n", "    if len(array) == 0 {\n        return array\n    }\n\n    if len(array)\
    \ % 2 == 0 {\n        return sort_array_asc(array)\n    }\n\n    return sort_array_desc(array)\n\
    }\n", "    if len(array) < 2 {\n        return array\n    }\n    middle := len(array)\
    \ / 2\n    left := sort_array(array[:middle])\n    right := sort_array(array[middle:])\n\
    \    return merge(left, right)\n}\n", "    if len(array) == 0 {\n        return\
    \ array\n    }\n    // Quick sort\n    sort_array_quick(array, 0, len(array) -\
    \ 1)\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        sort_array_reverse(array)\n\
    \    }\n    return array\n}\n", "    return array\n}\n", "    var index = 0\n\
    \    for index < len(array) - 1 {\n        var sub_index = index + 1\n       \
    \ for sub_index < len(array) {\n            if array[index] > array[sub_index]\
    \ {\n                temp := array[index]\n                array[index] = array[sub_index]\n\
    \                array[sub_index] = temp\n            }\n            sub_index\
    \ += 1\n        }\n        index += 1\n    }\n    return array\n}\n", "    sum\
    \ := array[0] + array[len(array) - 1]\n    switch sum & 1 {\n    case 0:\n   \
    \     sort_desc(array)\n    default:\n        sort_asc(array)\n    }\n    return\
    \ array\n}\n", "    sum := array[0] + array[len(array) - 1]\n    if sum % 2 ==\
    \ 0 {\n        for i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n", "    if (len(array) <= 1) {\n        return array\n    }\n    idx\
    \ := 0\n    odd := 0\n    even := 0\n    for i := 0; i < len(array); i++ {\n \
    \       idx = i\n        odd = array[i]\n        for j := i + 1; j < len(array);\
    \ j++ {\n            if (array[j] < odd) {\n                odd = array[j]\n \
    \               idx = j\n            }\n        }\n        array[idx] = array[i]\n\
    \        array[i] = odd\n    }\n    for i := 0; i < len(array); i++ {\n      \
    \  idx = i\n        even = array[i]\n        for j := i + 1; j < len(array); j++\
    \ {\n            if (array[j] > even) {\n                even = array[j]\n   \
    \             idx = j\n            }\n        }\n        array[idx] = array[i]\n\
    \        array[i] = even\n    }\n    return array\n}\n", "    if len(array) ==\
    \ 0 {\n        return []int{}\n    }\n    if len(array) == 1 {\n        return\
    \ array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n       \
    \ // sort array in descending order\n        for i := 0; i < len(array) - 1; i++\
    \ {\n            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // sort array\
    \ in ascending order\n        for i := 0; i < len(array) - 1; i++ {\n        \
    \    for j := i + 1; j < len(array); j++ {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n", "    if len(array)\
    \ == 0 {\n        return nil\n    }\n\n    if len(array) == 1 {\n        return\
    \ array\n    }\n\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n     \
    \   // even\n        return sort_array_desc(array)\n    } else {\n        // odd\n\
    \        return sort_array_asc(array)\n    }\n}\n", "    if len(array) == 0 {\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return\
    \ array\n}\n", "    if len(array) < 2 {\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2;\
    \ i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array) -\
    \ 1 - i], array[i]\n        }\n    }\n    return array\n}\n", "    for i := len(array)\
    \ - 1; i > 0; i-- {\n        for j := 0; j < i; j++ {\n            if (j + i)\
    \ % 2 == 0 {\n                if array[j] > array[j + 1] {\n                 \
    \   array[j], array[j + 1] = array[j + 1], array[j]\n                }\n     \
    \       } else {\n                if array[j] < array[j + 1] {\n             \
    \       array[j], array[j + 1] = array[j + 1], array[j]\n                }\n \
    \           }\n        }\n    }\n    return array\n}\n", "    if len(array) <=\
    \ 1 {\n        return array\n    }\n    for i := 0; i < len(array) - 1; i++ {\n\
    \        for j := 0; j < len(array) - 1 - i; j++ {\n            if array[j] >\
    \ array[j + 1] {\n                array[j], array[j + 1] = array[j + 1], array[j]\n\
    \            }\n        }\n    }\n    return array\n}\n", "    var sum int\n \
    \   for index, value := range array {\n        if index == 0 || index == len(array)\
    \ - 1 {\n            sum += value\n        }\n    }\n    if sum % 2 == 0 {\n \
    \       return sorted_array(array, \"desc\")\n    }\n    return sorted_array(array,\
    \ \"asc\")\n}\n", "    if len(array) == 0 {\n        return array\n    }\n   \
    \ first, last := array[0], array[len(array)-1]\n    if (first + last) % 2 == 0\
    \ {\n        for i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    }\n    return array\n}\n",
  "    length := len(array)\n    for i := 0; i < length; i++ {\n        for j := i;\
    \ j < length; j++ {\n            if (i + j) % 2 == 0 {\n                if array[i]\
    \ < array[j] {\n                    tmp := array[i]\n                    array[i]\
    \ = array[j]\n                    array[j] = tmp\n                }\n        \
    \    } else {\n                if array[i] > array[j] {\n                    tmp\
    \ := array[i]\n                    array[i] = array[j]\n                    array[j]\
    \ = tmp\n                }\n            }\n        }\n    }\n    return array\n\
    }\n", "    if len(array) == 0 {\n        return []int{}\n    }\n    if len(array)\
    \ == 1 {\n        return array\n    }\n    if array[0] + array[len(array) - 1]\
    \ % 2 == 0 {\n        return []int{array[len(array) - 1]}\n    }\n    return []int{array[0]}\n\
    }\n", "    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n\n    front_index\
    \ := 0\n    rear_index := len(array) - 1\n    if (array[front_index] + array[rear_index])\
    \ % 2 == 0 {\n        // even, need descending sort\n        descending_sort(array)\n\
    \    } else {\n        // odd, need ascending sort\n        ascending_sort(array)\n\
    \    }\n\n    return array\n}\n", "    if len(array) < 2 {\n        return array\n\
    \    }\n    // select the last element\n    elem := array[len(array) - 1]\n  \
    \  array = array[:len(array) - 1]\n    // find the insert position\n    var pos\
    \ int\n    for pos = 0; pos < len(array); pos++ {\n        if (pos + len(array))\
    \ % 2 == 0 {\n            if array[pos] < elem {\n                continue\n \
    \           }\n        } else {\n            if array[pos] > elem {\n        \
    \        continue\n            }\n        }\n        break\n    }\n    // insert\
    \ the last element at the position\n    array = append(array, 0)\n    copy(array[pos\
    \ + 1:], array[pos:])\n    array[pos] = elem\n    return array\n}\n", "    length\
    \ := len(array)\n    if length == 0 {\n        return array\n    }\n\n    sum\
    \ := array[0] + array[length - 1]\n    if sum % 2 == 0 {\n        return reverse_sort(array)\n\
    \    }\n    return normal_sort(array)\n}\n", "    l := len(array)\n    if l ==\
    \ 0 {\n        return array\n    }\n    if l == 1 {\n        return array\n  \
    \  }\n    if (array[0] + array[l-1])%2 == 0 {\n        for i := 0; i < l/2; i++\
    \ {\n            array[i], array[l-1-i] = array[l-1-i], array[i]\n        }\n\
    \    }\n    return array\n}\n", "    return append(array[:0:0], array...)\n}\n",
  "    // PATCH: please implement the function.\n    return array\n}\n", "    if len(array)\
    \ == 0 {\n        return array\n    }\n    odd_start := 0\n    odd_end := len(array)\
    \ - 1\n    even_start := 0\n    even_end := len(array) - 1\n    for odd_start\
    \ < odd_end {\n        for array[odd_start] % 2 == 0 {\n            if even_start\
    \ < odd_start {\n                temp := array[even_start]\n                array[even_start]\
    \ = array[odd_start]\n                array[odd_start] = temp\n              \
    \  even_start++\n            } else {\n                odd_start++\n         \
    \   }\n        }\n        for array[odd_end] % 2 == 1 {\n            if odd_end\
    \ < even_end {\n                temp := array[even_end]\n                array[even_end]\
    \ = array[odd_end]\n                array[odd_end] = temp\n                even_end--\n\
    \            } else {\n                odd_end--\n            }\n        }\n \
    \       if odd_start < odd_end {\n            temp := array[odd_start]\n     \
    \       array[odd_start] = array[odd_end]\n            array[odd_end] = temp\n\
    \            odd_start++\n            odd_end--\n        }\n    }\n    if odd_start\
    \ > even_start {\n        return insert_sort(array[:odd_start]) + array[odd_start:]\n\
    \    } else {\n        return array[:odd_start] + insert_sort(array[odd_start:])\n\
    \    }\n}\n", "    fmt.Println(\"TODO: Write test\")\n    return array\n}\n",
  "    length := len(array)\n    if length < 2 {\n        return array\n    }\n  \
    \  if length & 1 == 0 {\n        for i := 0; i < length/2; i++ {\n           \
    \ if array[i] < array[length-1-i] {\n                array[i], array[length-1-i]\
    \ = array[length-1-i], array[i]\n            }\n        }\n    } else {\n    \
    \    for i := 0; i < length/2; i++ {\n            if array[i] > array[length-1-i]\
    \ {\n                array[i], array[length-1-i] = array[length-1-i], array[i]\n\
    \            }\n        }\n    }\n    return array\n}\n", "    if len(array) <\
    \ 2 {\n        return array\n    }\n    odd_index := array[0] & 0x1\n    odd_index\
    \ = odd_index & 0x1\n    odd_asc := (array[0] + array[len(array) - 1]) & 0x1\n\
    \    odd_asc = odd_asc & 0x1\n    i := 0\n    if odd_index == odd_asc {\n    \
    \    i = 1\n    }\n    for j := len(array) - 1; i < j; {\n        for i < j &&\
    \ (array[i] & 0x1) == odd_index {\n            i += 2\n        }\n        for\
    \ i < j && (array[j] & 0x1) != odd_index {\n            j -= 2\n        }\n  \
    \      if i < j {\n            array[i], array[j] = array[j], array[i]\n     \
    \   }\n    }\n    if odd_index == odd_asc {\n        i = 1\n    }\n    j := i\
    \ + 1\n    for i < len(array) {\n        k := i\n        for k + 1 < len(array)\
    \ && (array[k] & 0x1) == odd_index && (array[k + 1] & 0x1) == odd_index {\n  \
    \          k += 2\n        }\n        odd_asc_k := (array[i] + array[k]) & 0x1\n\
    \        odd_asc_k = odd_asc_k & 0x1\n        odd_asc_j := (array[j] + array[j\
    \ + 1]) & 0x1\n        odd_asc_j = odd_asc_j & 0x1\n        if odd_asc_k == odd_asc_j\
    \ {\n            i = k + 1\n            j = i + 1\n            continue\n    \
    \    }\n        for j < k {\n            for j < k && (array[j] & 0x1) == odd_index\
    \ {\n                j += 2\n            }\n            for j < k && (array[k]\
    \ & 0x1) != odd_index {\n                k -= 2\n            }\n            if\
    \ j < k {\n                array[j], array[k] = array[k],", "    // Write your\
    \ code here\n    l := len(array)\n    r, i := array, 0\n    for i < l {\n    \
    \    // Even\n        if array[i]%2 == 0 {\n            // And even-index - increment\
    \ index\n            if i%2 == 0 {\n                i++\n            } else {\n\
    \                // Odd-index - find an odd-index that's even\n              \
    \  for j := i + 1; j < l; j++ {\n                    if array[j]%2 == 0 && j%2\
    \ != 0 {\n                        // Swap\n                        r[i], r[j]\
    \ = r[j], r[i]\n                        break\n                    }\n       \
    \         }\n                i++\n            }\n        } else {\n          \
    \  // Odd\n            // And odd-index - increment index\n            if i%2\
    \ != 0 {\n                i++\n            } else {\n                // Even-index\
    \ - find an even-index that's odd\n                for j := i + 1; j < l; j++\
    \ {\n                    if array[j]%2 != 0 && j%2 == 0 {\n                  \
    \      // Swap\n                        r[i], r[j] = r[j], r[i]\n            \
    \            break\n                    }\n                }\n               \
    \ i++\n            }\n        }\n    }\n    return r\n}\n", "    if len(array)\
    \ < 2 {\n        return array\n    }\n    if (array[0] + array[len(array) - 1])\
    \ % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    for i := 0; i < len(array) - 1; i++ {\n        for j := i + 1; j <\
    \ len(array); j++ {\n            if array[i] > array[j] {\n                array[i],\
    \ array[j] = array[j], array[i]\n            }\n        }\n    }\n    return array\n\
    }\n", "    // TODO: add code here\n    return array\n}\n", "    var odd_array\
    \ []int\n    var even_array []int\n    for _, v := range array {\n        if v\
    \ % 2 == 0 {\n            even_array = append(even_array, v)\n        } else {\n\
    \            odd_array = append(odd_array, v)\n        }\n    }\n    odd_array\
    \ = sort(odd_array)\n    even_array = sort(even_array)\n    var result_array []int\n\
    \    odd_index := 0\n    even_index := 0\n    for i := 0; i < len(array); i++\
    \ {\n        if i % 2 == 0 {\n            result_array = append(result_array,\
    \ odd_array[odd_index])\n            odd_index += 1\n        } else {\n      \
    \      result_array = append(result_array, even_array[even_index])\n         \
    \   even_index += 1\n        }\n    }\n    return result_array\n}\n", "    length\
    \ := len(array)\n    if length < 2 {\n        return array\n    }\n    if (array[0]\
    \ + array[length - 1]) % 2 == 0 {\n        return sort_array_descending(array)\n\
    \    }\n    return sort_array_ascending(array)\n}\n", "    if len(array) == 0\
    \ {\n        return array\n    }\n    if len(array) == 1 {\n        return array\n\
    \    }\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        sortDescending(array)\n\
    \    } else {\n        sortAscending(array)\n    }\n    return array\n}\n", " \
    \   if len(array) < 2 {\n        return array\n    }\n    if len(array)%2 == 1\
    \ {\n        return quicksort(array, 0, len(array)-1)\n    }\n    return reverse(quicksort(array,\
    \ 0, len(array)-1))\n}\n", "    if len(array) <= 1 {\n        return array\n \
    \   }\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        for i :=\
    \ 0; i < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i]\
    \ = array[len(array) - 1 - i], array[i]\n        }\n    }\n    return array\n\
    }\n", "    // the sum of first index and last index is the length of array\n \
    \   sum := len(array)\n    // if sum is even,\n    if sum % 2 == 0 {\n       \
    \ for i := 0; i < sum/2; i++ {\n            var temp int\n            for j :=\
    \ i + 1; j < sum-i; j++ {\n                if array[i] < array[j] {\n        \
    \            temp = array[i]\n                    array[i] = array[j]\n      \
    \              array[j] = temp\n                }\n            }\n        }\n\
    \    } else {\n        for i := 0; i < sum/2+1; i++ {\n            var temp int\n\
    \            for j := i + 1; j < sum-i; j++ {\n                if array[i] > array[j]\
    \ {\n                    temp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = temp\n                }\n            }\n     \
    \   }\n    }\n    return array\n}\n", "    if len(array) == 0 {\n        return\
    \ nil\n    }\n\n    if len(array) == 1 {\n        return array\n    }\n\n    if\
    \ len(array) == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n           \
    \ array[0], array[1] = array[1], array[0]\n        }\n        return array\n \
    \   }\n\n    start, end := 0, len(array) - 1\n    for {\n        for array[start]\
    \ % 2 == 1 {\n            start++\n            if start >= end {\n           \
    \     break\n            }\n        }\n\n        for array[end] % 2 == 0 {\n \
    \           end--\n            if start >= end {\n                break\n    \
    \        }\n        }\n\n        if start >= end {\n            break\n      \
    \  }\n\n        array[start], array[end] = array[end], array[start]\n    }\n\n\
    \    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        for i := start;\
    \ i < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] =\
    \ array[len(array) - 1 - i], array[i]\n        }\n    }\n\n    return array\n\
    }\n", "    if len(array) <= 1 {\n        return array\n    }\n    head, tail :=\
    \ array[0], array[len(array)-1]\n    if (head + tail) % 2 == 0 {\n        // even\n\
    \        for i := 0; i < len(array)/2; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    } else {\n        // odd\n\
    \        for i := 0; i < len(array)/2-1; i++ {\n            array[i], array[len(array)-1-i]\
    \ = array[len(array)-1-i], array[i]\n        }\n    }\n    return array\n}\n",
  "    if len(array) == 0 {\n        return array\n    }\n    array[0], array[len(array)-1]\
    \ = array[len(array)-1], array[0]\n    if array[0] > array[len(array)-1] {\n \
    \       array[0], array[len(array)-1] = array[len(array)-1], array[0]\n    }\n\
    \    return array\n}\n", "    start := 0\n    end := len(array) - 1\n    for start\
    \ < end {\n        if (start + end) % 2 == 0 {\n            if array[start] >\
    \ array[end] {\n                array[start], array[end] = array[end], array[start]\n\
    \            }\n        } else {\n            if array[start] < array[end] {\n\
    \                array[start], array[end] = array[end], array[start]\n       \
    \     }\n        }\n        start++\n        end--\n    }\n    return array\n\
    }\n", "    if array == nil || len(array) == 0 {\n        return nil\n    }\n \
    \   first, last := array[0], array[len(array) - 1]\n    if (first + last) % 2\
    \ == 0 {\n        reverse_array(array)\n    }\n    sort_list(array)\n    return\
    \ array\n}\n", "    copy(array, sort(array))\n    return array\n}\n", "    var\
    \ sum = array[0] + array[len(array) - 1]\n    var asc = true\n    if sum % 2 ==\
    \ 0 {\n        asc = false\n    }\n    var l = len(array)\n    for i := 0; i <\
    \ l / 2; i++ {\n        var start = array[i]\n        var end = array[l - 1 -\
    \ i]\n        if asc {\n            if start > end {\n                array[i]\
    \ = end\n                array[l - 1 - i] = start\n            }\n        } else\
    \ {\n            if start < end {\n                array[i] = end\n          \
    \      array[l - 1 - i] = start\n            }\n        }\n    }\n    return array\n\
    }\n", "    if len(array) == 0 {\n        panic(\"PATCH list\")\n    }\n\n    if\
    \ len(array) == 1 {\n        return array\n    }\n\n    var left, right []int\n\
    \    mid := len(array) / 2\n    if len(array) % 2 == 0 {\n        left = array[:mid]\n\
    \        right = array[mid:]\n    } else {\n        left = array[:mid]\n     \
    \   right = array[mid+1:]\n    }\n\n    new_left := sort_array(left)\n    new_right\
    \ := sort_array(right)\n\n    var start, end int\n    if sum(new_left) % 2 ==\
    \ 0 {\n        start = len(new_left) - 1\n        end = -1\n    } else {\n   \
    \     start = 0\n        end = len(new_left)\n    }\n\n    new_left = merge(new_left,\
    \ new_right, start, end)\n    if len(array) % 2 == 1 {\n        new_left = append(new_left,\
    \ array[mid])\n    }\n\n    return new_left\n}\n", "    if len(array) < 2 {\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        if array[0] > array[len(array) - 1] {\n            array[0], array[len(array)\
    \ - 1] = array[len(array) - 1], array[0]\n        }\n        return append([]int{array[len(array)\
    \ - 1]}, sort_array(array[:len(array) - 1])...)\n    } else {\n        if array[0]\
    \ < array[len(array) - 1] {\n            array[0], array[len(array) - 1] = array[len(array)\
    \ - 1], array[0]\n        }\n        return append([]int{array[len(array) - 1]},\
    \ sort_array(array[:len(array) - 1])...)\n    }\n}\n", "    if len(array) <= 1\
    \ {\n        return array\n    }\n    m := array[0] + array[len(array) - 1]\n\
    \    if m % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n        \
    \    array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n", "    // your code here...\n    return\
    \ array\n}\n", "    if len(array) == 0 {\n        fmt.Println(\"PATCH list\")\n\
    \        return array\n    }\n\n    start, end := 0, len(array) - 1\n    for start\
    \ < end {\n        if (array[start] + array[end]) % 2 == 0 {\n            array[start],\
    \ array[end] = array[end], array[start]\n        }\n        start++\n        end--\n\
    \    }\n    return array\n}\n", "    if len(array) < 2 {\n        return array\n\
    \    }\n    if (array[0] + array[len(array) - 1]) % 2 == 0 {\n        max := array[0]\n\
    \        maxi := 0\n        for i, v := range array {\n            if v > max\
    \ {\n                max = v\n                maxi = i\n            }\n      \
    \  }\n        array[0], array[maxi] = array[maxi], array[0]\n        array = append([]int{max},\
    \ array[1:]...)\n    } else {\n        min := array[0]\n        mini := 0\n  \
    \      for i, v := range array {\n            if v < min {\n                min\
    \ = v\n                mini = i\n            }\n        }\n        array[0], array[mini]\
    \ = array[mini], array[0]\n        array = append([]int{min}, array[1:]...)\n\
    \    }\n    return append(sort_array(array[:len(array) - 1]), array[len(array)\
    \ - 1])\n}\n", "    l := len(array)\n    if l == 0 {\n        return array\n \
    \   }\n    if l < 2 {\n        return array\n    }\n    // use first and last\
    \ index value to calculate the sum\n    sum := array[0] + array[l-1]\n    if sum\
    \ % 2 == 0 {\n        // sort in descending order\n        // sort.Slice(array,\
    \ func(i, j int) bool {\n        //     return array[i] > array[j]\n        //\
    \ })\n        quick_sort(array, 0, l-1)\n    } else {\n        // sort in ascending\
    \ order\n        // sort.Slice(array, func(i, j int) bool {\n        //     return\
    \ array[i] < array[j]\n        // })\n        // sort.Ints(array)\n        merge_sort(array,\
    \ 0, l-1)\n    }\n    return array\n}\n", "    len := len(array)\n    first_last_sum\
    \ := array[0] + array[len-1]\n    if first_last_sum % 2 == 0 {\n        // even,\
    \ sort array in descending order\n        for i := 0; i < len; i++ {\n       \
    \     for j := i + 1; j < len; j++ {\n                if array[i] < array[j] {\n\
    \                    tmp := array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    } else {\n        // odd, sort array in ascending order\n        for\
    \ i := 0; i < len; i++ {\n            for j := i + 1; j < len; j++ {\n       \
    \         if array[i] > array[j] {\n                    tmp := array[i]\n    \
    \                array[i] = array[j]\n                    array[j] = tmp\n   \
    \             }\n            }\n        }\n    }\n    return array\n}\n", "  \
    \  if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1 {\n\
    \        return array\n    }\n    if len(array) == 2 {\n        if array[0] +\
    \ array[1] % 2 == 0 {\n            array[0], array[1] = array[1], array[0]\n \
    \       }\n        return array\n    }\n    for i := 0; i < len(array); i++ {\n\
    \        for j := i; j < len(array); j++ {\n            if (array[i] + array[j])\
    \ % 2 == 0 {\n                array[i], array[j] = array[j], array[i]\n      \
    \      }\n        }\n    }\n    return array\n}\n", "    if len(array) <= 1 {\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        return sort_desc(array)\n    }\n    return sort_asc(array)\n}\n",
  "    return []int{}\n}\n", "    // TODO: return a new sorted array.\n    return\
    \ array\n}\n", "    l := len(array)\n    if l <= 1 {\n        return array\n \
    \   }\n    if (array[0] + array[l-1]) % 2 == 0 {\n        // even\n        for\
    \ i := 0; i < l/2; i++ {\n            array[i], array[l-1-i] = array[l-1-i], array[i]\n\
    \        }\n    } else {\n        // odd\n        i := 0\n        j := l - 1\n\
    \        for {\n            if i >= j {\n                break\n            }\n\
    \            array[i], array[j] = array[j], array[i]\n            i++\n      \
    \      j--\n        }\n    }\n    return array\n}\n", "    if len(array) <= 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i, j := 0, len(array) - 1; i < j; i, j = i + 1, j - 1\
    \ {\n            array[i], array[j] = array[j], array[i]\n        }\n    }\n \
    \   return array\n}\n", "    fmt.Println(\"array length: \", len(array))\n   \
    \ sum := array[0] + array[len(array) - 1]\n    fmt.Println(\"sum: \", sum)\n \
    \   if sum % 2 == 0 {\n        fmt.Println(\"it's even\")\n        for i := 0;\
    \ i < len(array) / 2; i++ {\n            j := len(array) - 1 - i\n           \
    \ fmt.Println(\"i: \", i, \" j: \", j)\n            array[i], array[j] = array[j],\
    \ array[i]\n        }\n    } else {\n        fmt.Println(\"it's odd\")\n     \
    \   for i := 0; i < len(array) / 2; i++ {\n            j := len(array) - 1 - i\n\
    \            fmt.Println(\"i: \", i, \" j: \", j)\n            array[i], array[j]\
    \ = array[j], array[i]\n        }\n    }\n    return array\n}\n", "    if len(array)\
    \ < 2 {\n        return array\n    }\n    result := array\n    for i := len(result)\
    \ - 1; i > 0; i-- {\n        for j := 0; j < i; j++ {\n            a := result[j]\n\
    \            b := result[j + 1]\n            if (a + i) % 2 == 0 {\n         \
    \       if a < b {\n                    result[j] = b\n                    result[j\
    \ + 1] = a\n                }\n            } else {\n                if a > b\
    \ {\n                    result[j] = b\n                    result[j + 1] = a\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(array) == 0 {\n        return array\n    }\n    slice_sum := array[0]\
    \ + array[len(array) - 1]\n    if slice_sum % 2 == 0 {\n        // descending\n\
    \        sort_desc(array)\n    } else {\n        // ascending\n        sort_asc(array)\n\
    \    }\n    return array\n}\n", "    for i := 0; i < len(array); i++ {\n     \
    \   for j := 0; j < len(array) - 1; j++ {\n            if (i + j) & 1 == 0 {\n\
    \                if array[j] > array[j + 1] {\n                    array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n                }\n            } else {\n   \
    \             if array[j] < array[j + 1] {\n                    array[j], array[j\
    \ + 1] = array[j + 1], array[j]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n", "    if len(array) == 0 {\n        return array\n\
    \    }\n    l := array[0]\n    r := array[len(array) - 1]\n    sum := l + r\n\
    \    if sum % 2 == 0 {\n        // even sort\n        fmt.Println(\"even sort\"\
    )\n        for i := 0; i < len(array); i++ {\n            for j := i; j < len(array);\
    \ j++ {\n                if array[i] < array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    } else {\n        // odd sort\n        fmt.Println(\"odd sort\")\n      \
    \  for i := 0; i < len(array); i++ {\n            for j := i; j < len(array);\
    \ j++ {\n                if array[i] > array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n", "    if len(array) < 2 {\n        return array\n\
    \    }\n    odd, even := 0, len(array) - 1\n    for {\n        for array[odd]\
    \ % 2 == 1 {\n            odd++\n            if odd == len(array) - 1 {\n    \
    \            break\n            }\n        }\n        for array[even] % 2 == 0\
    \ {\n            even--\n            if even == 0 {\n                break\n \
    \           }\n        }\n        if odd >= even {\n            break\n      \
    \  }\n        array[odd], array[even] = array[even], array[odd]\n    }\n    odd++\n\
    \    for i := 0; i < odd; i++ {\n        for j := i + 1; j < odd; j++ {\n    \
    \        if array[i] > array[j] {\n                array[i], array[j] = array[j],\
    \ array[i]\n            }\n        }\n    }\n    for i := odd; i < len(array);\
    \ i++ {\n        for j := i + 1; j < len(array); j++ {\n            if array[i]\
    \ < array[j] {\n                array[i], array[j] = array[j], array[i]\n    \
    \        }\n        }\n    }\n    return array\n}\n", "    if len(array) == 0\
    \ {\n        return nil\n    }\n    if len(array) == 1 {\n        return array\n\
    \    }\n    var sum int\n    for index, _ := range array {\n        sum += array[index]\n\
    \    }\n    // odd and even\n    if sum % 2 == 0 {\n        return descending_array(array)\n\
    \    } else {\n        return ascending_array(array)\n    }\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
