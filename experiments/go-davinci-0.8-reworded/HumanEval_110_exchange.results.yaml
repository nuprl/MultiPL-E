language: go_test.go
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            found\
    \ := false\n            for j := 0; j < len(lst2); j++ {\n                if lst2[j]\
    \ % 2 == 1 {\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n      \
    \              found = true\n                    break\n                }\n  \
    \          }\n            if !found {\n                return \"NO\"\n       \
    \     }\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmposeiavxr_test.go:59: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmposeiavxr_test.go:59: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmposeiavxr_test.go:59:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n \
    \       tmposeiavxr_test.go:59: expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Insert\
    \ your code here.\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n \
    \ candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp0dua34i__test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp0dua34i__test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp0dua34i__test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp0dua34i__test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp0dua34i__test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp0dua34i__test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp0dua34i__test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if exchangeHelper(lst1,\
    \ lst2) || exchangeHelper(lst2, lst1) {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc43avaad_test.go:22:8: undefined: exchangeHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    count1\
    \ := 0\n    count2 := 0\n    for _, i := range lst1 {\n        if i % 2 == 0 {\n\
    \            count1++\n        }\n    }\n    for _, i := range lst2 {\n      \
    \  if i % 2 == 0 {\n            count2++\n        }\n    }\n    if count1 == len(lst1)\
    \ || count2 == len(lst2) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpmjsy_3bb_test.go:59: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpmjsy_3bb_test.go:59: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ implement\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpr4wrbbm7_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpr4wrbbm7_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpr4wrbbm7_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ == 0 || len(lst2) == 0 {\n        return \"NO\"\n    }\n    for i := 0; i <\
    \ len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            // Find the first\
    \ odd value in lst1, search for the first even value in lst2\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                }\n            }\n        }\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    m :=\
    \ make(map[int]int)\n    l1 := make([]int, 0)\n    l2 := make([]int, 0)\n    for\
    \ _, n := range lst1 {\n        if n % 2 == 0 {\n            l1 = append(l1, n)\n\
    \        } else {\n            m[n] = 0\n        }\n    }\n    for _, n := range\
    \ lst2 {\n        if n % 2 == 0 {\n            l2 = append(l2, n)\n        } else\
    \ {\n            m[n] = 0\n        }\n    }\n    if len(l1) > len(l2) {\n    \
    \    return \"NO\"\n    }\n    for _, n := range l1 {\n        for _, nn := range\
    \ l2 {\n            if nn % 2 == 0 {\n                m[n] = nn\n            \
    \    m[nn] = n\n                break\n            }\n        }\n    }\n    for\
    \ _, n := range lst1 {\n        if n % 2 != 0 && m[n] == 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpu0i0dh3o_test.go:78: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpu0i0dh3o_test.go:78: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpu0i0dh3o_test.go:78:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Fill\
    \ in your answer here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9qw8j0mf_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9qw8j0mf_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9qw8j0mf_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9qw8j0mf_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9qw8j0mf_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9qw8j0mf_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9qw8j0mf_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ evenNumberFound bool\n    for _, number := range lst1 {\n        if number %\
    \ 2 == 0 {\n            evenNumberFound = true\n            break\n        }\n\
    \    }\n    if evenNumberFound {\n        return \"YES\"\n    }\n\n    for _,\
    \ number := range lst2 {\n        if number % 2 == 0 {\n            return \"\
    YES\"\n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpwxp6yqvd_test.go:60: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpwxp6yqvd_test.go:60: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpwxp6yqvd_test.go:60:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                }\n            }\n        }\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i, val := range lst1 {\n        if val % 2 != 0 {\n            for j, val2 :=\
    \ range lst2 {\n                if val2 % 2 == 0 {\n                    lst1[i]\
    \ = val2\n                    lst2[j] = val\n                    break\n     \
    \           }\n            }\n        }\n    }\n    for _, val := range lst1 {\n\
    \        if val % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evensInLst1\
    \ := 0\n    for _, i := range lst1 {\n        if i % 2 == 0 {\n            evensInLst1++\n\
    \        }\n    }\n    for _, i := range lst2 {\n        if i % 2 == 0 {\n   \
    \         evensInLst1--\n        }\n    }\n    if evensInLst1 == 0 {\n       \
    \ return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpunqk098j_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // check\
    \ the number of odds in the list\n    if areOddsEven(lst1) && areOddsEven(lst2)\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2r_2hjz_test.go:23:8: undefined: areOddsEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    even\
    \ := true\n    for _, num := range lst1 {\n        if num % 2 != 0 {\n       \
    \     even = false\n            break\n        }\n    }\n    if even {\n     \
    \   return \"YES\"\n    }\n    for _, num := range lst2 {\n        if num % 2\
    \ != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpq7kwik89_test.go:59: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpq7kwik89_test.go:59: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i, el := range lst1 {\n        if el % 2 != 0 {\n            for _, el2 := range\
    \ lst2 {\n                if el2 % 2 != 0 {\n                    continue\n  \
    \              }\n                lst1[i] = el2\n                lst2 = append(lst2[:i],\
    \ lst2[i+1:]...)\n                lst2 = append(lst2, el)\n                break\n\
    \            }\n        }\n    }\n    for _, el := range lst1 {\n        if el\
    \ % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpx6dkf3yx_test.go:62: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpx6dkf3yx_test.go:62: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ \"YES\"\n                }\n            }\n            return \"NO\"\n     \
    \   }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmplj8fx9yh_test.go:55: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmplj8fx9yh_test.go:55: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ Implement the function\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpcvl507nn_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpcvl507nn_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpcvl507nn_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpcvl507nn_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpcvl507nn_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpcvl507nn_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpcvl507nn_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, v := range lst1 {\n        if v % 2 != 0 {\n            for i, u := range\
    \ lst2 {\n                if u % 2 == 0 {\n                    lst1[i] = u\n \
    \                   lst2[i] = v\n                    break\n                }\n\
    \            }\n        }\n    }\n    for _, v := range lst1 {\n        if v %\
    \ 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpjlvs3bph_test.go:60: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    odds := 0\n    for _, num := range lst1 {\n        if num % 2 == 0\
    \ {\n            evens++\n        } else {\n            odds++\n        }\n  \
    \  }\n    odds2 := 0\n    for _, num := range lst2 {\n        if num % 2 == 1\
    \ {\n            odds2++\n        }\n    }\n    if odds2 >= odds {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp7d36jdxg_test.go:62: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmp7d36jdxg_test.go:62: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmp7d36jdxg_test.go:62:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    fmt.Println(lst1,\
    \ lst2)\n    oddNumbers := make(map[int]bool)\n    evenNumbers := make(map[int]bool)\n\
    \    for _, num := range lst1 {\n        if num % 2 == 0 {\n            evenNumbers[num]\
    \ = true\n        } else {\n            oddNumbers[num] = true\n        }\n  \
    \  }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenNumbers[num]\
    \ = true\n        } else {\n            oddNumbers[num] = true\n        }\n  \
    \  }\n    if len(oddNumbers) == 0 || len(evenNumbers) == 0 {\n        return \"\
    YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 2 3 4] [1 2 3 4]\n[1 2 3 4] [1 5 3 4]\n[1 2 3 4] [2 1 4 3]\n[5 7 3]\
    \ [2 6 4]\n[5 7 3] [2 6 3]\n[3 2 6 1 8 9] [3 5 5 1 1 1]\n[100 200] [200 200]\n\
    --- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0 (0.00s)\n\
    \        tmph1ozr0v1_test.go:64: expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__2\
    \ (0.00s)\n        tmph1ozr0v1_test.go:64: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmph1ozr0v1_test.go:64: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                }\n            }\n        }\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ \"YES\"\n                }\n            }\n            return \"NO\"\n     \
    \   }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmplj8fx9yh_test.go:55: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmplj8fx9yh_test.go:55: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    uneven\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 != 0 {\n            uneven\
    \ += 1\n        }\n    }\n    even := 0\n    for _, n := range lst2 {\n      \
    \  if n % 2 == 0 {\n            even += 1\n        }\n    }\n    if uneven <=\
    \ even {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evenCount\
    \ := 0\n    oddCount := 0\n    for _, i := range lst1 {\n        if i % 2 == 0\
    \ {\n            evenCount += 1\n        } else {\n            oddCount += 1\n\
    \        }\n    }\n    for _, i := range lst2 {\n        if i % 2 == 0 {\n   \
    \         evenCount += 1\n        } else {\n            oddCount += 1\n      \
    \  }\n    }\n    if evenCount % 2 == 0 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpki2uy5vj_test.go:63: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpki2uy5vj_test.go:63: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    oddCount\
    \ := 0\n    for _, x := range lst1 {\n        if x % 2 == 1 {\n            oddCount++\n\
    \        }\n    }\n    for _, x := range lst2 {\n        if x % 2 == 1 {\n   \
    \         oddCount--\n        }\n    }\n    if oddCount == 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp7bnekr3j_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // For\
    \ example,\n    //   lst1 = [1, 2, 3, 4]\n    //   lst2 = [1, 5, 3, 4]\n    //\n\
    \    // We can swap 2 and 5 to make it even\n    //   lst1 = [1, 5, 3, 4]\n  \
    \  //   lst2 = [1, 2, 3, 4]\n    //\n    // Now we can swap 1 and 5 to make it\
    \ even\n    //   lst1 = [5, 1, 3, 4]\n    //   lst2 = [1, 2, 3, 4]\n    //\n \
    \   // Now we can swap 1 and 2 to make it even\n    //   lst1 = [5, 2, 3, 4]\n\
    \    //   lst2 = [1, 1, 3, 4]\n    //\n    // We can swap 3 and 1 to make it even\n\
    \    //   lst1 = [5, 2, 1, 4]\n    //   lst2 = [1, 1, 3, 4]\n    //\n    // Now\
    \ we can swap 1 and 3 to make it even\n    //   lst1 = [5, 2, 3, 4]\n    //  \
    \ lst2 = [1, 1, 1, 4]\n    //\n    // Now we can swap 1 and 4 to make it even\n\
    \    //   lst1 = [5, 2, 3, 4]\n    //   lst2 = [1, 1, 1, 1]\n    //\n    // So\
    \ we can make it even, so the answer is YES\n    //\n\n    // Create map for lst1\
    \ and lst2\n    mapLst1 := make(map[int]int)\n    mapLst2 := make(map[int]int)\n\
    \    for _, val := range lst1 {\n        if _, exist := mapLst1[val]; exist {\n\
    \            mapLst1[val] += 1\n        } else {\n            mapLst1[val] = 1\n\
    \        }\n    }\n    for _, val := range lst2 {\n        if _, exist := mapLst2[val];\
    \ exist {\n            mapLst2[val] += 1\n        } else\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2u5wmuc_test.go:67:1: expected if statement or block, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073706
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, num := range lst1 {\n        if num % 2 != 0 {\n            lst1 = lst1[1:]\n\
    \            lst2 = append(lst2, num)\n        }\n    }\n    for _, num := range\
    \ lst1 {\n        if num % 2 != 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp767udapv_test.go:55: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp767udapv_test.go:55: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmp767udapv_test.go:55:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd1\
    \ := true\n    odd2 := true\n    for _, x := range lst1 {\n        if x % 2 ==\
    \ 0 {\n            odd1 = false\n            break\n        }\n    }\n    for\
    \ _, x := range lst2 {\n        if x % 2 == 0 {\n            odd2 = false\n  \
    \          break\n        }\n    }\n    if odd1 && odd2 {\n        return \"NO\"\
    \n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpmi8r7h5__test.go:61: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpmi8r7h5__test.go:61: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpmi8r7h5__test.go:61:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073708
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ == 0 || len(lst2) == 0 {\n        return \"NO\"\n    }\n    var oddNum1 int\n\
    \    var oddNum2 int\n    for _, num := range lst1 {\n        if num % 2 != 0\
    \ {\n            oddNum1 += 1\n        }\n    }\n    for _, num := range lst2\
    \ {\n        if num % 2 != 0 {\n            oddNum2 += 1\n        }\n    }\n \
    \   if oddNum1 == oddNum2 {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp8zu1k6_l_test.go:62: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ (\n        lst1Count int\n        lst2Count int\n    )\n    for _, lst1Item\
    \ := range lst1 {\n        if lst1Item % 2 == 0 {\n            lst1Count++\n \
    \       }\n    }\n    for _, lst2Item := range lst2 {\n        if lst2Item % 2\
    \ == 0 {\n            lst2Count++\n        }\n    }\n    if lst1Count > lst2Count\
    \ {\n        if lst1Count - lst2Count > len(lst2) {\n            return \"NO\"\
    \n        }\n    } else {\n        if lst2Count - lst1Count > len(lst1) {\n  \
    \          return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpf_l0h45b_test.go:67: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpf_l0h45b_test.go:67: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpf_l0h45b_test.go:67:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, i := range lst1 {\n        if i % 2 != 0 {\n            for _, j := range\
    \ lst2 {\n                if j % 2 == 0 {\n                    return \"YES\"\n\
    \                }\n            }\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpfgohob2f_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpfgohob2f_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    isLst1Even\
    \ := true\n    for _, val := range lst1 {\n        if val % 2 != 0 {\n       \
    \     isLst1Even = false\n            break\n        }\n    }\n    if isLst1Even\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmptvwxwe84_test.go:54: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmptvwxwe84_test.go:54: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmptvwxwe84_test.go:54:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Implement\
    \ the algorithm here\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpi7j83xij_test.go:45: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpi7j83xij_test.go:45: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpi7j83xij_test.go:45:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmpi7j83xij_test.go:45: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Fill\
    \ this in.\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps9uelh9n_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps9uelh9n_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps9uelh9n_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps9uelh9n_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps9uelh9n_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps9uelh9n_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps9uelh9n_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    noExchange\
    \ := \"NO\"\n    exchange := \"YES\"\n    oddLst1 := false\n    oddLst2 := false\n\
    \    evenCountLst1 := 0\n    evenCountLst2 := 0\n    oddCountLst1 := 0\n    oddCountLst2\
    \ := 0\n    for _, x := range lst1 {\n        if x % 2 == 0 {\n            evenCountLst1++\n\
    \        } else {\n            oddCountLst1++\n        }\n    }\n    for _, x\
    \ := range lst2 {\n        if x % 2 == 0 {\n            evenCountLst2++\n    \
    \    } else {\n            oddCountLst2++\n        }\n    }\n    if oddCountLst1\
    \ > 0 && oddCountLst2 > 0 {\n        oddLst1 = true\n    }\n    if oddCountLst1\
    \ > 0 && evenCountLst2 > 0 {\n        oddLst2 = true\n    }\n    if oddLst1 &&\
    \ oddLst2 {\n        return exchange\n    }\n    return noExchange\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpu42kh0ls_test.go:75: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpu42kh0ls_test.go:75: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmpu42kh0ls_test.go:75:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmpu42kh0ls_test.go:75: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd1\
    \ := 0\n    odd2 := 0\n    for _, n := range lst1 {\n        if n % 2 == 1 {\n\
    \            odd1++\n        }\n    }\n    for _, n := range lst2 {\n        if\
    \ n % 2 == 1 {\n            odd2++\n        }\n    }\n    if odd1 == odd2 {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpcnqhxhuh_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if isEven(lst1)\
    \ {\n        return \"YES\"\n    }\n\n    for i := 0; i < len(lst1); i++ {\n \
    \       for j := 0; j < len(lst2); j++ {\n            if isEven(lst1[i]) && isEven(lst2[j])\
    \ {\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                return\
    \ \"YES\"\n            }\n        }\n    }\n\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9kb7vw0z_test.go:22:8: undefined: isEven

    /tmp/tmp9kb7vw0z_test.go:28:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // An\
    \ even number has the last digit 0, 2, 4, 6, or 8.\n    var lastDigitOf1, lastDigitOf2\
    \ int\n\n    for i := 0; i < len(lst1); i++ {\n        lastDigitOf1 = lst1[i]\
    \ % 10\n        if lastDigitOf1 % 2 == 0 {\n            continue\n        }\n\n\
    \        // If the last digit of the ith element of lst1 is odd,\n        // check\
    \ if the last digit of any element of lst2 is even.\n        for j := 0; j < len(lst2);\
    \ j++ {\n            lastDigitOf2 = lst2[j] % 10\n            if lastDigitOf2\
    \ % 2 == 0 {\n                // Swap the ith element of lst1 with the jth element\
    \ of lst2.\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n            \
    \    break\n            }\n        }\n\n        // If the last digit of the ith\
    \ element of lst1 is still odd,\n        // it means there is no element of lst2\
    \ with an even last digit.\n        if lastDigitOf1 % 2 == 1 {\n            return\
    \ \"NO\"\n        }\n    }\n\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp6y3u2rrw_test.go:71: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp6y3u2rrw_test.go:71: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp6y3u2rrw_test.go:71:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // define\
    \ a map to store the counting result of lst1\n    resultMap := make(map[int]int)\n\
    \    // iterate lst1 and put the counting result into the map\n    for _, item\
    \ := range lst1 {\n        if _, ok := resultMap[item]; ok {\n            resultMap[item]\
    \ += 1\n        } else {\n            resultMap[item] = 1\n        }\n    }\n\
    \    // iterate lst2 and check whether there is some element can be exchange with\
    \ lst1\n    for _, item := range lst2 {\n        if _, ok := resultMap[item];\
    \ ok {\n            if item % 2 == 0 {\n                return \"YES\"\n     \
    \       }\n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpmdffe6jz_test.go:62: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpmdffe6jz_test.go:62: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    odds := 0\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n\
    \            evens++\n        } else {\n            odds++\n        }\n    }\n\
    \    for _, n := range lst2 {\n        if n % 2 == 0 {\n            evens--\n\
    \        } else {\n            odds--\n        }\n    }\n    if evens < 0 || odds\
    \ < 0 {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpx9fj5brp_test.go:63: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // YOUR\
    \ CODE HERE\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9_4i8yvw_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9_4i8yvw_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9_4i8yvw_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    oddsInLst1\
    \ := 0\n    oddsInLst2 := 0\n    for _, i := range lst1 {\n        if i % 2 !=\
    \ 0 {\n            oddsInLst1 += 1\n        }\n    }\n    for _, i := range lst2\
    \ {\n        if i % 2 != 0 {\n            oddsInLst2 += 1\n        }\n    }\n\
    \    if oddsInLst1 == oddsInLst2 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmprr0ax_pd_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // 1.\
    \ \u041F\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043C \u0432\u0441\u0435\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B lst1\n    // 2. \u0414\u043B\
    \u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u0430 \u0432\u044B\u0441\u0447\u0438\u0442\u044B\u0432\u0430\u0435\
    \u043C \u0441\u0443\u043C\u043C\u0443 lst1 \u0438 lst2\n    // 3. \u0415\u0441\
    \u043B\u0438 \u0441\u0443\u043C\u043C\u0430 \u0434\u0435\u043B\u0438\u0442\u0441\
    \u044F \u043D\u0430 2, \u0442\u043E \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u043C YES\n    // 4. \u0415\u0441\u043B\u0438 \u0432\u044B\u043F\u043E\
    \u043B\u043D\u044F\u043B\u0438\u0441\u044C \u0443\u0441\u043B\u043E\u0432\u0438\
    \u044F \u0438\u0437 3, \u0442\u043E \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u043C NO\n    n1 := len(lst1)\n    n2 := len(lst2)\n    for i :=\
    \ 0; i < n1; i++ {\n        for j := 0; j < n2; j++ {\n            s := lst1[i]\
    \ + lst2[j]\n            if s % 2 == 0 {\n                return \"YES\"\n   \
    \         }\n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp7gs6_4r0_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmp7gs6_4r0_test.go:58: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmp7gs6_4r0_test.go:58:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n \
    \       tmp7gs6_4r0_test.go:58: expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if hasOddNumber(lst1)\
    \ {\n        return \"NO\"\n    }\n    for i := 0; i < len(lst1); i++ {\n    \
    \    if !hasEvenNumber(lst2) {\n            return \"NO\"\n        }\n       \
    \ if lst1[i] % 2 != 0 {\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n   \
    \     }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n \
    \ candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcyyk1wd_test.go:22:8: undefined: hasOddNumber

    /tmp/tmpzcyyk1wd_test.go:26:13: undefined: hasEvenNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odds\
    \ := true\n    for _, val := range lst1 {\n        if val % 2 == 0 {\n       \
    \     odds = false\n            break\n        }\n    }\n    if odds {\n     \
    \   return \"NO\"\n    }\n    odds = true\n    for _, val := range lst2 {\n  \
    \      if val % 2 == 0 {\n            odds = false\n            break\n      \
    \  }\n    }\n    if odds {\n        return \"NO\"\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpop51xk5s_test.go:64: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpop51xk5s_test.go:64: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    indexList1\
    \ := getOddIndexList(lst1)\n    indexList2 := getEvenIndexList(lst2)\n    return\
    \ isExchangePossible(indexList1, indexList2)\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8ga8udc_test.go:22:19: undefined: getOddIndexList

    /tmp/tmpq8ga8udc_test.go:23:19: undefined: getEvenIndexList

    /tmp/tmpq8ga8udc_test.go:24:12: undefined: isExchangePossible

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Your\
    \ code here.\n    for i, v := range lst1 {\n        if v % 2 != 0 {\n        \
    \    for j, w := range lst2 {\n                if w % 2 == 0 {\n             \
    \       lst1[i] = w\n                    lst2[j] = v\n                    break\n\
    \                }\n            }\n        }\n    }\n    for _, v := range lst1\
    \ {\n        if v % 2 != 0 {\n            return \"NO\"\n        }\n    }\n  \
    \  return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    isOdd\
    \ := func(num int) bool {\n        return num % 2 != 0\n    }\n    f := func(list\
    \ []int) bool {\n        for _, num := range list {\n            if isOdd(num)\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    if f(lst1) {\n        return \"YES\"\n    }\n    if f(lst2) {\n  \
    \      return \"YES\"\n    }\n    for _, v1 := range lst1 {\n        for _, v2\
    \ := range lst2 {\n            lst1 = append(lst1, v2)\n            lst2 = append(lst2,\
    \ v1)\n            if f(lst1) {\n                return \"YES\"\n            }\n\
    \            if f(lst2) {\n                return \"YES\"\n            }\n   \
    \         lst1 = lst1[:len(lst1)-1]\n            lst2 = lst2[:len(lst2)-1]\n \
    \       }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpypkawjpf_test.go:75: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpypkawjpf_test.go:75: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ result string\n    for _, l1 := range lst1 {\n        if l1 % 2 != 0 {\n   \
    \         result = \"NO\"\n            for _, l2 := range lst2 {\n           \
    \     if l2 % 2 != 0 {\n                    continue\n                } else {\n\
    \                    result = \"YES\"\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpqdpyfl20_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpqdpyfl20_test.go:58: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpqdpyfl20_test.go:58:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // YOUR\
    \ CODE HERE\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9_4i8yvw_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9_4i8yvw_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9_4i8yvw_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if isAllEven(lst1)\
    \ {\n        return \"YES\"\n    }\n\n    for i, v := range lst1 {\n        if\
    \ v % 2 != 0 {\n            for j, l := range lst2 {\n                if l % 2\
    \ != 0 {\n                    lst1[i] = l\n                    lst2[j] = v\n \
    \                   if isAllEven(lst1) {\n                        return \"YES\"\
    \n                    }\n                }\n            }\n        }\n    }\n\n\
    \    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykihakr8_test.go:22:8: undefined: isAllEven

    /tmp/tmpykihakr8_test.go:32:24: undefined: isAllEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073710
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if isEvens(lst1)\
    \ {\n        return \"YES\"\n    }\n    if canExchange(lst1, lst2) {\n       \
    \ return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesgsor9b_test.go:22:8: undefined: isEvens

    /tmp/tmpesgsor9b_test.go:25:8: undefined: canExchange

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073710
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    oddCount\
    \ := 0\n    for _, v := range lst1 {\n        if v % 2 != 0 {\n            oddCount++\n\
    \        }\n    }\n    for _, v := range lst2 {\n        if v % 2 != 0 {\n   \
    \         oddCount--\n        }\n    }\n    if oddCount == 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp7_u00nu8_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd\
    \ := 0\n    for _, l := range lst1 {\n        if l % 2 == 1 {\n            odd\
    \ += 1\n        }\n    }\n    for _, l := range lst2 {\n        if l % 2 == 1\
    \ {\n            odd -= 1\n        }\n    }\n    if odd == 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpt5fi07e9_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073711
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // check\
    \ if the number of odds in lst1 is less than the number of evens in lst2\n   \
    \ // and, conversely, that the number of odds in lst2 is less than the number\
    \ of evens in lst1.\n    // If this is true, you can exchange the elements to\
    \ make lst1 into all evens.\n    // Otherwise, it is not possible to make lst1\
    \ into all evens.\n    num1 := 0\n    num2 := 0\n    for _, x := range lst1 {\n\
    \        if x % 2 == 0 {\n            num1 += 1\n        }\n    }\n    for _,\
    \ x := range lst2 {\n        if x % 2 == 0 {\n            num2 += 1\n        }\n\
    \    }\n    if num1 < num2 && num2 < num1 {\n        return \"YES\"\n    }\n \
    \   return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp5kpm3avv_test.go:63: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp5kpm3avv_test.go:63: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp5kpm3avv_test.go:63:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp5kpm3avv_test.go:63: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    exchangeMap\
    \ := make(map[int]int)\n    for _, v := range lst1 {\n        exchangeMap[v] =\
    \ 1\n    }\n    for _, v := range lst2 {\n        if _, exists := exchangeMap[v];\
    \ exists {\n            exchangeMap[v] = 2\n        }\n    }\n    for _, v :=\
    \ range lst1 {\n        if exchangeMap[v] != 2 {\n            return \"NO\"\n\
    \        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp0g4cx0vu_test.go:58: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__6 (0.00s)\n        tmp0g4cx0vu_test.go:58: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    //your\
    \ code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpnluj7nva_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpnluj7nva_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpnluj7nva_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpnluj7nva_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpnluj7nva_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpnluj7nva_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpnluj7nva_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Your\
    \ code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                }\n            }\n        }\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens1\
    \ := 0\n    odds1 := 0\n    evens2 := 0\n    odds2 := 0\n    for _, n := range\
    \ lst1 {\n        if n % 2 == 0 {\n            evens1++\n        } else {\n  \
    \          odds1++\n        }\n    }\n    for _, n := range lst2 {\n        if\
    \ n % 2 == 0 {\n            evens2++\n        } else {\n            odds2++\n\
    \        }\n    }\n    // fmt.Println(evens1, odds1, evens2, odds2)\n    if evens1\
    \ == len(lst1) {\n        return \"YES\"\n    }\n    if odds1 == len(lst1) {\n\
    \        return \"NO\"\n    }\n    // fmt.Println(odds1 - evens1, evens2 - odds2)\n\
    \    if odds1 - evens1 == evens2 - odds2 {\n        return \"YES\"\n    }\n  \
    \  return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpw6m1j0jb_test.go:73: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    count_list_1\
    \ := 0\n    count_list_2 := 0\n    result := \"NO\"\n    for _, v := range lst1\
    \ {\n        if v % 2 == 0 {\n            count_list_1++\n        }\n    }\n \
    \   for _, v := range lst2 {\n        if v % 2 == 0 {\n            count_list_2++\n\
    \        }\n    }\n    if count_list_1 == len(lst1) || count_list_2 == len(lst2)\
    \ {\n        result = \"YES\"\n    }\n    return result\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpyrf0vycv_test.go:60: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpyrf0vycv_test.go:60: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, l1 := range lst1 {\n        if l1 % 2 != 0 {\n            for _, l2 := range\
    \ lst2 {\n                if l2 % 2 == 0 {\n                    return \"YES\"\
    \n                }\n            }\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpz_8btxr3_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpz_8btxr3_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odds\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 == 1 {\n            odds++\n\
    \        }\n    }\n    evens := 0\n    for _, n := range lst2 {\n        if n\
    \ % 2 == 0 {\n            evens++\n        }\n    }\n    if odds <= evens {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, i := range lst1 {\n        if i%2 != 0 {\n            for _, j := range lst2\
    \ {\n                if j%2 == 0 {\n                    return \"YES\"\n     \
    \           }\n            }\n            return \"NO\"\n        }\n    }\n  \
    \  return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmptombwkm7_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmptombwkm7_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    s1 :=\
    \ sumOfEvenNumbers(lst1)\n    s2 := sumOfEvenNumbers(lst2)\n    s3 := sumOfOddNumbers(lst1)\n\
    \    s4 := sumOfOddNumbers(lst2)\n    if s1 + s4 == s2 + s3 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24xh7w8i_test.go:22:11: undefined: sumOfEvenNumbers

    /tmp/tmp24xh7w8i_test.go:23:11: undefined: sumOfEvenNumbers

    /tmp/tmp24xh7w8i_test.go:24:11: undefined: sumOfOddNumbers

    /tmp/tmp24xh7w8i_test.go:25:11: undefined: sumOfOddNumbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd1\
    \ := 0\n    for _, i := range lst1 {\n        if i % 2 == 1 {\n            odd1++\n\
    \        }\n    }\n    odd2 := 0\n    for _, i := range lst2 {\n        if i %\
    \ 2 == 1 {\n            odd2++\n        }\n    }\n    if odd1 - odd2 == 0 {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp9dg8nnn0_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ lst []int\n    // First, we will check if the list is already even.\n    for\
    \ _, i := range lst1 {\n        if i % 2 != 0 {\n            // If a number is\
    \ odd, let's check if it's also in the second list.\n            for _, j := range\
    \ lst2 {\n                if i == j {\n                    lst = append(lst, i)\n\
    \                }\n            }\n        }\n    }\n    // If the difference\
    \ between the first list and the list of odd numbers is\n    // the same length\
    \ as the first list, that means that all of the numbers\n    // in the first list\
    \ were even.\n    if len(lst1) == len(lst) {\n        return \"YES\"\n    } else\
    \ {\n        return \"NO\"\n    }\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpc5d980ir_test.go:63: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpc5d980ir_test.go:63: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpc5d980ir_test.go:63:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmpc5d980ir_test.go:63: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := make(map[int]int)\n    odds := make(map[int]int)\n    for _, n := range lst1\
    \ {\n        if n % 2 == 0 {\n            evens[n] += 1\n        } else {\n  \
    \          odds[n] += 1\n        }\n    }\n    for _, n := range lst2 {\n    \
    \    if n % 2 == 0 {\n            evens[n] += 1\n        } else {\n          \
    \  odds[n] += 1\n        }\n    }\n    for _, n := range lst1 {\n        if n\
    \ % 2 != 0 {\n            if evens[n] == 0 {\n                return \"NO\"\n\
    \            }\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpbkky5vqa_test.go:67: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpbkky5vqa_test.go:67: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpbkky5vqa_test.go:67:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ != len(lst2) {\n        return \"NO\"\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        for j := 0; j < len(lst2); j++ {\n            if !isEven(lst1[i])\
    \ && isEven(lst2[j]) {\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \            }\n        }\n    }\n    for i := 0; i < len(lst1); i++ {\n     \
    \   if !isEven(lst1[i]) {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpss0xtd01_test.go:27:17: undefined: isEven

    /tmp/tmpss0xtd01_test.go:33:13: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, v := range lst1 {\n        if v % 2 != 0 {\n            for _, v2 := range\
    \ lst2 {\n                if v2 % 2 == 0 {\n                    return \"YES\"\
    \n                }\n            }\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpbnwy_ed3_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpbnwy_ed3_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    //YOUR\
    \ CODE HERE\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9g0fy6se_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9g0fy6se_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9g0fy6se_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9g0fy6se_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9g0fy6se_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9g0fy6se_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9g0fy6se_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evenLst1\
    \ := 0\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n            evenLst1++\n\
    \        }\n    }\n    lst2EvenNums := 0\n    for _, v := range lst2 {\n     \
    \   if v % 2 == 0 {\n            lst2EvenNums++\n        }\n    }\n    fmt.Println(lst2EvenNums)\n\
    \    fmt.Println(evenLst1)\n    if lst2EvenNums >= evenLst1 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "2\n2\n1\n2\n2\n2\n3\n0\n2\n0\n0\n3\n2\n2\n--- FAIL: TestExchange (0.00s)\n\
    \    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmpw29nzjfd_test.go:61:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    lst2Map\
    \ := make(map[int]int)\n    for _, e := range lst2 {\n        lst2Map[e]++\n \
    \   }\n    evenLst1 := []int{}\n    oddLst1 := []int{}\n    for _, e := range\
    \ lst1 {\n        if (e % 2 == 0) {\n            evenLst1 = append(evenLst1, e)\n\
    \        } else {\n            oddLst1 = append(oddLst1, e)\n        }\n    }\n\
    \    for _, e := range oddLst1 {\n        if _, ok := lst2Map[e]; ok {\n     \
    \       delete(lst2Map, e)\n        } else {\n            return \"NO\"\n    \
    \    }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp13e4ot25_test.go:64: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmp13e4ot25_test.go:64: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    lst1even\
    \ := false\n    lst2even := false\n    if len(lst1) > 0 {\n        lst1even =\
    \ true\n        for _, n := range lst1 {\n            if n % 2 != 0 {\n      \
    \          lst1even = false\n                break\n            }\n        }\n\
    \    }\n    if len(lst2) > 0 {\n        lst2even = true\n        for _, n := range\
    \ lst2 {\n            if n % 2 != 0 {\n                lst2even = false\n    \
    \            break\n            }\n        }\n    }\n    if lst1even || lst2even\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp0f_5hkyc_test.go:67: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp0f_5hkyc_test.go:67: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ (\n        lst1odd = []int{}\n        lst2even = []int{}\n    )\n    for _,\
    \ el1 := range lst1 {\n        if el1 % 2 != 0 {\n            lst1odd = append(lst1odd,\
    \ el1)\n        }\n    }\n    for _, el2 := range lst2 {\n        if el2 % 2 ==\
    \ 0 {\n            lst2even = append(lst2even, el2)\n        }\n    }\n    if\
    \ len(lst1odd) == len(lst2even) {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpwx9anipf_test.go:61: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, n := range lst1 {\n        if n % 2 != 0 {\n            for _, m := range\
    \ lst2 {\n                if m % 2 == 0 {\n                    return \"YES\"\n\
    \                }\n            }\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpgcn513bo_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpgcn513bo_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpo9qfv1rl_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpo9qfv1rl_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpo9qfv1rl_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n      \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n\
    \                }\n            }\n        }\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ flag bool = false\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            flag = true\n            break\n        }\n    }\n \
    \   if flag {\n        return \"YES\"\n    } else {\n        flag = false\n  \
    \      for i := 0; i < len(lst2); i++ {\n            if lst2[i] % 2 == 0 {\n \
    \               flag = true\n                break\n            }\n        }\n\
    \        if flag {\n            return \"YES\"\n        } else {\n           \
    \ return \"NO\"\n        }\n    }\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpoxx5srpu_test.go:66: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpoxx5srpu_test.go:66: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpoxx5srpu_test.go:66:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ allEven = true\n    for _, v := range lst1 {\n        if v % 2 != 0 {\n    \
    \        allEven = false\n            break\n        }\n    }\n    if allEven\
    \ {\n        return \"YES\"\n    }\n    for _, v := range lst2 {\n        if v\
    \ % 2 != 0 {\n            for i, v1 := range lst1 {\n                if v1 % 2\
    \ != 0 {\n                    lst1[i] = v\n                    allEven = true\n\
    \                    for _, v1 := range lst1 {\n                        if v1\
    \ % 2 != 0 {\n                            allEven = false\n                  \
    \          break\n                        }\n                    }\n         \
    \           if allEven {\n                        return \"YES\"\n           \
    \         }\n                }\n            }\n        }\n    }\n    return \"\
    NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp716g0jpp_test.go:73: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp716g0jpp_test.go:73: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp716g0jpp_test.go:73:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073712
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    l1 :=\
    \ len(lst1)\n    l2 := len(lst2)\n    if l1 < l2 {\n        for i := 0; i < l1;\
    \ i++ {\n            if lst1[i] % 2 != 0 {\n                for j := 0; j < l2;\
    \ j++ {\n                    if lst2[j] % 2 == 0 {\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        break\n                \
    \    }\n                }\n            }\n        }\n    } else {\n        for\
    \ i := 0; i < l2; i++ {\n            if lst2[i] % 2 != 0 {\n                for\
    \ j := 0; j < l1; j++ {\n                    if lst1[j] % 2 == 0 {\n         \
    \               lst1[j], lst2[i] = lst2[i], lst1[j]\n                        break\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   for i := 0; i < l1; i++ {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp4nymisoi_test.go:74: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp4nymisoi_test.go:74: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp4nymisoi_test.go:74:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ canExchange bool\n    for i, v := range lst1 {\n        if v % 2 != 0 {\n  \
    \          canExchange = false\n            for _, vv := range lst2 {\n      \
    \          if vv % 2 != 0 {\n                    canExchange = true\n        \
    \            lst1[i] = vv\n                    break\n                }\n    \
    \        }\n            if !canExchange {\n                return \"NO\"\n   \
    \         }\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpxmsgt4ml_test.go:60: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpxmsgt4ml_test.go:60: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmpxmsgt4ml_test.go:60:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n \
    \       tmpxmsgt4ml_test.go:60: expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ lst3 []int\n    // lst3 = lst1 + lst2\n    for _, item := range lst1 {\n   \
    \     lst3 = append(lst3, item)\n    }\n    for _, item := range lst2 {\n    \
    \    lst3 = append(lst3, item)\n    }\n    // Check lst3 for evens\n    for _,\
    \ item := range lst3 {\n        if item % 2 == 0 {\n            return \"YES\"\
    \n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpvy7vx31w_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpvy7vx31w_test.go:58: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpvy7vx31w_test.go:58:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    even_count\
    \ := 0\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n            even_count++\n\
    \        }\n    }\n    odd_count := len(lst1) - even_count\n    odd_count2 :=\
    \ 0\n    for _, v := range lst2 {\n        if v % 2 != 0 {\n            odd_count2++\n\
    \        }\n    }\n    if odd_count2 >= odd_count {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpu0nfaky3_test.go:60: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpu0nfaky3_test.go:60: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpu0nfaky3_test.go:60:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    set\
    \ := make(map[int]int)\n    for _, value := range lst1 {\n        set[value] =\
    \ 1\n    }\n    for _, value := range lst2 {\n        if set[value] != 0 {\n \
    \           return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpso5a_3j1_test.go:53: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpso5a_3j1_test.go:53: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmpso5a_3j1_test.go:53:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n \
    \       tmpso5a_3j1_test.go:53: expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    countOddNumbers\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 != 0 {\n            countOddNumbers++\n\
    \        }\n    }\n    for _, n := range lst2 {\n        if n % 2 != 0 {\n   \
    \         countOddNumbers--\n        }\n    }\n    if countOddNumbers <= 0 {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpnskm9q34_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpnskm9q34_test.go:58: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpnskm9q34_test.go:58:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    map1\
    \ := map[int]int{}\n    map2 := map[int]int{}\n    for _, num := range lst1 {\n\
    \        map1[num] += 1\n    }\n    for _, num := range lst2 {\n        map2[num]\
    \ += 1\n    }\n    for num, count := range map1 {\n        if num % 2 == 1 {\n\
    \            even := false\n            for _, c := range map2 {\n           \
    \     if (num + 1) % 2 == 0 && c >= count {\n                    even = true\n\
    \                    break\n                }\n            }\n            if !even\
    \ {\n                return \"NO\"\n            }\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpikrocqql_test.go:66: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpikrocqql_test.go:66: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpikrocqql_test.go:66:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ res string\n    fmt.Println(lst1, lst2)\n    for _, v := range lst1 {\n    \
    \    if v % 2 != 0 {\n            for _, v2 := range lst2 {\n                if\
    \ v2 % 2 == 0 {\n                    lst1 = append(lst1, v2)\n               \
    \     lst2 = append(lst2, v)\n                    res = \"YES\"\n            \
    \        break\n                }\n            }\n        }\n    }\n    fmt.Println(lst1,\
    \ lst2)\n    return res\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 2 3 4] [1 2 3 4]\n[1 2 3 4 2 2] [1 2 3 4 1 3]\n[1 2 3 4] [1 5 3 4]\n\
    [1 2 3 4 4 4] [1 5 3 4 1 3]\n[1 2 3 4] [2 1 4 3]\n[1 2 3 4 2 2] [2 1 4 3 1 3]\n\
    [5 7 3] [2 6 4]\n[5 7 3 2 2 2] [2 6 4 5 7 3]\n[5 7 3] [2 6 3]\n[5 7 3 2 2 2] [2\
    \ 6 3 5 7 3]\n[3 2 6 1 8 9] [3 5 5 1 1 1]\n[3 2 6 1 8 9] [3 5 5 1 1 1]\n[100 200]\
    \ [200 200]\n[100 200] [200 200]\n--- FAIL: TestExchange (0.00s)\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpnlaccob7_test.go:59: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n        tmpnlaccob7_test.go:59:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n \
    \       tmpnlaccob7_test.go:59: expected 'NO', got ''\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpnlaccob7_test.go:59: expected 'YES', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evenLst1\
    \ := isEven(lst1)\n    if evenLst1 {\n        return \"YES\"\n    }\n\n    for\
    \ _, v1 := range lst1 {\n        for i, v2 := range lst2 {\n            if v1\
    \ % 2 != 0 && v2 % 2 == 0 {\n                lst1[v1] = v2\n                lst2[i]\
    \ = v1\n                evenLst1 = isEven(lst1)\n                if evenLst1 {\n\
    \                    return \"YES\"\n                }\n            }\n      \
    \  }\n    }\n\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8t2lcpo_test.go:22:17: undefined: isEven

    /tmp/tmpq8t2lcpo_test.go:32:28: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    odds := 0\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n\
    \            evens++\n        } else {\n            odds++\n        }\n    }\n\
    \    for _, n := range lst2 {\n        if n % 2 == 0 {\n            evens--\n\
    \        } else {\n            odds--\n        }\n    }\n    if evens > 0 {\n\
    \        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpagwncjmm_test.go:63: expected 'NO', got 'YES'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ != len(lst2) {\n        return \"NO\"\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i]%2 != 0 {\n            // Try swapping\n          \
    \  for j := 0; j < len(lst2); j++ {\n                if lst2[j]%2 == 0 {\n   \
    \                 // Swap\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    // Check all numbers in lst1 are even\n    for i := 0; i < len(lst1); i++\
    \ {\n        if lst1[i]%2 != 0 {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073715
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    l1,\
    \ l2 := make([]int, len(lst1)), make([]int, len(lst2))\n    copy(l1, lst1)\n \
    \   copy(l2, lst2)\n    for i, v := range l1 {\n        if v % 2 == 0 {\n    \
    \        continue\n        }\n        for j, w := range l2 {\n            if w\
    \ % 2 == 0 {\n                l1[i], l2[j] = l2[j], l1[i]\n                break\n\
    \            }\n        }\n    }\n    for _, v := range l1 {\n        if v % 2\
    \ != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073715
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, val := range lst1 {\n        if val % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpdclonus6_test.go:49: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpdclonus6_test.go:49: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpdclonus6_test.go:49:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ oddCount int = 0\n    var evenCount int = 0\n    for _, value := range lst1\
    \ {\n        if value % 2 == 0 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n    }\n    if oddCount == 0 {\n        return\
    \ \"YES\"\n    }\n    for _, value := range lst2 {\n        if value % 2 == 0\
    \ {\n            evenCount++\n        } else {\n            oddCount++\n     \
    \   }\n    }\n    if evenCount > oddCount {\n        return \"YES\"\n    }\n \
    \   return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpifnz532g_test.go:66: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpifnz532g_test.go:66: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpifnz532g_test.go:66:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    total\
    \ := sumSlice(lst1) + sumSlice(lst2)\n    if total % 2 == 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0g4fzh2o_test.go:22:14: undefined: sumSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073714
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph2s_4moa_test.go:46: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph2s_4moa_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph2s_4moa_test.go:46:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph2s_4moa_test.go:46: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph2s_4moa_test.go:46: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph2s_4moa_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph2s_4moa_test.go:46:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    hasOdd\
    \ := false\n    for _, x := range lst1 {\n        if x % 2 == 1 {\n          \
    \  hasOdd = true\n            break\n        }\n    }\n    if !hasOdd {\n    \
    \    return \"YES\"\n    }\n    hasEven := false\n    for _, x := range lst2 {\n\
    \        if x % 2 == 0 {\n            hasEven = true\n            break\n    \
    \    }\n    }\n    if !hasEven {\n        return \"NO\"\n    }\n    return \"\
    YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpbfcazkaz_test.go:64: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpbfcazkaz_test.go:64: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j := 0; j < len(lst2); j++ {\n                if lst2[j] % 2 != 0 {\n      \
    \              continue\n                } else {\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    break\n                }\n \
    \           }\n        }\n    }\n    flag := true\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 != 0 {\n            flag = false\n           \
    \ break\n        }\n    }\n    if flag {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073715
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd1\
    \ := getOddNumbers(lst1)\n    odd2 := getOddNumbers(lst2)\n    if len(odd1) >\
    \ len(odd2) {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp71opvx1v_test.go:22:13: undefined: getOddNumbers

    /tmp/tmp71opvx1v_test.go:23:13: undefined: getOddNumbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073714
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if is_all_even(lst1)\
    \ {\n        return \"YES\"\n    }\n    if is_even(lst1[0]) {\n        return\
    \ \"NO\"\n    }\n    for _, v := range lst2 {\n        if is_even(v) {\n     \
    \       return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_hvoir3o_test.go:22:8: undefined: is_all_even

    /tmp/tmp_hvoir3o_test.go:25:8: undefined: is_even

    /tmp/tmp_hvoir3o_test.go:29:12: undefined: is_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073714
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ i, j int\n    var l1, l2 int\n    for i, l1 = range lst1 {\n        if l1 %\
    \ 2 == 1 {\n            for j, l2 = range lst2 {\n                if l2 % 2 ==\
    \ 0 {\n                    lst1[i] = l2\n                    lst2[j] = l1\n  \
    \                  return exchange(lst1, lst2)\n                }\n          \
    \  }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073715
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    l1,\
    \ l2 := len(lst1), len(lst2)\n    even, odd := make([]int, 0, l1), make([]int,\
    \ 0, l2)\n    for i := 0; i < l1; i++ {\n        if lst1[i]%2 == 0 {\n       \
    \     even = append(even, lst1[i])\n        } else {\n            odd = append(odd,\
    \ lst1[i])\n        }\n    }\n    if len(even) == l1 {\n        return \"YES\"\
    \n    } else if len(odd) == l1 {\n        return \"NO\"\n    }\n\n    for i :=\
    \ 0; i < l2; i++ {\n        if lst2[i]%2 == 0 {\n            even = append(even,\
    \ lst2[i])\n        } else {\n            odd = append(odd, lst2[i])\n       \
    \ }\n    }\n    if len(even) == l1 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpn4fur8gt_test.go:69: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    fmt.Println(lst1,\
    \ lst2)\n    for i := 0; i < len(lst1); i++ {\n        // If the current value\
    \ is even, we're done with this list.\n        if lst1[i] % 2 == 0 {\n       \
    \     continue\n        }\n        // Check the other list to see if we can find\
    \ an even value.\n        for j := 0; j < len(lst2); j++ {\n            if lst2[j]\
    \ % 2 == 0 {\n                // Swap the values.\n                lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                break\n            }\n        }\n      \
    \  // If we didn't find a value to swap, then we can't make\n        // the entire\
    \ list even.\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\n     \
    \   }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073715
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    odds := 0\n    for _, i := range lst1 {\n        if i % 2 == 0 {\n\
    \            evens++\n        } else {\n            odds++\n        }\n    }\n\
    \    for _, i := range lst2 {\n        if i % 2 == 0 {\n            evens--\n\
    \        } else {\n            odds--\n        }\n    }\n    if evens == 0 &&\
    \ odds == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpmeymer5v_test.go:63: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ lst bool\n    for _, l := range lst1 {\n        if l % 2 == 0 {\n          \
    \  lst = true\n        }\n    }\n    if lst {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp3y22epqx_test.go:53: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmp3y22epqx_test.go:53: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmp3y22epqx_test.go:53:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ (\n        lst1Len = len(lst1)\n        lst2Len = len(lst2)\n        pairNum\
    \ = 0\n    )\n    if lst1Len != lst2Len {\n        return \"NO\"\n    }\n    for\
    \ i := 0; i < lst1Len; i++ {\n        if lst1[i] % 2 == 0 {\n            continue\n\
    \        }\n        for j := 0; j < lst2Len; j++ {\n            if lst2[j] % 2\
    \ == 0 {\n                continue\n            }\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            pairNum++\n            break\n        }\n  \
    \  }\n    if pairNum == lst1Len {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphspwk7qs_test.go:68: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmphspwk7qs_test.go:68: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmphspwk7qs_test.go:68:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__4 (0.00s)\n \
    \       tmphspwk7qs_test.go:68: expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmphspwk7qs_test.go:68: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    even\
    \ := make(map[int]bool)\n    odd := make(map[int]bool)\n    for _, x := range\
    \ lst1 {\n        if x % 2 == 0 {\n            even[x] = true\n        } else\
    \ {\n            odd[x] = true\n        }\n    }\n    for _, x := range lst2 {\n\
    \        if x % 2 == 0 {\n            if len(odd) > 0 {\n                delete(odd,\
    \ x)\n            } else {\n                even[x] = true\n            }\n  \
    \      } else {\n            if len(even) > 0 {\n                delete(even,\
    \ x)\n            } else {\n                odd[x] = true\n            }\n   \
    \     }\n    }\n    if len(odd) == 0 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqa9r79uj_test.go:71: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpqa9r79uj_test.go:71: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpqa9r79uj_test.go:71:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Your\
    \ code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ yes string = \"YES\"\n    var no string = \"NO\"\n    for _, item := range lst1\
    \ {\n        if item % 2 != 0 {\n            for _, jtem := range lst2 {\n   \
    \             if jtem % 2 == 0 {\n                    return yes\n           \
    \     }\n            }\n            return no\n        }\n    }\n    return yes\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpa4qei4cs_test.go:56: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpa4qei4cs_test.go:56: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    makeEven\
    \ := func(lst []int) []int {\n        x := len(lst)\n        odds := make([]int,\
    \ 0, x)\n        evens := make([]int, 0, x)\n        for _, v := range lst {\n\
    \            if v%2 == 0 {\n                evens = append(evens, v)\n       \
    \     } else {\n                odds = append(odds, v)\n            }\n      \
    \  }\n        y := len(odds)\n        if y == 0 {\n            return []int{}\n\
    \        }\n        if y > len(evens) {\n            return []int{}\n        }\n\
    \        for _, v := range odds {\n            if v > evens[y-1] {\n         \
    \       return []int{}\n            }\n        }\n        return odds\n    }\n\
    \    odds1 := makeEven(lst1)\n    odds2 := makeEven(lst2)\n    if len(odds1) ==\
    \ 0 || len(odds2) == 0 {\n        return \"NO\"\n    }\n    x := len(odds1)\n\
    \    if x == len(odds2) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpe9opq641_test.go:78: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__6 (0.00s)\n        tmpe9opq641_test.go:78: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odds1\
    \ := make([]int, 0)\n    odds2 := make([]int, 0)\n    for _, e := range lst1 {\n\
    \        if e % 2 == 1 {\n            odds1 = append(odds1, e)\n        }\n  \
    \  }\n    for _, e := range lst2 {\n        if e % 2 == 1 {\n            odds2\
    \ = append(odds2, e)\n        }\n    }\n    if len(odds1) == len(odds2) {\n  \
    \      return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpotszsdm6_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    oddCount\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 == 1 {\n            oddCount++\n\
    \        }\n    }\n    evenCount := len(lst1) - oddCount\n    for _, n := range\
    \ lst2 {\n        if n % 2 == 1 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n    }\n    if oddCount == 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp4fd7pao3_test.go:61: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp4fd7pao3_test.go:61: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp4fd7pao3_test.go:61:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp4fd7pao3_test.go:61: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ Write your solution here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpyld1bqzh_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpyld1bqzh_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpyld1bqzh_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpyld1bqzh_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpyld1bqzh_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpyld1bqzh_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpyld1bqzh_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ odd_count int = 0\n    for _, n := range lst1 {\n        if n % 2 == 1 {\n \
    \           odd_count++\n        }\n    }\n    for _, n := range lst2 {\n    \
    \    if n % 2 == 1 {\n            odd_count--\n        }\n    }\n    if odd_count\
    \ == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp8o65n7sy_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    for i := 0; i < len(lst1); i++ {\n        for j :=\
    \ 0; j < len(lst2); j++ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0\
    \ {\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n            }\n    \
    \    }\n    }\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 !=\
    \ 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\
    func TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ sum1 int\n    var sum2 int\n    for _, num := range lst1 {\n        sum1 +=\
    \ num\n    }\n    for _, num := range lst2 {\n        sum2 += num\n    }\n   \
    \ for _, num := range lst1 {\n        if num % 2 == 0 {\n            sum1 -= num\n\
    \        }\n    }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n\
    \            sum2 -= num\n        }\n    }\n    if sum1 == sum2 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp_vzs7r59_test.go:65: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n            evens++\n\
    \        }\n    }\n    odds := len(lst1) - evens\n    for _, n := range lst2 {\n\
    \        if n % 2 == 0 {\n            odds--\n        } else {\n            evens--\n\
    \        }\n        if evens < 0 || odds < 0 {\n            return \"NO\"\n  \
    \      }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp5u4ggoty_test.go:61: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // ADD\
    \ YOUR CODE HERE\n    return \"NO\" // DELETE THIS LINE\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpk7f7o1hy_test.go:45: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpk7f7o1hy_test.go:45: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpk7f7o1hy_test.go:45:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmpk7f7o1hy_test.go:45: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ == 0 || len(lst2) == 0 {\n        return \"NO\"\n    }\n    for i := 0; i <\
    \ len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for j := 0; j <\
    \ len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n                  \
    \  lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n          \
    \      }\n            }\n        }\n    }\n    var even bool\n    for i := 0;\
    \ i < len(lst1); i++ {\n        if lst1[i] % 2 == 0 {\n            even = true\n\
    \        } else {\n            even = false\n            break\n        }\n  \
    \  }\n    if even {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // If\
    \ a list contains an even number, it's automatically \"Yes\"\n    for _, num :=\
    \ range lst1 {\n        if num % 2 == 0 {\n            return \"YES\"\n      \
    \  }\n    }\n    // If the lists both contain the same amount of evens, it's \"\
    Yes\"\n    var evenCount1, evenCount2 int\n    for _, num := range lst1 {\n  \
    \      if num % 2 == 0 {\n            evenCount1++\n        }\n    }\n    for\
    \ _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCount2++\n\
    \        }\n    }\n    if evenCount1 == evenCount2 {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpiqhcyr2h_test.go:65: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpiqhcyr2h_test.go:65: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpiqhcyr2h_test.go:65:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ ans string\n    return ans\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpn9r5bsss_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpn9r5bsss_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpn9r5bsss_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpn9r5bsss_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpn9r5bsss_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpn9r5bsss_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpn9r5bsss_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    isOdd\
    \ := func(n int) bool {\n        return n % 2 != 0\n    }\n    // count odd numbers\
    \ in lst1\n    oddCount := 0\n    for _, x := range lst1 {\n        if isOdd(x)\
    \ {\n            oddCount++\n        }\n    }\n    // count even numbers in lst2\n\
    \    evenCount := 0\n    for _, x := range lst2 {\n        if !isOdd(x) {\n  \
    \          evenCount++\n        }\n    }\n    if oddCount > evenCount {\n    \
    \    return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd1\
    \ := 0\n    odd2 := 0\n    for _, elem := range lst1 {\n        if elem % 2 ==\
    \ 1 {\n            odd1++\n        }\n    }\n    for _, elem := range lst2 {\n\
    \        if elem % 2 == 1 {\n            odd2++\n        }\n    }\n    if odd1\
    \ - odd2 == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp0rjo__sg_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n            evens++\n\
    \        }\n    }\n    odds := len(lst1) - evens\n    for _, n := range lst2 {\n\
    \        if n % 2 == 0 {\n            odds--\n        } else {\n            evens--\n\
    \        }\n        if evens < 0 || odds < 0 {\n            return \"NO\"\n  \
    \      }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp5u4ggoty_test.go:61: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    fmt.Println(lst1,\
    \ lst2)\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 2 3 4] [1 2 3 4]\n[1 2 3 4] [1 5 3 4]\n[1 2 3 4] [2 1 4 3]\n[5 7 3]\
    \ [2 6 4]\n[5 7 3] [2 6 3]\n[3 2 6 1 8 9] [3 5 5 1 1 1]\n[100 200] [200 200]\n\
    --- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0 (0.00s)\n\
    \        tmppwfa529m_test.go:45: expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__2\
    \ (0.00s)\n        tmppwfa529m_test.go:45: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmppwfa529m_test.go:45: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppwfa529m_test.go:45:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph2s_4moa_test.go:46: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph2s_4moa_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph2s_4moa_test.go:46:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph2s_4moa_test.go:46: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph2s_4moa_test.go:46: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph2s_4moa_test.go:46: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph2s_4moa_test.go:46:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073715
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if canExchange(lst1,\
    \ lst2) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hxi6d2p_test.go:22:8: undefined: canExchange

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073716
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i, v := range lst1 {\n        if v % 2 != 0 {\n            for j, w := range\
    \ lst2 {\n                if w % 2 == 0 {\n                    lst1[i] = w\n \
    \                   lst2[j] = v\n                    break\n                }\n\
    \            }\n        }\n    }\n    for _, v := range lst1 {\n        if v %\
    \ 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073717
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n            evens++\n\
    \        }\n    }\n    odds := len(lst1) - evens\n    for _, n := range lst2 {\n\
    \        if n % 2 == 0 {\n            odds--\n        } else {\n            evens--\n\
    \        }\n        if evens < 0 || odds < 0 {\n            return \"NO\"\n  \
    \      }\n    }\n    return \"YES\"\n}\n\ntype ExchangeTest \nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk935p68e_test.go:42:19: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073716
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if isEven(lst1)\
    \ {\n        return \"YES\"\n    }\n\n    for _, v := range lst1 {\n        if\
    \ v%2 != 0 {\n            for _, v2 := range lst2 {\n                if v2%2 !=\
    \ 0 {\n                    continue\n                }\n\n                // swap\n\
    \                i := indexOf(lst1, v)\n                lst1[i] = v2\n       \
    \         i = indexOf(lst2, v2)\n                lst2[i] = v\n\n             \
    \   if isEven(lst1) {\n                    return \"YES\"\n                }\n\
    \            }\n        }\n    }\n\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjp76i1fh_test.go:22:8: undefined: isEven

    /tmp/tmpjp76i1fh_test.go:34:22: undefined: indexOf

    /tmp/tmpjp76i1fh_test.go:36:21: undefined: indexOf

    /tmp/tmpjp76i1fh_test.go:39:20: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073718
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if lst1\
    \ == nil || lst2 == nil {\n        return \"NO\"\n    }\n    if lst1 == nil &&\
    \ lst2 == nil {\n        return \"YES\"\n    }\n    if isEven(lst1) && isEven(lst2)\
    \ {\n        return \"YES\"\n    }\n    for i := 0; i < len(lst1); i++ {\n   \
    \     if lst1[i] % 2 != 0 {\n            for j := 0; j < len(lst2); j++ {\n  \
    \              if lst2[j] % 2 != 0 {\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    if isEven(lst1) && isEven(lst2) {\n           \
    \             return \"YES\"\n                    }\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                }\n            }\n        }\n  \
    \  }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6ayomh2_test.go:28:8: undefined: isEven

    /tmp/tmpo6ayomh2_test.go:36:24: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evensInLst1\
    \ := make(map[int]bool)\n    oddsInLst2 := make(map[int]bool)\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evensInLst1[v] = true\n \
    \       }\n    }\n    for _, v := range lst2 {\n        if v % 2 != 0 {\n    \
    \        oddsInLst2[v] = true\n        }\n    }\n    for k, _ := range evensInLst1\
    \ {\n        if _, ok := oddsInLst2[k]; ok {\n            return \"YES\"\n   \
    \     }\n    }\n    return \"NO\"\n}\n\ntype TestCase \nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjgqceapo_test.go:42:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073717
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ i, v := range lst1 {\n        if v % 2 != 0 {\n            for j, w := range\
    \ lst2 {\n                if w % 2 == 0 {\n                    lst1[i] = w\n \
    \                   lst2[j] = v\n                    return exchange(lst1, lst2)\n\
    \                }\n            }\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073718
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    fmt.Println(lst1,\
    \ lst2)\n    if len(lst1) == 0 || len(lst2) == 0 {\n        return \"NO\"\n  \
    \  }\n    if allEven(lst1) {\n        return \"YES\"\n    }\n    for _, v := range\
    \ lst1 {\n        if v % 2 == 1 {\n            for i, n := range lst2 {\n    \
    \            if n % 2 == 0 {\n                    lst1[i] = n\n              \
    \      lst2[i] = v\n                    return exchange(lst1, lst2)\n        \
    \        }\n            }\n        }\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu36_se4e_test.go:26:8: undefined: allEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    isEven\
    \ := func(n int) bool {\n        return n % 2 == 0\n    }\n    numOfEven := 0\n\
    \    for _, v := range lst1 {\n        if isEven(v) {\n            numOfEven++\n\
    \        }\n    }\n    if numOfEven == len(lst1) {\n        return \"YES\"\n \
    \   }\n    numOfEvenInLst2 := 0\n    for _, v := range lst2 {\n        if isEven(v)\
    \ {\n            numOfEvenInLst2++\n        }\n    }\n    if numOfEvenInLst2 ==\
    \ 0 {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpf9x7s9cb_test.go:65: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpf9x7s9cb_test.go:65: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Please\
    \ write your solution here\n    i := 0\n    for i < len(lst1) {\n        for j\
    \ := 0; j < len(lst2); j++ {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 ==\
    \ 0 {\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                break\n\
    \            }\n        }\n        if lst1[i] % 2 != 0 {\n            return \"\
    NO\"\n        }\n        i++\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    var even, odd int\n    for _, value := range lst1 {\n  \
    \      if value % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    for _, value := range lst2 {\n        if value\
    \ % 2 == 0 {\n            even--\n        } else {\n            odd--\n      \
    \  }\n    }\n    if even == 0 && odd == 0 {\n        return \"YES\"\n    }\n \
    \   return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp6iqot_xe_test.go:63: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    oddCount\
    \ := 0\n    for _, n := range lst1 {\n        if n % 2 == 1 {\n            oddCount++\n\
    \        }\n    }\n    for _, n := range lst2 {\n        if n % 2 == 1 {\n   \
    \         oddCount--\n        }\n    }\n    if oddCount > 0 {\n        return\
    \ \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpiftbf1z5_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpiftbf1z5_test.go:58: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpiftbf1z5_test.go:58:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, v := range lst1 {\n        if (v % 2) != 0 {\n            for _, v2 := range\
    \ lst2 {\n                if (v2 % 2) == 0 {\n                    return \"YES\"\
    \n                }\n            }\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpt4rxn15q_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpt4rxn15q_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps4hmtejn_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps4hmtejn_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps4hmtejn_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps4hmtejn_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps4hmtejn_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps4hmtejn_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps4hmtejn_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if exchange_odd(lst1,\
    \ lst2) || exchange_odd(lst2, lst1) {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5d9g733_test.go:22:8: undefined: exchange_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    lst1_map\
    \ := make(map[int]bool)\n    lst2_map := make(map[int]bool)\n    for _, v := range\
    \ lst1 {\n        if v % 2 == 0 {\n            lst1_map[v] = true\n        }\n\
    \    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n            lst2_map[v]\
    \ = true\n        }\n    }\n    for _, v := range lst1 {\n        if !lst1_map[v]\
    \ && lst2_map[v] {\n            return \"YES\"\n        }\n    }\n    return \"\
    NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpj70wmid1_test.go:61: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpj70wmid1_test.go:61: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpj70wmid1_test.go:61:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmpj70wmid1_test.go:61: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ r1, r2, r3, r4 string\n    for _, i := range lst1 {\n        if i % 2 == 0 {\n\
    \            r1 = \"YES\"\n        } else {\n            r1 = \"NO\"\n       \
    \ }\n    }\n    for _, i := range lst2 {\n        if i % 2 == 0 {\n          \
    \  r2 = \"YES\"\n        } else {\n            r2 = \"NO\"\n        }\n    }\n\
    \    if r1 == \"YES\" && r2 == \"YES\" {\n        r3 = \"YES\"\n    } else {\n\
    \        r3 = \"NO\"\n    }\n    if r1 == \"YES\" && r2 == \"NO\" {\n        r4\
    \ = \"YES\"\n    } else {\n        r4 = \"NO\"\n    }\n    if r3 == \"YES\" ||\
    \ r4 == \"YES\" {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpnbsxou6__test.go:73: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpnbsxou6__test.go:73: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ flag bool = false\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n \
    \           flag = true\n            break\n        }\n    }\n    if flag {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpi0_b1vcp_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpi0_b1vcp_test.go:54: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpi0_b1vcp_test.go:54:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    odd_lst1\
    \ := []int{}\n    even_lst2 := []int{}\n    for _, num := range lst1 {\n     \
    \   if num % 2 == 1 {\n            odd_lst1 = append(odd_lst1, num)\n        }\n\
    \    }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n          \
    \  even_lst2 = append(even_lst2, num)\n        }\n    }\n    if len(odd_lst1)\
    \ == len(even_lst2) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\
    func TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp7y2qaldk_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    odds := 0\n    for _, num := range lst1 {\n        if num % 2 == 0\
    \ {\n            evens++\n        } else {\n            odds++\n        }\n  \
    \  }\n    if evens == len(lst1) {\n        return \"YES\"\n    }\n    for _, num\
    \ := range lst2 {\n        if num % 2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    if evens != odds {\n        return\
    \ \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    for\
    \ _, v := range lst1 {\n        if v % 2 != 0 {\n            for _, v2 := range\
    \ lst2 {\n                if v2 % 2 == 0 {\n                    return \"YES\"\
    \n                }\n            }\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpbnwy_ed3_test.go:54: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpbnwy_ed3_test.go:54: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    for _, x := range lst1 {\n        if x % 2 == 0 {\n            evens++\n\
    \        }\n    }\n    odds := len(lst1) - evens\n    if odds == 0 {\n       \
    \ return \"YES\"\n    }\n    evens = 0\n    for _, x := range lst2 {\n       \
    \ if x % 2 == 0 {\n            evens++\n        }\n    }\n    if evens >= odds\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073718
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := getEvens(lst1)\n    odds := getOdds(lst2)\n    if len(evens) < len(odds)\
    \ {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp254nsrdk_test.go:22:14: undefined: getEvens

    /tmp/tmp254nsrdk_test.go:23:13: undefined: getOdds

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    lst1EvenCount\
    \ := 0\n    lst2EvenCount := 0\n    lst1OddCount := 0\n    lst2OddCount := 0\n\
    \    // how many even elements are in lst1\n    for _, val := range lst1 {\n \
    \       if val % 2 == 0 {\n            lst1EvenCount += 1\n        } else {\n\
    \            lst1OddCount += 1\n        }\n    }\n    // how many even elements\
    \ are in lst2\n    for _, val := range lst2 {\n        if val % 2 == 0 {\n   \
    \         lst2EvenCount += 1\n        } else {\n            lst2OddCount += 1\n\
    \        }\n    }\n    if lst1EvenCount != lst2EvenCount {\n        return \"\
    NO\"\n    }\n    if lst1OddCount > 0 && lst2OddCount > 0 {\n        return \"\
    YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp2mqv1lxe_test.go:70: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__6 (0.00s)\n        tmp2mqv1lxe_test.go:70: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens,\
    \ odds := make([]int, 0), make([]int, 0)\n    for _, i := range lst1 {\n     \
    \   if i % 2 == 0 {\n            evens = append(evens, i)\n        } else {\n\
    \            odds = append(odds, i)\n        }\n    }\n    for _, i := range lst2\
    \ {\n        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\
    \ else {\n            odds = append(odds, i)\n        }\n    }\n    if len(evens)\
    \ < len(odds) {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073719
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evenCount\
    \ := 0\n    oddCount := 0\n    for _, v := range lst1 {\n        if v % 2 == 0\
    \ {\n            evenCount++\n        } else {\n            oddCount++\n     \
    \   }\n    }\n    if evenCount >= oddCount {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp8bhlunq3_test.go:56: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmp8bhlunq3_test.go:56: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmp8bhlunq3_test.go:56:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    ok :=\
    \ \"YES\"\n    odd1 := 0\n    for _, x := range lst1 {\n        if x % 2 == 1\
    \ {\n            odd1++\n        }\n    }\n    odd2 := 0\n    for _, x := range\
    \ lst2 {\n        if x % 2 == 1 {\n            odd2++\n        }\n    }\n    if\
    \ odd1 != odd2 {\n        ok = \"NO\"\n    }\n    return ok\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp3_si4pz4_test.go:60: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // YOUR\
    \ CODE HERE\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp9_4i8yvw_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp9_4i8yvw_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp9_4i8yvw_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp9_4i8yvw_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073710
- exit_code: 2
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Get\
    \ the evens of lst1, then check to see if we can find them in lst2.\n    lst2evens\
    \ := []int{}\n    lst1evens := []int{}\n    lst1odds := []int{}\n    lst2odds\
    \ := []int{}\n    for _, num := range lst1 {\n        if num % 2 == 0 {\n    \
    \        lst1evens = append(lst1evens, num)\n        } else {\n            lst1odds\
    \ = append(lst1odds, num)\n        }\n    }\n    for _, num := range lst2 {\n\
    \        if num % 2 == 0 {\n            lst2evens = append(lst2evens, num)\n \
    \       } else {\n            lst2odds = append(lst2odds, num)\n        }\n  \
    \  }\n    // Check to see if the evens in lst1 are in lst2.\n    if !listContains(lst2,\
    \ lst1evens) {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuae_n5ig_test.go:42:9: undefined: listContains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073718
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
