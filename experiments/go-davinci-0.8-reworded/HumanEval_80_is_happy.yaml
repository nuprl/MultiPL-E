name: HumanEval_80_is_happy
language: go_test.go
prompt: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a string s.\n// Your task is to check if the string is hapgo or\
  \ not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>> is_happy(aa)\n\
  // false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n// false\n// >>>\
  \ is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc is_happy(s string)\
  \ bool {\n"
tests: "func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
  aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true },\n\
  \     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
  adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false },\n\
  \     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual: candidate(\"\
  iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(s) < 3 {\n        return false\n    }\n    for i := 2; i\
    \ < len(s); i++ {\n        if s[i-2] == s[i-1] || s[i-2] == s[i] || s[i-1] ==\
    \ s[i] {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   // your code here\n    return false\n}\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    var i, l int\n    l = len(s)\n    for i =\
    \ 0; i < l - 2; i++ {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i\
    \ + 1] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    lenS := len(s)\n    if lenS < 3 {\n        return false\n    }\n  \
    \  for i := 2; i < lenS; i++ {\n        if s[i] == s[i-1] && s[i] == s[i-2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    if len(s)\
    \ < 3 {\n        return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n\
    \        if s[i] == s[i+1] && s[i] == s[i+2] {\n            return false\n   \
    \     }\n    }\n    return true\n}\n", "    return is_happy_with_index(s, 0)\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    // s[0:3] = s[:3]\n\
    \    for i:=1; i < len(s)-2; i++ {\n        if s[i-1] == s[i] || s[i-1] == s[i+1]\
    \ || s[i] == s[i+1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    for i := 2; i < len(s); i += 3 {\n        if s[i] == s[i-1]\
    \ || s[i] == s[i-2] || s[i-1] == s[i-2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    // a happy string is a string that has at\
    \ least 3 characters,\n    // and has the same character at the third position\
    \ from the end and the middle\n    // a string of length 4 can not be happy since\
    \ it is too short to have its middle and third from end equal\n    if len(s) <\
    \ 3 {\n        return false\n    }\n    // example: \"aabb\" is not happy because\
    \ the middle is a and the third from end is b\n    if len(s) % 2 == 0 {\n    \
    \    return false\n    }\n    // example: \"aabb\" is not happy because they are\
    \ the same character\n    if s[len(s)/2] != s[len(s)/2 - 1] {\n        return\
    \ false\n    }\n    return true\n}\n", "    if len(s) < 3 {\n        return false\n\
    \    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    return false\n}\n", "    n := len(s)\n    if n <\
    \ 3 {\n        return false\n    }\n    for i := 0; i < n - 2; i++ {\n       \
    \ if s[i] == s[i + 1] && s[i] == s[i + 2] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n", "    fmt.Println(s)\n    // \u5982\u679C\u5B57\
    \u7B26\u4E32\u7684\u957F\u5EA6\u5C0F\u4E8E3\uFF0C\u80AF\u5B9A\u4E0D\u7B26\u5408\
    \u6761\u4EF6\n    if len(s) < 3 {\n        return false\n    }\n    // \u5982\u679C\
    \u5B57\u7B26\u4E32\u7684\u957F\u5EA6\u5927\u4E8E3\uFF0C\u90A3\u4E48\u5FC5\u987B\
    \u8981\u6EE1\u8DB3\u6BCF3\u4E2A\u5B57\u7B26\u4E0D\u76F8\u540C\n    for i := 0;\
    \ i < len(s) - 2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n", "    var l = len(s)\n\
    \    if l < 3 {\n        return false\n    }\n\n    for i := 0; i < l-2; i++ {\n\
    \        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n", "    if len(s) < 3\
    \ {\n        return false\n    }\n    fmt.Println(s)\n    for i:=0; i < len(s)-2;\
    \ i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    var boolMap = make(map[string]bool)\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        boolMap[s[i:i+3]] = true\n   \
    \ }\n    return len(boolMap) == len(s) - 2\n}\n", "    // Write your code here\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        for j := i + 1; j < len(s) - 1;\
    \ j++ {\n            for k := j + 1; k < len(s); k++ {\n                if s[i]\
    \ == s[j] || s[j] == s[k] || s[i] == s[k] {\n                    return false\n\
    \                }\n            }\n        }\n    }\n    return true\n}\n\ntype\
    \ TestCase ", "    // Write your code here\n    return false\n}\n", "    if len(s)\
    \ < 3 {\n        return false\n    }\n    for i := 0; i <= len(s)-3; i++ {\n \
    \       if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
