language: go_test.go
name: HumanEval_160_do_algebra
results:
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var (\n        result int\n        op string\n    )\n    for\
    \ index, op := range operator {\n        if index == 0 {\n            result =\
    \ operand[index]\n        }\n        switch op {\n        case \"+\":\n      \
    \      result += operand[index + 1]\n        case \"-\":\n            result -=\
    \ operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[index\
    \ + 1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_xnimhl_test.go:29:9: op declared but not used

    /tmp/tmpf_xnimhl_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var operatorIndex = 0\n    var operatorValue\
    \ string\n\n    var operandIndex = 0\n    var operandValue int\n\n    var tempIndex\
    \ = 0\n    var tempValue int\n\n    var exponetiationOperatorIndex int\n    var\
    \ base int\n    var exponetiation int\n\n    var exponetiationResult int\n\n \
    \   for _, value := range operator {\n        switch value {\n        case \"\
    **\":\n            exponetiationOperatorIndex = operatorIndex\n            base\
    \ = operand[tempIndex]\n            exponetiation = operand[tempIndex + 1]\n \
    \           if exponetiationOperatorIndex == 0 {\n                result = doExponetiation(base,\
    \ exponetiation)\n            } else {\n                if operatorValue == \"\
    **\" {\n                    exponetiationResult = doExponetiation(base, exponetiation)\n\
    \                    operand[tempIndex] = exponetiationResult\n              \
    \  } else {\n                    result = doExponetiation(base, exponetiation)\n\
    \                }\n            }\n        case \"*\":\n            operatorValue\
    \ = value\n            operandValue = operand[tempIndex]\n            operandIndex\
    \ = tempIndex + 1\n            if operatorIndex == 0 {\n                result\
    \ = doMultiplication(operandValue, operand[operandIndex])\n            } else\
    \ {\n                if operatorValue == \"**\" {\n                    tempValue\
    \ = doMultiplication(operandValue, operand[operandIndex])\n                  \
    \  operand[tempIndex] = tempValue\n                } else {\n                \
    \    result = doMultiplication(operandValue, operand[operandIndex])\n        \
    \        }\n            }\n        case \"//\":\n            operatorValue = value\n\
    \            operandValue = operand[tempIndex]\n            operandIndex = tempIndex\
    \ + 1\n            if operatorIndex == 0 {\n                result = doFloorDivision(operandValue,\
    \ operand[operandIndex])\n            } else {\n                if operatorValue\
    \ == \"**\" {\n                    tempValue = doFloorDivision(operandValue, operand[operandIndex])\n\
    \                    operand[tempIndex] = tempValue\n                } else {\n\
    \                    result = doFloorDivision(operandValue, operand[operandIndex])\n\
    \                }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4y04pukr_test.go:87:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 1; i < len(operand); i++\
    \ {\n        op := operator[i-1]\n        if op == \"+\" {\n            result\
    \ += operand[i]\n        } else if op == \"-\" {\n            result -= operand[i]\n\
    \        } else if op == \"*\" {\n            result *= operand[i]\n        }\
    \ else if op == \"//\" {\n            result /= operand[i]\n        } else if\
    \ op == \"**\" {\n            result = result ^ operand[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphxsa3uks_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphxsa3uks_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    //var result int\n    //for i := range operator {\n    //\
    \    if i == 0 {\n    //        result = operand[i]\n    //    }\n    //    result\
    \ = eval(result, operator[i], operand[i + 1])\n    //}\n    //return result\n\
    \    var result int\n    for i := range operator {\n        // TODO : change to\
    \ the first operand.\n        if i == 0 {\n            result = operand[i]\n \
    \       }\n        result = eval(result, operator[i], operand[i + 1])\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplmyp7vi_test.go:41:18: undefined: eval

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    r := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            r += operand[i+1]\n\
    \        case \"-\":\n            r -= operand[i+1]\n        case \"*\":\n   \
    \         r *= operand[i+1]\n        case \"//\":\n            r /= operand[i+1]\n\
    \        case \"**\":\n            r = int(math.Pow(float64(r), float64(operand[i+1])))\n\
    \        }\n    }\n    return r\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp72xf7qgn_test.go:39:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: implement this function\n    //panic(\"please implement\
    \ this function\")\n    if len(operator) == 1 {\n        return operand[0]\n \
    \   }\n    var temp int\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n            case \"+\":\n                temp = operand[i] +\
    \ operand[i+1]\n                operand[i+1] = temp\n            case \"-\":\n\
    \                temp = operand[i] - operand[i+1]\n                operand[i+1]\
    \ = temp\n            case \"*\":\n                temp = operand[i] * operand[i+1]\n\
    \                operand[i+1] = temp\n            case \"//\":\n             \
    \   temp = operand[i] / operand[i+1]\n                operand[i+1] = temp\n  \
    \          case \"**\":\n                temp = operand[i] ^ operand[i+1]\n  \
    \              operand[i+1] = temp\n        }\n    }\n    return operand[len(operand)-1]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpvg8og7m7_test.go:70: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpvg8og7m7_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 1; i < len(operand); i++\
    \ {\n        switch operator[i-1] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result = pow(result,\
    \ operand[i])\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ebz2ods_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp6nrr_apz_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp6nrr_apz_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: implement the function\n\n    return -1\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp2lp4mty8_test.go:47: expected '%!s(int=37)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp2lp4mty8_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp2lp4mty8_test.go:47: expected '%!s(int=8)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpo4342_vr_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpo4342_vr_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpo4342_vr_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: Implement me\n    operand2 := make([]int, len(operand))\n\
    \    copy(operand2, operand)\n    for _, v := range operator {\n        if v ==\
    \ \"*\" {\n            operand2[1] = operand2[0] * operand2[1]\n            operand2\
    \ = append(operand2[:0], operand2[1:]...)\n        } else if v == \"-\" {\n  \
    \          operand2[1] = operand2[0] - operand2[1]\n            operand2 = append(operand2[:0],\
    \ operand2[1:]...)\n        } else if v == \"+\" {\n            operand2[1] =\
    \ operand2[0] + operand2[1]\n            operand2 = append(operand2[:0], operand2[1:]...)\n\
    \        } else if v == \"//\" {\n            operand2[1] = operand2[0] / operand2[1]\n\
    \            operand2 = append(operand2[:0], operand2[1:]...)\n        } else\
    \ if v == \"**\" {\n            operand2[1] = operand2[0] ^ operand2[1]\n    \
    \        operand2 = append(operand2[:0], operand2[1:]...)\n        }\n    }\n\
    \    return operand2[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp0bsdsb23_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp0bsdsb23_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    n := len(operator)\n    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return operand[1]\n    }\n    m := len(operand)\n\
    \    if m == 0 {\n        return 0\n    }\n    if m == 1 {\n        return operand[0]\n\
    \    }\n    expression := \"(\" + fmt.Sprintf(\"%d %s %d\", operand[0], operator[0],\
    \ operand[1])\n    for i := 1; i < n; i++ {\n        expression += fmt.Sprintf(\"\
    \ %s %d\", operator[i], operand[i+1])\n    }\n    expression += \")\"\n    fmt.Println(expression)\n\
    \    var result int\n    fmt.Sscanf(expression, \"%d\", &result)\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "(2 ** 3 * 4 + 5)\n(2 + 3 * 4 - 5)\n(7 // 3 * 4)\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmpwhpi2_8f_test.go:67:\
    \ expected '%!s(int=37)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmpwhpi2_8f_test.go:67: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmpwhpi2_8f_test.go:67:\
    \ expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = pow(result, operand[i+1])\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2pk1coan_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\tvar result int\n\tswitch operator[0] {\n\tcase \"+\":\n\t\t\
    result = operand[0] + operand[1]\n\tcase \"-\":\n\t\tresult = operand[0] - operand[1]\n\
    \tcase \"*\":\n\t\tresult = operand[0] * operand[1]\n\tcase \"//\":\n\t\tresult\
    \ = operand[0] / operand[1]\n\tcase \"**\":\n\t\tresult = operand[0] ^ operand[1]\n\
    \t}\n\tif len(operator) > 1 {\n\t\treturn do_algebra(operator[1:], append([]int{result},\
    \ operand[2:]...))\n\t}\n\treturn result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpjp35wafu_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpjp35wafu_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    for i := 0; i < len(operator); i++ {\n        o := operator[i]\n \
    \       switch o {\n        case \"+\":\n            operand[i+1] = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            operand[i+1] = operand[i] -\
    \ operand[i+1]\n        case \"*\":\n            operand[i+1] = operand[i] * operand[i+1]\n\
    \        case \"//\":\n            operand[i+1] = operand[i] / operand[i+1]\n\
    \        case \"**\":\n            operand[i+1] = operand[i] ^ operand[i+1]\n\
    \        }\n    }\n    return operand[len(operand)-1]\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpm2um6zv1_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpm2um6zv1_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    n := len(operator)\n    if n < 1 {\n        return operand[0]\n\
    \    }\n    if n == 1 {\n        switch operator[0] {\n            case \"+\"\
    : return operand[0] + operand[1]\n            case \"-\": return operand[0] -\
    \ operand[1]\n            case \"*\": return operand[0] * operand[1]\n       \
    \     case \"//\": return operand[0] / operand[1]\n            case \"**\": return\
    \ operand[0] ^ operand[1]\n        }\n    }\n\n    f := \"\"\n    r := operand[0]\n\
    \    for i, v := range operator {\n        if v == \"**\" {\n            f = v\n\
    \            continue\n        }\n        switch v {\n            case \"+\":\
    \ r += operand[i+1]\n            case \"-\": r -= operand[i+1]\n            case\
    \ \"*\": r *= operand[i+1]\n            case \"//\": r /= operand[i+1]\n     \
    \   }\n    }\n    if f == \"**\" {\n        r = r ^ operand[n+1]\n    }\n    return\
    \ r\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.do_algebra({0xc00007e6d0?, 0x2b88b52367e0?,\
    \ 0xd0?}, {0xc00007e630?, 0x4b3193?, 0x5d4050?})\n\t/tmp/tmp1z3g57ym_test.go:56\
    \ +0x2a5\ncommand-line-arguments_test.TestDo_Algebra(0x0?)\n\t/tmp/tmp1z3g57ym_test.go:68\
    \ +0x110\ntesting.tRunner(0xc0000cc4e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) >= len(operand) {\n  \
    \      return 0\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    // the length of operator is always less than the length of operand.\n\
    \    expr := \"\"\n    expr += fmt.Sprintf(\"%d\", operand[0])\n    for i, op\
    \ := range operator {\n        expr += op\n        expr += fmt.Sprintf(\"%d\"\
    , operand[i+1])\n    }\n    val, _ := GetExprValue(expr)\n    return val\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvuo5mmi_test.go:46:15: undefined: GetExprValue

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var i int\n    res := operand[0]\n    for i = 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   res += operand[i+1]\n            case \"-\":\n                res -= operand[i+1]\n\
    \            case \"*\":\n                res *= operand[i+1]\n            case\
    \ \"//\":\n                res /= operand[i+1]\n            case \"**\":\n   \
    \             res = res ^ operand[i+1]\n        }\n    }\n    return res\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp2jdblbxj_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp2jdblbxj_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Implement this\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpdcildu3h_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpdcildu3h_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpdcildu3h_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for i := 0; i < len(operator); i++ {\n        switch(operator[i])\
    \ {\n            case \"+\": operand[i+1] = operand[i] + operand[i+1]\n      \
    \      case \"-\": operand[i+1] = operand[i] - operand[i+1]\n            case\
    \ \"*\": operand[i+1] = operand[i] * operand[i+1]\n            case \"//\": operand[i+1]\
    \ = operand[i] / operand[i+1]\n            case \"**\": operand[i+1] = operand[i]\
    \ ^ operand[i+1]\n        }\n    }\n    return operand[len(operand)-1]\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp2657wyne_test.go:54: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp2657wyne_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i, val := range operator {\n\
    \        switch val {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result ^= operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpij2u9_p1_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpij2u9_p1_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = pow(result, operand[i+1])\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2s95zomr_test.go:41:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \n    op := operator[0]\n    switch op {\n    case \"+\":\n        return operand[0]\
    \ + do_algebra(operator[1:], operand[1:])\n    case \"-\":\n        return operand[0]\
    \ - do_algebra(operator[1:], operand[1:])\n    case \"*\":\n        return operand[0]\
    \ * do_algebra(operator[1:], operand[1:])\n    case \"//\":\n        return operand[0]\
    \ / do_algebra(operator[1:], operand[1:])\n    case \"**\":\n        return pow(operand[0],\
    \ do_algebra(operator[1:], operand[1:]))\n    }\n    return -1\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvcoglahu_test.go:42:16: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = pow(result, operand[i+1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_tuxwpv_test.go:42:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    if len(operator) == 0 || len(operand) < 2 {\n        return 0\n  \
    \  }\n    if len(operator) == 1 {\n        return operand[0] + operand[1]\n  \
    \  }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpk4bti0fu_test.go:54: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpk4bti0fu_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpk4bti0fu_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var sum int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            sum +=\
    \ operand[i+1]\n        case \"-\":\n            sum -= operand[i+1]\n       \
    \ case \"*\":\n            sum *= operand[i+1]\n        case \"//\":\n       \
    \     sum /= operand[i+1]\n        case \"**\":\n            sum = sum * sum\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp8o_p_gr5_test.go:60: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp8o_p_gr5_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    op := func(a, b int, op string) int {\n        switch op {\n\
    \        case \"+\":\n            return a + b\n        case \"-\":\n        \
    \    return a - b\n        case \"*\":\n            return a * b\n        case\
    \ \"//\":\n            return a / b\n        case \"**\":\n            return\
    \ a ^ b\n        }\n        return 0\n    }\n    var a, b, c int\n    a = operand[0]\n\
    \    b = operand[1]\n    switch operator[0] {\n    case \"+\":\n        c = a\
    \ + b\n    case \"-\":\n        c = a - b\n    case \"*\":\n        c = a * b\n\
    \    case \"//\":\n        c = a / b\n    case \"**\":\n        c = a ^ b\n  \
    \  }\n    for i := 1; i < len(operator); i++ {\n        a = c\n        b = operand[i\
    \ + 1]\n        switch operator[i] {\n        case \"+\":\n            c = a +\
    \ b\n        case \"-\":\n            c = a - b\n        case \"*\":\n       \
    \     c = a * b\n        case \"//\":\n            c = a / b\n        case \"\
    **\":\n            c = a ^ b\n        }\n    }\n    return c\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vnudcdu_test.go:27:5: op declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result << uint(operand[i+1])\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpg45lq0e3_test.go:60: expected '%!s(int=37)', got '%!s(int=69)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpg45lq0e3_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n \
    \   }\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n   \
    \     switch operator[i - 1] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result = result * result\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpefjgkes1_test.go:66: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpefjgkes1_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lqu346m_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if operator == nil || operand == nil {\n        return 0\n\
    \    }\n    result := operand[0]\n    opLen := len(operator)\n    operandLen :=\
    \ len(operand)\n    if opLen != operandLen - 1 {\n        return 0\n    }\n  \
    \  for i := 0; i < opLen; i++ {\n        switch operator[i] {\n            case\
    \ \"+\":\n                result += operand[i+1]\n            case \"-\":\n  \
    \              result -= operand[i+1]\n            case \"*\":\n             \
    \   result *= operand[i+1]\n            case \"//\":\n                result /=\
    \ operand[i+1]\n            case \"**\":\n                result = int(float64(result)\
    \ * float64(result))\n            default:\n                fmt.Println(\"unknown\
    \ operator:\", operator[i])\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp3ifsw_5n_test.go:70: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp3ifsw_5n_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    var result\
    \ = operand[0]\n    for i := 0; i < len(operator); i++ {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i+1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i+1]\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i+1]\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i+1]\n        } else if operator[i]\
    \ == \"**\" {\n            result = result ^ operand[i+1]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_9yh4umh_test.go:65: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_9yh4umh_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    //Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp2jmb976k_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp2jmb976k_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp2jmb976k_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    // TODO\n    if len(operator) == 0 ||\
    \ len(operand) == 0 {\n        return result\n    }\n    operand1 := operand[0]\n\
    \    for idx, op := range operator {\n        operand2 := operand[idx+1]\n   \
    \     switch op {\n        case \"+\":\n            operand1 += operand2\n   \
    \     case \"-\":\n            operand1 -= operand2\n        case \"*\":\n   \
    \         operand1 *= operand2\n        case \"//\":\n            operand1 /=\
    \ operand2\n        case \"**\":\n            operand1 = pow(operand1, operand2)\n\
    \        }\n    }\n    result = operand1\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvk75_cqc_test.go:45:24: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073327
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 1; i\
    \ < len(operand); i++ {\n        switch operator[i-1] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result = power(result, operand[i])\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz18ekfv_test.go:40:22: undefined: power

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073327
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i,op := range operator {\n \
    \       switch op {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwp4sryq5_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) < 2 {\n        panic(\"\
    illegal parameter\")\n    }\n    for i := 0; i < len(operator); i++ {\n      \
    \  op := operator[i]\n        operand = do_operation(op, operand)\n    }\n   \
    \ return operand[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpea_knpj6_test.go:32:19: undefined: do_operation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = pow(result, operand[i+1])\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2pk1coan_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    stack := make([]int, 0)\n    for i, op := range operator {\n\
    \        if i == 0 {\n            stack = append(stack, operand[i], operand[i+1])\n\
    \        } else {\n            stack = append(stack, operand[i+1])\n        }\n\
    \        switch op {\n        case \"+\":\n            stack[len(stack)-2] = stack[len(stack)-2]\
    \ + stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n        case\
    \ \"-\":\n            stack[len(stack)-2] = stack[len(stack)-2] - stack[len(stack)-1]\n\
    \            stack = stack[:len(stack)-1]\n        case \"*\":\n            stack[len(stack)-2]\
    \ = stack[len(stack)-2] * stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n\
    \        case \"//\":\n            stack[len(stack)-2] = stack[len(stack)-2] /\
    \ stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n        case\
    \ \"**\":\n            stack[len(stack)-2] = stack[len(stack)-2] ^ stack[len(stack)-1]\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return stack[0]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpj5f09dt2_test.go:70: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpj5f09dt2_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\tresult := operand[0]\n\tn := len(operator)\n\tfor i := 0; i\
    \ < n; i++ {\n\t\tif operator[i] == \"+\" {\n\t\t\tresult += operand[i+1]\n\t\t\
    } else if operator[i] == \"-\" {\n\t\t\tresult -= operand[i+1]\n\t\t} else if\
    \ operator[i] == \"*\" {\n\t\t\tresult *= operand[i+1]\n\t\t} else if operator[i]\
    \ == \"//\" {\n\t\t\tresult /= operand[i+1]\n\t\t} else if operator[i] == \"**\"\
    \ {\n\t\t\tresult = result*result\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpl1__vzmd_test.go:60: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpl1__vzmd_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    expr := \"\"\n    for i := 0; i < len(operator); i++ {\n        if\
    \ i == 0 {\n            expr = fmt.Sprintf(\"%d%s%d\", operand[i], operator[i],\
    \ operand[i+1])\n        } else {\n            expr = fmt.Sprintf(\"(%s)%s%d\"\
    , expr, operator[i], operand[i+1])\n        }\n    }\n    fmt.Println(expr)\n\
    \    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "((2**3)*4)+5\n((2+3)*4)-5\n(7//3)*4\n--- FAIL: TestDo_Algebra (0.00s)\n\
    \    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmp_vqnmooa_test.go:57:\
    \ expected '%!s(int=37)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmp_vqnmooa_test.go:57: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmp_vqnmooa_test.go:57:\
    \ expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\tif len(operator) < 1 || len(operand) < 2 {\n\t\treturn 0\n\t\
    }\n\tif len(operator) + 1 != len(operand) {\n\t\treturn 0\n\t}\n\tres := operand[0]\n\
    \tfor i := 0; i < len(operator); i++ {\n\t\tswitch operator[i] {\n\t\tcase \"\
    +\":\n\t\t\tres += operand[i+1]\n\t\tcase \"-\":\n\t\t\tres -= operand[i+1]\n\t\
    \tcase \"*\":\n\t\t\tres *= operand[i+1]\n\t\tcase \"//\":\n\t\t\tres /= operand[i+1]\n\
    \t\tcase \"**\":\n\t\t\tres ^= operand[i+1]\n\t\t}\n\t}\n\treturn res\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp7xlfpxqz_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp7xlfpxqz_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    fmt.Println(operator)\n    fmt.Println(operand)\n    return\
    \ 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[** * +]\n[2 3 4 5]\n[+ * -]\n[2 3 4 5]\n[// *]\n[7 3 4]\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmp_mrdmi1q_test.go:47:\
    \ expected '%!s(int=37)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmp_mrdmi1q_test.go:47: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmp_mrdmi1q_test.go:47:\
    \ expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    total := operand[0]\n    for i := 1; i < len(operand); i++\
    \ {\n        if operator[i-1] == \"+\" {\n            total += operand[i]\n  \
    \      } else if operator[i-1] == \"-\" {\n            total -= operand[i]\n \
    \       } else if operator[i-1] == \"*\" {\n            total *= operand[i]\n\
    \        } else if operator[i-1] == \"//\" {\n            total /= operand[i]\n\
    \        } else if operator[i-1] == \"**\" {\n            if total == 0 {\n  \
    \              total = 1\n            }\n            for j := 1; j < operand[i];\
    \ j++ {\n                total *= total\n            }\n        }\n    }\n   \
    \ return total\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp9pekdjsx_test.go:64: expected '%!s(int=37)', got '%!s(int=69)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp9pekdjsx_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \n    if len(operand) == 0 {\n        return 0\n    }\n\n    if len(operator)\
    \ + 1 != len(operand) {\n        return 0\n    }\n\n    res := operand[0]\n  \
    \  for i := 0; i < len(operator); i++ {\n        if operator[i] == \"+\" {\n \
    \           res += operand[i+1]\n        } else if operator[i] == \"-\" {\n  \
    \          res -= operand[i+1]\n        } else if operator[i] == \"*\" {\n   \
    \         res *= operand[i+1]\n        } else if operator[i] == \"//\" {\n   \
    \         res /= operand[i+1]\n        } else if operator[i] == \"**\" {\n   \
    \         res = int(math.Pow(float64(res), float64(operand[i+1])))\n        }\n\
    \    }\n\n    return res\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu6pznp9_test.go:50:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    fmt.Println(operator)\n    fmt.Println(operand)\n\
    \    // Make sure that operator length is operand length - 1\n    if len(operator)\
    \ + 1 != len(operand) {\n        return -1\n    }\n    for i := 0; i < len(operator);\
    \ i++ {\n        if (operator[i] == \"+\") {\n            result = operand[i]\
    \ + operand[i+1]\n        } else if (operator[i] == \"-\") {\n            result\
    \ = operand[i] - operand[i+1]\n        } else if (operator[i] == \"*\") {\n  \
    \          result = operand[i] * operand[i+1]\n        } else if (operator[i]\
    \ == \"//\") {\n            result = operand[i] / operand[i+1]\n        } else\
    \ if (operator[i] == \"**\") {\n            result = operand[i] ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[** * +]\n[2 3 4 5]\n[+ * -]\n[2 3 4 5]\n[// *]\n[7 3 4]\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmpfuiizrqe_test.go:65:\
    \ expected '%!s(int=37)', got '%!s(int=9)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmpfuiizrqe_test.go:65: expected '%!s(int=9)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmpfuiizrqe_test.go:65:\
    \ expected '%!s(int=8)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    fmt.Println(operator)\n    fmt.Println(operand)\n    var result\
    \ int\n    for k, v := range operator {\n        switch v {\n        case \"+\"\
    :\n            result = operand[k] + operand[k+1]\n            operand[k+1] =\
    \ result\n        case \"-\":\n            result = operand[k] - operand[k+1]\n\
    \            operand[k+1] = result\n        case \"*\":\n            result =\
    \ operand[k] * operand[k+1]\n            operand[k+1] = result\n        case \"\
    //\":\n            result = operand[k] / operand[k+1]\n            operand[k+1]\
    \ = result\n        case \"**\":\n            result = operand[k]\n          \
    \  for i := 0; i < operand[k+1]-1; i++ {\n                result *= operand[k]\n\
    \            }\n            operand[k+1] = result\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[** * +]\n[2 3 4 5]\n[+ * -]\n[2 3 4 5]\n[// *]\n[7 3 4]\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp9iur_qcf_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    var op string\n    result := operand[0]\n    operand = operand[1:]\n\
    \    for index, op := range operator {\n        switch op {\n        case \"+\"\
    :\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result ^= operand[index]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5f4g4dl0_test.go:30:9: op declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzwv1txx_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \n    left := operand[0]\n    right := operand[1]\n    switch operator[0] {\n\
    \    case \"+\":\n        return left + do_algebra(operator[1:], operand[1:])\n\
    \    case \"-\":\n        return left - do_algebra(operator[1:], operand[1:])\n\
    \    case \"*\":\n        return left * do_algebra(operator[1:], operand[1:])\n\
    \    case \"//\":\n        return left / do_algebra(operator[1:], operand[1:])\n\
    \    case \"**\":\n        return left ** do_algebra(operator[1:], operand[1:])\n\
    \    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9f7qmhx2_test.go:32:5: right declared but not used

    /tmp/tmp9f7qmhx2_test.go:43:24: invalid operation: cannot indirect do_algebra(operator[1:],
    operand[1:]) (value of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO\n    if len(operator) == 0 {\n        return 0\n \
    \   }\n    if len(operand) == 0 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i, _ := range(operator) {\n        switch operator[i] {\n           \
    \ case \"+\": result += operand[i+1]\n            case \"-\": result -= operand[i+1]\n\
    \            case \"*\": result *= operand[i+1]\n            case \"//\": result\
    \ /= operand[i+1]\n            case \"**\": result = result ^ operand[i+1]\n \
    \       }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpznzrl21d_test.go:62: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpznzrl21d_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = pow(result, operand[i+1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpml6gwacz_test.go:45:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    l := len(operator)\n    result := operand[0]\n    for i :=\
    \ 0; i < l; i++ {\n        switch operator[i] {\n        case \"+\":\n       \
    \     result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n\
    \        case \"*\":\n            result *= operand[i+1]\n        case \"//\"\
    :\n            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9a_nd2v9_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result := operand[0]\n    for i, op := range operator {\n        switch op\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpk87570hw_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpk87570hw_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for i, op := range operator {\n        if op == \"**\" {\n\
    \            operand[i] = operand[i] ** operand[i+1]\n            operand = append(operand[:i+1],\
    \ operand[i+2:]...)\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \            i--\n        }\n    }\n    for i, op := range operator {\n      \
    \  if op == \"//\" {\n            operand[i] = operand[i] // operand[i+1]\n  \
    \          operand = append(operand[:i+1], operand[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            i--\n        }\n    }\n\
    \    for i, op := range operator {\n        if op == \"*\" {\n            operand[i]\
    \ = operand[i] * operand[i+1]\n            operand = append(operand[:i+1], operand[i+2:]...)\n\
    \            operator = append(operator[:i], operator[i+1:]...)\n            i--\n\
    \        }\n    }\n    for i, op := range operator {\n        if op == \"+\" {\n\
    \            operand[i] = operand[i] + operand[i+1]\n            operand = append(operand[:i+1],\
    \ operand[i+2:]...)\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \            i--\n        }\n    }\n    for i, op := range operator {\n      \
    \  if op == \"-\" {\n            operand[i] = operand[i] - operand[i+1]\n    \
    \        operand = append(operand[:i+1], operand[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            i--\n        }\n    }\n\
    \    return operand[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8om10yf_test.go:29:40: invalid operation: cannot indirect operand[i +
    1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    if len(operator) + 1 != len(operand) {\n        return 0\n   \
    \ }\n    i := 0\n    for i < len(operator) {\n        switch operator[i] {\n \
    \       case \"**\":\n            operand[i] = operand[i]**operand[i+1]\n    \
    \        operand = append(operand[:i+1], operand[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n        case \"//\":\n          \
    \  operand[i] = operand[i]//operand[i+1]\n            operand = append(operand[:i+1],\
    \ operand[i+2:]...)\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \        case \"*\":\n            operand[i] = operand[i]*operand[i+1]\n     \
    \       operand = append(operand[:i+1], operand[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n        default:\n            i++\n\
    \        }\n    }\n    i = 0\n    for i < len(operator) {\n        switch operator[i]\
    \ {\n        case \"+\":\n            operand[i] = operand[i]+operand[i+1]\n \
    \           operand = append(operand[:i+1], operand[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n        case \"-\":\n           \
    \ operand[i] = operand[i]-operand[i+1]\n            operand = append(operand[:i+1],\
    \ operand[i+2:]...)\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \        default:\n            i++\n        }\n    }\n    return operand[0]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmcz9t7h4_test.go:37:38: invalid operation: cannot indirect operand[i +
    1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for idx, op := range operator {\n    \
    \    if idx == 0 {\n            result = operand[idx]\n        }\n        switch\
    \ op {\n        case \"+\":\n            result += operand[idx+1]\n        case\
    \ \"-\":\n            result -= operand[idx+1]\n        case \"*\":\n        \
    \    result *= operand[idx+1]\n        case \"//\":\n            result /= operand[idx+1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[idx+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ajn80ef_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    ops := len(operator)\n    if ops == 0 {\n        return 0\n\
    \    }\n    if len(operand) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   if operator[0] == \"+\" {\n            return operand[0] + operand[1]\n  \
    \      }\n        if operator[0] == \"-\" {\n            return operand[0] - operand[1]\n\
    \        }\n        if operator[0] == \"*\" {\n            return operand[0] *\
    \ operand[1]\n        }\n        if operator[0] == \"//\" {\n            return\
    \ operand[0] / operand[1]\n        }\n        if operator[0] == \"**\" {\n   \
    \         return operand[0] ^ operand[1]\n        }\n    }\n    sum := operand[0]\n\
    \    for i := 0; i < ops; i++ {\n        if operator[i] == \"+\" {\n         \
    \   sum += operand[i+1]\n        }\n        if operator[i] == \"-\" {\n      \
    \      sum -= operand[i+1]\n        }\n        if operator[i] == \"*\" {\n   \
    \         sum *= operand[i+1]\n        }\n        if operator[i] == \"//\" {\n\
    \            sum /= operand[i+1]\n        }\n        if operator[i] == \"**\"\
    \ {\n            sum ^= operand[i+1]\n        }\n    }\n    return sum\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp0gxc5t7w_test.go:90: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp0gxc5t7w_test.go:90:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for index, single_operator\
    \ := range operator {\n        if single_operator == \"+\" {\n            result\
    \ += operand[index + 1]\n        } else if single_operator == \"-\" {\n      \
    \      result -= operand[index + 1]\n        } else if single_operator == \"*\"\
    \ {\n            result *= operand[index + 1]\n        } else if single_operator\
    \ == \"//\" {\n            result /= operand[index + 1]\n        } else if single_operator\
    \ == \"**\" {\n            result = result ^ operand[index + 1]\n        }\n \
    \   }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpkmawo8z6_test.go:59: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpkmawo8z6_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var r int = operand[0]\n    for i := 1; i < len(operand);\
    \ i++ {\n        o := operator[i-1]\n        op := operand[i]\n        switch\
    \ o {\n        case \"+\":\n            r += op\n        case \"-\":\n       \
    \     r -= op\n        case \"*\":\n            r *= op\n        case \"//\":\n\
    \            r /= op\n        case \"**\":\n            r = r * r\n        }\n\
    \    }\n    return r\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpy5nymmy8_test.go:62: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpy5nymmy8_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for _, operator1 := range operator {\n        switch operator1\
    \ {\n        case \"+\":\n            operand[0] = operand[0] + operand[1]\n \
    \           operand = operand[1:]\n        case \"-\":\n            operand[0]\
    \ = operand[0] - operand[1]\n            operand = operand[1:]\n        case \"\
    *\":\n            operand[0] = operand[0] * operand[1]\n            operand =\
    \ operand[1:]\n        case \"//\":\n            operand[0] = operand[0] / operand[1]\n\
    \            operand = operand[1:]\n        case \"**\":\n            operand[0]\
    \ = operand[0] ^ operand[1]\n            operand = operand[1:]\n        }\n  \
    \  }\n    return operand[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpqclbv1yq_test.go:64: expected '%!s(int=37)', got '%!s(int=5)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpqclbv1yq_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpqclbv1yq_test.go:64: expected '%!s(int=8)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = pow(result, operand[i+1])\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxy6qty6j_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return -1\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprnki2fn1_test.go:46: expected '%!s(int=37)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprnki2fn1_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprnki2fn1_test.go:46: expected '%!s(int=8)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var res int\n    for i, v := range operator {\n        switch\
    \ v {\n        case \"+\":\n            res += operand[i] + operand[i+1]\n   \
    \     case \"-\":\n            res += operand[i] - operand[i+1]\n        case\
    \ \"*\":\n            res += operand[i] * operand[i+1]\n        case \"//\":\n\
    \            res += operand[i] / operand[i+1]\n        case \"**\":\n        \
    \    res += operand[i] ^ operand[i+1]\n        }\n    }\n    return res\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmph9ydr7fa_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmph9ydr7fa_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmph9ydr7fa_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: write your code here\n    return -1\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp3mdlkmdi_test.go:46: expected '%!s(int=37)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp3mdlkmdi_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp3mdlkmdi_test.go:46: expected '%!s(int=8)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for _, v := range operator {\n        o := 0\n        switch\
    \ v {\n        case \"+\":\n            o = operand[0] + operand[1]\n        case\
    \ \"-\":\n            o = operand[0] - operand[1]\n        case \"*\":\n     \
    \       o = operand[0] * operand[1]\n        case \"//\":\n            o = operand[0]\
    \ / operand[1]\n        case \"**\":\n            o = operand[0] ^ operand[1]\n\
    \        }\n        operand = append(operand[2:], o)\n    }\n    return operand[0]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpagma1ky__test.go:61: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpagma1ky__test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=-15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjlemtkl_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i, op := range operator\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = pow(result, operand[i+1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_jercra_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp75k1b21r_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp75k1b21r_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp75k1b21r_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    result := operand[0]\n    for i, op :=\
    \ range operator {\n        switch op {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp722na24h_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp722na24h_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    var res int\n    if operator[0] == \"+\" {\n        res = operand[0]\
    \ + operand[1]\n    } else if operator[0] == \"-\" {\n        res = operand[0]\
    \ - operand[1]\n    } else if operator[0] == \"*\" {\n        res = operand[0]\
    \ * operand[1]\n    } else if operator[0] == \"//\" {\n        res = operand[0]\
    \ / operand[1]\n    } else if operator[0] == \"**\" {\n        res = operand[0]\
    \ ^ operand[1]\n    }\n    return res\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmph68oyuh0_test.go:60: expected '%!s(int=37)', got '%!s(int=1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmph68oyuh0_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmph68oyuh0_test.go:60: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if operator[0] == \"+\" {\n        result\
    \ = operand[0] + operand[1]\n    } else if operator[0] == \"-\" {\n        result\
    \ = operand[0] - operand[1]\n    } else if operator[0] == \"*\" {\n        result\
    \ = operand[0] * operand[1]\n    } else if operator[0] == \"//\" {\n        result\
    \ = operand[0] / operand[1]\n    } else if operator[0] == \"**\" {\n        result\
    \ = operand[0]\n        for i := 0; i < operand[1] - 1; i++ {\n            result\
    \ *= operand[0]\n        }\n    }\n\n    for i := 1; i < len(operator); i++ {\n\
    \        if operator[i] == \"+\" {\n            result += operand[i + 1]\n   \
    \     } else if operator[i] == \"-\" {\n            result -= operand[i + 1]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i + 1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i +\
    \ 1]\n        } else if operator[i] == \"**\" {\n            tmp := operand[i\
    \ + 1]\n            for j := 0; j < tmp - 1; j++ {\n                result *=\
    \ operand[i + 1]\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmpe3yrhgwl_test.go:77: expected '%!s(int=9)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    var total int = operand[0]\n    for i, opt := range operator {\n\
    \        switch opt {\n        case \"+\":\n            total += operand[i+1]\n\
    \        case \"-\":\n            total -= operand[i+1]\n        case \"*\":\n\
    \            total *= operand[i+1]\n        case \"//\":\n            total /=\
    \ operand[i+1]\n        case \"**\":\n            total = int(math.Pow(float64(total),\
    \ float64(operand[i+1])))\n        }\n    }\n    return total\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcqttnu0_test.go:42:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    operand = operand[1:]\n    for index,\
    \ op := range operator {\n        switch op {\n        case \"+\":\n         \
    \   result += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[index])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezjs1n_5_test.go:43:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    r := operand[0]\n    for i, v := range operator {\n      \
    \  switch v {\n        case \"+\":\n            r += operand[i+1]\n        case\
    \ \"-\":\n            r -= operand[i+1]\n        case \"*\":\n            r *=\
    \ operand[i+1]\n        case \"//\":\n            r /= operand[i+1]\n        case\
    \ \"**\":\n            r = int(math.Pow(float64(r), float64(operand[i+1])))\n\
    \        }\n    }\n    return r\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk3qqyy6j_test.go:39:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073331
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i, o := range operator {\n \
    \       switch o {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = pow(result, operand[i+1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfs_y3y_d_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073331
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    // ex: operator = \"+-*\" and operand = [1, 2, 3, 4] \n    //\
    \ after process: operator = [\"+\",\"-\",\"*\"] and operand = [1, 2, 3, 4]\n \
    \   for i := 0; i < len(operator); i++ {\n        // ignore \"-\" if is the first\
    \ symbol\n        if i == 0 && operator[i] == \"-\" {\n            operand[i+1]\
    \ = -operand[i+1]\n            continue\n        }\n        // ignore \"-\" if\
    \ is the second symbol and \"-*\"\n        if i == 1 && (operator[i] == \"-\"\
    \ || operator[i-1] == \"-\" && operator[i] == \"*\") {\n            operand[i+1]\
    \ = -operand[i+1]\n            continue\n        }\n        switch operator[i]\
    \ {\n        case \"+\":\n            operand[i+1] = operand[i] + operand[i+1]\n\
    \        case \"-\":\n            operand[i+1] = operand[i] - operand[i+1]\n \
    \       case \"*\":\n            operand[i+1] = operand[i] * operand[i+1]\n  \
    \      case \"//\":\n            operand[i+1] = operand[i] / operand[i+1]\n  \
    \      case \"**\":\n            operand[i+1] = int(math.Pow(float64(operand[i]),\
    \ float64(operand[i+1])))\n        }\n    }\n    return operand[len(operand)-1]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9yhgu0d_test.go:53:32: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return result\n    }\n    for idx, op := range operator {\n\
    \        operand1 := operand[idx]\n        operand2 := operand[idx+1]\n      \
    \  switch op {\n        case \"+\":\n            result = operand1 + operand2\n\
    \        case \"-\":\n            result = operand1 - operand2\n        case \"\
    *\":\n            result = operand1 * operand2\n        case \"//\":\n       \
    \     result = operand1 / operand2\n        case \"**\":\n            result =\
    \ operand1 ^ operand2\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmppsuouu2z_test.go:65: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmppsuouu2z_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmppsuouu2z_test.go:65: expected '%!s(int=8)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n        switch\
    \ operator[i-1] {\n        case \"+\":\n            result += operand[i]\n   \
    \     case \"-\":\n            result -= operand[i]\n        case \"*\":\n   \
    \         result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result = int(float64(result) * float64(result))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpa_vqceoz_test.go:63: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpa_vqceoz_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    /*\n    op := []func(int, int) int {\n        func(a, b int)\
    \ int { return a + b },\n        func(a, b int) int { return a - b },\n      \
    \  func(a, b int) int { return a * b },\n        func(a, b int) int { return a\
    \ / b },\n        func(a, b int) int { return a % b },\n    }\n    */\n    //\
    \ fmt.Println(op[1](1, 2))\n\n    // fmt.Println(operator)\n    // fmt.Println(operand)\n\
    \n    var p, stack int\n    if operator[0] == \"*\" || operator[0] == \"/\" ||\
    \ operator[0] == \"%\" {\n        stack = operand[0]\n        p = 1\n    } else\
    \ {\n        stack = operand[0] + operand[1]\n        p = 2\n    }\n\n    for\
    \ i := 0; i < len(operator); i++ {\n        // fmt.Println(p)\n        if operator[i]\
    \ == \"+\" {\n            stack += operand[p]\n        } else if operator[i] ==\
    \ \"-\" {\n            stack -= operand[p]\n        } else if operator[i] == \"\
    *\" {\n            stack *= operand[p]\n        } else if operator[i] == \"/\"\
    \ {\n            stack /= operand[p]\n        } else if operator[i] == \"%\" {\n\
    \            stack %= operand[p]\n        }\n        p++\n    }\n    return stack\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.do_algebra({0xc0000786d0?, 0x2b8e63b6fd50?,\
    \ 0xd0?}, {0xc000078630?, 0x4b3193?, 0x5d4010?})\n\t/tmp/tmp8282ub6c_test.go:53\
    \ +0x1f0\ncommand-line-arguments_test.TestDo_Algebra(0x0?)\n\t/tmp/tmp8282ub6c_test.go:75\
    \ +0x110\ntesting.tRunner(0xc0001036c0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    current := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            current\
    \ += operand[i+1]\n        case \"-\":\n            current -= operand[i+1]\n\
    \        case \"*\":\n            current *= operand[i+1]\n        case \"//\"\
    :\n            current /= operand[i+1]\n        case \"**\":\n            current\
    \ = int(math.Pow(float64(current), float64(operand[i+1])))\n        }\n    }\n\
    \    return current\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo95p5uyn_test.go:39:27: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i, o := range\
    \ operator {\n        switch o {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef1hendf_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: Implement a function that does algebra calculations\n\
    \    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp8owfe26i_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp8owfe26i_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp8owfe26i_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var stack []int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            stack = append(stack,\
    \ operand[i] + operand[i+1])\n        case \"-\":\n            stack = append(stack,\
    \ operand[i] - operand[i+1])\n        case \"*\":\n            stack = append(stack,\
    \ operand[i] * operand[i+1])\n        case \"//\":\n            stack = append(stack,\
    \ operand[i] / operand[i+1])\n        case \"**\":\n            stack = append(stack,\
    \ operand[i] ^ operand[i+1])\n        }\n    }\n    return stack[0]\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfn3gbxt_test.go:60: expected '%!s(int=37)', got '%!s(int=1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfn3gbxt_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmphfn3gbxt_test.go:60: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    result := operand[0]\n    for i, op := range operator {\n        if\
    \ op == \"+\" {\n            result += operand[i+1]\n        } else if op == \"\
    -\" {\n            result -= operand[i+1]\n        } else if op == \"*\" {\n \
    \           result *= operand[i+1]\n        } else if op == \"//\" {\n       \
    \     result /= operand[i+1]\n        } else if op == \"**\" {\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpymw2xeih_test.go:41:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // your code here\n    var result int\n    result = operand[0]\n\
    \    for i := 1; i < len(operand); i++ {\n        switch operator[i-1] {\n   \
    \     case \"+\":\n            result += operand[i]\n        case \"-\":\n   \
    \         result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n\
    \        case \"//\":\n            result /= operand[i]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i])))\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcavyr86p_test.go:41:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var value = operand[0]\n    for i := 1; i < len(operand);\
    \ i++ {\n        switch operator[i-1] {\n        case \"+\":\n            value\
    \ += operand[i]\n        case \"-\":\n            value -= operand[i]\n      \
    \  case \"*\":\n            value *= operand[i]\n        case \"//\":\n      \
    \      value /= operand[i]\n        case \"**\":\n            value = value^operand[i]\n\
    \        }\n    }\n    return value\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpkpospz27_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpkpospz27_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) < 1 || len(operand) <\
    \ 2 {\n        return 0\n    }\n\n    result = operand[0]\n    for i := 0; i <\
    \ len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpko8bphu7_test.go:65: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpko8bphu7_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    op := operator[0]\n    operand1 := operand[0]\n    operand2 := operand[1]\n\
    \    if op == \"+\" {\n        operand1 = operand1 + operand2\n    } else if op\
    \ == \"-\" {\n        operand1 = operand1 - operand2\n    } else if op == \"*\"\
    \ {\n        operand1 = operand1 * operand2\n    } else if op == \"//\" {\n  \
    \      operand1 = operand1 / operand2\n    } else if op == \"**\" {\n        operand1\
    \ = operand1 ^ operand2\n    }\n    return do_algebra(operator[1:], append([]int{operand1},\
    \ operand[2:]...))\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpvtoztyaa_test.go:62: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpvtoztyaa_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    for i, op := range operator {\n        if op == \"**\" {\n            operand[i]\
    \ = int(math.Pow(float64(operand[i]), float64(operand[i+1])))\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            operand = append(operand[:i+1],\
    \ operand[i+2:]...)\n            return do_algebra(operator, operand)\n      \
    \  }\n    }\n    for i, op := range operator {\n        if op == \"//\" {\n  \
    \          operand[i] = operand[i] / operand[i+1]\n            operator = append(operator[:i],\
    \ operator[i+1:]...)\n            operand = append(operand[:i+1], operand[i+2:]...)\n\
    \            return do_algebra(operator, operand)\n        }\n    }\n    for i,\
    \ op := range operator {\n        if op == \"*\" {\n            operand[i] = operand[i]\
    \ * operand[i+1]\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \            operand = append(operand[:i+1], operand[i+2:]...)\n            return\
    \ do_algebra(operator, operand)\n        }\n    }\n    for i, op := range operator\
    \ {\n        if op == \"-\" {\n            operand[i] = operand[i] - operand[i+1]\n\
    \            operator = append(operator[:i], operator[i+1:]...)\n            operand\
    \ = append(operand[:i+1], operand[i+2:]...)\n            return do_algebra(operator,\
    \ operand)\n        }\n    }\n    for i, op := range operator {\n        if op\
    \ == \"+\" {\n            operand[i] = operand[i] + operand[i+1]\n           \
    \ operator = append(operator[:i], operator[i+1:]...)\n            operand = append(operand[:i+1],\
    \ operand[i+2:]\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyzgcfux3_test.go:66:58: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if (len(operator) == 0) {\n        return operand[0]\n   \
    \ }\n    var output int\n    var op1, op2 int\n    op1 = operand[0]\n    op2 =\
    \ operand[1]\n    switch operator[0] {\n        case \"+\":\n            output\
    \ = op1 + op2\n        case \"-\":\n            output = op1 - op2\n        case\
    \ \"*\":\n            output = op1 * op2\n        case \"//\":\n            output\
    \ = op1 / op2\n        case \"**\":\n            output = op1 ^ op2\n    }\n \
    \   return output\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp97bygr7f_test.go:64: expected '%!s(int=37)', got '%!s(int=1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp97bygr7f_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp97bygr7f_test.go:64: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var res int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        if operator[i] == \"+\" {\n            res += operand[i+1]\n\
    \        } else if operator[i] == \"-\" {\n            res -= operand[i+1]\n \
    \       } else if operator[i] == \"*\" {\n            res *= operand[i+1]\n  \
    \      } else if operator[i] == \"//\" {\n            res /= operand[i+1]\n  \
    \      } else if operator[i] == \"**\" {\n            res ^= operand[i+1]\n  \
    \      }\n    }\n    return res\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmp18pe8u_test.go:59: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmp18pe8u_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpooor85mi_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        switch operator[0] {\n            case \"\
    +\":\n                return operand[0] + operand[1]\n            case \"-\":\n\
    \                return operand[0] - operand[1]\n            case \"*\":\n   \
    \             return operand[0] * operand[1]\n            case \"//\":\n     \
    \           return operand[0] / operand[1]\n            case \"**\":\n       \
    \         return operand[0] ^ operand[1]\n        }\n    }\n    var result, mid\
    \ int\n    if operator[0] == \"//\" {\n        result = operand[0] / operand[1]\n\
    \    } else if operator[0] == \"**\" {\n        result = operand[0] ^ operand[1]\n\
    \    } else {\n        result = operand[0]\n    }\n    for i := 1; i < len(operator);\
    \ i++ {\n        if operator[i] == \"//\" {\n            mid = result / operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            mid = result ^ operand[i+1]\n\
    \        } else {\n            mid = result\n        }\n        switch operator[i]\
    \ {\n            case \"+\":\n                result = mid + operand[i+1]\n  \
    \          case \"-\":\n                result = mid - operand[i+1]\n        \
    \    case \"*\":\n                result = mid * operand[i+1]\n            case\
    \ \"//\":\n                result = mid / operand[i+1]\n            case \"**\"\
    :\n                result = mid ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprpgxfm87_test.go:94: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprpgxfm87_test.go:94:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprpgxfm87_test.go:94: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    // \n    var op_i, op_j int = 0, 0\n    for {\n        if len(operator)\
    \ == op_i {\n            break\n        }\n        if operator[op_i] == \"**\"\
    \ {\n            // do exponentiation\n            operand[op_j] = do_exponentiation(operand[op_j],\
    \ operand[op_j+1])\n            // delete the op_j+1 element\n            operand\
    \ = delete_int_at(operand, op_j+1)\n            // delete operator at operator[op_i]\n\
    \            operator = delete_string_at(operator, op_i)\n            //\n   \
    \         continue\n        }\n        if operator[op_i] == \"//\" {\n       \
    \     // do floor division\n            operand[op_j] = do_floor_division(operand[op_j],\
    \ operand[op_j+1])\n            // delete the op_j+1 element\n            operand\
    \ = delete_int_at(operand, op_j+1)\n            // delete operator at operator[op_i]\n\
    \            operator = delete_string_at(operator, op_i)\n            //\n   \
    \         continue\n        }\n        op_i++\n        op_j++\n    }\n    op_i,\
    \ op_j = 0, 0\n    for {\n        if len(operator) == op_i {\n            break\n\
    \        }\n        if operator[op_i] == \"*\" {\n            // do exponentiation\n\
    \            operand[op_j] = do_multiplication(operand[op_j], operand[op_j+1])\n\
    \            // delete the op_j+1 element\n            operand = delete_int_at(operand,\
    \ op_j+1)\n            // delete operator at operator[op_i]\n            operator\
    \ = delete_string_at(operator, op_i)\n            //\n            continue\n \
    \       }\n        op_i++\n        op_j++\n    }\n    op_i, op_j = 0, 0\n    for\
    \ {\n        if len(operator)\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5di7d62_test.go:80:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjlemtkl_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    if len(operator) > len(operand) - 1 {\n        return 0\n    }\n\
    \    result := operand[0]\n    for i, op := range operator {\n        switch op\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfgqrsso1_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i]\n            for x := 1; x < operand[i+1];\
    \ x++ {\n                result *= operand[i]\n            }\n        }\n    \
    \    operand[i+1] = result\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmpwf9u54_2_test.go:64: expected '%!s(int=9)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // create 2 stacks for operator and operand.\n    // iterate\
    \ through the operator.\n    // if * or /, pop the top 2 operands, and push result\
    \ into operand stack.\n    // if + or -, pop the top operand, and push the result\
    \ into operator stack.\n    // if the operator stack has no operator, pop the\
    \ top 2 operands, and do the calculation.\n    // return the top element of operand\
    \ stack.\n    var operand_stack []int\n    var operator_stack []string\n    operand_stack\
    \ = append(operand_stack, operand[0])\n    for i := 1; i < len(operand); i++ {\n\
    \        if operator[i-1] == \"*\" || operator[i-1] == \"/\" {\n            operand1\
    \ := operand_stack[len(operand_stack)-1]\n            operand_stack = operand_stack[:len(operand_stack)-1]\n\
    \            result := do_operation(operand1, operand[i], operator[i-1])\n   \
    \         operand_stack = append(operand_stack, result)\n        } else {\n  \
    \          operator_stack = append(operator_stack, operator[i-1])\n          \
    \  operand_stack = append(operand_stack, operand[i])\n        }\n    }\n    for\
    \ len(operator_stack) > 0 {\n        operand1 := operand_stack[len(operand_stack)-1]\n\
    \        operand_stack = operand_stack[:len(operand_stack)-1]\n        operand2\
    \ := operand_stack[len(operand_stack)-1]\n        operand_stack = operand_stack[:len(operand_stack)-1]\n\
    \        op := operator_stack[len(operator_stack)-1]\n        operator_stack =\
    \ operator_stack[:len(operator_stack)-1]\n        result := do_operation(operand1,\
    \ operand2, op)\n        operand_stack = append(operand_stack, result)\n    }\n\
    \    return operand_stack[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz7440z8_test.go:40:23: undefined: do_operation

    /tmp/tmpiz7440z8_test.go:54:19: undefined: do_operation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        op1 := operand[i]\n        op2 := operand[i+1]\n        switch operator[i]\
    \ {\n        case \"+\":\n            result = op1 + op2\n        case \"-\":\n\
    \            result = op1 - op2\n        case \"*\":\n            result = op1\
    \ * op2\n        case \"//\":\n            result = op1 / op2\n        case \"\
    **\":\n            result = pow(op1, op2)\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm17l3_yi_test.go:41:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  result := operand[0]\n    for i, op := range operator {\n        if op == \"\
    +\" {\n            result += operand[i+1]\n        } else if op == \"-\" {\n \
    \           result -= operand[i+1]\n        } else if op == \"*\" {\n        \
    \    result *= operand[i+1]\n        } else if op == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if op == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9djmndv7_test.go:44:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    res := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        o := operator[i]\n        b := operand[i+1]\n        switch o {\n\
    \        case \"+\":\n            res += b\n        case \"-\":\n            res\
    \ -= b\n        case \"*\":\n            res *= b\n        case \"//\":\n    \
    \        res /= b\n        case \"**\":\n            res = res * res\n       \
    \ }\n    }\n    return res\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpsm26c80e_test.go:62: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpsm26c80e_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_5r_ssza_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_5r_ssza_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    stack := make([]int, 0)\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    stack = append(stack, operand[0])\n   \
    \ for i := 0; i < len(operator); i++ {\n        tmp := operand[i+1]\n        ope\
    \ := operator[i]\n        if ope == \"+\" {\n            stack = append(stack,\
    \ tmp)\n        } else if ope == \"-\" {\n            tmp = 0 - tmp\n        \
    \    stack = append(stack, tmp)\n        } else if ope == \"*\" {\n          \
    \  stack[len(stack)-1] = stack[len(stack)-1] * tmp\n        } else if ope == \"\
    //\" {\n            stack[len(stack)-1] = stack[len(stack)-1] / tmp\n        }\
    \ else if ope == \"**\" {\n            stack[len(stack)-1] = stack[len(stack)-1]\
    \ ^ tmp\n        }\n    }\n    total := 0\n    for _, v := range stack {\n   \
    \     total += v\n    }\n    return total\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpbc16s2ak_test.go:70: expected '%!s(int=37)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    ret := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            ret += operand[i+1]\n\
    \        case \"-\":\n            ret -= operand[i+1]\n        case \"*\":\n \
    \           ret *= operand[i+1]\n        case \"//\":\n            ret /= operand[i+1]\n\
    \        case \"**\":\n            ret = int(math.Pow(float64(ret), float64(operand[i+1])))\n\
    \        }\n    }\n    return ret\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdasbokjj_test.go:39:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result * result\n \
    \       }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpd6y5v9v__test.go:63: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpd6y5v9v__test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var oper int\n    if len(operator) ==\
    \ 0 || len(operand) == 0 {\n        return 0\n    }\n    oper = operand[0]\n \
    \   for index, operator := range operator {\n        switch operator {\n     \
    \   case \"+\":\n            oper += operand[index + 1]\n        case \"-\":\n\
    \            oper -= operand[index + 1]\n        case \"*\":\n            oper\
    \ *= operand[index + 1]\n        case \"//\":\n            oper /= operand[index\
    \ + 1]\n        case \"**\":\n            for i := 0; i < operand[index + 1];\
    \ i++ {\n                oper *= oper\n            }\n        }\n    }\n    result\
    \ = oper\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpxtwuwprl_test.go:68: expected '%!s(int=37)', got '%!s(int=1029)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpxtwuwprl_test.go:68:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    fmt.Println(operator)\n    fmt.Println(operand)\n    var result\
    \ int\n    var i int\n    result = operand[0]\n    for i = 0; i < len(operator);\
    \ i++ {\n        if operator[i] == \"+\" {\n            result += operand[i+1]\n\
    \        } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[** * +]\n[2 3 4 5]\n[+ * -]\n[2 3 4 5]\n[// *]\n[7 3 4]\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmp989uxh72_test.go:63:\
    \ expected '%!s(int=37)', got '%!s(int=9)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmp989uxh72_test.go:63: expected '%!s(int=9)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        panic(\"operator not given.\"\
    )\n    }\n    if len(operand) == 0 {\n        panic(\"operand not given.\")\n\
    \    }\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator and\
    \ operand are not of compatible size.\")\n    }\n    result := operand[0]\n  \
    \  for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n      \
    \  case \"+\":\n            result += operand[i+1]\n        case \"-\":\n    \
    \        result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        default:\n            panic(\"\
    operator not supported.\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpubnxva09_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpubnxva09_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    op_map := map[string]func(int, int) int {\n        \"+\": func(a,\
    \ b int) int {\n            return a + b\n        },\n        \"-\": func(a, b\
    \ int) int {\n            return a - b\n        },\n        \"*\": func(a, b int)\
    \ int {\n            return a * b\n        },\n        \"//\": func(a, b int)\
    \ int {\n            return a / b\n        },\n        \"**\": func(a, b int)\
    \ int {\n            return a ^ b\n        },\n    }\n    for i, op := range operator\
    \ {\n        if i == 0 {\n            continue\n        }\n        v := op_map[op](operand[i-1],\
    \ operand[i])\n        operand[i] = v\n    }\n    return operand[len(operand)-1]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpcdj0daj3_test.go:72: expected '%!s(int=37)', got '%!s(int=5)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpcdj0daj3_test.go:72:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpcdj0daj3_test.go:72: expected '%!s(int=8)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    operand_size := len(operand)\n    operator_size := len(operator)\n\
    \    if operand_size <= 1 || operator_size <= 0 {\n        return -1\n    }\n\
    \    result := operand[0]\n    for i := 0; i < operator_size; i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result ^= operand[i+1]\n   \
    \     default:\n            return -1\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmhu9lsc2_test.go:67: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmhu9lsc2_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp19v1gxft_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp19v1gxft_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp19v1gxft_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code goes here ...\n    return -1\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp824re460_test.go:46: expected '%!s(int=37)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp824re460_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp824re460_test.go:46: expected '%!s(int=8)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i, s := range operator {\n \
    \       switch s {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z5ko1fh_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    fmt.Println(operator)\n    fmt.Println(operand)\n    return\
    \ operand[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[** * +]\n[2 3 4 5]\n[+ * -]\n[2 3 4 5]\n[// *]\n[7 3 4]\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmpmm59ns6i_test.go:47:\
    \ expected '%!s(int=37)', got '%!s(int=2)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmpmm59ns6i_test.go:47: expected '%!s(int=9)', got '%!s(int=2)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmpmm59ns6i_test.go:47:\
    \ expected '%!s(int=8)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ pow(result, operand[i+1])\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptylkzb75_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i,v := range operator {\n      \
    \  switch v {\n        case \"+\":\n            result += operand[i+1]\n     \
    \   case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n   \
    \         result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwoyuiyj7_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 1; i < len(operand);\
    \ i++ {\n        op := operator[i-1]\n        if op == \"+\" {\n            result\
    \ += operand[i]\n        } else if op == \"-\" {\n            result -= operand[i]\n\
    \        } else if op == \"*\" {\n            result *= operand[i]\n        }\
    \ else if op == \"//\" {\n            result /= operand[i]\n        } else if\
    \ op == \"**\" {\n            result = result ^ operand[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpl02dcv8p_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpl02dcv8p_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\tresult := operand[0]\n\t//fmt.Println(result)\n\t//fmt.Println(operator)\n\
    \tfor i := 1; i < len(operand); i++ {\n\t\tswitch operator[i-1] {\n\t\tcase \"\
    +\":\n\t\t\tresult += operand[i]\n\t\tcase \"-\":\n\t\t\tresult -= operand[i]\n\
    \t\tcase \"*\":\n\t\t\tresult *= operand[i]\n\t\tcase \"//\":\n\t\t\tresult /=\
    \ operand[i]\n\t\tcase \"**\":\n\t\t\tresult = result ^ operand[i]\n\t\t}\n\t\t\
    //fmt.Println(result)\n\t}\n\treturn result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp0_nf3kgb_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp0_nf3kgb_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = pow(result, operand[i+1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qs6ek9e_test.go:40:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    o := map[string]func(int, int) int {\n        \"+\": func(x,\
    \ y int) int { return x + y },\n        \"-\": func(x, y int) int { return x -\
    \ y },\n        \"*\": func(x, y int) int { return x * y },\n        \"//\": func(x,\
    \ y int) int { return x / y },\n        \"**\": func(x, y int) int { return x\
    \ ^ y },\n    }\n    var result int\n    for i, op := range operator {\n     \
    \   result = o[op](result, operand[i+1])\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpyvcps5jp_test.go:56: expected '%!s(int=37)', got '%!s(int=17)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpyvcps5jp_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=7)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpyvcps5jp_test.go:56: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var op_lst = make([]Operator, len(operator))\n    for i, v\
    \ := range operator {\n        op_lst[i] = get_operator(v)\n    }\n    return\
    \ do_algebra_operand(op_lst, operand)\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsre5dd3o_test.go:27:25: undefined: Operator

    /tmp/tmpsre5dd3o_test.go:29:21: undefined: get_operator

    /tmp/tmpsre5dd3o_test.go:31:12: undefined: do_algebra_operand

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    i, j := 0, 0\n    for ; j < len(operator); j++ {\n       \
    \ if operator[j] == \"**\" {\n            operand[i] = pow(operand[i], operand[i+1])\n\
    \            operand = append(operand[:i+1], operand[i+2:]...)\n            j--\n\
    \        } else if operator[j] == \"//\" {\n            operand[i] = floor(operand[i],\
    \ operand[i+1])\n            operand = append(operand[:i+1], operand[i+2:]...)\n\
    \            j--\n        } else if operator[j] == \"*\" {\n            operand[i]\
    \ = operand[i] * operand[i+1]\n            operand = append(operand[:i+1], operand[i+2:]...)\n\
    \            j--\n        } else {\n            i++\n        }\n    }\n    result\
    \ := operand[0]\n    for j = 0; j < len(operator); j++ {\n        if operator[j]\
    \ == \"+\" {\n            result += operand[j+1]\n        } else if operator[j]\
    \ == \"-\" {\n            result -= operand[j+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4i8hm0ar_test.go:30:26: undefined: pow

    /tmp/tmp4i8hm0ar_test.go:34:26: undefined: floor

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        op := operator[i]\n        opd := operand[i+1]\n        switch op {\n\
    \        case \"+\":\n            result += opd\n        case \"-\":\n       \
    \     result -= opd\n        case \"*\":\n            result *= opd\n        case\
    \ \"//\":\n            result /= opd\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(opd)))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp12s2gy0e_test.go:44:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if operator[0] == \"+\" {\n        result\
    \ = operand[0] + operand[1]\n    } else if operator[0] == \"-\" {\n        result\
    \ = operand[0] - operand[1]\n    } else if operator[0] == \"*\" {\n        result\
    \ = operand[0] * operand[1]\n    } else if operator[0] == \"//\" {\n        result\
    \ = operand[0] / operand[1]\n    } else if operator[0] == \"**\" {\n        result\
    \ = operand[0] ^ operand[1]\n    }\n    for i := 1; i < len(operator); i++ {\n\
    \        if operator[i] == \"+\" {\n            result += operand[i+1]\n     \
    \   } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n   \
    \     } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n \
    \       } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result ^= operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp__4cvlwr_test.go:70: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp__4cvlwr_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    res := operand[0]\n    for i, op := range operator {\n   \
    \     switch op {\n        case \"+\":\n            res += operand[i+1]\n    \
    \    case \"-\":\n            res -= operand[i+1]\n        case \"*\":\n     \
    \       res *= operand[i+1]\n        case \"//\":\n            res /= operand[i+1]\n\
    \        case \"**\":\n            res = pow(res, operand[i+1])\n        }\n \
    \   }\n    return res\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpww7wq9ps_test.go:39:19: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    ans := operand[0]\n    for i, op := range operator {\n        switch\
    \ op {\n        case \"+\":\n            ans += operand[i+1]\n        case \"\
    -\":\n            ans -= operand[i+1]\n        case \"*\":\n            ans *=\
    \ operand[i+1]\n        case \"//\":\n            ans /= operand[i+1]\n      \
    \  case \"**\":\n            ans = ans ^ operand[i+1]\n        }\n    }\n    return\
    \ ans\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpxmm_ndrk_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpxmm_ndrk_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    fmt.Println(operator)\n\
    \    fmt.Println(operand)\n    for i, op := range operator {\n        if op ==\
    \ \"**\" {\n            operand[i+1] = operand[i] ** operand[i+1]\n          \
    \  operand = append(operand[:i], operand[i+1:]...)\n            operator = append(operator[:i],\
    \ operator[i+1:]...)\n            return do_algebra(operator, operand)\n     \
    \   }\n    }\n    for i, op := range operator {\n        if op == \"//\" {\n \
    \           operand[i+1] = operand[i] // operand[i+1]\n            operand = append(operand[:i],\
    \ operand[i+1:]...)\n            operator = append(operator[:i], operator[i+1:]...)\n\
    \            return do_algebra(operator, operand)\n        }\n    }\n    for i,\
    \ op := range operator {\n        if op == \"*\" {\n            operand[i+1] =\
    \ operand[i] * operand[i+1]\n            operand = append(operand[:i], operand[i+1:]...)\n\
    \            operator = append(operator[:i], operator[i+1:]...)\n            return\
    \ do_algebra(operator, operand)\n        }\n    }\n    for i, op := range operator\
    \ {\n        if op == \"+\" {\n            operand[i+1] = operand[i] + operand[i+1]\n\
    \            operand = append(operand[:i], operand[i+1:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            return do_algebra(operator,\
    \ operand)\n        }\n    }\n    for i, op := range operator {\n        if op\
    \ == \"-\" {\n            operand[i+1] = operand[i] - operand[i+1]\n         \
    \   operand = append(operand[\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy975ny9__test.go:71:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ** operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvllx8x_8_test.go:39:32: invalid operation: cannot indirect operand[i +
    1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for index, op := range operator\
    \ {\n        if op == \"+\" {\n            result += operand[index + 1]\n    \
    \    } else if op == \"-\" {\n            result -= operand[index + 1]\n     \
    \   } else if op == \"*\" {\n            result *= operand[index + 1]\n      \
    \  } else if op == \"//\" {\n            result /= operand[index + 1]\n      \
    \  } else if op == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[index + 1])))\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi8nuq401_test.go:38:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\tcount := len(operator)\n\tif count == 0 {\n\t\treturn 0\n\t\
    }\n\t\n\t// check length\n\tif count + 1 != len(operand) {\n\t\treturn 0\n\t}\n\
    \t\n\t// check * \n\tfor i := 0; i < count; i++ {\n\t\tif operator[i] == \"*\"\
    \ {\n\t\t\top := operator[i]\n\t\t\toperator[i] = operator[i + 1]\n\t\t\toperator[i\
    \ + 1] = op\n\t\t\t\n\t\t\top = operand[i]\n\t\t\toperand[i] = operand[i + 1]\n\
    \t\t\toperand[i + 1] = op\n\t\t}\n\t}\n\t\n\t// check /\n\tfor i := 0; i < count;\
    \ i++ {\n\t\tif operator[i] == \"/\" {\n\t\t\top := operator[i]\n\t\t\toperator[i]\
    \ = operator[i + 1]\n\t\t\toperator[i + 1] = op\n\t\t\t\n\t\t\top = operand[i]\n\
    \t\t\toperand[i] = operand[i + 1]\n\t\t\toperand[i + 1] = op\n\t\t}\n\t}\n\t\n\
    \tfmt.Println(operator)\n\tfmt.Println(operand)\n\t\n\t// calculate +\n\tfor i\
    \ := 0; i < count; i++ {\n\t\tif operator[i] == \"+\" {\n\t\t\toperand[i + 1]\
    \ = operand[i] + operand[i + 1]\n\t\t}\n\t}\n\t\n\t// calculate -\n\tfor i :=\
    \ 0; i < count; i++ {\n\t\tif operator[i] == \"-\" {\n\t\t\toperand[i + 1] = operand[i]\
    \ - operand[i + 1]\n\t\t}\n\t}\n\t\n\treturn operand[count]\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbnubf9pb_test.go:44:9: cannot use operand[i] (variable of type int) as
    type string in assignment

    /tmp/tmpbnubf9pb_test.go:46:21: cannot use op (variable of type string) as type
    int in assignment

    /tmp/tmpbnubf9pb_test.go:57:9: cannot use operand[i] (variable of type int) as
    type string in assignment

    /tmp/tmpbnubf9pb_test.go:59:21: cannot use op (variable of type string) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: not implemented yet\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpjf814_a5_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpjf814_a5_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpjf814_a5_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    s := \"\"\n    for i := 0; i < len(operator); i++ {\n    \
    \    s += fmt.Sprintf(\"%d %s \", operand[i], operator[i])\n    }\n    s += fmt.Sprintf(\"\
    %d\", operand[len(operand) - 1])\n    return eval(s)\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoc8iz19q_test.go:32:12: undefined: eval

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 1; i < len(operand); i++\
    \ {\n        switch operator[i-1] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result = pow(result,\
    \ operand[i])\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ebz2ods_test.go:39:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpb23z_g1e_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpb23z_g1e_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpb23z_g1e_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\tvar result int\n\tfor i := 0; i < len(operator); i++ {\n\t\t\
    switch operator[i] {\n\t\tcase \"+\":\n\t\t\tresult = operand[i] + operand[i+1]\n\
    \t\tcase \"-\":\n\t\t\tresult = operand[i] - operand[i+1]\n\t\tcase \"*\":\n\t\
    \t\tresult = operand[i] * operand[i+1]\n\t\tcase \"//\":\n\t\t\tresult = operand[i]\
    \ / operand[i+1]\n\t\tcase \"**\":\n\t\t\tresult = operand[i] ^ operand[i+1]\n\
    \t\t}\n\t\tfmt.Println(result)\n\t}\n\treturn result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1\n12\n9\n5\n12\n-1\n2\n12\n--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL:\
    \ TestDo_Algebra/test_num__0 (0.00s)\n        tmpksj4myxz_test.go:61: expected\
    \ '%!s(int=37)', got '%!s(int=9)'\n    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n\
    \        tmpksj4myxz_test.go:61: expected '%!s(int=9)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmpksj4myxz_test.go:61:\
    \ expected '%!s(int=8)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        if operator[i] == \"+\" {\n            result += operand[i+1]\n \
    \       } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu52tjccd_test.go:38:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    result := operand[0]\n    for i := 1; i < len(operand); i++ {\n  \
    \      if operator[i-1] == \"+\" {\n            result += operand[i]\n       \
    \ } else if operator[i-1] == \"-\" {\n            result -= operand[i]\n     \
    \   } else if operator[i-1] == \"*\" {\n            result *= operand[i]\n   \
    \     } else if operator[i-1] == \"//\" {\n            result /= operand[i]\n\
    \        } else if operator[i-1] == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp43gi2pf1_test.go:41:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 1; i < len(operand); i++\
    \ {\n        if operator[i-1] == \"+\" {\n            result += operand[i]\n \
    \       } else if operator[i-1] == \"-\" {\n            result -= operand[i]\n\
    \        } else if operator[i-1] == \"*\" {\n            result *= operand[i]\n\
    \        } else if operator[i-1] == \"//\" {\n            result /= operand[i]\n\
    \        } else if operator[i-1] == \"**\" {\n            result = result ^ operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp8_ctq1f3_test.go:59: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp8_ctq1f3_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for idx, op := range operator {\n\
    \        switch op {\n        case \"+\":\n            result += operand[idx+1]\n\
    \        case \"-\":\n            result -= operand[idx+1]\n        case \"*\"\
    :\n            result *= operand[idx+1]\n        case \"//\":\n            result\
    \ /= operand[idx+1]\n        case \"**\":\n            result = result ** operand[idx+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyg4vmmrk_test.go:39:32: invalid operation: cannot indirect operand[idx
    + 1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var total int = operand[0]\n    for i := 1; i < len(operand);\
    \ i++ {\n        switch operator[i-1] {\n        case \"+\":\n            total\
    \ += operand[i]\n        case \"-\":\n            total -= operand[i]\n      \
    \  case \"*\":\n            total *= operand[i]\n        case \"//\":\n      \
    \      total /= operand[i]\n        case \"**\":\n            total = total ^\
    \ operand[i]\n        }\n    }\n    return total\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpn9chi_1w_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpn9chi_1w_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    ret := operand[0]\n    for i,v := range operator {\n        switch\
    \ v {\n        case \"+\":\n            ret += operand[i+1]\n        case \"-\"\
    :\n            ret -= operand[i+1]\n        case \"*\":\n            ret *= operand[i+1]\n\
    \        case \"//\":\n            ret /= operand[i+1]\n        case \"**\":\n\
    \            ret = int(math.Pow(float64(ret), float64(operand[i+1])))\n      \
    \  }\n    }\n    return ret\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg0igd6a2_test.go:42:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for _, op := range operator {\n        switch op {\n     \
    \   case \"+\":\n            operand[0] = operand[0] + operand[1]\n          \
    \  operand = operand[1:]\n        case \"-\":\n            operand[0] = operand[0]\
    \ - operand[1]\n            operand = operand[1:]\n        case \"*\":\n     \
    \       operand[0] = operand[0] * operand[1]\n            operand = operand[1:]\n\
    \        case \"//\":\n            operand[0] = operand[0] / operand[1]\n    \
    \        operand = operand[1:]\n        case \"**\":\n            operand[0] =\
    \ operand[0] * operand[0]\n            operand = operand[1:]\n        }\n    }\n\
    \    return operand[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpdjk3icla_test.go:64: expected '%!s(int=37)', got '%!s(int=5)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpdjk3icla_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpdjk3icla_test.go:64: expected '%!s(int=8)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    // put the first two numbers to a stack, because we need to do the first\n\
    \    // operator to the first two numbers\n    // use a stack, because we want\
    \ to do the operation in a last in first out \n    // manner.\n    operandStack\
    \ := []int{operand[0], operand[1]}\n    for i := 2; i < len(operand); i++ {\n\
    \        operandStack = append(operandStack, operand[i])\n        var op1, op2\
    \ int\n        op2, operandStack = operandStack[len(operandStack) - 1], operandStack[:len(operandStack)\
    \ - 1]\n        op1, operandStack = operandStack[len(operandStack) - 1], operandStack[:len(operandStack)\
    \ - 1]\n        switch operator[i - 1] {\n        case \"+\":\n            operandStack\
    \ = append(operandStack, op1 + op2)\n        case \"-\":\n            operandStack\
    \ = append(operandStack, op1 - op2)\n        case \"*\":\n            operandStack\
    \ = append(operandStack, op1 * op2)\n        case \"//\":\n            operandStack\
    \ = append(operandStack, op1 / op2)\n        case \"**\":\n            operandStack\
    \ = append(operandStack, op1 ^ op2)\n        }\n    }\n    return operandStack[0]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpw_d4rbp5_test.go:74: expected '%!s(int=37)', got '%!s(int=2)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpw_d4rbp5_test.go:74:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpw_d4rbp5_test.go:74: expected '%!s(int=8)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var sum int\n    var i, j int\n    var optr string\n    sum\
    \ = operand[0]\n    for i=0; i<len(operator); i++ {\n        optr = operator[i]\n\
    \        switch optr {\n        case \"+\":\n            sum += operand[i+1]\n\
    \        case \"-\":\n            sum -= operand[i+1]\n        case \"*\":\n \
    \           sum *= operand[i+1]\n        case \"//\":\n            sum /= operand[i+1]\n\
    \        case \"**\":\n            for j=0; j<operand[i+1]; j++ {\n          \
    \      sum *= sum\n            }\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpja6a58fv_test.go:66: expected '%!s(int=37)', got '%!s(int=1029)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpja6a58fv_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    var opLen = len(operator)\n\
    \    var opdLen = len(operand)\n    for i := 0; i < opLen; i++ {\n        switch\
    \ operator[i] {\n            case \"+\": result += operand[i+1]\n            case\
    \ \"-\": result -= operand[i+1]\n            case \"*\": result *= operand[i+1]\n\
    \            case \"//\": result /= operand[i+1]\n            case \"**\": result\
    \ = pow(result, operand[i+1])\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_ejwtc6_test.go:29:9: opdLen declared but not used

    /tmp/tmp1_ejwtc6_test.go:36:33: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i, op := range operator {\n\
    \        switch op {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpat2t5v4q_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // init stack\n    stack := []int{}\n    // push the first\
    \ element\n    stack = append(stack, operand[0])\n    for i, op := range operator\
    \ {\n        // push the second element\n        stack = append(stack, operand[i+1])\n\
    \        var result int\n        // the operand before the operator\n        a\
    \ := stack[len(stack)-2]\n        // the operand after the operator\n        b\
    \ := stack[len(stack)-1]\n        switch op {\n        case \"+\":\n         \
    \   result = a + b\n        case \"-\":\n            result = a - b\n        case\
    \ \"*\":\n            result = a * b\n        case \"//\":\n            result\
    \ = a / b\n        case \"**\":\n            result = a ^ b\n        }\n     \
    \   // pop the two operands, and push the result\n        stack = stack[:len(stack)-2]\n\
    \        stack = append(stack, result)\n    }\n    // return the final result\n\
    \    return stack[0]\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmplyevst12_test.go:74: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmplyevst12_test.go:74:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result * result\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprfytmkml_test.go:63: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprfytmkml_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n\n    for i := 0; i < len(operator); i++ {\n\
    \        op := operator[i]\n        left := operand[i]\n        right := operand[i\
    \ + 1]\n\n        switch op {\n        case \"+\":\n            result = left\
    \ + right\n        case \"-\":\n            result = left - right\n        case\
    \ \"*\":\n            result = left * right\n        case \"//\":\n          \
    \  result = left / right\n        case \"**\":\n            result = left ** right\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfjnn6ed_test.go:44:30: invalid operation: cannot indirect right (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpb86tztgc_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpb86tztgc_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpb86tztgc_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // this is a test case\n    fmt.Println(\"operator: \", operator)\n\
    \    fmt.Println(\"operand: \", operand)\n    return 9\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "operator:  [** * +]\noperand:  [2 3 4 5]\noperator:  [+ * -]\noperand:\
    \  [2 3 4 5]\noperator:  [// *]\noperand:  [7 3 4]\n--- FAIL: TestDo_Algebra (0.00s)\n\
    \    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmpcxe021tf_test.go:48:\
    \ expected '%!s(int=37)', got '%!s(int=9)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpcxe021tf_test.go:48: expected '%!s(int=8)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) != len(operand) - 1 {\n\
    \        panic(\"operator list and operand list do not have a consistent length.\"\
    )\n    }\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i\
    \ + 1]\n        case \"-\":\n            result -= operand[i + 1]\n        case\
    \ \"*\":\n            result *= operand[i + 1]\n        case \"//\":\n       \
    \     result /= operand[i + 1]\n        case \"**\":\n            result = result\
    \ ^ operand[i + 1]\n        default:\n            panic(\"Unsupported operator\"\
    )\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpbar5hcfj_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpbar5hcfj_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for i := 1; i < len(operator); i++ {\n        switch operator[i-1]\
    \ {\n        case \"+\":\n            operand[i] = operand[i-1] + operand[i]\n\
    \        case \"-\":\n            operand[i] = operand[i-1] - operand[i]\n   \
    \     case \"*\":\n            operand[i] = operand[i-1] * operand[i]\n      \
    \  case \"//\":\n            operand[i] = operand[i-1] / operand[i]\n        case\
    \ \"**\":\n            operand[i] = operand[i-1] ^ operand[i]\n        }\n   \
    \ }\n    return operand[len(operand)-1]\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpcs_vjiw6_test.go:59: expected '%!s(int=37)', got '%!s(int=5)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpcs_vjiw6_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpcs_vjiw6_test.go:59: expected '%!s(int=8)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var stack []int\n    for i, val := range operand {\n     \
    \   switch operator[i] {\n        case \"+\":\n            stack = append(stack,\
    \ val)\n        case \"-\":\n            stack = append(stack, -val)\n       \
    \ case \"*\":\n            v := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n\
    \            stack = append(stack, v * val)\n        case \"//\":\n          \
    \  v := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n      \
    \      stack = append(stack, v / val)\n        case \"**\":\n            v :=\
    \ stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            stack\
    \ = append(stack, pow(v, val))\n        }\n    }\n    sum := 0\n    for _, v :=\
    \ range stack {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjwqnp4e_test.go:45:35: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here.\n    for i := 0; i < len(operator);\
    \ i++ {\n        o := operator[i]\n        switch o {\n        case \"//\":\n\
    \            operand[i] = operand[i] // operand[i+1]\n        case \"**\":\n \
    \           operand[i] = pow(operand[i], operand[i+1])\n        }\n    }\n   \
    \ var result int\n    for i := 0; i < len(operator); i++ {\n        o := operator[i]\n\
    \        switch o {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        }\n \
    \   }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21rms9hz_test.go:34:26: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Fill this area with your code.\n    return -1\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpkrqusrwe_test.go:46: expected '%!s(int=37)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpkrqusrwe_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpkrqusrwe_test.go:46: expected '%!s(int=8)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Implement this function\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpn2m0uf5p_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpn2m0uf5p_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpn2m0uf5p_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        o := operator[i]\n        switch o {\n        case \"+\":\n         \
    \   result += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n\
    \        case \"*\":\n            result *= operand[i+1]\n        case \"//\"\
    :\n            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = 1\n            for j := 0; j < operand[i+1]; j++ {\n                result\
    \ *= operand[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmpijs3a908_test.go:67: expected '%!s(int=9)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 1; i < len(operand); i++\
    \ {\n        switch operator[i-1] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8av2gyb5_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    var temp int\n    for i,\
    \ op := range operator {\n        if op == \"+\" {\n            result += operand[i+1]\n\
    \        } else if op == \"-\" {\n            result -= operand[i+1]\n       \
    \ } else if op == \"*\" {\n            result *= operand[i+1]\n        } else\
    \ if op == \"//\" {\n            result /= operand[i+1]\n        } else if op\
    \ == \"**\" {\n            temp = operand[i+1]\n            result = result^temp\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp7f0srlzc_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp7f0srlzc_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 1; i < len(operand);\
    \ i++ {\n        switch(operator[i-1]) {\n            case \"+\":\n          \
    \      result += operand[i]\n            case \"-\":\n                result -=\
    \ operand[i]\n            case \"*\":\n                result *= operand[i]\n\
    \            case \"//\":\n                result /= operand[i]\n            case\
    \ \"**\":\n                result = result ^ operand[i]\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpv7jz5ym8_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpv7jz5ym8_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        op := operator[i]\n        operand1 := operand[i]\n        operand2\
    \ := operand[i+1]\n        switch op {\n        case \"+\":\n            result\
    \ = operand1 + operand2\n        case \"-\":\n            result = operand1 -\
    \ operand2\n        case \"*\":\n            result = operand1 * operand2\n  \
    \      case \"//\":\n            result = operand1 / operand2\n        case \"\
    **\":\n            result = pow(operand1, operand2)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmreb1p5o_test.go:42:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    switch operator[0] {\n    case \"+\":\n        return operand[0]\
    \ + operand[1]\n    case \"-\":\n        return operand[0] - operand[1]\n    case\
    \ \"*\":\n        return operand[0] * operand[1]\n    case \"//\":\n        return\
    \ operand[0] / operand[1]\n    case \"**\":\n        return operand[0] ^ operand[1]\n\
    \    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpvr7bsnvt_test.go:57: expected '%!s(int=37)', got '%!s(int=1)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpvr7bsnvt_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpvr7bsnvt_test.go:57: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    switch operator[0] {\n    case \"+\":\n        return operand[0]\
    \ + operand[1]\n    case \"-\":\n        return operand[0] - operand[1]\n    case\
    \ \"*\":\n        return operand[0] * operand[1]\n    case \"//\":\n        return\
    \ operand[0] / operand[1]\n    case \"**\":\n        return operand[0] ** operand[1]\n\
    \    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt56i_7yx_test.go:37:30: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) + 1 != len(operand) {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = pow(result, operand[i+1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6gy6iku_test.go:45:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        panic(\"Invalid operator\
    \ list length\")\n    }\n    if len(operand) < 2 {\n        panic(\"Invalid operand\
    \ list length\")\n    }\n    if len(operator) != len(operand) - 1 {\n        panic(\"\
    Operator and operand are not matched.\")\n    }\n    var result int\n    result\
    \ = operand[0]\n    for i := 0; i < len(operator); i++ {\n        op := operator[i]\n\
    \        v1 := operand[i]\n        v2 := operand[i+1]\n        switch op {\n \
    \       case \"+\":\n            result = result + v2\n        case \"-\":\n \
    \           result = result - v2\n        case \"*\":\n            result = result\
    \ * v2\n        case \"//\":\n            result = result / v2\n        case \"\
    **\":\n            result = result ^ v2\n        default:\n            panic(\"\
    Unkown operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0ldl6y2_test.go:40:9: v1 declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, _ := range operator {\n       \
    \ switch operator[i] {\n        case \"+\":\n            result = operand[i] +\
    \ operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n        operand[i+1]\
    \ = result\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp6uj2pecs_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp6uj2pecs_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var stack []int\n    for _, op := range operator {\n     \
    \   b := stack[len(stack)-1]\n        a := stack[len(stack)-2]\n        stack\
    \ = stack[:len(stack)-2]\n        switch op {\n        case \"+\":\n         \
    \   stack = append(stack, a+b)\n        case \"-\":\n            stack = append(stack,\
    \ a-b)\n        case \"*\":\n            stack = append(stack, a*b)\n        case\
    \ \"//\":\n            stack = append(stack, a/b)\n        case \"**\":\n    \
    \        stack = append(stack, a+b)\n        }\n    }\n    return stack[0]\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.do_algebra({0xc00007e6d0?, 0x3, 0xd0?},\
    \ {0xc0000b2de8?, 0x4b3193?, 0x5d4070?})\n\t/tmp/tmpdfld7pkn_test.go:29 +0x2db\n\
    command-line-arguments_test.TestDo_Algebra(0x0?)\n\t/tmp/tmpdfld7pkn_test.go:55\
    \ +0x110\ntesting.tRunner(0xc0000da340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var stack = make([]int, len(operand))\n    stack[0] = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            stack[i+1] = stack[i] + operand[i+1]\n        case\
    \ \"-\":\n            stack[i+1] = stack[i] - operand[i+1]\n        case \"*\"\
    :\n            stack[i+1] = stack[i] * operand[i+1]\n        case \"//\":\n  \
    \          stack[i+1] = stack[i] / operand[i+1]\n        case \"**\":\n      \
    \      stack[i+1] = stack[i] ^ operand[i+1]\n        }\n    }\n    return stack[len(stack)-1]\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpsio4cs_4_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpsio4cs_4_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for index, _ := range operand {\n\
    \        if index > 0 {\n            switch operator[index - 1] {\n          \
    \  case \"+\":\n                result += operand[index]\n            case \"\
    -\":\n                result -= operand[index]\n            case \"*\":\n    \
    \            result *= operand[index]\n            case \"//\":\n            \
    \    result /= operand[index]\n            case \"**\":\n                result\
    \ ^= operand[index]\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp0s14ugcj_test.go:62: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp0s14ugcj_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    fmt.Println(operator)\n    fmt.Println(operand)\n    return\
    \ 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[** * +]\n[2 3 4 5]\n[+ * -]\n[2 3 4 5]\n[// *]\n[7 3 4]\n--- FAIL: TestDo_Algebra\
    \ (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0 (0.00s)\n        tmp_mrdmi1q_test.go:47:\
    \ expected '%!s(int=37)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__1\
    \ (0.00s)\n        tmp_mrdmi1q_test.go:47: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmp_mrdmi1q_test.go:47:\
    \ expected '%!s(int=8)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n\t/*\n\tn1 := operand[0]\n\tn2 := operand[1]\n\tvar result int\n\
    \tfor i := 0; i < len(operator); i++ {\n\t\tswitch operator[i] {\n\t\tcase \"\
    +\":\n\t\t\tresult = n1 + n2\n\t\tcase \"-\":\n\t\t\tresult = n1 - n2\n\t\tcase\
    \ \"*\":\n\t\t\tresult = n1 * n2\n\t\tcase \"//\":\n\t\t\tresult = n1 / n2\n\t\
    \tcase \"**\":\n\t\t\tresult = n1 ** n2\n\t\t}\n\t\tn1 = result\n\t\tn2 = operand[i+2]\n\
    \t}\n\treturn result\n\t*/\n\t/*\n\toperator = operator[1:]\n\tresult := operand[0]\n\
    \tfor i := 0; i < len(operator); i++ {\n\t\tswitch operator[i] {\n\t\tcase \"\
    +\":\n\t\t\tresult += operand[i+1]\n\t\tcase \"-\":\n\t\t\tresult -= operand[i+1]\n\
    \t\tcase \"*\":\n\t\t\tresult *= operand[i+1]\n\t\tcase \"//\":\n\t\t\tresult\
    \ /= operand[i+1]\n\t\tcase \"**\":\n\t\t\tresult **= operand[i+1]\n\t\t}\n\t\
    }\n\treturn result\n\t*/\n\t// a solution more faster\n\tresult := operand[0]\n\
    \tfor i := 0; i < len(operator); i++ {\n\t\tswitch operator[i] {\n\t\tcase \"\
    +\":\n\t\t\tresult += operand[i+1]\n\t\tcase \"-\":\n\t\t\tresult -= operand[i+1]\n\
    \t\tcase \"*\":\n\t\t\tresult *= operand[i+1]\n\t\tcase \"//\":\n\t\t\tresult\
    \ /= operand[i+1]\n\t\tcase \"**\":\n\t\t\tresult = result ** operand[i+1]\n\t\
    \t}\n\t}\n\treturn result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm61kb47q_test.go:81:23: invalid operation: cannot indirect operand[i +
    1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    // fmt.Println(operator)\n    for i :=\
    \ 0; i < len(operator); i++ {\n        if (i == 0) {\n            result = operand[i]\n\
    \        }\n        switch operator[i] {\n            case \"+\": result += operand[i+1]\n\
    \            case \"-\": result -= operand[i+1]\n            case \"*\": result\
    \ *= operand[i+1]\n            case \"//\": result /= operand[i+1]\n         \
    \   case \"**\": result = operand[i+1]^result\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpy6ut_oq3_test.go:59: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpy6ut_oq3_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    op := operator[0]\n    operator = operator[1:]\n    o1 := operand[0]\n  \
    \  o2 := operand[1]\n    operand = operand[2:]\n    switch op {\n    case \"+\"\
    :\n        return o1 + do_algebra(operator, append([]int{o2}, operand...))\n \
    \   case \"-\":\n        return o1 - do_algebra(operator, append([]int{o2}, operand...))\n\
    \    case \"*\":\n        return o1 * do_algebra(operator, append([]int{o2}, operand...))\n\
    \    case \"//\":\n        return o1 / do_algebra(operator, append([]int{o2},\
    \ operand...))\n    case \"**\":\n        return o1 ^ do_algebra(operator, append([]int{o2},\
    \ operand...))\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp6_yqvaz6_test.go:65: expected '%!s(int=37)', got '%!s(int=25)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp6_yqvaz6_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp6_yqvaz6_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    acc := operand[0]\n    for i, op := range operator {\n   \
    \     switch op {\n        case \"+\":\n            acc += operand[i+1]\n    \
    \    case \"-\":\n            acc -= operand[i+1]\n        case \"*\":\n     \
    \       acc *= operand[i+1]\n        case \"//\":\n            acc /= operand[i+1]\n\
    \        case \"**\":\n            acc = acc ** operand[i+1]\n        }\n    }\n\
    \    return acc\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph74vcwao_test.go:39:26: invalid operation: cannot indirect operand[i +
    1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        if operator[i] == \"+\" {\n            result += operand[i+1]\n \
    \       } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = pow(result, operand[i+1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_rrsjoj_test.go:38:22: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    if len(operator) + 1 != len(operand) {\n        return 0\n   \
    \ }\n    var value int\n    value = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        if operator[i] == \"+\" {\n            value += operand[i+1]\n\
    \        } else if operator[i] == \"-\" {\n            value -= operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            value *= operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            value /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            value = int(math.Pow(float64(value),\
    \ float64(operand[i+1])))\n        }\n    }\n    return value\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuzr_ebrs_test.go:45:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) != len(operand) - 1 {\n\
    \        panic(\"Operator and operand list size mismatch\")\n    }\n    var op_index\
    \ int\n    for i := 0; i < len(operand); i++ {\n        if op_index >= len(operator)\
    \ {\n            panic(\"No more operands\")\n        }\n        if i == 0 {\n\
    \            result = operand[i]\n        } else {\n            switch operator[op_index]\
    \ {\n            case \"+\":\n                result += operand[i]\n         \
    \   case \"-\":\n                result -= operand[i]\n            case \"*\"\
    :\n                result *= operand[i]\n            case \"//\":\n          \
    \      result /= operand[i]\n            case \"**\":\n                result\
    \ = int(math.Pow(float64(result), float64(operand[i])))\n            default:\n\
    \                panic(\"Unknow operator\")\n            }\n            op_index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5sxedvkw_test.go:49:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = int(math.Pow(float64(result), float64(operand[i+1])))\n           \
    \ default:\n                return 0\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2hwsimg_test.go:48:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"Operator\
    \ and operand lists not equal length\")\n    }\n    total := operand[0]\n    for\
    \ i, op := range operator {\n        switch op {\n        case \"+\":\n      \
    \      total += operand[i+1]\n        case \"-\":\n            total -= operand[i+1]\n\
    \        case \"*\":\n            total *= operand[i+1]\n        case \"//\":\n\
    \            total /= operand[i+1]\n        case \"**\":\n            total =\
    \ int(math.Pow(float64(total), float64(operand[i+1])))\n        default:\n   \
    \         panic(\"Unknown operator\")\n        }\n    }\n    return total\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9drun7ta_test.go:42:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) < 1 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result ^= operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpxxf_9q4a_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpxxf_9q4a_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    for i, op := range operator {\n        switch op {\n     \
    \   case \"+\":\n            operand[i] = operand[i] + operand[i+1]\n        case\
    \ \"-\":\n            operand[i] = operand[i] - operand[i+1]\n        case \"\
    *\":\n            operand[i] = operand[i] * operand[i+1]\n        case \"//\"\
    :\n            operand[i] = operand[i] / operand[i+1]\n        case \"**\":\n\
    \            operand[i] = operand[i] ^ operand[i+1]\n        }\n        operand\
    \ = append(operand[:i+1], operand[i+2:]...)\n    }\n    return operand[0]\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.do_algebra({0xc00007e6d0?, 0x3, 0xd0?},\
    \ {0xc00007e630?, 0x4b3193?, 0x5d4030?})\n\t/tmp/tmptqtpq4ld_test.go:30 +0x2f2\n\
    command-line-arguments_test.TestDo_Algebra(0x0?)\n\t/tmp/tmptqtpq4ld_test.go:52\
    \ +0x110\ntesting.tRunner(0xc0000cc4e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    op, ope := operator[0], operand[0]\n    for i := 1; i < len(operand);\
    \ i++ {\n        if op == \"+\" {\n            ope += operand[i]\n        } else\
    \ if op == \"-\" {\n            ope -= operand[i]\n        } else if op == \"\
    *\" {\n            ope *= operand[i]\n        } else if op == \"//\" {\n     \
    \       ope /= operand[i]\n        } else if op == \"**\" {\n            ope =\
    \ pow(ope, operand[i])\n        }\n        if i < len(operator) {\n          \
    \  op = operator[i]\n        }\n    }\n    return ope\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfstiuymn_test.go:38:19: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"Not\
    \ valid\")\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        oper := operator[i]\n        if oper == \"+\" {\n           \
    \ result += operand[i+1]\n        } else if oper == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if oper == \"*\" {\n            result *= operand[i+1]\n\
    \        } else if oper == \"//\" {\n            result /= operand[i+1]\n    \
    \    } else if oper == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        } else {\n            panic(\"Invalid operator\"\
    )\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0pe120n3_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    op_count := len(operator)\n    if op_count <= 0 {\n      \
    \  return operand[0]\n    }\n\n    acc := operand[0]\n    for i := 0; i < op_count;\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            acc +=\
    \ operand[i+1]\n        case \"-\":\n            acc -= operand[i+1]\n       \
    \ case \"*\":\n            acc *= operand[i+1]\n        case \"//\":\n       \
    \     acc /= operand[i+1]\n        case \"**\":\n            acc = int(math.Pow(float64(acc),\
    \ float64(operand[i+1])))\n        }\n    }\n    return acc\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9s46780d_test.go:44:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    res := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            res += operand[i+1]\n\
    \        case \"-\":\n            res -= operand[i+1]\n        case \"*\":\n \
    \           res *= operand[i+1]\n        case \"//\":\n            res /= operand[i+1]\n\
    \        case \"**\":\n            res = int(math.Pow(float64(res), float64(operand[i+1])))\n\
    \        }\n    }\n    return res\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqo0wpy0p_test.go:39:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp914fuddh_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp914fuddh_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp914fuddh_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    num := operand[0]\n    for i, op := range operator {\n   \
    \     if op == \"+\" {\n            num += operand[i+1]\n        } else if op\
    \ == \"-\" {\n            num -= operand[i+1]\n        } else if op == \"*\" {\n\
    \            num *= operand[i+1]\n        } else if op == \"//\" {\n         \
    \   num /= operand[i+1]\n        } else if op == \"**\" {\n            num = num\
    \ ^ operand[i+1]\n        }\n    }\n    return num\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpx98nffxs_test.go:59: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpx98nffxs_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073342
