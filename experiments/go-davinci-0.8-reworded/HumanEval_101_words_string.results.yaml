language: go_test.go
name: HumanEval_101_words_string
results:
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    sliceWords := make([]string,\
    \ 0)\n    str := \"\"\n    for _, rune := range s {\n        switch rune {\n \
    \       case ' ', ',', ':', '.', '?', '!':\n            if str != \"\" {\n   \
    \             sliceWords = append(sliceWords, str)\n                str = \"\"\
    \n            }\n        default:\n            str += string(rune)\n        }\n\
    \    }\n    if str != \"\" {\n        sliceWords = append(sliceWords, str)\n \
    \   }\n    return sliceWords\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073952
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    result := []string{}\n\
    \    word := \"\"\n    for _, ch := range s {\n        if ch == ' ' || ch == ','\
    \ {\n            if word != \"\" {\n                result = append(result, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(ch)\n        }\n    }\n    if word != \"\" {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Your code here.\n \
    \   // ...\n    // return []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    }\n    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpjo5kah5h_test.go:40: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpjo5kah5h_test.go:40:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpjo5kah5h_test.go:40: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpjo5kah5h_test.go:40:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpjo5kah5h_test.go:40: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    for _, str := range s {\n        //fmt.Println(string(str))\n        if string(str)\
    \ == \" \" || string(str) == \",\" {\n            continue\n        } else {\n\
    \            result = append(result, string(str))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpod77k3uc_test.go:46: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpod77k3uc_test.go:46: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpod77k3uc_test.go:46: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpod77k3uc_test.go:46:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpod77k3uc_test.go:46: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var tok string\n    tok = \"\"\n    for _, c := range s {\n        if c ==\
    \ ' ' || c == ',' {\n            if tok != \"\" {\n                words = append(words,\
    \ tok)\n                tok = \"\"\n            }\n        } else {\n        \
    \    tok += string(c)\n        }\n    }\n    if tok != \"\" {\n        words =\
    \ append(words, tok)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // set up variables\n\
    \    var mySlice []string\n    var myString string\n    // iterate through string\n\
    \    for _, c := range s {\n        // if space, append new string and make a\
    \ new string\n        if c == ' ' {\n            mySlice = append(mySlice, myString)\n\
    \            myString = \"\"\n        } else if c == ',' {\n            // if\
    \ comma, append new string and make a new string\n            mySlice = append(mySlice,\
    \ myString)\n            myString = \"\"\n        } else {\n            // otherwise,\
    \ append char to string\n            myString += string(c)\n        }\n    }\n\
    \    // append last string\n    mySlice = append(mySlice, myString)\n    return\
    \ mySlice\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpnids4hyl_test.go:57: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpnids4hyl_test.go:57: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpnids4hyl_test.go:57: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpnids4hyl_test.go:57:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpnids4hyl_test.go:57:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: implement\n \
    \   return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmphtaozte9_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmphtaozte9_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmphtaozte9_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmphtaozte9_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmphtaozte9_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var start, stop int\n\n    for i, c := range s {\n        switch c {\n   \
    \     case ' ', ',':\n            if start < stop {\n                words = append(words,\
    \ s[start:stop])\n            }\n            start = i + 1\n            stop =\
    \ i + 1\n        default:\n            stop = i + 1\n        }\n    }\n\n    if\
    \ start < stop {\n        words = append(words, s[start:stop])\n    }\n\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073952
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Handle the special\
    \ case of an empty string\n    if s == \"\" {\n        return []string{}\n   \
    \ }\n\n    var result []string\n    // Split the words into an array\n    words\
    \ := strings.Split(s, \" \")\n    for _, word := range words {\n        // If\
    \ there's a comma in the word, then split on the comma\n        if strings.Contains(word,\
    \ \",\") {\n            result = append(result, strings.Split(word, \",\")...)\n\
    \        } else {\n            result = append(result, word)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9fsgaa3a_test.go:23:14: undefined: strings

    /tmp/tmp9fsgaa3a_test.go:26:12: undefined: strings

    /tmp/tmp9fsgaa3a_test.go:27:37: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpq98owozq_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpq98owozq_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpq98owozq_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpq98owozq_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    for _, word := range s {\n        words = append(words, string(word))\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp889iu24s_test.go:41: expected '[Hi my name is John]', got\
    \ '[H i ,   m y   n a m e   i s   J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmp889iu24s_test.go:41: expected '[One two three four five\
    \ six]', got '[O n e ,   t w o ,   t h r e e ,   f o u r ,   f i v e ,   s i x]'\n\
    \    --- FAIL: TestWords_String/test_num__2 (0.00s)\n        tmp889iu24s_test.go:41:\
    \ expected '[Hi my name]', got '[H i ,   m y   n a m e]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmp889iu24s_test.go:41: expected '[One two three four five\
    \ six]', got '[O n e , ,   t w o ,   t h r e e ,   f o u r ,   f i v e ,   s i\
    \ x ,]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmp889iu24s_test.go:41:\
    \ expected '[ahmed gamal]', got '[a h m e d           ,   g a m a l]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here...\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphvra0r_l_test.go:17:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073952
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    b := []byte(s)\n    var\
    \ l []string\n    var sb []byte\n    for _, v := range b {\n        if v == '\
    \ ' || v == ',' {\n            if len(sb) > 0 {\n                l = append(l,\
    \ string(sb))\n                sb = sb[:0]\n            }\n        } else {\n\
    \            sb = append(sb, v)\n        }\n    }\n    if len(sb) > 0 {\n    \
    \    l = append(l, string(sb))\n    }\n    return l\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // YOUR CODE HERE\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpj_0i2fpi_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpj_0i2fpi_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpj_0i2fpi_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpj_0i2fpi_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpj_0i2fpi_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, ch := range s {\n        if string(ch) == \" \"\
    \ || string(ch) == \",\" {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(ch)\n        }\n\
    \    }\n    words = append(words, word)\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp_6ekgkn0_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmp_6ekgkn0_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp_6ekgkn0_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp_6ekgkn0_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmp_6ekgkn0_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    var a string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' ||\
    \ s[i] == ',' {\n            result = append(result, a)\n            a = \"\"\n\
    \        } else {\n            a += string(s[i])\n        }\n    }\n    result\
    \ = append(result, a)\n    return result\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp6pqg4wf0_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmp6pqg4wf0_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp6pqg4wf0_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp6pqg4wf0_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmp6pqg4wf0_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    for _, word := range s {\n        fmt.Println(word)\n    }\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "72\n105\n44\n32\n109\n121\n32\n110\n97\n109\n101\n32\n105\n115\n32\n74\n\
    111\n104\n110\n79\n110\n101\n44\n32\n116\n119\n111\n44\n32\n116\n104\n114\n101\n\
    101\n44\n32\n102\n111\n117\n114\n44\n32\n102\n105\n118\n101\n44\n32\n115\n105\n\
    120\n72\n105\n44\n32\n109\n121\n32\n110\n97\n109\n101\n79\n110\n101\n44\n44\n\
    32\n116\n119\n111\n44\n32\n116\n104\n114\n101\n101\n44\n32\n102\n111\n117\n114\n\
    44\n32\n102\n105\n118\n101\n44\n32\n115\n105\n120\n44\n97\n104\n109\n101\n100\n\
    32\n32\n32\n32\n32\n44\n32\n103\n97\n109\n97\n108\n--- FAIL: TestWords_String\
    \ (0.00s)\n    --- FAIL: TestWords_String/test_num__0 (0.00s)\n        tmp_78fciju_test.go:41:\
    \ expected '[Hi my name is John]', got '[]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmp_78fciju_test.go:41: expected '[One two three four five\
    \ six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2 (0.00s)\n      \
    \  tmp_78fciju_test.go:41: expected '[Hi my name]', got '[]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmp_78fciju_test.go:41: expected '[One two three four five\
    \ six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n      \
    \  tmp_78fciju_test.go:41: expected '[ahmed gamal]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, rune := range s {\n        if rune == ' ' || rune\
    \ == ',' {\n            words = append(words, word)\n            word = \"\"\n\
    \        } else {\n            word += string(rune)\n        }\n    }\n    words\
    \ = append(words, word)\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpm65lzv01_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpm65lzv01_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpm65lzv01_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpm65lzv01_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpm65lzv01_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := []string{}\n\
    \    word := \"\"\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if word != \"\" {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    for _, word := range s {\n        if word != ' ' {\n            fmt.Println(string(word))\n\
    \        }\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "H\ni\n,\nm\ny\nn\na\nm\ne\ni\ns\nJ\no\nh\nn\nO\nn\ne\n,\nt\nw\no\n,\nt\n\
    h\nr\ne\ne\n,\nf\no\nu\nr\n,\nf\ni\nv\ne\n,\ns\ni\nx\nH\ni\n,\nm\ny\nn\na\nm\n\
    e\nO\nn\ne\n,\n,\nt\nw\no\n,\nt\nh\nr\ne\ne\n,\nf\no\nu\nr\n,\nf\ni\nv\ne\n,\n\
    s\ni\nx\n,\na\nh\nm\ne\nd\n,\ng\na\nm\na\nl\n--- FAIL: TestWords_String (0.00s)\n\
    \    --- FAIL: TestWords_String/test_num__0 (0.00s)\n        tmp387j1z9l_test.go:43:\
    \ expected '[Hi my name is John]', got '[]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmp387j1z9l_test.go:43: expected '[One two three four five\
    \ six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2 (0.00s)\n      \
    \  tmp387j1z9l_test.go:43: expected '[Hi my name]', got '[]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmp387j1z9l_test.go:43: expected '[One two three four five\
    \ six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n      \
    \  tmp387j1z9l_test.go:43: expected '[ahmed gamal]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code goes here\n\
    \    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp2m4kue1__test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp2m4kue1__test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp2m4kue1__test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp2m4kue1__test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp2m4kue1__test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Your code here!\n \
    \   return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpsjtw_xy9_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpsjtw_xy9_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpsjtw_xy9_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpsjtw_xy9_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpsjtw_xy9_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn nil\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpjutzd_yj_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpjutzd_yj_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpjutzd_yj_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpjutzd_yj_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpjutzd_yj_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    for _, w := range s {\n        //fmt.Println(w)\n        if (w != ' ' &&\
    \ w != ',') {\n            result = append(result, string(w))\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpinitox71_test.go:44: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpinitox71_test.go:44: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpinitox71_test.go:44: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpinitox71_test.go:44:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpinitox71_test.go:44: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, char := range s {\n        if string(char)\
    \ == \" \" || string(char) == \",\" {\n            if word != \"\" {\n       \
    \         words = append(words, word)\n                word = \"\"\n         \
    \   }\n        } else {\n            word += string(char)\n        }\n    }\n\
    \    if word != \"\" {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        // fmt.Println(word)\n        if (word ==\
    \ ' ' || word == ',') {\n            continue\n        }\n        words = append(words,\
    \ string(word))\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp0nsccaoo_test.go:45: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmp0nsccaoo_test.go:45: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp0nsccaoo_test.go:45: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp0nsccaoo_test.go:45:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmp0nsccaoo_test.go:45: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // string to slice of\
    \ words\n    var words []string\n    for _, word := range (strings.Split(s, \"\
    \ \")) {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7hrjpj4_test.go:18:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // insert your code here.\n\
    \    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp64u446xy_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp64u446xy_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp64u446xy_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp64u446xy_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp64u446xy_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   words = append(words, \"\")\n    in_word := false\n    for _, c := range s\
    \ {\n        if c == ' ' || c == ',' {\n            if in_word {\n           \
    \     in_word = false\n            }\n        } else {\n            if !in_word\
    \ {\n                words = append(words, \"\")\n                in_word = true\n\
    \            }\n            words[len(words)-1] += string(c)\n        }\n    }\n\
    \    return words[1:]\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := []string{}\n\
    \    comma := false\n    last := 0\n    for i, r := range s {\n        if r ==\
    \ ',' {\n            if comma {\n                words = append(words, s[last:i])\n\
    \                last = i + 1\n            }\n            comma = true\n     \
    \   } else if r == ' ' {\n            comma = false\n            if last != i\
    \ {\n                words = append(words, s[last:i])\n                last =\
    \ i + 1\n            }\n        }\n    }\n    words = append(words, s[last:])\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp1si4z_er_test.go:56: expected '[Hi my name is John]', got\
    \ '[Hi, my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmp1si4z_er_test.go:56: expected '[One two three four five six]', got\
    \ '[One, two, three, four, five, six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp1si4z_er_test.go:56: expected '[Hi my name]', got '[Hi,\
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp1si4z_er_test.go:56:\
    \ expected '[One two three four five six]', got '[One,  two, three, four, five,\
    \ six,]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmp1si4z_er_test.go:56:\
    \ expected '[ahmed gamal]', got '[ahmed     , gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words = make([]string,\
    \ 0)\n    var word = \"\"\n    var readingWord = false\n    for _, char := range\
    \ s {\n        if string(char) == \" \" || string(char) == \",\" {\n         \
    \   if readingWord {\n                words = append(words, word)\n          \
    \      word = \"\"\n                readingWord = false\n            }\n     \
    \   } else {\n            word += string(char)\n            readingWord = true\n\
    \        }\n    }\n    if readingWord {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073955
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   l := len(s)\n    in_word := false\n    word_start := 0\n    for i, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if in_word {\n         \
    \       words = append(words, s[word_start:i])\n                in_word = false\n\
    \            }\n        } else {\n            if !in_word {\n                word_start\
    \ = i\n                in_word = true\n            }\n        }\n    }\n    if\
    \ in_word {\n        words = append(words, s[word_start:l])\n    }\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    panic(\"Not implemented\"\
    )\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\npanic: Not implemented [recovered]\n\
    \tpanic: Not implemented\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_string(...)\n\t/tmp/tmpzyqf2u_x_test.go:16\n\
    command-line-arguments_test.TestWords_String(0x0?)\n\t/tmp/tmpzyqf2u_x_test.go:26\
    \ +0x27\ntesting.tRunner(0xc000199040, 0x527d50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    // Your code here\n    return result\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpeb_wt19q_test.go:39: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpeb_wt19q_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpeb_wt19q_test.go:39: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpeb_wt19q_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpeb_wt19q_test.go:39: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // words := make([]string,\
    \ 0)\n    words := strings.Split(s, \" \")\n    fmt.Println(words)\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphxut2y97_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    if len(s) == 0 {\n   \
    \     return []string{}\n    }\n    split := func(c rune) bool {\n        return\
    \ c == ' ' || c == ','\n    }\n    return []string(Split(s, split))\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi08uh5_q_test.go:22:21: undefined: Split

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    res := []string{}\n  \
    \  last := 0\n    for i,c := range s {\n        if c == ' ' || c == ',' {\n  \
    \          res = append(res, s[last:i])\n            last = i+1\n        }\n \
    \   }\n    if last < len(s) {\n        res = append(res, s[last:])\n    }\n  \
    \  return res\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpe72bggbg_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpe72bggbg_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpe72bggbg_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpe72bggbg_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpe72bggbg_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // YOUR CODE HERE\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpj_0i2fpi_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpj_0i2fpi_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpj_0i2fpi_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpj_0i2fpi_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpj_0i2fpi_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn words_string_split(s)\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps4ul80jd_test.go:16:9: undefined: words_string_split

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _,word := range s.Split(\" \") {\n        for _, word := range word.Split(\"\
    ,\") {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp419b1i_7_test.go:17:27: s.Split undefined (type string has no field or
    method Split)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    for _, v := range s {\n        if string(v) == \" \" || string(v) == \",\"\
    \ {\n            continue\n        } else {\n            result = append(result,\
    \ string(v))\n        }\n    }\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp2j8tqqs9_test.go:45: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmp2j8tqqs9_test.go:45: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp2j8tqqs9_test.go:45: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp2j8tqqs9_test.go:45:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmp2j8tqqs9_test.go:45: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var r []string\n    for\
    \ _,v := range s {\n        var temp string\n        for _,v1 := range s {\n \
    \           if v1 != ' ' {\n                temp += string(v1)\n            }\
    \ else {\n                r = append(r, temp)\n                s = s[len(temp):]\n\
    \                temp = \"\"\n                break\n            }\n        }\n\
    \    }\n    return r\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmzr1wrn_test.go:17:11: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpq98owozq_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpq98owozq_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpq98owozq_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var word string\n    var\
    \ words []string\n    word = \"\"\n    words = make([]string, 0)\n    for _, c\
    \ := range s {\n        switch c {\n        case ' ':\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        case ',':\n            if len(word) > 0 {\n       \
    \         words = append(words, word)\n                word = \"\"\n         \
    \   }\n        default:\n            word += string(c)\n        }\n    }\n   \
    \ if len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpzo71gomi_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpzo71gomi_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpzo71gomi_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpzo71gomi_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpzo71gomi_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var counter int = 0\n    var letter string\n    var word string\n    for _,\
    \ letter = range s {\n        if string(letter) == \" \" || string(letter) ==\
    \ \",\" {\n            words = append(words, word)\n            word = \"\"\n\
    \            counter++\n        } else {\n            word += string(letter)\n\
    \        }\n    }\n    if word != \"\" {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg98a75st_test.go:20:12: cannot use letter (value of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    for _,word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      continue\n        } else {\n            result = append(result, string(word))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpxz73hzme_test.go:45: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpxz73hzme_test.go:45: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpxz73hzme_test.go:45: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpxz73hzme_test.go:45:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpxz73hzme_test.go:45: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: Implement\n \
    \   return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpb_oswbs0_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpb_oswbs0_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpb_oswbs0_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpb_oswbs0_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpb_oswbs0_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn []string{}\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmphi7c38m9_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmphi7c38m9_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return s\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt98y7ldu_test.go:16:12: cannot use s (variable of type string) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var currentWord string\n    for _, c := range s {\n        if c == ' ' ||\
    \ c == ',' {\n            if currentWord != \"\" {\n                words = append(words,\
    \ currentWord)\n                currentWord = \"\"\n            }\n        } else\
    \ {\n            currentWord += string(c)\n        }\n    }\n    if currentWord\
    \ != \"\" {\n        words = append(words, currentWord)\n    }\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    start := 0\n    i := 0\n    for i < len(s) {\n        if (s[i] == '\
    \ ' || s[i] == ',') && i - start > 0 {\n            words = append(words, s[start:i])\n\
    \            start = i + 1\n        }\n        i++\n    }\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpbx4kserd_test.go:47: expected '[Hi my name is John]', got\
    \ '[Hi  my name is]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n   \
    \     tmpbx4kserd_test.go:47: expected '[One two three four five six]', got '[One\
    \  two  three  four  five]'\n    --- FAIL: TestWords_String/test_num__2 (0.00s)\n\
    \        tmpbx4kserd_test.go:47: expected '[Hi my name]', got '[Hi  my]'\n   \
    \ --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpbx4kserd_test.go:47:\
    \ expected '[One two three four five six]', got '[One , two  three  four  five\
    \  six]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpbx4kserd_test.go:47:\
    \ expected '[ahmed gamal]', got '[ahmed     ,]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn []string{}\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmphi7c38m9_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmphi7c38m9_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var res []string\n   \
    \ for _, v := range s {\n        if v == ' ' || v == ',' {\n            continue\n\
    \        } else {\n            res = append(res, string(v))\n        }\n    }\n\
    \    return res\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp2mh6drqp_test.go:45: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmp2mh6drqp_test.go:45: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp2mh6drqp_test.go:45: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp2mh6drqp_test.go:45:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmp2mh6drqp_test.go:45: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := []string{}\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i] == ',' {\n\
    \            words = append(words, s[:i])\n            s = s[i + 1:]\n       \
    \     i = 0\n        }\n    }\n    words = append(words, s)\n    return words\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpx608zcti_test.go:46: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpx608zcti_test.go:46: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpx608zcti_test.go:46: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpx608zcti_test.go:46:\
    \ expected '[One two three four five six]', got '[One , two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpx608zcti_test.go:46:\
    \ expected '[ahmed gamal]', got '[ahmed     , gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var s1 []string\n    var\
    \ s2 string\n    l := len(s)\n    for i := 0; i < l; i++ {\n        if s[i] ==\
    \ ' ' || s[i] == ',' {\n            s1 = append(s1, s2)\n            s2 = \"\"\
    \n        } else {\n            s2 += string(s[i])\n        }\n    }\n    s1 =\
    \ append(s1, s2)\n    return s1\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpdfbq0oww_test.go:49: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpdfbq0oww_test.go:49: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpdfbq0oww_test.go:49: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpdfbq0oww_test.go:49:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpdfbq0oww_test.go:49:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\t// Replace all commas with\
    \ spaces.\n\ts = strings.Replace(s, \",\", \" \", -1)\n\t// Split on any amount\
    \ of whitespace\n\treturn strings.Fields(s)\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuylv02l0_test.go:17:6: undefined: strings

    /tmp/tmpuylv02l0_test.go:19:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\twords := make([]string,\
    \ 0)\n\ti := 0\n\tfor i < len(s) {\n\t\tif s[i] == ' ' || s[i] == ',' {\n\t\t\t\
    i++\n\t\t\tcontinue\n\t\t}\n\t\tj := i + 1\n\t\tfor j < len(s) && s[j] != ' '\
    \ && s[j] != ',' {\n\t\t\tj++\n\t\t}\n\t\twords = append(words, s[i:j])\n\t\t\
    i = j\n\t}\n\treturn words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var s_list []string\n\
    \    if s == \"\" {\n        return s_list\n    }\n    if s[0] == ' ' {\n    \
    \    s = s[1:]\n    }\n    if s[len(s)-1] == ' ' {\n        s = s[:len(s)-1]\n\
    \    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i] == ','\
    \ {\n            s_list = append(s_list, s[:i])\n            s = s[i+1:]\n   \
    \         i = 0\n        }\n    }\n    s_list = append(s_list, s)\n    return\
    \ s_list\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpv3hf_jjd_test.go:55: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpv3hf_jjd_test.go:55: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpv3hf_jjd_test.go:55: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpv3hf_jjd_test.go:55:\
    \ expected '[One two three four five six]', got '[One , two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpv3hf_jjd_test.go:55:\
    \ expected '[ahmed gamal]', got '[ahmed     , gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var ret []string\n   \
    \ return ret\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp1lnjy6fz_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp1lnjy6fz_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp1lnjy6fz_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp1lnjy6fz_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp1lnjy6fz_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO\n    return nil\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpu8y9siax_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpu8y9siax_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpu8y9siax_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpu8y9siax_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpu8y9siax_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := []string{}\n\
    \    word := \"\"\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if word != \"\" {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // A string is a slice\
    \ of bytes (byte array).\n    // You can slice a string with brackets: s[start:end]\n\
    \    // When start is bigger than end, it will slice up to the end of the string.\n\
    \    // Try it:\n    //     s := \"I am a string\"\n    //     s[3:3] // What's\
    \ in it?\n    //     s[3:5] // What's in it?\n    //     s[3:8] // What's in it?\n\
    \    //     s[5:5] // What's in it?\n    //     s[5:8] // What's in it?\n    //\
    \     s[5:10] // What's in it?\n    //     s[5:0] // What's in it?\n    //   \
    \  s[0:10] // What's in it?\n    //     s[0:100] // What's in it?\n    //    \
    \ s[100:100] // What's in it?\n    //     s[100:200] // What's in it?\n    //\
    \     s[100:0] // What's in it?\n    words := []string{}\n    start := 0\n   \
    \ end := len(s)\n    finished := false\n    for !finished {\n        for start\
    \ < end && s[start] == ' ' {\n            start++\n        }\n        if start\
    \ >= end {\n            finished = true\n            break\n        }\n      \
    \  end = start + 1\n        for end < len(s) && s[end] != ' ' {\n            end++\n\
    \        }\n        words = append(words, s[start:end])\n        start = end\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp9_h0doti_test.go:73: expected '[Hi my name is John]', got\
    \ '[Hi,]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp9_h0doti_test.go:73:\
    \ expected '[One two three four five six]', got '[One,]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp9_h0doti_test.go:73: expected '[Hi my name]', got '[Hi,]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp9_h0doti_test.go:73:\
    \ expected '[One two three four five six]', got '[One,,]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp9_h0doti_test.go:73: expected '[ahmed gamal]', got '[ahmed]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        switch c {\n        case\
    \ ' ', ',', ';':\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        default:\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // words := strings.Split(s,\
    \ \" \")\n    // return words\n    words := make([]string, 0)\n    wordStart :=\
    \ -1\n    for i, letter := range s {\n        if wordStart == -1 {\n         \
    \   if letter != ' ' {\n                wordStart = i\n            }\n       \
    \ } else {\n            if letter == ' ' {\n                words = append(words,\
    \ s[wordStart:i])\n                wordStart = -1\n            }\n        }\n\
    \    }\n    if wordStart != -1 {\n        words = append(words, s[wordStart:])\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpteq69hbe_test.go:56: expected '[Hi my name is John]', got\
    \ '[Hi, my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpteq69hbe_test.go:56: expected '[One two three four five six]', got\
    \ '[One, two, three, four, five, six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpteq69hbe_test.go:56: expected '[Hi my name]', got '[Hi,\
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpteq69hbe_test.go:56:\
    \ expected '[One two three four five six]', got '[One,, two, three, four, five,\
    \ six,]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpteq69hbe_test.go:56:\
    \ expected '[ahmed gamal]', got '[ahmed , gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // code here\n    return\
    \ nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmppxkx4cgy_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmppxkx4cgy_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmppxkx4cgy_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmppxkx4cgy_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmppxkx4cgy_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpw3fx0kuh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpw3fx0kuh_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return strings.Split(s,\
    \ \" \")\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknxww1v3_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // return nil\n    return\
    \ nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpodqpx8li_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpodqpx8li_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpodqpx8li_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpodqpx8li_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpodqpx8li_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words = make([]string,\
    \ 0)\n    var c = \"\"\n    for _, v := range s {\n        if v == ' ' || v ==\
    \ ',' {\n            if c != \"\" {\n                words = append(words, c)\n\
    \                c = \"\"\n            }\n        } else {\n            c += string(v)\n\
    \        }\n    }\n    if c != \"\" {\n        words = append(words, c)\n    }\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn []string{}\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmphi7c38m9_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmphi7c38m9_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmphi7c38m9_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\tfmt.Println(s)\n\tvar words\
    \ []string\n\ttmp := \"\"\n\tfor _, v := range s {\n\t\tif v == ' ' || v == ','\
    \ {\n\t\t\twords = append(words, tmp)\n\t\t\ttmp = \"\"\n\t\t} else {\n\t\t\t\
    tmp += string(v)\n\t\t}\n\t}\n\tif tmp != \"\" {\n\t\twords = append(words, tmp)\n\
    \t}\n\treturn words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi, my name is John\nOne, two, three, four, five, six\nHi, my name\nOne,,\
    \ two, three, four, five, six,\n\nahmed     , gamal\n--- FAIL: TestWords_String\
    \ (0.00s)\n    --- FAIL: TestWords_String/test_num__0 (0.00s)\n        tmpkn2s8fqn_test.go:51:\
    \ expected '[Hi my name is John]', got '[Hi  my name is John]'\n    --- FAIL:\
    \ TestWords_String/test_num__1 (0.00s)\n        tmpkn2s8fqn_test.go:51: expected\
    \ '[One two three four five six]', got '[One  two  three  four  five  six]'\n\
    \    --- FAIL: TestWords_String/test_num__2 (0.00s)\n        tmpkn2s8fqn_test.go:51:\
    \ expected '[Hi my name]', got '[Hi  my name]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmpkn2s8fqn_test.go:51: expected '[One two three four five\
    \ six]', got '[One   two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpkn2s8fqn_test.go:51: expected '[ahmed gamal]', got '[ahmed\
    \       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp432i6nc4_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp432i6nc4_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp432i6nc4_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp432i6nc4_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp432i6nc4_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    //This works on the premise\
    \ that the words are separated by\n    //any whitespace character(s)\n    return\
    \ \n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0dan0_u8_test.go:18:5:\
    \ not enough return values\n\thave ()\n\twant ([]string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return split(s, func(r\
    \ rune) bool {\n        return r == ' ' || r == ','\n    })\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnzfdjzq_test.go:16:12: undefined: split

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == \" \" || word == \",\" {\n  \
    \          words = append(words, \"\")\n        } else {\n            words[len(words)-1]\
    \ += string(word)\n        }\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90ok_dad_test.go:18:20: invalid operation: word == " " (mismatched types
    rune and untyped string)

    /tmp/tmp90ok_dad_test.go:18:35: invalid operation: word == "," (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn nil\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpjutzd_yj_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpjutzd_yj_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpjutzd_yj_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpjutzd_yj_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpjutzd_yj_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: implement\n \
    \   return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmphtaozte9_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmphtaozte9_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmphtaozte9_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmphtaozte9_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmphtaozte9_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073952
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   fmt.Println(s)\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi, my name is John\nOne, two, three, four, five, six\nHi, my name\nOne,,\
    \ two, three, four, five, six,\n\nahmed     , gamal\n--- FAIL: TestWords_String\
    \ (0.00s)\n    --- FAIL: TestWords_String/test_num__0 (0.00s)\n        tmpscuu6fmd_test.go:39:\
    \ expected '[Hi my name is John]', got '[]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpscuu6fmd_test.go:39: expected '[One two three four five\
    \ six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2 (0.00s)\n      \
    \  tmpscuu6fmd_test.go:39: expected '[Hi my name]', got '[]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmpscuu6fmd_test.go:39: expected '[One two three four five\
    \ six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n      \
    \  tmpscuu6fmd_test.go:39: expected '[ahmed gamal]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073958
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var res []string\n   \
    \ var buf []byte\n    for i, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            res = append(res, string(buf))\n            buf = buf[:0]\n     \
    \   } else {\n            buf = append(buf, byte(c))\n        }\n        if i\
    \ == len(s)-1 {\n            res = append(res, string(buf))\n        }\n    }\n\
    \    return res\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpbur61s6z_test.go:50: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpbur61s6z_test.go:50: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpbur61s6z_test.go:50: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpbur61s6z_test.go:50:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpbur61s6z_test.go:50:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073958
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    for i, letter := range s {\n        if letter == ' ' || letter == ',' {\n\
    \            if i > 0 {\n                result = append(result, s[:i])\n    \
    \        }\n            s = s[i+1:]\n            i = 0\n        }\n    }\n   \
    \ result = append(result, s)\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 5 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514800,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514800, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_string(...)\n\t/tmp/tmpm_5jxk_7_test.go:20\n\
    command-line-arguments_test.TestWords_String(0x0?)\n\t/tmp/tmpm_5jxk_7_test.go:37\
    \ +0x14f8\ntesting.tRunner(0xc0001a0340, 0x52a1c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073958
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  // Good luck!\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l5zg997_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    if len(s) == 0 {\n   \
    \     return []string{}\n    }\n    words := []string{}\n    stringList := []rune(s)\n\
    \    word := []rune{}\n    for i := 0; i < len(stringList); i++ {\n        if\
    \ stringList[i] == ' ' || stringList[i] == ',' {\n            words = append(words,\
    \ string(word))\n            word = []rune{}\n        } else {\n            word\
    \ = append(word, stringList[i])\n        }\n    }\n    if len(word) > 0 {\n  \
    \      words = append(words, string(word))\n    }\n    return words\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmprcriqtcb_test.go:54: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmprcriqtcb_test.go:54: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmprcriqtcb_test.go:54: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmprcriqtcb_test.go:54:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmprcriqtcb_test.go:54:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    res := []string{}\n  \
    \  idx := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' || s[i]\
    \ == ',' {\n            if i != idx {\n                res = append(res, s[idx:i])\n\
    \            }\n            idx = i + 1\n        }\n    }\n    if idx < len(s)\
    \ {\n        res = append(res, s[idx:])\n    }\n    return res\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // write your code here\n\
    \    return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpbczuj_ob_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpbczuj_ob_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpbczuj_ob_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpbczuj_ob_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpbczuj_ob_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    ret := []string{}\n  \
    \  for _, i := range strings.Split(s, \" \") {\n        ret = append(ret, strings.Split(i,\
    \ \",\")...)\n    }\n    return ret\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8ova54n_test.go:17:23: undefined: strings

    /tmp/tmpz8ova54n_test.go:18:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return strings.Split(s,\
    \ \" \")\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknxww1v3_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var result []string\n\
    \    for _, word := range s {\n        result = append(result, string(word))\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpt4gljnld_test.go:41: expected '[Hi my name is John]', got\
    \ '[H i ,   m y   n a m e   i s   J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpt4gljnld_test.go:41: expected '[One two three four five\
    \ six]', got '[O n e ,   t w o ,   t h r e e ,   f o u r ,   f i v e ,   s i x]'\n\
    \    --- FAIL: TestWords_String/test_num__2 (0.00s)\n        tmpt4gljnld_test.go:41:\
    \ expected '[Hi my name]', got '[H i ,   m y   n a m e]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmpt4gljnld_test.go:41: expected '[One two three four five\
    \ six]', got '[O n e , ,   t w o ,   t h r e e ,   f o u r ,   f i v e ,   s i\
    \ x ,]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpt4gljnld_test.go:41:\
    \ expected '[ahmed gamal]', got '[a h m e d           ,   g a m a l]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Code here\n    return\
    \ nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpnuw3yqqx_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpnuw3yqqx_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpnuw3yqqx_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpnuw3yqqx_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpnuw3yqqx_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    word_list := []string{}\n\
    \    word := \"\"\n    for _, c := range s {\n        if string(c) == \" \" ||\
    \ string(c) == \",\" {\n            if word != \"\" {\n                word_list\
    \ = append(word_list, word)\n                word = \"\"\n            }\n    \
    \    } else {\n            word += string(c)\n        }\n    }\n    if word !=\
    \ \"\" {\n        word_list = append(word_list, word)\n    }\n    return word_list\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var res []string\n   \
    \ str := \"\"\n    for _, v := range s {\n        if v == ' ' || v == ',' {\n\
    \            res = append(res, str)\n            str = \"\"\n        } else {\n\
    \            str += string(v)\n        }\n    }\n    res = append(res, str)\n\
    \    return res\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpugc3qba9_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpugc3qba9_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpugc3qba9_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpugc3qba9_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpugc3qba9_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var first = true\n    var last = 0\n    for i, v := range s {\n        if\
    \ (v == ' ' || v == ',') && !first {\n            words = append(words, s[last:i])\n\
    \            last = i+1\n        }\n        first = false\n    }\n    words =\
    \ append(words, s[last:])\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpxg041xar_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmpxg041xar_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpxg041xar_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpxg041xar_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmpxg041xar_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var slice []string\n \
    \   word := \"\"\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            if word != \"\" {\n                slice = append(slice, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if word != \"\" {\n        slice = append(slice,\
    \ word)\n    }\n    return slice\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := []string{}\n\
    \    // your code here\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp9k7a7e2e_test.go:39: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp9k7a7e2e_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp9k7a7e2e_test.go:39: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp9k7a7e2e_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp9k7a7e2e_test.go:39: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: return a list\
    \ of the words in the string\n    return []string{}\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpq6ih09er_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpq6ih09er_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpq6ih09er_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpq6ih09er_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpq6ih09er_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var wordList []string\n\
    \    wordList = append(wordList, s)\n    fmt.Println(wordList)\n    return wordList\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[Hi, my name is John]\n[One, two, three, four, five, six]\n[Hi, my name]\n\
    [One,, two, three, four, five, six,]\n[]\n[ahmed     , gamal]\n--- FAIL: TestWords_String\
    \ (0.00s)\n    --- FAIL: TestWords_String/test_num__0 (0.00s)\n        tmpehc_xsg0_test.go:40:\
    \ expected '[Hi my name is John]', got '[Hi, my name is John]'\n    --- FAIL:\
    \ TestWords_String/test_num__1 (0.00s)\n        tmpehc_xsg0_test.go:40: expected\
    \ '[One two three four five six]', got '[One, two, three, four, five, six]'\n\
    \    --- FAIL: TestWords_String/test_num__2 (0.00s)\n        tmpehc_xsg0_test.go:40:\
    \ expected '[Hi my name]', got '[Hi, my name]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmpehc_xsg0_test.go:40: expected '[One two three four five\
    \ six]', got '[One,, two, three, four, five, six,]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpehc_xsg0_test.go:40: expected '[ahmed gamal]', got '[ahmed\
    \     , gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // type = []string\n \
    \   // initialize the type:\n    sl := []string{}\n    // or\n    // sl := make([]string,\
    \ 0)\n    // or\n    // sl := make([]string, initial_len)\n    // or\n    // sl\
    \ := make([]string, initial_len, capacity)\n    // ...\n    // sl = append(sl,\
    \ elem1, elem2)\n    // ...\n    // sl = append(sl, sl2...)\n\n    // type = string\n\
    \    // initialize the type:\n    s2 := \"\"\n    // or\n    // s2 := string(slice[:])\n\
    \    // or\n    // s2 := fmt.Sprintf(\"%s\", slice[:])\n    // or\n    // s2 :=\
    \ strings.Join(slice[:], \" \")\n    // or\n    // for _, elem := range slice\
    \ {\n    //    s2 += elem\n    // }\n    // ...\n    // s2 += elem\n    // ...\n\
    \    // s2 += string(elem1) + string(elem2)\n\n    fmt.Println(s)\n    fmt.Println(s2)\n\
    \    fmt.Println(sl)\n    return sl\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Hi, my name is John\n\n[]\nOne, two, three, four, five, six\n\n[]\nHi,\
    \ my name\n\n[]\nOne,, two, three, four, five, six,\n\n[]\n\n\n[]\nahmed     ,\
    \ gamal\n\n[]\n--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpvfrjwf0q_test.go:72: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpvfrjwf0q_test.go:72:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpvfrjwf0q_test.go:72: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpvfrjwf0q_test.go:72:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpvfrjwf0q_test.go:72: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   // TODO\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpp39lklb7_test.go:39: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpp39lklb7_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpp39lklb7_test.go:39: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpp39lklb7_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpp39lklb7_test.go:39: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // write your code here\n\
    \    var words []string\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmgi5y845_test.go:39: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmgi5y845_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmgi5y845_test.go:39: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmgi5y845_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmgi5y845_test.go:39: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \n    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpaamlu9o9_test.go:39: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpaamlu9o9_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpaamlu9o9_test.go:39: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpaamlu9o9_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpaamlu9o9_test.go:39: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // hint: strings.Split,\
    \ string.SplitAfter\n    return strings.Split(s, \" \")\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp314jh0g__test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073959
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var (\n        in_word\
    \ = false\n        result = make([]string, 0)\n        word = make([]byte, 0)\n\
    \    )\n    for _, c := range []byte(s) {\n        switch c {\n        case '\
    \ ':\n            if in_word {\n                result = append(result, string(word))\n\
    \                word = make([]byte, 0)\n                in_word = false\n   \
    \         }\n        case ',':\n            if in_word {\n                result\
    \ = append(result, string(word))\n                word = make([]byte, 0)\n   \
    \             in_word = false\n            }\n        default:\n            word\
    \ = append(word, c)\n            in_word = true\n        }\n    }\n    if in_word\
    \ {\n        result = append(result, string(word))\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return []string{}\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpevd9a7fo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpevd9a7fo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var start int\n    var end int\n    var slice string\n    var isStart bool\n\
    \    var isEnd bool\n    var isNew string\n    isStart = false\n    isEnd = false\n\
    \    isNew = \"\"\n    for i := 0; i < len(s); i++ {\n        isNew = string(s[i])\n\
    \        if (isNew == \" \" || isNew == \",\") && isStart == true {\n        \
    \    end = i\n            isEnd = true\n        }\n        if isStart == true\
    \ && isEnd == true {\n            slice = s[start:end]\n            words = append(words,\
    \ slice)\n            isStart = false\n            isEnd = false\n        }\n\
    \        if isNew != \" \" && isNew != \",\" && isStart == false {\n         \
    \   start = i\n            isStart = true\n        }\n    }\n    if isStart ==\
    \ true {\n        slice = s[start:len(s)]\n        words = append(words, slice)\n\
    \    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073960
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words = make([]string,\
    \ 0)\n    var word = \"\"\n    for _, char := range s {\n        if char == '\
    \ ' || char == ',' {\n            if word != \"\" {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(char)\n        }\n    }\n    if word != \"\" {\n       \
    \ words = append(words, word)\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073960
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    if len(s) == 0 {\n   \
    \     return []string{}\n    }\n    // TODO: Implement this function.\n    a :=\
    \ make([]string,0)\n    tmp := \"\"\n    i := 0\n    for i < len(s) {\n      \
    \  if s[i] == ' ' || s[i] == ',' {\n            if len(tmp) > 0 {\n          \
    \      a = append(a, tmp)\n                tmp = \"\"\n            }\n       \
    \ } else {\n            tmp += string(s[i])\n        }\n        i++\n    }\n \
    \   if len(tmp) > 0 {\n        a = append(a, tmp)\n    }\n    return a\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073960
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n\treturn\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6thp_an4_test.go:16:2:\
    \ not enough return values\n\thave ()\n\twant ([]string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073960
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   word := \"\"\n    inQuotes := false\n    for _, c := range s {\n        if\
    \ c == '\"' {\n            inQuotes = !inQuotes\n        } else if (c == ' ' ||\
    \ c == ',') && !inQuotes {\n            if word != \"\" {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if word != \"\"\
    \ {\n        words = append(words, word)\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073960
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // remove spaces and split\
    \ the string around commas and spaces\n    return nil\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp8obre3vh_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp8obre3vh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp8obre3vh_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp8obre3vh_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp8obre3vh_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073960
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    out := []string{}\n  \
    \  l := 0\n    for _, c := range s {\n        switch c {\n        case ' ', ',':\n\
    \            out = append(out, s[l:l+1])\n            l = 0\n        default:\n\
    \            l++\n        }\n    }\n    return out\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp0gqrw16k_test.go:48: expected '[Hi my name is John]', got\
    \ '[, H , m ,]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp0gqrw16k_test.go:48:\
    \ expected '[One two three four five six]', got '[, O , O t O   O   O]'\n    ---\
    \ FAIL: TestWords_String/test_num__2 (0.00s)\n        tmp0gqrw16k_test.go:48:\
    \ expected '[Hi my name]', got '[, H ,]'\n    --- FAIL: TestWords_String/test_num__3\
    \ (0.00s)\n        tmp0gqrw16k_test.go:48: expected '[One two three four five\
    \ six]', got '[, O O , O   O , O , O ,]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp0gqrw16k_test.go:48: expected '[ahmed gamal]', got '[  a\
    \ a a a a a]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073960
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words = make([]string,\
    \ 0)\n    word := \"\"\n    for _, c := range s {\n        if c == ' ' || c ==\
    \ ',' {\n            if word != \"\" {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if word != \"\" {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073960
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return a list of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpmtvp9swo_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpmtvp9swo_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073801
