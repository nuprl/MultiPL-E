language: go_test.go
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // O(n^2) time\n    // O(1) space\n    minSum := nums[0]\n    for\
    \ i, _ := range nums {\n        sum := 0\n        for j := i; j < len(nums); j++\
    \ {\n            sum += nums[j]\n            if sum < minSum {\n             \
    \   minSum = sum\n            }\n        }\n    }\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075310
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minS := nums[0]\n\
    \    curS := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curS = max(nums[i],\
    \ curS + nums[i])\n        minS = min(minS, curS)\n    }\n    return minS\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8lrwwic6_test.go:22:16: undefined: max

    /tmp/tmp8lrwwic6_test.go:23:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int = nums[0]\n    var sum int = nums[0]\n    var i int\
    \ = 1\n    var len int = len(nums)\n    for i < len {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n        i += 1\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp5ehou1yl_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp5ehou1yl_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp5ehou1yl_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp5ehou1yl_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp5ehou1yl_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp5ehou1yl_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp5ehou1yl_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp5ehou1yl_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    m := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < m {\n            m = sum\n \
    \       }\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    return\
    \ m\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp6yxt9xnz_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp6yxt9xnz_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp6yxt9xnz_test.go:54: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp6yxt9xnz_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6yxt9xnz_test.go:54: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp6yxt9xnz_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp6yxt9xnz_test.go:54: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp6yxt9xnz_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    minSum := 0\n    for _, num := range nums {\n     \
    \   sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpp10cmuov_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpp10cmuov_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpp10cmuov_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpp10cmuov_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpp10cmuov_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpp10cmuov_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min, csum := nums[0],\
    \ nums[0]\n    for i := 1; i < len(nums); i++ {\n        csum = minInt(csum +\
    \ nums[i], nums[i])\n        min = minInt(min, csum)\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzrw46xsl_test.go:21:16: undefined: minInt

    /tmp/tmpzrw46xsl_test.go:22:15: undefined: minInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    var minSum, curSum int\n    if n == 0 {\n   \
    \     return minSum\n    }\n    minSum = nums[0]\n    curSum = minSum\n    for\
    \ i := 1; i < n; i++ {\n        if curSum < 0 {\n            curSum = nums[i]\n\
    \        } else {\n            curSum += nums[i]\n        }\n        if curSum\
    \ < minSum {\n            minSum = curSum\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp5xbz114w_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp5xbz114w_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp5xbz114w_test.go:60: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp5xbz114w_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp5xbz114w_test.go:60: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp5xbz114w_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp5xbz114w_test.go:60: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp5xbz114w_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < min {\n            min = sum\n        }\n        if sum > 0 {\n      \
    \      sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    for _, v := range nums {\n        if v < minSum {\n            minSum = v\n\
    \        }\n    }\n    currentSum := minSum\n    for i, v := range nums {\n  \
    \      currentSum = v\n        for j := i + 1; j < len(nums); j++ {\n        \
    \    currentSum += nums[j]\n            if currentSum < minSum {\n           \
    \     minSum = currentSum\n            }\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075310
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    for i := 0; i < len(nums); i++ {\n       \
    \ if nums[i] < minSum {\n            minSum = nums[i]\n        }\n        sum\
    \ := nums[i]\n        for j := i + 1; j < len(nums); j++ {\n            sum +=\
    \ nums[j]\n            if sum < minSum {\n                minSum = sum\n     \
    \       }\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075310
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min_sum := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < min_sum\
    \ {\n                min_sum = sum\n            }\n        }\n    }\n    return\
    \ min_sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var (\n        minSum int\n        minLen int\n        total  int\n\
    \        j      int\n    )\n    minSum = total = nums[0]\n    minLen = 1\n   \
    \ for i := 1; i < len(nums); i++ {\n        total += nums[i]\n        if total\
    \ < minSum {\n            minSum = total\n            minLen = i + 1\n       \
    \ }\n        if total > 0 {\n            total = 0\n            j = i + 1\n  \
    \      }\n    }\n    fmt.Println(nums[j:minLen])\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgjtqvrjv_test.go:22:20: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075309
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < min {\n\
    \                min = sum\n            }\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    minSum := 1 << 31\n    for _, n := range nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n        sum += nums[i]\n\
    \    }\n    if min >= 0 {\n        return min\n    }\n    if max <= 0 {\n    \
    \    return max\n    }\n    min = sum\n    for i := 0; i < len(nums); i++ {\n\
    \        sum = 0\n        for j := i; j < len(nums); j++ {\n            sum +=\
    \ nums[j]\n            if sum < min {\n                min = sum\n           \
    \ }\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpf3nrsp4h_test.go:74: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    currentSum := 0\n    for _, value := range\
    \ nums {\n        currentSum += value\n        if currentSum < minSum {\n    \
    \        minSum = currentSum\n        }\n        if currentSum > 0 {\n       \
    \     currentSum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    total := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if total\
    \ < 0 {\n            total = nums[i]\n        } else {\n            total += nums[i]\n\
    \        }\n        if total < minSum {\n            minSum = total\n        }\n\
    \    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpmb952y6j_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpmb952y6j_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpmb952y6j_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpmb952y6j_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpmb952y6j_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpmb952y6j_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpmb952y6j_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpmb952y6j_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var (\n        curSum, minSum = 0, nums[0]\n    )\n    for _, v :=\
    \ range nums {\n        curSum += v\n        if minSum > curSum {\n          \
    \  minSum = curSum\n        }\n        if curSum > 0 {\n            curSum = 0\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    for i := 0; i < len(nums); i++ {\n        var\
    \ sum int\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n\
    \            if i == j {\n                minSum = sum\n            } else if\
    \ sum < minSum {\n                minSum = sum\n            }\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7mto2kdo_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp7mto2kdo_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp7mto2kdo_test.go:55: expected '%!s(int=-14)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp7mto2kdo_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp7mto2kdo_test.go:55: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7mto2kdo_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp7mto2kdo_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp7mto2kdo_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    minSum := nums[0]\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075310
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    i, j := 0, 1\n    length := len(nums)\n    sum := nums[0]\n    var\
    \ minSum int\n    if sum < 0 {\n        minSum = sum\n    } else {\n        minSum\
    \ = 0\n    }\n    for j < length {\n        if sum + nums[j] > minSum {\n    \
    \        minSum = sum + nums[j]\n        }\n        if sum + nums[j] > 0 {\n \
    \           sum += nums[j]\n            j += 1\n        } else {\n           \
    \ sum = nums[j]\n            j += 1\n            i = j\n        }\n    }\n   \
    \ return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp685696a1_test.go:16:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var windowSum int\n    var minWindowSum int\n    var windowStart\
    \ int\n    var windowEnd int\n    for windowEnd < len(nums) {\n        windowSum\
    \ += nums[windowEnd]\n        for windowSum > 0 {\n            if minWindowSum\
    \ == 0 || windowSum < minWindowSum {\n                minWindowSum = windowSum\n\
    \            }\n            windowSum -= nums[windowStart]\n            windowStart++\n\
    \        }\n        windowEnd++\n    }\n    return minWindowSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp6u2a3vd__test.go:58: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp6u2a3vd__test.go:58:\
    \ expected '%!s(int=-14)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmp6u2a3vd__test.go:58: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n   \
    \     tmp6u2a3vd__test.go:58: expected '%!s(int=0)', got '%!s(int=10)'\n    ---\
    \ FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp6u2a3vd__test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6u2a3vd__test.go:58: expected '%!s(int=-6)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6u2a3vd__test.go:58:\
    \ expected '%!s(int=-33)', got '%!s(int=100)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp6u2a3vd__test.go:58: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp6u2a3vd__test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min_sum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min_sum {\n            min_sum = sum\n        }\n        if\
    \ sum < 0 {\n            sum = 0\n        }\n    }\n    return min_sum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvpz1wy9q_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvpz1wy9q_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvpz1wy9q_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpvpz1wy9q_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpvpz1wy9q_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpvpz1wy9q_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpvpz1wy9q_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpvpz1wy9q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // 1. find any solution:\n    // - choose a starting element\n  \
    \  // - choose a ending element\n    // - compute the sum, record the min and\
    \ max sum.\n    // The above algorithm is brute force, which will result in a\
    \ non-optimal solution.\n    // The runtime complexity is O(n^2).\n    min :=\
    \ nums[0]\n    for start := 0; start < len(nums); start++ {\n        for end :=\
    \ start + 1; end < len(nums); end++ {\n            sum := 0\n            for i\
    \ := start; i < end; i++ {\n                sum += nums[i]\n            }\n  \
    \          if sum < min {\n                min = sum\n            }\n        }\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpmtpaesnd_test.go:61: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpmtpaesnd_test.go:61:\
    \ expected '%!s(int=-14)', got '%!s(int=-6)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpmtpaesnd_test.go:61: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // kadane's algorithm\n    sum := 0\n    min := 0\n    for _, n :=\
    \ range nums {\n        sum += n\n        if sum < min {\n            min = sum\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpcdncjx6s_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpcdncjx6s_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpcdncjx6s_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpcdncjx6s_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpcdncjx6s_test.go:52: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpcdncjx6s_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075310
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum < 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpz4yz8m59_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz4yz8m59_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    dp := make([]int,\
    \ len(nums))\n    dp[0] = nums[0]\n    for i := 1; i < len(nums); i++ {\n    \
    \    if dp[i-1] > 0 {\n            dp[i] = nums[i]\n        } else {\n       \
    \     dp[i] = dp[i-1] + nums[i]\n        }\n    }\n    min := dp[0]\n    for i\
    \ := 1; i < len(dp); i++ {\n        if dp[i] < min {\n            min = dp[i]\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075311
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    max_so_far := min\n\
    \    max_ending_here := min\n    for i := 1; i < len(nums); i++ {\n        max_ending_here\
    \ = max(nums[i], max_ending_here + nums[i])\n        max_so_far = max(max_so_far,\
    \ max_ending_here)\n        min = min(min, max_so_far)\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_5znrsyp_test.go:26:27: undefined: max

    /tmp/tmp_5znrsyp_test.go:27:22: undefined: max

    /tmp/tmp_5znrsyp_test.go:28:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < minSum {\n            minSum\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpdwcjxftk_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpdwcjxftk_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpdwcjxftk_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    m, s := 0, 0\n    for _, n := range nums {\n        s += n\n    \
    \    if s < m {\n            m = s\n        }\n    }\n    return m\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp6iral3qn_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp6iral3qn_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp6iral3qn_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6iral3qn_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp6iral3qn_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp6iral3qn_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min, current := nums[0], nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        current = max(nums[i], current + nums[i])\n        min = min(min,\
    \ current)\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1otcgz3d_test.go:18:19: undefined: max

    /tmp/tmp1otcgz3d_test.go:19:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int = 0\n    var currentSum int = 0\n    for i := 0; i\
    \ < len(nums); i++ {\n        currentSum += nums[i]\n        if currentSum < minSum\
    \ {\n            minSum = currentSum\n        }\n    }\n    return minSum\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpsnw5hd0x_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpsnw5hd0x_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpsnw5hd0x_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpsnw5hd0x_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpsnw5hd0x_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpsnw5hd0x_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    min_sum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min_sum {\n            min_sum = sum\n        }\n        if\
    \ sum < 0 {\n            sum = 0\n        }\n    }\n    return min_sum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvlijpx9v_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvlijpx9v_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvlijpx9v_test.go:57: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpvlijpx9v_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpvlijpx9v_test.go:57: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpvlijpx9v_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpvlijpx9v_test.go:57: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpvlijpx9v_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    maxSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums); i++\
    \ {\n        sum += nums[i]\n        if sum > maxSum {\n            maxSum = sum\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    if minSum >= 0 {\n        return minSum\n    }\n    if maxSum <= 0\
    \ {\n        return maxSum\n    }\n    return abs(minSum)\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_wfl0wwo_test.go:37:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var (\n        t, m int\n    )\n    t = 0\n    m = nums[0]\n    for\
    \ _, v := range nums {\n        t += v\n        if t < m {\n            m = t\n\
    \        }\n        if t > 0 {\n            t = 0\n        }\n    }\n    return\
    \ m\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075313
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    dp := make([]int,\
    \ len(nums))\n    dp[0] = nums[0]\n    minSum := dp[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        dp[i] = max(dp[i-1] + nums[i], nums[i])\n        minSum = min(minSum,\
    \ dp[i])\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdleigofq_test.go:23:17: undefined: max

    /tmp/tmpdleigofq_test.go:24:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum, minSum := 0, 0\n    for _, num := range nums {\n        sum\
    \ += num\n        if sum < minSum {\n            minSum = sum\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpyk5x6zyf_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpyk5x6zyf_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpyk5x6zyf_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpyk5x6zyf_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpyk5x6zyf_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpyk5x6zyf_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for _, n := range nums {\n        if n < min\
    \ {\n            min = n\n        }\n    }\n    curr := 0\n    for _, n := range\
    \ nums {\n        curr += n\n        if curr < min {\n            min = curr\n\
    \        }\n        if curr > 0 {\n            curr = 0\n        }\n    }\n  \
    \  return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    currentSum := nums[0]\n\
    \    result := currentSum\n    for _, n := range nums[1:] {\n        if currentSum\
    \ < 0 {\n            currentSum = n\n        } else {\n            currentSum\
    \ += n\n        }\n        if currentSum < result {\n            result = currentSum\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpka1aox3t_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpka1aox3t_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpka1aox3t_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpka1aox3t_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpka1aox3t_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpka1aox3t_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpka1aox3t_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpka1aox3t_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    size := len(nums)\n    if size == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    for i := 0; i < size; i++ {\n        sum := 0\n     \
    \   for j := i; j < size; j++ {\n            sum += nums[j]\n            if sum\
    \ < min {\n                min = sum\n            }\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    curSum := 0\n    for _, n := range nums {\n\
    \        curSum += n\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n        if curSum > 0 {\n            curSum = 0\n        }\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    result := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums) - i;\
    \ j++ {\n            v := nums[j]\n            for k := 1; k <= i; k++ {\n   \
    \             v += nums[j + k]\n            }\n            if v < result {\n \
    \               result = v\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    start := 0\n    end := 0\n    s := 0\n    minSum\
    \ := 0\n    for i := 0; i < n; i++ {\n        s += nums[i]\n        if s < minSum\
    \ {\n            minSum = s\n            end = i\n            start = end\n  \
    \      }\n        for s > 0 {\n            s -= nums[start]\n            start++\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpb8fb8hn2_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpb8fb8hn2_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-8)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpb8fb8hn2_test.go:60: expected '%!s(int=-6)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpb8fb8hn2_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpb8fb8hn2_test.go:60: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    min := nums[0]\n    for _, v := range nums {\n    \
    \    sum += v\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    res := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < res {\n            res = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n        }\n    }\n    return res\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min, sum := nums[0],\
    \ nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n    \
    \    if sum < min {\n            min = sum\n        }\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp8fgmsbtr_test.go:56: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8fgmsbtr_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp8fgmsbtr_test.go:56: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if nums[i] < sum {\n            sum = nums[i]\n        }\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    subArraySum := make([]int, len(nums)\
    \ + 1)\n    for i := 1; i < len(subArraySum); i++ {\n        subArraySum[i] =\
    \ subArraySum[i - 1] + nums[i - 1]\n    }\n    minSum := subArraySum[1]\n    for\
    \ i := 0; i < len(subArraySum); i++ {\n        for j := i + 1; j < len(subArraySum);\
    \ j++ {\n            if subArraySum[j] - subArraySum[i] < minSum {\n         \
    \       minSum = subArraySum[j] - subArraySum[i]\n            }\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075313
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    p1, p2 := 0, 0\n\
    \    min := nums[0]\n    sum := 0\n    for p2 < len(nums) {\n        sum += nums[p2]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum >= 0\
    \ {\n            p2++\n            continue\n        }\n        for p1 < p2 &&\
    \ sum < 0 {\n            sum -= nums[p1]\n            p1++\n        }\n      \
    \  p2++\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpglrcs34m_test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpglrcs34m_test.go:64:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpglrcs34m_test.go:64: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpglrcs34m_test.go:64:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpglrcs34m_test.go:64: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpglrcs34m_test.go:64:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpglrcs34m_test.go:64: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpglrcs34m_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075313
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var sum, min int\n    min = -1\n\n    for i := 0; i < len(nums);\
    \ i++ {\n        sum = 0\n        for j := i; j < len(nums); j++ {\n         \
    \   sum += nums[j]\n            if min == -1 || sum < min {\n                min\
    \ = sum\n            }\n        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    var min int = nums[0]\n\
    \    var sum int = nums[0]\n    var i int = 1\n    for ; i < len(nums); i++ {\n\
    \        if sum + nums[i] >= nums[i] {\n            sum += nums[i]\n        }\
    \ else {\n            sum = nums[i]\n        }\n        if sum < min {\n     \
    \       min = sum\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpj2irjxi0_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpj2irjxi0_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpj2irjxi0_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpj2irjxi0_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpj2irjxi0_test.go:59: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpj2irjxi0_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpj2irjxi0_test.go:59: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpj2irjxi0_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    max := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < max {\n            max = sum\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7eyxdc2c_test.go:54: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7eyxdc2c_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp7eyxdc2c_test.go:54: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp7eyxdc2c_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp7eyxdc2c_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    sums\
    \ := make([]int, n)\n    sums[0] = nums[0]\n    min := sums[0]\n    for i := 1;\
    \ i < n; i++ {\n        sums[i] = sums[i-1] + nums[i]\n        if sums[i] < min\
    \ {\n            min = sums[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            s := sums[j] - sums[i] + nums[i]\n\
    \            if s < min {\n                min = s\n            }\n        }\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjs851k22_test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpjs851k22_test.go:64:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpjs851k22_test.go:64: expected '%!s(int=-33)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpjs851k22_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min, sum := 0, 0\n    for _, v := range nums {\n        sum += v\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphhc3ulsq_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmphhc3ulsq_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmphhc3ulsq_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmphhc3ulsq_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmphhc3ulsq_test.go:50: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmphhc3ulsq_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    curSum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if curSum < 0 {\n            curSum = nums[i]\n        } else\
    \ {\n            curSum += nums[i]\n        }\n        if curSum < minSum {\n\
    \            minSum = curSum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp_qslbru7_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp_qslbru7_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    dp := make([]int, n)\n    dp[0] = nums[0]\n \
    \   ans := dp[0]\n    for i := 1; i < n; i++ {\n        if dp[i-1] > 0 {\n   \
    \         dp[i] = nums[i]\n        } else {\n            dp[i] = dp[i-1] + nums[i]\n\
    \        }\n        ans = min(ans, dp[i])\n    }\n    return ans\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8eo6r8v_test.go:26:15: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075314
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    sum := 0\n    for _, v := range nums {\n       \
    \ sum += v\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSum =\
    \ min(curSum + nums[i], nums[i])\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsulcqw3_test.go:22:18: undefined: min

    /tmp/tmphsulcqw3_test.go:23:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    sum := 0\n    for _, num := range nums {\n     \
    \   sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp8nbcizn1_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8nbcizn1_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp8nbcizn1_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8nbcizn1_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp8nbcizn1_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp8nbcizn1_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    length := len(nums)\n    if length == 0 {\n        return 0\n   \
    \ }\n    minSum := nums[0]\n    maxSum := nums[0]\n    sum := 0\n    for i :=\
    \ 0; i < length; i++ {\n        num := nums[i]\n        sum += num\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n        if num > maxSum\
    \ {\n            maxSum = num\n        }\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    if minSum == 0 {\n        return maxSum\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp3ax62t7e_test.go:66: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := 0\n    for i := 0; i < len(nums); i++ {\n        sum := 0\n\
    \        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n      \
    \      if min > sum || min == 0 {\n                min = sum\n            }\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp2whisvzx_test.go:53: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660075315
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    minSubArray := nums[0]\n\
    \    curSubArray := nums[0]\n    for i := 1; i < len(nums); i++ {\n        curSubArray\
    \ = min(curSubArray + nums[i], nums[i])\n        minSubArray = min(minSubArray,\
    \ curSubArray)\n    }\n    return minSubArray\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfvxs52z_test.go:22:23: undefined: min

    /tmp/tmpnfvxs52z_test.go:23:23: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075315
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    var sub []int\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i; j < len(nums); j++ {\n            sub = append(sub,\
    \ nums[j])\n            sum := 0\n            for _, num := range sub {\n    \
    \            sum += num\n            }\n            if sum < min {\n         \
    \       min = sum\n            }\n        }\n        sub = nil\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075316
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    acc := 0\n    result\
    \ := nums[0]\n    for _, n := range nums {\n        acc += n\n        if acc <\
    \ result {\n            result = acc\n        }\n        if acc > 0 {\n      \
    \      acc = 0\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075316
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for i := 0; i < len(nums); i++ {\n        for\
    \ j := i; j < len(nums); j++ {\n            sum := 0\n            for k := i;\
    \ k <= j; k++ {\n                sum += nums[k]\n            }\n            if\
    \ sum < min {\n                min = sum\n            }\n        }\n    }\n  \
    \  return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075316
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := 0x7fffffff\n    curr := 0\n    for _, num := range nums {\n\
    \        curr += num\n        if curr < min {\n            min = curr\n      \
    \  }\n        if curr > 0 {\n            curr = 0\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075316
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    min := nums[0]\n    s := 0\n    for i := 0; i\
    \ < n; i++ {\n        s += nums[i]\n        if s < min {\n            min = s\n\
    \        }\n        if s > 0 {\n            s = 0\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min, sum := nums[0], nums[0]\n    for\
    \ i := 1; i < len(nums); i++ {\n        if sum + nums[i] > nums[i] {\n       \
    \     sum += nums[i]\n        } else {\n            sum = nums[i]\n        }\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp32dkftdi_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp32dkftdi_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp32dkftdi_test.go:60: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp32dkftdi_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp32dkftdi_test.go:60: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp32dkftdi_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp32dkftdi_test.go:60: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp32dkftdi_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min_sum := nums[0]\n\
    \    cur_sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        cur_sum\
    \ = min(cur_sum + nums[i], nums[i])\n        min_sum = min(min_sum, cur_sum)\n\
    \    }\n    return min_sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpncbrgywd_test.go:22:19: undefined: min

    /tmp/tmpncbrgywd_test.go:23:19: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075315
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min int = nums[0]\n    var i, j int = 0, 0\n    var sum int =\
    \ 0\n    for i = 0; i < len(nums); i++ {\n        for j = i; j < len(nums); j++\
    \ {\n            sum += nums[j]\n            if sum < min {\n                min\
    \ = sum\n            }\n        }\n        sum = 0\n    }\n    return min\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075316
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    var minSum int = nums[0]\n    var curSum\
    \ int = nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum > 0 {\n\
    \            curSum = nums[i]\n        } else {\n            curSum += nums[i]\n\
    \        }\n        if curSum < minSum {\n            minSum = curSum\n      \
    \  }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min int\n    min = nums[0]\n    for i := 0; i < len(nums); i++\
    \ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j]\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n        if nums[i] < min {\n            min = nums[i]\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpyqz69kmx_test.go:55: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpyqz69kmx_test.go:55:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpyqz69kmx_test.go:55: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpyqz69kmx_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // The minimum sub-array sum, and the sum of the current sub-array\
    \ being\n    // considered.\n    minSum, sum := 0, 0\n    // Loop through the\
    \ sub-arrays from the first element to the last.\n    for i := 0; i < len(nums);\
    \ i++ {\n        // Set sum to the first element in the sub-array.\n        sum\
    \ = nums[i]\n        // If the current sub-array sum is less than the minimum\
    \ sum, update\n        // it.\n        if sum < minSum {\n            minSum =\
    \ sum\n        }\n        // Loop through the elements in the sub-array.\n   \
    \     for j := i + 1; j < len(nums); j++ {\n            // Add the element to\
    \ the current sub-array sum.\n            sum += nums[j]\n            // If the\
    \ current sub-array sum is less than the minimum sum, update\n            // it.\n\
    \            if sum < minSum {\n                minSum = sum\n            }\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpw1exuhhf_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpw1exuhhf_test.go:66:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpw1exuhhf_test.go:66: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpq35f_f6x_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpq35f_f6x_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var prev, curr, min int\n    prev = 0\n    curr = 0\n    min = nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        curr += nums[i]\n        if curr\
    \ < min {\n            min = curr\n        }\n        if curr > prev {\n     \
    \       prev = curr\n        }\n        if curr <= 0 {\n            curr = 0\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphrfx1ik6_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmphrfx1ik6_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmphrfx1ik6_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmphrfx1ik6_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmphrfx1ik6_test.go:59: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmphrfx1ik6_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmphrfx1ik6_test.go:59: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmphrfx1ik6_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    min_sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if min_sum\
    \ > 0 {\n            min_sum = nums[i]\n        } else {\n            min_sum\
    \ += nums[i]\n        }\n        if min_sum < min {\n            min = min_sum\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    sum := 0\n    for _, v := range nums {\n       \
    \ sum += v\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := 0\n    minSum := 0\n    for i, n := range nums {\n       \
    \ if i == 0 {\n            min = n\n            minSum = n\n        } else {\n\
    \            minSum += n\n            if minSum < min {\n                min =\
    \ minSum\n            }\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmprs7hzfgb_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprs7hzfgb_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmprs7hzfgb_test.go:56: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmprs7hzfgb_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmprs7hzfgb_test.go:56: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for i := 1; i < len(nums); i++ {\n        if nums[i] > 0 {\n            break\n\
    \        }\n        if nums[i] < sum {\n            sum = nums[i]\n        }\n\
    \    }\n    for _, v := range nums {\n        if v < 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp14ex8hj9_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp14ex8hj9_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp14ex8hj9_test.go:60: expected '%!s(int=-14)', got '%!s(int=-19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp14ex8hj9_test.go:60:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp14ex8hj9_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-14)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp14ex8hj9_test.go:60: expected '%!s(int=-6)', got '%!s(int=-14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp14ex8hj9_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp14ex8hj9_test.go:60: expected '%!s(int=-33)', got '%!s(int=-69)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp14ex8hj9_test.go:60:\
    \ expected '%!s(int=-10)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp14ex8hj9_test.go:60: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    for index, number := range nums {\n        minSum\
    \ += number\n        sum := number\n        for subIndex := index + 1; subIndex\
    \ < len(nums); subIndex++ {\n            sum += nums[subIndex]\n            if\
    \ sum < minSum {\n                minSum = sum\n            }\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp2upp5v0i_test.go:54: expected '%!s(int=1)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp2upp5v0i_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp2upp5v0i_test.go:54: expected '%!s(int=-14)', got '%!s(int=-27)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp2upp5v0i_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp2upp5v0i_test.go:54: expected '%!s(int=3)', got '%!s(int=11)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp2upp5v0i_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    best := nums[0]\n\
    \    cur := nums[0]\n    for i := 1; i < len(nums); i++ {\n        cur = min(cur+nums[i],\
    \ nums[i])\n        best = min(best, cur)\n    }\n    return best\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76aqgfuu_test.go:22:15: undefined: min

    /tmp/tmp76aqgfuu_test.go:23:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075316
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    currSum := nums[0]\n\
    \    minSum := currSum\n    for i := 1; i < len(nums); i++ {\n        if currSum\
    \ < 0 {\n            currSum = nums[i]\n        } else {\n            currSum\
    \ += nums[i]\n        }\n        if currSum < minSum {\n            minSum = currSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppa1_i9ar_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppa1_i9ar_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppa1_i9ar_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmppa1_i9ar_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppa1_i9ar_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmppa1_i9ar_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmppa1_i9ar_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmppa1_i9ar_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // initialize the current sum and minimum sum\n    currSum, minSum\
    \ := 0, 0\n    // iterate through the numbers\n    for _, num := range nums {\n\
    \        // add the current number to the current sum\n        currSum += num\n\
    \        // check if the current sum is smaller than the previous minimum sum\n\
    \        if currSum < minSum {\n            // if so, update the minimum sum\n\
    \            minSum = currSum\n        }\n    }\n    // return the minimum sum\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqv0bf94_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpbqv0bf94_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpbqv0bf94_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpbqv0bf94_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpbqv0bf94_test.go:56: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqv0bf94_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    curSum := 0\n    for _, v := range nums {\n\
    \        curSum += v\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n        if curSum > 0 {\n            curSum = 0\n        }\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075317
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum\
    \ < 0 {\n            curSum = nums[i]\n        } else {\n            curSum +=\
    \ nums[i]\n        }\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmphov5wylj_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmphov5wylj_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    minSum -= 1\n    currentSum := 0\n    for _, num\
    \ := range nums {\n        currentSum += num\n        if currentSum < minSum {\n\
    \            minSum = currentSum\n        }\n        if currentSum > 0 {\n   \
    \         currentSum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkwnwovwf_test.go:55: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpkwnwovwf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpkwnwovwf_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpkwnwovwf_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075317
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    minEnd := 0\n    for _, v := range nums {\n    \
    \    minEnd = min(minEnd + v, v)\n        minSum = min(minSum, minEnd)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6kfktjt_test.go:19:18: undefined: min

    /tmp/tmp_6kfktjt_test.go:20:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075317
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min int\n    min = 999999999\n    var sum int\n    sum = 0\n\
    \    if len(nums) == 0 {\n        return 0\n    } else if len(nums) == 1 {\n \
    \       return nums[0]\n    } else {\n        for i := 0; i < len(nums); i++ {\n\
    \            for j := i; j < len(nums); j++ {\n                sum += nums[j]\n\
    \                if min > sum {\n                    min = sum\n             \
    \   }\n            }\n            sum = 0\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var minSum int\n    for _, v := range nums {\n        if minSum >\
    \ v {\n            minSum = v\n        }\n    }\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbot053ei_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbot053ei_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbot053ei_test.go:49: expected '%!s(int=-14)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbot053ei_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbot053ei_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbot053ei_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpbot053ei_test.go:49: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpxv0apoow_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxv0apoow_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min, sum int\n    min = nums[0]\n    sum = 0\n    for _, value\
    \ := range nums {\n        sum += value\n        if sum < min {\n            min\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    size := len(nums)\n    if size < 1 {\n        return 0\n    }\n \
    \   min := nums[0]\n    sum := 0\n    for i := 0; i < size; i++ {\n        sum\
    \ += nums[i]\n        if sum < min {\n            min = sum\n        }\n     \
    \   if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    min := nums[0]\n    for _, n := range nums {\n    \
    \    sum += n\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := int(^uint(0) >> 1)\n    for i, _ := range nums {\n       \
    \ sum := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n\
    \            if sum < min {\n                min = sum\n            }\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    for i := 0; i <\
    \ len(nums); i++ {\n        if nums[i] < min {\n            min = nums[i]\n  \
    \      }\n        sum := nums[i]\n        for j := i + 1; j < len(nums); j++ {\n\
    \            sum += nums[j]\n            if sum < min {\n                min =\
    \ sum\n            }\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sub_sum, min_sum\
    \ := 0, nums[0]\n    for _, v := range nums {\n        sub_sum += v\n        if\
    \ sub_sum < min_sum {\n            min_sum = sub_sum\n        }\n        if sub_sum\
    \ > 0 {\n            sub_sum = 0\n        }\n    }\n    return min_sum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    sum := 0\n    for _, n := range nums {\n       \
    \ sum += n\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpqms8xzkd_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpqms8xzkd_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpqms8xzkd_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpqms8xzkd_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpqms8xzkd_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpqms8xzkd_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    cur := nums[0]\n\
    \    for i := 1; i < len(nums); i++ {\n        if cur > 0 {\n            cur =\
    \ nums[i]\n        } else {\n            cur += nums[i]\n        }\n        if\
    \ cur < min {\n            min = cur\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    for i := 1; i < len(nums); i++ {\n        sum := nums[i]\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        for j := i - 1; j >=\
    \ 0; j-- {\n            sum += nums[j]\n            if sum < minSum {\n      \
    \          minSum = sum\n            }\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var (\n        i = 0\n        j = 1\n        ret = nums[0]\n    \
    \    sum = nums[0]\n    )\n    for j < len(nums) {\n        sum += nums[j]\n \
    \       if nums[j] > sum {\n            i = j\n            sum = nums[j]\n   \
    \     }\n        if sum < ret {\n            ret = sum\n        }\n        j++\n\
    \    }\n    return ret\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpym4m2qwi_test.go:17:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum\
    \ {\n                minSum = sum\n            }\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075116
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    current := 0\n    for _, v := range nums {\n\
    \        current += v\n        if current < min {\n            min = current\n\
    \        }\n        if current > 0 {\n            current = 0\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // n - length of the list\n    n := len(nums)\n    // Initialize\
    \ an array to hold the current minimum sum of each sub-list ending\n    // with\
    \ the i-th number\n    minSum := make([]int, n)\n    // Set the initial value\
    \ of the minimum sum of sub-list containing the first\n    // number\n    minSum[0]\
    \ = nums[0]\n    // Iterate over the list of numbers and update the minimum sum\
    \ of the current\n    // sub-list ending with the i-th number\n    for i := 1;\
    \ i < n; i++ {\n        // If the sum of the current sub-list ending with the\
    \ i-th number is less\n        // than the sum of the previous sub-list ending\
    \ with the i-1-th number\n        // then the sum of the current sub-list becomes\
    \ the minimum sum for the\n        // i-th number\n        if minSum[i-1] > 0\
    \ {\n            minSum[i] = nums[i]\n        } else {\n            minSum[i]\
    \ = minSum[i-1] + nums[i]\n        }\n    }\n    // Sort the list of minimum sub-list\
    \ sums\n    quickSort(minSum, 0, n-1)\n    // Return the minimum sub-list sum\n\
    \    return minSum[0]\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqpas61y_test.go:38:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        for j := i; j < len(nums); j++\
    \ {\n            sum := sumSlice(nums[i:j])\n            if sum < min {\n    \
    \            min = sum\n            }\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_zr8320_test.go:22:20: undefined: sumSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075318
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    current_sum := nums[0]\n    min_sum\
    \ := current_sum\n    for i := 1; i < len(nums); i++ {\n        num := nums[i]\n\
    \        current_sum = current_sum + num\n        if current_sum < num {\n   \
    \         current_sum = num\n        }\n        if current_sum < min_sum {\n \
    \           min_sum = current_sum\n        }\n    }\n    return min_sum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp6exb92q9_test.go:61: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp6exb92q9_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp6exb92q9_test.go:61: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp6exb92q9_test.go:61:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6exb92q9_test.go:61: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp6exb92q9_test.go:61:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp6exb92q9_test.go:61: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp6exb92q9_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, value := range nums {\n\
    \        sum += value\n        if sum < min {\n            min = sum\n       \
    \ }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    cumSum\
    \ := make([]int, n+1)\n    for i := 0; i < n; i++ {\n        cumSum[i+1] = cumSum[i]\
    \ + nums[i]\n    }\n    // cumSum[i] = sum(nums[:i])\n    minSum := cumSum[1]\n\
    \    minIdx := 0\n    for i := 1; i <= n; i++ {\n        if cumSum[i] - cumSum[minIdx]\
    \ < minSum {\n            minSum = cumSum[i] - cumSum[minIdx]\n        }\n   \
    \     if cumSum[i] < cumSum[minIdx] {\n            minIdx = i\n        }\n   \
    \ }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpciupmifk_test.go:62: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpciupmifk_test.go:62:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpciupmifk_test.go:62: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpciupmifk_test.go:62:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpciupmifk_test.go:62: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpciupmifk_test.go:62:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpciupmifk_test.go:62: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpciupmifk_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075319
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    min := nums[0]\n    max := nums[0]\n\
    \    for _, v := range nums {\n        if v < min {\n            min = v\n   \
    \     }\n        if v > max {\n            max = v\n        }\n    }\n    // fmt.Println(min,\
    \ max)\n    minResult := max\n    for i := min; i <= max; i++ {\n        temp\
    \ := 0\n        for _, v := range nums {\n            temp += v - i\n        }\n\
    \        if temp < minResult {\n            minResult = temp\n        }\n    }\n\
    \    return minResult\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpidtl0s3h_test.go:70: expected '%!s(int=1)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpidtl0s3h_test.go:70:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpidtl0s3h_test.go:70: expected '%!s(int=-14)', got '%!s(int=-24)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpidtl0s3h_test.go:70:\
    \ expected '%!s(int=0)', got '%!s(int=-2999970)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpidtl0s3h_test.go:70: expected '%!s(int=-6)', got '%!s(int=-51)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpidtl0s3h_test.go:70:\
    \ expected '%!s(int=-6)', got '%!s(int=-501)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpidtl0s3h_test.go:70: expected '%!s(int=3)', got '%!s(int=-29)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpidtl0s3h_test.go:70:\
    \ expected '%!s(int=-33)', got '%!s(int=-504)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpidtl0s3h_test.go:70: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum, minSum := 0, nums[0]\n    for _, n := range nums {\n       \
    \ sum += n\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \       if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    l := len(nums)\n    min := nums[0]\n    sum := nums[0]\n    for i\
    \ := 1; i < l; i++ {\n        if nums[i] > sum + nums[i] {\n            sum =\
    \ nums[i]\n        } else {\n            sum += nums[i]\n        }\n        if\
    \ sum < min {\n            min = sum\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpilonu0ze_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpilonu0ze_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpilonu0ze_test.go:56: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpilonu0ze_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpilonu0ze_test.go:56: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpilonu0ze_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpilonu0ze_test.go:56: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpilonu0ze_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075320
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSubSum := nums[0]\n\
    \    currentSubSum := nums[0]\n    for _, v := range nums[1:] {\n        currentSubSum\
    \ = min(currentSubSum + v, v)\n        minSubSum = min(minSubSum, currentSubSum)\n\
    \    }\n    return minSubSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnyfkq0po_test.go:22:25: undefined: min

    /tmp/tmpnyfkq0po_test.go:23:21: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075319
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    result := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < result {\n            result = sum\n        }\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075320
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    currentSum := nums[0]\n    for i := 1; i <\
    \ len(nums); i++ {\n        if currentSum < 0 {\n            currentSum = nums[i]\n\
    \        } else {\n            currentSum += nums[i]\n        }\n        if currentSum\
    \ < minSum {\n            minSum = currentSum\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9uoaz9ny_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp9uoaz9ny_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp9uoaz9ny_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp9uoaz9ny_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp9uoaz9ny_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp9uoaz9ny_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp9uoaz9ny_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp9uoaz9ny_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min_sum := nums[0]\n\
    \    cur_sum := 0\n    for _, num := range nums {\n        cur_sum += num\n  \
    \      if cur_sum < min_sum {\n            min_sum = cur_sum\n        }\n    \
    \    if cur_sum > 0 {\n            cur_sum = 0\n        }\n    }\n    return min_sum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6o50g5b2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6o50g5b2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpi426iokn_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpi426iokn_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpi426iokn_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSub := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSub {\n            minSub = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSub\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := 0\n    for _, e := range nums {\n        if e < min {\n  \
    \          min = e\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpyz77lpcs_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpyz77lpcs_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpyz77lpcs_test.go:49: expected '%!s(int=-14)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpyz77lpcs_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpyz77lpcs_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpyz77lpcs_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpyz77lpcs_test.go:49: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var min = nums[0]\n    var cur = nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if cur < 0 {\n            cur = nums[i]\n        } else {\n \
    \           cur += nums[i]\n        }\n        if cur < min {\n            min\
    \ = cur\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp90tu2ik5_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp90tu2ik5_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp90tu2ik5_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp90tu2ik5_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp90tu2ik5_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp90tu2ik5_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp90tu2ik5_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp90tu2ik5_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    for i := 0; i < len(nums); i++ {\n       \
    \ for j := i; j < len(nums); j++ {\n            if i == j {\n                continue\n\
    \            }\n            sum := nums[i]\n            for k := i + 1; k <= j;\
    \ k++ {\n                sum += nums[k]\n            }\n            if sum < minSum\
    \ {\n                minSum = sum\n            }\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpk4kz0yrv_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpk4kz0yrv_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpk4kz0yrv_test.go:58: expected '%!s(int=-33)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpk4kz0yrv_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    if len(nums) == 1 {\n\
    \        return sum\n    }\n    for i := 1; i < len(nums); i++ {\n        if nums[i]\
    \ < sum {\n            sum = nums[i]\n        }\n        if nums[i] + sum > nums[i]\
    \ {\n            sum += nums[i]\n        }\n        if sum < minSum {\n      \
    \      minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp34i46i9r_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp34i46i9r_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp34i46i9r_test.go:59: expected '%!s(int=-14)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp34i46i9r_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp34i46i9r_test.go:59: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp34i46i9r_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, n := range nums {\n    \
    \    sum += n\n        if sum < min {\n            min = sum\n        }\n    \
    \    if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    maxEndingHere := nums[0]\n    for i := 1;\
    \ i < len(nums); i++ {\n        maxEndingHere = max(nums[i], maxEndingHere + nums[i])\n\
    \        minSum = min(minSum, maxEndingHere)\n    }\n    return minSum\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0qfqbst_test.go:19:25: undefined: max

    /tmp/tmpe0qfqbst_test.go:20:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    var minimum int\
    \ = nums[0]\n    var current int = nums[0]\n    for i := 1; i < len(nums); i++\
    \ {\n        if current < 0 {\n            current = nums[i]\n        } else {\n\
    \            current += nums[i]\n        }\n        if current < minimum {\n \
    \           minimum = current\n        }\n    }\n    return minimum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpnd93_5bv_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpnd93_5bv_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpnd93_5bv_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpnd93_5bv_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpnd93_5bv_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpnd93_5bv_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpnd93_5bv_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpnd93_5bv_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    curSum := 0\n    for _, val := range nums {\n  \
    \      curSum += val\n        if curSum < minSum {\n            minSum = curSum\n\
    \        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpou0yc89e_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpou0yc89e_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpou0yc89e_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpou0yc89e_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpou0yc89e_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpou0yc89e_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minimum := nums[0]\n    for i := 0; i < len(nums); i++ {\n      \
    \  for j := i; j < len(nums); j++ {\n            sum := 0\n            for k :=\
    \ i; k <= j; k++ {\n                sum += nums[k]\n            }\n          \
    \  if sum < minimum {\n                minimum = sum\n            }\n        }\n\
    \    }\n    return minimum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075321
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum < 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbqtcky1m_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbqtcky1m_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum, min := 0,\
    \ 0\n    for _, num := range nums {\n        sum += num\n        if sum < min\
    \ {\n            min = sum\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbkt6wh7a_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpbkt6wh7a_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpbkt6wh7a_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpbkt6wh7a_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpbkt6wh7a_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbkt6wh7a_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    // create a slice\
    \ equal in length to input slice,\n    // in which we will store minimum sums\
    \ for any subarray ending at\n    // this position\n    minSums := make([]int,\
    \ len(nums))\n    minSums[0] = nums[0]\n    for i := 1; i < len(nums); i++ {\n\
    \        // starting from i = 1, we have to figure out minimum sum for\n     \
    \   // all subarrays ending at index i\n        if minSums[i-1] > 0 {\n      \
    \      // if minimum sum of subarray ending at (i-1) is > 0\n            // it\
    \ means that we can simply add next item to it, without\n            // increasing\
    \ overall sum, but just \"extending\" the subarray\n            minSums[i] = minSums[i-1]\
    \ + nums[i]\n        } else {\n            // otherwise we need to reset current\
    \ sum and start\n            // counting from the current item again\n       \
    \     minSums[i] = nums[i]\n        }\n    }\n    // the minimum of all subarrays'\
    \ minimum sums is our answer\n    min := minSums[0]\n    for _, v := range minSums\
    \ {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbuf8w9rv_test.go:72: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbuf8w9rv_test.go:72:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbuf8w9rv_test.go:72: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpbuf8w9rv_test.go:72:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpbuf8w9rv_test.go:72: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpbuf8w9rv_test.go:72:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpbuf8w9rv_test.go:72: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpbuf8w9rv_test.go:72:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var result int = nums[0]\n    var minSum int = nums[0]\n    for i\
    \ := 1; i < len(nums); i++ {\n        result = nums[i] + result\n        if result\
    \ < minSum {\n            minSum = result\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpdk8y769o_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpdk8y769o_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpdk8y769o_test.go:51: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpdk8y769o_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpdk8y769o_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // init variables\n    var minSum int = nums[0]\n    var curSum int\
    \ = nums[0]\n    // find the minimum sum\n    for _, v := range nums[1:] {\n \
    \       curSum = min(curSum+v, v)\n        minSum = min(minSum, curSum)\n    }\n\
    \    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqzg42l2_test.go:21:18: undefined: min

    /tmp/tmptqzg42l2_test.go:22:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for i, sum := range nums {\n        if sum < min {\n            min = sum\n\
    \        }\n        for j := i + 1; j < len(nums); j++ {\n            sum += nums[j]\n\
    \            if sum < min {\n                min = sum\n            }\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    if len(nums) == 2 {\n        if nums[0]\
    \ < nums[1] {\n            return nums[0]\n        }\n        return nums[1]\n\
    \    }\n    subarray_sum := func(nums []int) []int {\n        sum := nums[0]\n\
    \        if sum < 0 {\n            sum = 0\n        }\n        sums := []int{sum}\n\
    \        for i := 1; i < len(nums); i++ {\n            sum += nums[i]\n      \
    \      if sum < 0 {\n                sum = 0\n            }\n            sums\
    \ = append(sums, sum)\n        }\n        return sums\n    }\n    sums := subarray_sum(nums)\n\
    \    min_sum := sums[0]\n    for _, sum := range sums {\n        if sum < min_sum\
    \ {\n            min_sum = sum\n        }\n    }\n    return min_sum\n}\n\n//\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpf991rkbk_test.go:78: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpf991rkbk_test.go:78:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpf991rkbk_test.go:78: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpf991rkbk_test.go:78:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpf991rkbk_test.go:78: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpf991rkbk_test.go:78:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpf991rkbk_test.go:78: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075322
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    //a := make([]int, len(nums))\n    //a[0] = nums[0]\n    //for i\
    \ := 1; i < len(nums); i++ {\n    //    if a[i-1] > 0 {\n    //        a[i] =\
    \ nums[i]\n    //    } else {\n    //        a[i] = a[i-1] + nums[i]\n    // \
    \   }\n    //}\n    //min := a[0]\n    //for i := 1; i < len(a); i++ {\n    //\
    \    if a[i] < min {\n    //        min = a[i]\n    //    }\n    //}\n    //return\
    \ min\n    min, sum := nums[0], nums[0]\n    for i := 1; i < len(nums); i++ {\n\
    \        if sum > 0 {\n            sum = nums[i]\n        } else {\n         \
    \   sum += nums[i]\n        }\n        if sum < min {\n            min = sum\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075322
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    min := sum\n    for i := 1; i < len(nums); i++ {\n        if sum > 0 {\n\
    \            sum = nums[i]\n        } else {\n            sum += nums[i]\n   \
    \     }\n        if sum < min {\n            min = sum\n        }\n    }\n   \
    \ return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075322
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := 0\n    for _, val := range nums {\n  \
    \      sum += val\n        if min > sum {\n            min = sum\n        }\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075323
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minimum := nums[0]\n\
    \    minimumSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        // minimum\
    \ \u4F5C\u4E3A\u6ED1\u52A8\u7A97\u53E3\u7F13\u5B58\n        if minimumSum > 0\
    \ {\n            minimumSum = nums[i]\n        } else {\n            minimumSum\
    \ += nums[i]\n        }\n        if minimumSum < minimum {\n            minimum\
    \ = minimumSum\n        }\n    }\n    return minimum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075323
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    for i := 0; i < len(nums); i++ {\n        sum\
    \ := 0\n        for j := i; j < len(nums); j++ {\n            sum += nums[j]\n\
    \            if sum < min {\n                min = sum\n            }\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075323
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) < 1 {\n        return 0\n    }\n    min_sum := nums[0]\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n        if sum\
    \ < min_sum {\n            min_sum = sum\n        }\n        if sum > 0 {\n  \
    \          sum = 0\n        }\n    }\n    return min_sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    result := nums[0]\n\
    \    min := nums[0]\n    for i := 1; i < len(nums); i++ {\n        result += nums[i]\n\
    \        if result < min {\n            min = result\n        }\n        if result\
    \ > 0 {\n            result = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpu05zpyp2_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpu05zpyp2_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpu05zpyp2_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    curr := nums[0]\n\
    \    min_sum := curr\n    for i := 1; i < len(nums); i++ {\n        curr = min(curr\
    \ + nums[i], nums[i])\n        min_sum = min(min_sum, curr)\n    }\n    return\
    \ min_sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph5g5ka6n_test.go:22:16: undefined: min

    /tmp/tmph5g5ka6n_test.go:23:19: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    minSum := nums[0]\n    currentSum :=\
    \ 0\n    for i := 0; i < len(nums); i++ {\n        currentSum += nums[i]\n   \
    \     if currentSum < minSum {\n            minSum = currentSum\n        }\n \
    \       if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n  \
    \  return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := 0\n    sum := 0\n    for _, v := range nums {\n       \
    \ sum += v\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpe87a299x_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpe87a299x_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var total, minimum int = 0, 0\n    var partialSum []int\n    var\
    \ minimums []int\n    for i, v := range nums {\n        if i == 0 {\n        \
    \    minimum = v\n        }\n        if v < minimum {\n            minimum = v\n\
    \        }\n        total += v\n        partialSum = append(partialSum, total)\n\
    \        minimums = append(minimums, minimum)\n    }\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i; j < len(nums); j++ {\n            if i == 0 {\n \
    \               minimum = partialSum[j]\n            } else {\n              \
    \  minimum = partialSum[j] - partialSum[i-1]\n            }\n            if i\
    \ != 0 && minimums[i-1] < minimum {\n                minimum = minimums[i-1]\n\
    \            }\n            if j != len(nums)-1 && minimums[j+1] < minimum {\n\
    \                minimum = minimums[j+1]\n            }\n            if minimum\
    \ < minimums[i] {\n                minimums[i] = minimum\n            }\n    \
    \    }\n    }\n    return minimums[0]\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpe6sk2xwi_test.go:75: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum + nums[i]\
    \ < nums[i] {\n            sum = nums[i]\n        } else {\n            sum +=\
    \ nums[i]\n        }\n        if sum < min {\n            min = sum\n        }\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpkzjss06k_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpkzjss06k_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    for i, v := range nums {\n        if v > 0 {\n            nums[i]\
    \ = 0\n        }\n    }\n    min := 0\n    sum := 0\n    for _, v := range nums\
    \ {\n        sum += v\n        if sum < min {\n            min = sum\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpje5bcqsr_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpje5bcqsr_test.go:56:\
    \ expected '%!s(int=-14)', got '%!s(int=-16)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpje5bcqsr_test.go:56: expected '%!s(int=-6)', got '%!s(int=-11)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpje5bcqsr_test.go:56:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpje5bcqsr_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpje5bcqsr_test.go:56:\
    \ expected '%!s(int=-33)', got '%!s(int=-36)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpje5bcqsr_test.go:56: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    minSum\
    \ := nums[0]\n    for i := 0; i < n; i++ {\n        sum := 0\n        for j :=\
    \ i; j < n; j++ {\n            sum += nums[j]\n            if sum < minSum {\n\
    \                minSum = sum\n            }\n        }\n    }\n    return minSum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmppofruo9e_test.go:44:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmppofruo9e_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075312
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    m := map[int]int{}\n    for i, v := range nums {\n        if s, ok\
    \ := m[i]; ok {\n            m[i] = s + v\n        } else {\n            m[i]\
    \ = v\n        }\n    }\n    min := m[0]\n    for _, v := range m {\n        if\
    \ v < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpvnyxu5kv_test.go:57: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpvnyxu5kv_test.go:57:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvnyxu5kv_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvnyxu5kv_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var sum, min int\n    if len(nums) < 1 {\n        return min\n  \
    \  }\n    min = nums[0]\n    for _, num := range nums {\n        sum += num\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // \u521D\u59CB\u5316\u4E3A\u6700\u5927\u503C\n    minSum := int(^uint(0)\
    \ >> 1)\n    sum := 0\n    for _, value := range nums {\n        sum += value\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    var sum, minSum\
    \ int\n    sum = nums[0]\n    minSum = sum\n    for i := 1; i < len(nums); i++\
    \ {\n        sum += nums[i]\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpog0jdb6r_test.go:58: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpog0jdb6r_test.go:58:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpog0jdb6r_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    minSum := 0\n    for _, n := range nums {\n       \
    \ sum += n\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpth3sti7b_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpth3sti7b_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpth3sti7b_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpth3sti7b_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpth3sti7b_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpth3sti7b_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    min := nums[0]\n    if len(nums) > 1 {\n        for\
    \ i := 0; i < len(nums); i++ {\n            sum += nums[i]\n            if sum\
    \ < min {\n                min = sum\n            }\n            if sum > 0 {\n\
    \                sum = 0\n            }\n        }\n    }\n    return min\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    result := nums[0]\n\
    \    minSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if minSum\
    \ > 0 {\n            minSum = nums[i]\n        } else {\n            minSum +=\
    \ nums[i]\n        }\n        if minSum < result {\n            result = minSum\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min_sum := 0\n    sum := 0\n    for _, e := range nums {\n      \
    \  sum += e\n        if sum < min_sum {\n            min_sum = sum\n        }\n\
    \    }\n    return min_sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7f1imrlq_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7f1imrlq_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp7f1imrlq_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp7f1imrlq_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp7f1imrlq_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp7f1imrlq_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    for i := 0; i < len(nums); i++ {\n        sum := 0\n        for j := i; j\
    \ < len(nums); j++ {\n            sum += nums[j]\n            if sum < minSum\
    \ {\n                minSum = sum\n            }\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // subListSum is the smallest sum so far\n    subListSum := nums[0]\n\
    \    // subListSize is the size of the sublist that results in subListSum\n  \
    \  subListSize := 1\n    sum := 0\n    size := 0\n    for _, num := range nums\
    \ {\n        sum += num\n        size += 1\n        if sum < subListSum {\n  \
    \          subListSum = sum\n            subListSize = size\n        }\n     \
    \   if sum > 0 {\n            sum = 0\n            size = 0\n        }\n    }\n\
    \    return subListSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfizy_np_test.go:19:5: subListSize declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    min, sum := nums[0], nums[0]\n    for i := 1;\
    \ i < n; i++ {\n        if sum + nums[i] < nums[i] {\n            sum = nums[i]\n\
    \        } else {\n            sum += nums[i]\n        }\n        if sum < min\
    \ {\n            min = sum\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp07q3qik9_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp07q3qik9_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp07q3qik9_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp07q3qik9_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp07q3qik9_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp07q3qik9_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp07q3qik9_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp07q3qik9_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // make a copy of nums so we don't modify it\n    numsCopy := append([]int{},\
    \ nums...)\n    // reset the minimum so far\n    var min int\n    // iterate over\
    \ all of the slices in nums\n    for i := 0; i < len(nums); i++ {\n        for\
    \ j := i + 1; j <= len(nums); j++ {\n            slice := numsCopy[i:j]\n    \
    \        // if the slice is empty, there's nothing to sum\n            if len(slice)\
    \ == 0 {\n                continue\n            }\n            // if we haven't\
    \ found a minimum yet, assign it\n            if min == 0 {\n                min\
    \ = sum(slice)\n            }\n            // if the sum of the slice is less\
    \ than the minimum\n            // so far, replace it with the sum of the slice\n\
    \            if sum(slice) < min {\n                min = sum(slice)\n       \
    \     }\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqp4lui7y_test.go:30:23: undefined: sum

    /tmp/tmpqp4lui7y_test.go:34:16: undefined: sum

    /tmp/tmpqp4lui7y_test.go:35:23: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: null
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    start, end := 0, 0\n    currentSum := nums[0]\n    for end < len(nums) {\n\
    \        if currentSum > 0 {\n            if currentSum < min {\n            \
    \    min = currentSum\n            }\n            end += 1\n            if end\
    \ < len(nums) {\n                currentSum += nums[end]\n            }\n    \
    \    } else {\n            start += 1\n            if start < len(nums) {\n  \
    \              currentSum += nums[start]\n            }\n        }\n    }\n  \
    \  return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075337
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    return minSubArraySum_1(nums)\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoj1g58ol_test.go:16:12: undefined: minSubArraySum_1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    ans := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum = min(sum + nums[i], nums[i])\n        ans = min(ans, sum)\n\
    \    }\n    return ans\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjgqaza6a_test.go:19:15: undefined: min

    /tmp/tmpjgqaza6a_test.go:20:15: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) ==\
    \ 1 {\n        return nums[0]\n    }\n    result := nums[0]\n    for i := 1; i\
    \ < len(nums); i++ {\n        if nums[i-1] > 0 {\n            nums[i] += nums[i-1]\n\
    \        }\n        if nums[i] < result {\n            result = nums[i]\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpi333v1xf_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpi333v1xf_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpi333v1xf_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpi333v1xf_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpi333v1xf_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpi333v1xf_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpi333v1xf_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpi333v1xf_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min, sum := nums[0],\
    \ nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0 {\n      \
    \      sum = nums[i]\n        } else {\n            sum += nums[i]\n        }\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075325
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum < min {\n            min = sum\n        }\n        if sum > 0 {\n      \
    \      sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    curr_sum := nums[0]\n\
    \    min_sum := curr_sum\n    for i := 1; i < len(nums); i++ {\n        curr_sum\
    \ = min(curr_sum+nums[i], nums[i])\n        min_sum = min(min_sum, curr_sum)\n\
    \    }\n    return min_sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq_9rptz_test.go:22:20: undefined: min

    /tmp/tmpdq_9rptz_test.go:23:19: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    min := 0\n    for _, n := range nums {\n        sum\
    \ += n\n        if sum < min {\n            min = sum\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpz2wi9e0k_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpz2wi9e0k_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpz2wi9e0k_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpz2wi9e0k_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpz2wi9e0k_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpz2wi9e0k_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    var (\n        sum int\n        min int\n    )\n    for _, n := range\
    \ nums {\n        sum += n\n        if sum < min {\n            min = sum\n  \
    \      }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpgbejbmrb_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpgbejbmrb_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpgbejbmrb_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpgbejbmrb_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpgbejbmrb_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpgbejbmrb_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    // m will be used to store the minimum of all sub-arrays\n    m :=\
    \ nums[0]\n    // s is the variable storing the sum of the current sub-array\n\
    \    s := 0\n    for _, v := range nums {\n        // If the sum of the current\
    \ sub-array is less than 0, we start a new\n        // sub-array\n        if s\
    \ < 0 {\n            s = v\n        } else {\n            s += v\n        }\n\
    \        if s < m {\n            m = s\n        }\n    }\n    return m\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpgyli9794_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpgyli9794_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpgyli9794_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpgyli9794_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpgyli9794_test.go:59: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpgyli9794_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpgyli9794_test.go:59: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpgyli9794_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n    \
    \        sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    m := make(map[int]int)\n    m[0] = -1\n    s := 0\n    min := 0\n\
    \    for i, n := range nums {\n        s += n\n        if m[s] > 0 {\n       \
    \     if min == 0 || min > i - m[s] {\n                min = i - m[s]\n      \
    \      }\n        } else {\n            m[s] = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4nb88vv9_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp4nb88vv9_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp4nb88vv9_test.go:57: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp4nb88vv9_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4nb88vv9_test.go:57: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4nb88vv9_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=4)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4nb88vv9_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4nb88vv9_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=1)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp4nb88vv9_test.go:57: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp4nb88vv9_test.go:57:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4nb88vv9_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    length := len(nums)\n    if length == 0 {\n        return 0\n   \
    \ }\n\n    min := nums[0]\n    total := nums[0]\n    for i := 1; i < length; i++\
    \ {\n        if total > 0 {\n            total = nums[i]\n        } else {\n \
    \           total += nums[i]\n        }\n        if total < min {\n          \
    \  min = total\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minimum := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if nums[i] < sum {\n            sum = nums[i]\n        }\n        if\
    \ sum < minimum {\n            minimum = sum\n        }\n    }\n    return minimum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    var minSum int\
    \ = nums[0]\n    var sum int = 0\n    for _, v := range nums {\n        sum +=\
    \ v\n        if sum < minSum {\n            minSum = sum\n        }\n        if\
    \ sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    i, j := 0, 1\n    min := nums[0]\n    for {\n        if i == len(nums)\
    \ - 1 {\n            break\n        }\n        sum := nums[i]\n        for {\n\
    \            if sum < min {\n                min = sum\n            }\n      \
    \      sum += nums[j]\n            j++\n            if j >= len(nums) {\n    \
    \            break\n            }\n        }\n        i++\n        j = i + 1\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpfhp16bwy_test.go:63: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpfhp16bwy_test.go:63:\
    \ expected '%!s(int=-14)', got '%!s(int=-6)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpfhp16bwy_test.go:63: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    curSum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if curSum\
    \ + nums[i] < nums[i] {\n            curSum = nums[i]\n        } else {\n    \
    \        curSum += nums[i]\n        }\n        if curSum < minSum {\n        \
    \    minSum = curSum\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpfx5oj_rr_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpfx5oj_rr_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpfx5oj_rr_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpfx5oj_rr_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpfx5oj_rr_test.go:58: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpfx5oj_rr_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpfx5oj_rr_test.go:58: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpfx5oj_rr_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    var min int = nums[0]\n\
    \    var total int = nums[0]\n    for i := 1; i < len(nums); i++ {\n        total\
    \ += nums[i]\n        if total < min {\n            min = total\n        }\n \
    \       if total > 0 {\n            total = 0\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpw6_aswx7_test.go:57: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpw6_aswx7_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpw6_aswx7_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum < 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < min {\n            min\
    \ = sum\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp84ccl1ch_test.go:55: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp84ccl1ch_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    result := 0\n    for i, _ := range nums {\n       \
    \ sum += nums[i]\n        if result == 0 || sum < result {\n            result\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpd35k3ppu_test.go:54: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    min := int(^uint(0) >> 1)\n    for _, v := range nums\
    \ {\n        sum += v\n        if sum < min {\n            min = sum\n       \
    \ }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    dp\
    \ := make([]int, n)\n    dp[0] = nums[0]\n    minVal := dp[0]\n    for i := 1;\
    \ i < n; i++ {\n        if dp[i-1] < 0 {\n            dp[i] = nums[i]\n      \
    \  } else {\n            dp[i] = dp[i-1] + nums[i]\n        }\n        if dp[i]\
    \ < minVal {\n            minVal = dp[i]\n        }\n    }\n    return minVal\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpyz1tn20g_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpyz1tn20g_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpyz1tn20g_test.go:60: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpyz1tn20g_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpyz1tn20g_test.go:60: expected '%!s(int=-6)', got '%!s(int=94)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpyz1tn20g_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=10)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpyz1tn20g_test.go:60: expected '%!s(int=-33)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpyz1tn20g_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := nums[0]\n\
    \    // Current sum ending at index j.\n    curSum := 0\n    for _, v := range\
    \ nums {\n        curSum += v\n        if curSum < minSum {\n            minSum\
    \ = curSum\n        }\n        if curSum > 0 {\n            curSum = 0\n     \
    \   }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min, sum := 1<<31-1, 0\n    for _, n := range nums {\n        sum\
    \ += n\n        if sum < min {\n            min = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    current_min := nums[0]\n    for _, num := range nums {\n        if\
    \ num < current_min {\n            current_min = num\n        }\n    }\n    return\
    \ current_min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpd624lgwo_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpd624lgwo_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpd624lgwo_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpd624lgwo_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    if len(nums) == 0 {\n        return 0\n    }\n    minSum := 0\n \
    \   minElem := nums[0]\n    for _, v := range nums {\n        if v < minElem {\n\
    \            minElem = v\n        }\n        minSum += v\n    }\n    if minSum\
    \ >= 0 {\n        return minElem\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpk2q1jf8c_test.go:57: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpk2q1jf8c_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    minSum := nums[0]\n    sum := 0\n    for _, n := range nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    sum := 0\n    minSum := 0\n    min := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        if i == 0 {\n            min = sum\n        } else\
    \ {\n            if sum - min < minSum {\n                minSum = sum - min\n\
    \            }\n            if sum < min {\n                min = sum\n      \
    \      }\n        }\n    }\n    return minSum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp2ecxcaav_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp2ecxcaav_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp2ecxcaav_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp2ecxcaav_test.go:59:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp2ecxcaav_test.go:59: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp2ecxcaav_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp2ecxcaav_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp2ecxcaav_test.go:59:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp2ecxcaav_test.go:59: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    length := len(nums)\n    if length == 0 {\n        return 0\n   \
    \ }\n    min := nums[0]\n    sum := nums[0]\n    for i := 1; i < length; i++ {\n\
    \        sum += nums[i]\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpahi3z1su_test.go:58: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpahi3z1su_test.go:58:\
    \ expected '%!s(int=-33)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpahi3z1su_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 0
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
    // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
    // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
    \ int {\n    min_sum := 0\n    cur_sum := 0\n    min_sum_found := false\n    for\
    \ _, val := range nums {\n        cur_sum += val\n        if !min_sum_found ||\
    \ cur_sum < min_sum {\n            min_sum = cur_sum\n            min_sum_found\
    \ = true\n        }\n        if cur_sum > 0 {\n            cur_sum = 0\n     \
    \   }\n    }\n    return min_sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075326
