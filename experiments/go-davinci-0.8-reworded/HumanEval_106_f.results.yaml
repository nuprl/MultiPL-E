language: go_test.go
name: HumanEval_106_f
results:
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        var\
    \ num int\n        if i % 2 == 0 {\n            num = getFac(i)\n        } else\
    \ {\n            num = getSum(i)\n        }\n        res[i-1] = num\n    }\n \
    \   return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_8ew11d_test.go:21:19: undefined: getFac

    /tmp/tmpx_8ew11d_test.go:23:19: undefined: getSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{1,2,6,24,15}\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__1 (0.00s)\n    \
    \    tmpz_4cfzxv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15) %!s(int=720) %!s(int=28)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)\
    \ %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n       \
    \ tmpz_4cfzxv_test.go:36: expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=6) %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpz_4cfzxv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tr := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0\
    \ {\n\t\t\tr[i] = 1\n\t\t\tfor j := 2; j <= i; j++ {\n\t\t\t\tr[i] *= j\n\t\t\t\
    }\n\t\t} else {\n\t\t\tr[i] = 0\n\t\t\tfor j := 1; j <= i; j++ {\n\t\t\t\tr[i]\
    \ += j\n\t\t\t}\n\t\t}\n\t}\n\treturn r\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp77eakw32_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp77eakw32_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp77eakw32_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // ... CODE ...\n    return make([]int, n)\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpj0m9eaeh_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpj0m9eaeh_test.go:37: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpj0m9eaeh_test.go:37: expected\
    \ '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpj0m9eaeh_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i] = factorial(i)\n        } else {\n        \
    \    res[i] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol4cmziv_test.go:20:22: undefined: factorial

    /tmp/tmpol4cmziv_test.go:22:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n == 0 {\n        return nil\n    }\n    var result = make([]int,\
    \ n)\n    result[0] = 1\n    for i := 1; i < n; i++ {\n        if i % 2 == 0 {\n\
    \            result[i] = factorial(i)\n        } else {\n            result[i]\
    \ = sum(i)\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu5xg7ac_test.go:24:25: undefined: factorial

    /tmp/tmphu5xg7ac_test.go:26:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    r := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            r[i] = factorial(i)\n        } else {\n            r[i]\
    \ = sum(i)\n        }\n    }\n    return r\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw05kmz7_test.go:20:20: undefined: factorial

    /tmp/tmplw05kmz7_test.go:22:20: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        //\
    \ do your work here\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp7cu2c6z0_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp7cu2c6z0_test.go:40: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp7cu2c6z0_test.go:40: expected\
    \ '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp7cu2c6z0_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\treturn nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp68u2sqmx_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp68u2sqmx_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp68u2sqmx_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp68u2sqmx_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    x := []int{}\n    for i := 1; i <= n; i++ {\n        var z int\n\
    \        if i%2 == 0 {\n            z = factorial(i)\n        } else {\n     \
    \       z = sum(i)\n        }\n        x = append(x, z)\n    }\n    return x\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6v46ffp3_test.go:21:17: undefined: factorial

    /tmp/tmp6v46ffp3_test.go:23:17: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\t// TODO\n    var x []int\n\n    for i := 1; i <= n; i++ {\n     \
    \   if i % 2 == 0 {\n            factorial := 1\n            for j := 1; j <=\
    \ i; j++ {\n                factorial *= j\n            }\n            x = append(x,\
    \ factorial)\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            x = append(x,\
    \ sum)\n        }\n    }\n\n    return x\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var res []int\n    for i := 1; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            product := 1\n            for j := 1; j <= i; j++ {\n  \
    \              product *= j\n            }\n            res = append(res, product)\n\
    \        } else {\n            sum := 0\n            for j := 1; j <= i; j++ {\n\
    \                sum += j\n            }\n            res = append(res, sum)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    //TODO: Implement the function.\n    var result = make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = factorial(i)\n        } else {\n            result[i] = sum(i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3znr6ki_test.go:21:25: undefined: factorial

    /tmp/tmpu3znr6ki_test.go:23:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n == 0 {\n        return []int{}\n    }\n    list := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        if i % 2 == 0 {\n            list[i]\
    \ = factorial(i)\n        } else {\n            list[i] = sumNumbersTo(i)\n  \
    \      }\n    }\n    return list\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbw43dw1x_test.go:23:23: undefined: factorial

    /tmp/tmpbw43dw1x_test.go:25:23: undefined: sumNumbersTo

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // CODE HERE\n    slice := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        if i % 2 == 0 {\n            slice[i] = factorial(i)\n   \
    \     } else {\n            slice[i] = i + 1\n        }\n    }\n    return slice\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjlio8gyw_test.go:21:24: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    a := make([]int, n)\n    a[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        if i % 2 == 0 {\n            a[i] = factorial(i)\n        } else {\n\
    \            a[i] = sum(i)\n        }\n    }\n    return a\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj28aox7i_test.go:21:20: undefined: factorial

    /tmp/tmpj28aox7i_test.go:23:20: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tl := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0\
    \ {\n\t\t\tfor j := 1; j <= i; j++ {\n\t\t\t\tl[i] += j\n\t\t\t}\n\t\t} else {\n\
    \t\t\tres := 1\n\t\t\tfor j := 1; j <= i; j++ {\n\t\t\t\tres *= j\n\t\t\t}\n\t\
    \t\tl[i] = res\n\t\t}\n\t}\n\treturn l\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9q3hyx4q_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9q3hyx4q_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=120) %!s(int=21)]'\n\
    \    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9q3hyx4q_test.go:50: expected\
    \ '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9q3hyx4q_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    if n < 1 {\n        return result\n    }\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            result = append(result, factorial)\n            factorial *= i\n\
    \        } else {\n            result = append(result, i * (i + 1) / 2)\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp7r4uh7pv_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=2) %!s(int=15)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp7r4uh7pv_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=2) %!s(int=15) %!s(int=8) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp7r4uh7pv_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=6)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    output := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i % 2 == 0 {\n            factorial := 1\n            for j := 1; j <= i;\
    \ j++ {\n                factorial *= j\n            }\n            output[i]\
    \ = factorial\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            output[i]\
    \ = sum\n        }\n    }\n    return output\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpac7v8sz2_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpac7v8sz2_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpac7v8sz2_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    // Dummy return\n    return []int{}\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpfkt1ej56_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpfkt1ej56_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpfkt1ej56_test.go:38:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpfkt1ej56_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write the function body here\n    return []int{}\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpfp3hgo3__test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpfp3hgo3__test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpfp3hgo3__test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpfp3hgo3__test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Here is your function body\n    return []int{1, 2, 6, 24, 15}\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__1 (0.00s)\n    \
    \    tmptqbmix19_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15) %!s(int=720) %!s(int=28)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)\
    \ %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n       \
    \ tmptqbmix19_test.go:37: expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=6) %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmptqbmix19_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // write the code here\n    res := make([]int, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i-1] = factorial(i)\n\
    \        } else {\n            res[i-1] = sum(i)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ihowm3u_test.go:21:24: undefined: factorial

    /tmp/tmp8ihowm3u_test.go:23:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tarr := make([]int, n)\n\tfactorial, sum := 1, 0\n\tfor i := 1; i\
    \ <= n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tfactorial *= i\n\t\t\tarr[i-1] = factorial\n\
    \t\t} else {\n\t\t\tsum += i\n\t\t\tarr[i-1] = sum\n\t\t}\n\t}\n\treturn arr\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9emw1d8__test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9emw1d8__test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=48) %!s(int=16)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp9emw1d8__test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var res []int\n\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            res = append(res, factorial(i))\n        } else {\n  \
    \          res = append(res, 1+2+3+4+5+6+7+8+9+10)\n        }\n    }\n\n    return\
    \ res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4li81rg_test.go:21:31: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Your code here.\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24hc_d5q_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here.\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpl4fpwcbu_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpl4fpwcbu_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpl4fpwcbu_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpl4fpwcbu_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n < 1 {\n        return nil\n    }\n    res := make([]int, n)\n\
    \    res[0] = 1\n    for i := 1; i < n; i++ {\n        if i%2 == 0 {\n       \
    \     res[i] = res[i-1] * i\n        } else {\n            res[i] = (i+1)*i/2\n\
    \        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpmf3fxhtb_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpmf3fxhtb_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=90)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpmf3fxhtb_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n == 0 {\n        return nil\n    }\n    ret := make([]int,\
    \ n)\n    fact := func(n int) int {\n        ret := 1\n        for n > 0 {\n \
    \           ret *= n\n            n--\n        }\n        return ret\n    }\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            ret[i] = fact(i)\n\
    \        } else {\n            ret[i] = i * (i + 1) / 2\n        }\n    }\n  \
    \  return ret\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpni42fn8m_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpni42fn8m_test.go:55: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpni42fn8m_test.go:55: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var list []int\n\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            list = append(list, Factorial(i))\n        } else {\n\
    \            list = append(list, Sum(i))\n        }\n    }\n\n    return list\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwdsyviju_test.go:21:33: undefined: Factorial

    /tmp/tmpwdsyviju_test.go:23:33: undefined: Sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    values := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i % 2 == 0 {\n            values[i-1] = factorial(i)\n        } else {\n\
    \            values[i-1] = sum(i)\n        }\n    }\n    return values\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nzpkwzn_test.go:20:27: undefined: factorial

    /tmp/tmp3nzpkwzn_test.go:22:27: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    xs := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            xs[i] = factorial(i)\n        } else {\n         \
    \   xs[i] = sum(i)\n        }\n    }\n    return xs\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpair7a6ye_test.go:20:21: undefined: factorial

    /tmp/tmpair7a6ye_test.go:22:21: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i%2\
    \ == 0 {\n            a[i] = factorial(i)\n        } else {\n            a[i]\
    \ = sum(i)\n        }\n    }\n    return a\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2aua4m24_test.go:20:20: undefined: factorial

    /tmp/tmp2aua4m24_test.go:22:20: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    var list = make([]int, n)\n    for\
    \ i := 0; i < n; i++ {\n        if i % 2 == 0 {\n            list[i] = factorial(i)\n\
    \        } else {\n            list[i] = sum(i)\n        }\n    }\n    return\
    \ list\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxr71pc9b_test.go:21:23: undefined: factorial

    /tmp/tmpxr71pc9b_test.go:23:23: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: Implement the function.\n    var result []int\n    for\
    \ i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            //i even\n     \
    \       var tmp int = 1\n            for j := 2; j <= i; j++ {\n             \
    \   tmp *= j\n            }\n            result = append(result, tmp)\n      \
    \  } else {\n            //i odd\n            var tmp int = 0\n            for\
    \ j := 1; j <= i; j++ {\n                tmp += j\n            }\n           \
    \ result = append(result, tmp)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    l := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        if i%2 == 0 {\n            fac := 1\n            for\
    \ j := 1; j <= i; j++ {\n                fac *= j\n            }\n           \
    \ l[i] = fac\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            l[i] = sum\n\
    \        }\n    }\n    return l\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpks6f4j62_test.go:53: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpks6f4j62_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpks6f4j62_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    array := make([]int, n)\n    for i := 1; i <= n; i++ {\n      \
    \  if i % 2 == 0 {\n            array[i-1] = factorial(i)\n        } else {\n\
    \            array[i-1] = sum(i)\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfjkc9rh_test.go:20:26: undefined: factorial

    /tmp/tmppfjkc9rh_test.go:22:26: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tresult := make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2\
    \ == 0 {\n\t\t\tresult[i-1] = factorial(i)\n\t\t} else {\n\t\t\tresult[i-1] =\
    \ sum(i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp27rzkh_q_test.go:20:18: undefined: factorial

    /tmp/tmp27rzkh_q_test.go:22:18: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // your code goes here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpnpwtgwqp_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpnpwtgwqp_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpnpwtgwqp_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpnpwtgwqp_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tvar list = make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2\
    \ == 0 {\n\t\t\tlist[i-1] = factorial(i)\n\t\t} else {\n\t\t\tlist[i-1] = sum(i)\n\
    \t\t}\n\t}\n\treturn list\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp19txkpti_test.go:20:16: undefined: factorial

    /tmp/tmp19txkpti_test.go:22:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, factorial(i))\n        } else\
    \ {\n            result = append(result, sum1toi(i))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm7jvp2mz_test.go:20:37: undefined: factorial

    /tmp/tmpm7jvp2mz_test.go:22:37: undefined: sum1toi

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\t//TODO: Implement this function\n\treturn nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpac6b2roz_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpac6b2roz_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpac6b2roz_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpac6b2roz_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    //TODO\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpjnd87ti4_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpjnd87ti4_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpjnd87ti4_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpjnd87ti4_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: implement me\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmptctwi69x_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmptctwi69x_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmptctwi69x_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmptctwi69x_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO(student)\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp1ozc3jqp_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp1ozc3jqp_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp1ozc3jqp_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp1ozc3jqp_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpx2tijppw_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpx2tijppw_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpx2tijppw_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpx2tijppw_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: implement the function\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpjqk_c640_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpjqk_c640_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpjqk_c640_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpjqk_c640_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var res []int\n    for i := 1; i <= n; i++ {\n        var product\
    \ int = 1\n        var sum int = 0\n        if i % 2 == 0 {\n            for j\
    \ := 1; j <= i; j++ {\n                product *= j\n            }\n         \
    \   res = append(res, product)\n        } else {\n            for j := 1; j <=\
    \ i; j++ {\n                sum += j\n            }\n            res = append(res,\
    \ sum)\n        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, factorial(i))\n        } else\
    \ {\n            result = append(result, sum(i))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelbt0jzl_test.go:20:37: undefined: factorial

    /tmp/tmpelbt0jzl_test.go:22:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{1, 2, 6, 24, 15}\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__1 (0.00s)\n    \
    \    tmpem_zxovv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15) %!s(int=720) %!s(int=28)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)\
    \ %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n       \
    \ tmpem_zxovv_test.go:36: expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=6) %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpem_zxovv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: implement\n    var array []int\n    for i := 1; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            // multiply all numbers from 1 to\
    \ i\n            res := 1\n            for j := 1; j <= i; j++ {\n           \
    \     res *= j\n            }\n            array = append(array, res)\n      \
    \  } else {\n            // sum all numbers from 1 to i\n            res := 0\n\
    \            for j := 1; j <= i; j++ {\n                res += j\n           \
    \ }\n            array = append(array, res)\n        }\n    }\n    return array\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    list := make([]int, n)\n    for i := 1; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            list[i-1] = factorial(i)\n        } else {\n  \
    \          list[i-1] = sum(i)\n        }\n    }\n    return list\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpepp3a8kz_test.go:20:25: undefined: factorial

    /tmp/tmpepp3a8kz_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n\n    for i := 1; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            factorical := 1\n            for j := 1; j <= i; j++\
    \ {\n                factorical *= j\n            }\n            result = append(result,\
    \ factorical)\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            result =\
    \ append(result, sum)\n        }\n    }\n\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    slice := make([]int, n)\n    fact := 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            slice[i-1] = fact\n            fact\
    \ *= i\n        } else {\n            slice[i-1] = (i * (i + 1)) / 2\n       \
    \ }\n    }\n    return slice\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpzdyj1vxn_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=2) %!s(int=15)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpzdyj1vxn_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=2) %!s(int=15) %!s(int=8) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpzdyj1vxn_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=6)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    slice := make([]int, n)\n    for i := 0; i < n; i++ {\n       \
    \ if i % 2 == 0 {\n            slice[i] = factorial(i)\n        } else {\n   \
    \         slice[i] = sum(i)\n        }\n    }\n    return slice\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptabpnvu6_test.go:20:24: undefined: factorial

    /tmp/tmptabpnvu6_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Your code goes here\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcf5ohe7q_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    m := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            m[i-1] = 1\n            for j := 1; j <= i; j++ {\n\
    \                m[i-1] *= j\n            }\n        } else {\n            m[i-1]\
    \ = i * (i + 1) / 2\n        }\n    }\n    return m\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var l []int\n    for i := 1; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            l = append(l, factorial(i))\n        } else {\n           \
    \ l = append(l, sumTo(i))\n        }\n    }\n    return l\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgn6h8yp_test.go:20:27: undefined: factorial

    /tmp/tmpvgn6h8yp_test.go:22:27: undefined: sumTo

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sumN(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pe6gncv_test.go:20:24: undefined: factorial

    /tmp/tmp_pe6gncv_test.go:22:24: undefined: sumN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your function here\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpezrd111b_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpezrd111b_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpezrd111b_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpezrd111b_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n < 1 {\n        return nil\n    }\n    result := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = factorial(i)\n        } else {\n            result[i] = sum(i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vya50zf_test.go:23:25: undefined: factorial

    /tmp/tmp_vya50zf_test.go:25:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    a := make([]int, n)\n    a[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        if i % 2 == 0 {\n            a[i] = factorial(i)\n        } else {\n\
    \            a[i] = sum(i)\n        }\n    }\n    return a\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj28aox7i_test.go:21:20: undefined: factorial

    /tmp/tmpj28aox7i_test.go:23:20: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tlist := make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2 ==\
    \ 0 {\n\t\t\tf := 1\n\t\t\tfor f = 1; f <= i; f++ {\n\t\t\t\tlist[i-1] = f\n\t\
    \t\t}\n\t\t} else {\n\t\t\tsum := 0\n\t\t\tfor sum = 0; sum <= i; sum++ {\n\t\t\
    \t\tlist[i-1] = sum\n\t\t\t}\n\t\t}\n\t}\n\treturn list\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3mlu5bec_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3mlu5bec_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp3mlu5bec_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, factoriall(i))\n        } else\
    \ {\n            result = append(result, sum(i))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxfn3gym_test.go:20:37: undefined: factoriall

    /tmp/tmpfxfn3gym_test.go:22:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, factorial(i))\n        } else\
    \ {\n            result = append(result, sumTo(i))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpft4q4ysg_test.go:20:37: undefined: factorial

    /tmp/tmpft4q4ysg_test.go:22:37: undefined: sumTo

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    ret := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            var j int\n            tmp := 1\n            for j\
    \ = 1; j <= i; j++ {\n                tmp *= j\n            }\n            ret[i]\
    \ = tmp\n        } else {\n            var j int\n            tmp := 0\n     \
    \       for j = 1; j <= i; j++ {\n                tmp += j\n            }\n  \
    \          ret[i] = tmp\n        }\n    }\n    return ret\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp32mgvvfn_test.go:54: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp32mgvvfn_test.go:54: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp32mgvvfn_test.go:54: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i % 2 == 0 {\n            result[i] = factorial(i)\n        } else {\n \
    \           result[i] = sum(i)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgej5j6xw_test.go:20:25: undefined: factorial

    /tmp/tmpgej5j6xw_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    num := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            num[i-1] = factorial(i)\n        } else {\n      \
    \      num[i-1] = sum(i)\n        }\n    }\n    return num\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8bvg0rif_test.go:20:24: undefined: factorial

    /tmp/tmp8bvg0rif_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\treturn nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp68u2sqmx_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp68u2sqmx_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp68u2sqmx_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp68u2sqmx_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    panic(\"implement me\")\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: implement me [recovered]\n\tpanic: implement\
    \ me\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fcd60, 0x548930})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x4fcd60,\
    \ 0x548930})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpdfhsw4e3_test.go:17\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpdfhsw4e3_test.go:27 +0x27\n\
    testing.tRunner(0xc0000cc340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO Implement this function\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpspzx0fhc_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpspzx0fhc_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpspzx0fhc_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpspzx0fhc_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            f := 1\n            for j := 1; j <= i; j++ {\n  \
    \              f *= j\n            }\n            res[i-1] = f\n        } else\
    \ {\n            res[i-1] = (i * (i + 1)) / 2\n        }\n    }\n    return res\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            a[i-1] = factorial(i)\n        } else {\n        \
    \    a[i-1] = sum(i)\n        }\n    }\n    return a\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkpdxi755_test.go:20:22: undefined: factorial

    /tmp/tmpkpdxi755_test.go:22:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            res[i] = factorial(i)\n        } else {\n          \
    \  res[i] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpirlvb7w__test.go:20:22: undefined: factorial

    /tmp/tmpirlvb7w__test.go:22:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    list := make([]int, n)\n    for i := 1; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            list[i-1] = factorial(i)\n        } else {\n  \
    \          list[i-1] = sum(i)\n        }\n    }\n    return list\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpepp3a8kz_test.go:20:25: undefined: factorial

    /tmp/tmpepp3a8kz_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            var factorial int = 1\n            for j := 1; j <= i;\
    \ j++ {\n                factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            var sum int = 0\n            for j\
    \ := 1; j <= i; j++ {\n                sum += j\n            }\n            result\
    \ = append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075055
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // I don't know what is factorial\n    return []int{}\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp9c6juih3_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp9c6juih3_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp9c6juih3_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp9c6juih3_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpx2tijppw_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpx2tijppw_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpx2tijppw_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpx2tijppw_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tvar a = make([]int,n)\n\tfor i := 1; i < n+1; i++ {\n\t\tif i%2 ==\
    \ 0 {\n\t\t\ta[i-1] = factorial(i)\n\t\t} else {\n\t\t\ta[i-1] = sum(i)\n\t\t\
    }\n\t}\n\treturn a\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfcwpyud8_test.go:20:13: undefined: factorial

    /tmp/tmpfcwpyud8_test.go:22:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    list := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            list[i] = factorial(i)\n        } else {\n       \
    \     list[i] = sum(i)\n        }\n    }\n    return list\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8e_thbk8_test.go:20:23: undefined: factorial

    /tmp/tmp8e_thbk8_test.go:22:23: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\t// TODO: solve this using only one for loop\n\treturn nil\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp07zpyirs_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp07zpyirs_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp07zpyirs_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp07zpyirs_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    arr := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            factorial := 1\n            for j := 1; j <= i; j++\
    \ {\n                factorial *= j\n            }\n            arr[i-1] = factorial\n\
    \        } else {\n            sum := 0\n            for j := 1; j <= i; j++ {\n\
    \                sum += j\n            }\n            arr[i-1] = sum\n       \
    \ }\n    }\n    return arr\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075142
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    l := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            sum := 1\n            for j := 1; j <= i; j++ {\n\
    \                sum *= j\n            }\n            l[i-1] = sum\n        }\
    \ else {\n            sum := 0\n            for j := 1; j <= i; j++ {\n      \
    \          sum += j\n            }\n            l[i-1] = sum\n        }\n    }\n\
    \    return l\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, fac(i))\n        } else {\n  \
    \          result = append(result, sum(i))\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_j7awj7_test.go:20:37: undefined: fac

    /tmp/tmp9_j7awj7_test.go:22:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    list := make([]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        if i % 2 == 0 {\n            value := 1\n      \
    \      for j := 1; j <= i; j++ {\n                value *= j\n            }\n\
    \            list[i] = value\n        } else {\n            list[i] = i * (i +\
    \ 1) / 2\n        }\n    }\n    return list\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp0oc5lp5z_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp0oc5lp5z_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp0oc5lp5z_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var list []int\n    for i := 1; i <= n; i++ {\n        var element\
    \ int\n        if i % 2 == 0 {\n            element = factorial(i)\n        }\
    \ else {\n            element = sum(i)\n        }\n        list = append(list,\
    \ element)\n    }\n    return list\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmwqfebw_test.go:21:23: undefined: factorial

    /tmp/tmpbmwqfebw_test.go:23:23: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i%2 == 0 {\n            // even\n            res[i] = factorial(i)\n       \
    \ } else {\n            // odd\n            res[i] = sum(i)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsh0d_ip_test.go:21:22: undefined: factorial

    /tmp/tmpxsh0d_ip_test.go:24:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    s := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            s[i-1] = factorial(i)\n        } else {\n        \
    \    s[i-1] = sum(i)\n        }\n    }\n    return s\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphomyvy1h_test.go:20:22: undefined: factorial

    /tmp/tmphomyvy1h_test.go:22:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        switch\
    \ {\n        case i % 2 == 0:\n            result = append(result, factorial(i))\n\
    \        default:\n            result = append(result, sum(i))\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdur1ucrd_test.go:21:37: undefined: factorial

    /tmp/tmpdur1ucrd_test.go:23:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // ...\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpih2ix594_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpih2ix594_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpih2ix594_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpih2ix594_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here.\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpl4fpwcbu_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpl4fpwcbu_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpl4fpwcbu_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpl4fpwcbu_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\ta := make([]int, n)\n\tb := 1\n\tfor i := 1; i <= n; i++ {\n\t\t\
    if i%2 == 0 {\n\t\t\ta[i-1] = b\n\t\t\tb *= i\n\t\t} else {\n\t\t\ta[i-1] = i\
    \ * (i + 1) / 2\n\t\t}\n\t}\n\treturn a\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp1f4btx2h_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=2) %!s(int=15)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp1f4btx2h_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=2) %!s(int=15) %!s(int=8) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp1f4btx2h_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=6)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa04fydte_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n\n    for i := 1; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            result = append(result, factorial(i))\n        } else\
    \ {\n            result = append(result, sum(i))\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kc97t9q_test.go:21:37: undefined: factorial

    /tmp/tmp2kc97t9q_test.go:23:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            fact := 1\n            for j := 1; j <= i; j++ {\n \
    \               fact *= j\n            }\n            a[i] = fact\n        } else\
    \ {\n            a[i] = i * (i + 1) / 2\n        }\n    }\n    return a\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpql5gy1kj_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpql5gy1kj_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpql5gy1kj_test.go:48: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            factorial := 1\n            for j := 1; j <= i; j++ {\n\
    \                factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            result =\
    \ append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    array := make([]int, n)\n    for i := 0; i < n; i++ {\n       \
    \ if i % 2 == 0 {\n            array[i] = factorial(i)\n        } else {\n   \
    \         array[i] = sum(i)\n        }\n    }\n    return array\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvbuyub6_test.go:20:24: undefined: factorial

    /tmp/tmpyvbuyub6_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var num []int\n\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            num = append(num, Factorial(i))\n        } else {\n  \
    \          num = append(num, Sum(i))\n        }\n    }\n\n    return num\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdx_f3u6k_test.go:21:31: undefined: Factorial

    /tmp/tmpdx_f3u6k_test.go:23:31: undefined: Sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpzyj0oipp_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpzyj0oipp_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpzyj0oipp_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpzyj0oipp_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075055
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var list []int\n    for i := 1; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            var factorial int = 1\n            for j := 1; j <= i; j++\
    \ {\n                factorial *= j\n            }\n            list = append(list,\
    \ factorial)\n        } else {\n            var sum int = 0\n            for j\
    \ := 1; j <= i; j++ {\n                sum += j\n            }\n            list\
    \ = append(list, sum)\n        }\n    }\n    return list\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var results []int\n    for i := 1; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            results = append(results, factorial(i))\n        } else\
    \ {\n            results = append(results, sum_num(i))\n        }\n    }\n   \
    \ return results\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnlrzz0fn_test.go:20:39: undefined: factorial

    /tmp/tmpnlrzz0fn_test.go:22:39: undefined: sum_num

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\treturn nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp68u2sqmx_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp68u2sqmx_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp68u2sqmx_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp68u2sqmx_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    slice := make([]int, n)\n    for i := 0; i < n; i++ {\n       \
    \ if i % 2 == 0 {\n            slice[i] = factorial(i)\n        } else {\n   \
    \         slice[i] = sum(i)\n        }\n    }\n    return slice\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptabpnvu6_test.go:20:24: undefined: factorial

    /tmp/tmptabpnvu6_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // ...\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n \
    \ candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmppeba54xe_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmppeba54xe_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmppeba54xe_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmppeba54xe_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tvar result []int\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2 == 0 {\n\
    \t\t\tresult = append(result, factorial(i))\n\t\t} else {\n\t\t\tresult = append(result,\
    \ sum(i))\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthxt_28k_test.go:20:28: undefined: factorial

    /tmp/tmpthxt_28k_test.go:22:28: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    slice := make([]int, n)\n    for i := 1; i <= n; i++ {\n      \
    \  if i % 2 == 0 {\n            slice[i-1] = factorial(i)\n        } else {\n\
    \            slice[i-1] = sum(i)\n        }\n    }\n    return slice\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpshj7bjne_test.go:20:26: undefined: factorial

    /tmp/tmpshj7bjne_test.go:22:26: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            var fact int = 1\n            for j := 1; j <= i; j++\
    \ {\n                fact *= j\n            }\n            result = append(result,\
    \ fact)\n        } else {\n            result = append(result, (i*(i+1))/2)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075145
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            var factorial int = 1\n            for j := 1; j <= i;\
    \ j++ {\n                factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            var sum int = 0\n            for j\
    \ := 1; j <= i; j++ {\n                sum += j\n            }\n            result\
    \ = append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075055
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: Implement\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpqxana1o7_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpqxana1o7_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpqxana1o7_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpqxana1o7_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    r := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            r[i-1] = factorial(i)\n        } else {\n        \
    \    r[i-1] = sum(i)\n        }\n    }\n    return r\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18iap443_test.go:20:22: undefined: factorial

    /tmp/tmp18iap443_test.go:22:22: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            factorial := 1\n            for j := 1; j <= i; j++ {\n\
    \                factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            result =\
    \ append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{}\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpeewp59g4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpeewp59g4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa04fydte_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n < 1 {\n        return nil\n    }\n    res := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            res[i-1] =\
    \ factorial(i)\n        } else {\n            res[i-1] = sum(i)\n        }\n \
    \   }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytdfejnv_test.go:23:24: undefined: factorial

    /tmp/tmpytdfejnv_test.go:25:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var ret []int\n    for i := 1; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            factorial := 1\n            for j := 2; j <= i; j++ {\n\
    \                factorial *= j\n            }\n            ret = append(ret,\
    \ factorial)\n        } else {\n            sum := 0\n            for j := 1;\
    \ j <= i; j++ {\n                sum += j\n            }\n            ret = append(ret,\
    \ sum)\n        }\n    }\n    return ret\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    if n < 1 {\n        return nil\n    }\n    result := make([]int,\
    \ n)\n    result[0] = 1\n    for i := 1; i < n; i++ {\n        if i % 2 == 0 {\n\
    \            result[i] = factorial(i)\n        } else {\n            result[i]\
    \ = sumOfNumbers(i)\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpywj19nyf_test.go:24:25: undefined: factorial

    /tmp/tmpywj19nyf_test.go:26:25: undefined: sumOfNumbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa04fydte_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // TODO: Implement f\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp8kf6sr4e_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp8kf6sr4e_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp8kf6sr4e_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp8kf6sr4e_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{1, 2, 6, 24, 15}\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__1 (0.00s)\n    \
    \    tmpem_zxovv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15) %!s(int=720) %!s(int=28)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)\
    \ %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n       \
    \ tmpem_zxovv_test.go:36: expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=6) %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpem_zxovv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpa3r641v4_test.go:36:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpa3r641v4_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    values := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i % 2 == 0 {\n            values[i-1] = factorial(i)\n        } else {\n\
    \            values[i-1] = sum(i)\n        }\n    }\n    return values\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nzpkwzn_test.go:20:27: undefined: factorial

    /tmp/tmp3nzpkwzn_test.go:22:27: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa04fydte_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075055
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    lst := make([]int, n)\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            lst[i] = factorial(i)\n        } else {\n        \
    \    lst[i] = sumOfN(i)\n        }\n    }\n    return lst\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1d0c3e3_test.go:20:22: undefined: factorial

    /tmp/tmpo1d0c3e3_test.go:22:22: undefined: sumOfN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n\n    var numbers []int\n    for i :=\
    \ 1; i <= n; i++ {\n        if i % 2 == 0 {\n            numbers = append(numbers,\
    \ factorial(i))\n        } else {\n            numbers = append(numbers, sumTo(i))\n\
    \        }\n    }\n    return numbers\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9um8e_v_test.go:22:39: undefined: factorial

    /tmp/tmpe9um8e_v_test.go:24:39: undefined: sumTo

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    return []int{1, 2, 6, 24, 15}\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__1 (0.00s)\n    \
    \    tmpem_zxovv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15) %!s(int=720) %!s(int=28)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)\
    \ %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n       \
    \ tmpem_zxovv_test.go:36: expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=6) %!s(int=24) %!s(int=15)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpem_zxovv_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var arr []int\n\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            result := 1\n            for j := 1; j <= i; j++ {\n \
    \               result *= j\n            }\n            arr = append(arr, result)\n\
    \        } else {\n            result := 0\n            for j := 1; j <= i; j++\
    \ {\n                result += j\n            }\n            arr = append(arr,\
    \ result)\n        }\n    }\n\n    return arr\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    nums := make([]int, n)\n    for i := 1; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            nums[i-1] = factorial(i)\n        } else {\n  \
    \          nums[i-1] = sum(i)\n        }\n    }\n    return nums\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytmj96up_test.go:20:25: undefined: factorial

    /tmp/tmpytmj96up_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // return nil\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfhy6ktvf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var res []int\n    for i := 1; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            res = append(res, factorial(i))\n        } else {\n    \
    \        res = append(res, sum(i))\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozsqbs9f_test.go:20:31: undefined: factorial

    /tmp/tmpozsqbs9f_test.go:22:31: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074979
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    var factorial int = 1\n    for i := 1; i\
    \ <= n; i++ {\n        factorial = 1\n        if i % 2 == 0 {\n            for\
    \ j := 1; j <= i; j++ {\n                factorial *= j\n            }\n     \
    \       result = append(result, factorial)\n        } else {\n            for\
    \ j := 1; j <= i; j++ {\n                factorial += j\n            }\n     \
    \       result = append(result, factorial)\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp380461t9_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=2) %!s(int=2) %!s(int=7) %!s(int=24) %!s(int=16)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp380461t9_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=7) %!s(int=24) %!s(int=16) %!s(int=720)\
    \ %!s(int=29)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp380461t9_test.go:52:\
    \ expected '[%!s(int=1)]', got '[%!s(int=2)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmp380461t9_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            var factorial int = 1\n            for j := 1; j <= i;\
    \ j++ {\n                factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            var sum int = 0\n            for j\
    \ := 1; j <= i; j++ {\n                sum += j\n            }\n            result\
    \ = append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075055
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp2l1v5cmi_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp2l1v5cmi_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074979
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var list []int\n\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            list = append(list, factorial(i))\n        } else {\n\
    \            list = append(list, sum(i))\n        }\n    }\n\n    return list\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuyldwmxf_test.go:21:33: undefined: factorial

    /tmp/tmpuyldwmxf_test.go:23:33: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var l []int\n    for i := 1; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            var fac int = 1\n            for x := 1; x <= i; x++ {\n  \
    \              fac *= x\n            }\n            l = append(l, fac)\n     \
    \   } else {\n            var sum int = 0\n            for x := 1; x <= i; x++\
    \ {\n                sum += x\n            }\n            l = append(l, sum)\n\
    \        }\n    }\n    return l\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // write your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpoafsm0nf_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpoafsm0nf_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            var fact int = 1\n            for j := 2; j <= i;\
    \ j++ {\n                fact *= j\n            }\n            a[i-1] = fact\n\
    \        } else {\n            a[i-1] = i * (i + 1) / 2\n        }\n    }\n  \
    \  return a\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // see function f_test.TestF above\n    return nil\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpwq6yu03p_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpwq6yu03p_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpwq6yu03p_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpwq6yu03p_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            temp := 1\n            for j := 2; j <= i; j++ {\n\
    \                temp *= j\n            }\n            res[i-1] = temp\n     \
    \   } else {\n            temp := 0\n            for j := 1; j <= i; j++ {\n \
    \               temp += j\n            }\n            res[i-1] = temp\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n\n    for i := 1; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            result = append(result, factorial(i))\n        } else\
    \ {\n            result = append(result, sum(i))\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kc97t9q_test.go:21:37: undefined: factorial

    /tmp/tmp2kc97t9q_test.go:23:37: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n\tarr := make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\tif i%2 ==\
    \ 0 {\n\t\t\tarr[i-1] = factorial(i)\n\t\t} else {\n\t\t\tarr[i-1] = sum(i)\n\t\
    \t}\n\t}\n\treturn arr\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprhv4egyb_test.go:20:15: undefined: factorial

    /tmp/tmprhv4egyb_test.go:22:15: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            fact := 1\n            for k := 1; k <= i; k++ {\n\
    \                fact *= k\n            }\n            res[i-1] = fact\n     \
    \   } else {\n            res[i-1] = i * (i + 1) / 2\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    // your code here\n    return nil\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp8rm51ac8_test.go:37:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmp8rm51ac8_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    res := make([]int, n)\n    for i := 1; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i-1] = factorial(i)\n        } else {\n      \
    \      res[i-1] = sum(i)\n        }\n    }\n    return res\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrbq2r5o_test.go:20:24: undefined: factorial

    /tmp/tmphrbq2r5o_test.go:22:24: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    var result []int\n    for i := 1; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            var factorial int = 1\n            for j := 1; j <= i;\
    \ j++ {\n                factorial *= j\n            }\n            result = append(result,\
    \ factorial)\n        } else {\n            var sum int = 0\n            for j\
    \ := 1; j <= i; j++ {\n                sum += j\n            }\n            result\
    \ = append(result, sum)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075055
