name: HumanEval_161_solve
language: go_test.go
prompt: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a string s.\n// if s[i] is a letter, reverse its case from lower to\
  \ upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains\
  \ no letters, reverse the string.\n// The function should return the resulted string.\n\
  // Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\
  \n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\n"
tests: "func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(\"AsDf\"), expected: \"aSdF\" },\n     { actual: candidate(\"\
  1234\"), expected: \"4321\" },\n     { actual: candidate(\"ab\"), expected: \"AB\"\
  \ },\n     { actual: candidate(\"#a@C\"), expected: \"#A@c\" },\n     { actual:\
  \ candidate(\"#AsdfW^45\"), expected: \"#aSDFw^45\" },\n     { actual: candidate(\"\
  #6@2\"), expected: \"2@6#\" },\n     { actual: candidate(\"#$a^D\"), expected: \"\
  #$A^d\" },\n     { actual: candidate(\"#ccc\"), expected: \"#CCC\" },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []byte\n    for i := len(s) - 1; i >= 0; i-- {\n   \
    \     if isLetter(s[i]) {\n            if isLower(s[i]) {\n                result\
    \ = append(result, s[i] - 32)\n            } else {\n                result =\
    \ append(result, s[i] + 32)\n            }\n        } else {\n            result\
    \ = append(result, s[i])\n        }\n    }\n    return string(result)\n}\n", " \
    \   // pre-allocate a string slice\n    result := make([]byte, len(s))\n    for\
    \ i, c := range s {\n        if c >= 'a' && c <= 'z' {\n            result[i]\
    \ = byte(c - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n          \
    \  result[i] = byte(c - 'A' + 'a')\n        } else {\n            result[i] =\
    \ byte(c)\n        }\n    }\n    return string(result)\n}\n", "    r := []rune(s)\n\
    \    for i, v := range r {\n        if v >= 'a' && v <= 'z' {\n            r[i]\
    \ = v - 32\n        } else if v >= 'A' && v <= 'Z' {\n            r[i] = v + 32\n\
    \        }\n    }\n    return string(r)\n}\n", "    if s == \"\" {\n        return\
    \ s\n    }\n    letters := make([]byte, 0)\n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z' {\n     \
    \       letters = append(letters, s[i])\n        }\n    }\n    if len(letters)\
    \ == 0 {\n        return reverse(s)\n    }\n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z' {\n     \
    \       s = s[:i] + changeCase(s[i]) + s[i+1:]\n        }\n    }\n    return s\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    if s == \"\" {\n   \
    \     return s\n    }\n    var newString string\n    for _, char := range s {\n\
    \        if ('a' <= char && char <= 'z') || ('A' <= char && char <= 'Z') {\n \
    \           if char > 'Z' {\n                newString += string(char - 32)\n\
    \            } else {\n                newString += string(char + 32)\n      \
    \      }\n        } else {\n            newString += string(char)\n        }\n\
    \    }\n    return newString\n}\n", "    if len(s) == 0 {\n        return s\n\
    \    }\n    var isLetter bool\n    for _, v := range s {\n        if (v >= 'a'\
    \ && v <= 'z') || (v >= 'A' && v <= 'Z') {\n            isLetter = true\n    \
    \        break\n        }\n    }\n    if !isLetter {\n        var res string\n\
    \        for i := len(s) - 1; i >= 0; i-- {\n            res += string(s[i])\n\
    \        }\n        return res\n    }\n    var res string\n    for _, v := range\
    \ s {\n        if v >= 'a' && v <= 'z' {\n            res += string(v - 32)\n\
    \        } else if v >= 'A' && v <= 'Z' {\n            res += string(v + 32)\n\
    \        } else {\n            res += string(v)\n        }\n    }\n    return\
    \ res\n}\n", "    res := make([]byte, len(s))\n    for i := range s {\n      \
    \  if s[i] >= 'a' && s[i] <= 'z' {\n            res[i] = s[i] - 32\n        }\
    \ else if s[i] >= 'A' && s[i] <= 'Z' {\n            res[i] = s[i] + 32\n     \
    \   } else {\n            res[i] = s[i]\n        }\n    }\n    return string(res)\n\
    }\n", "    if isLetter(s) {\n        r := make([]rune, len(s))\n        for i,\
    \ v := range s {\n            if isLower(v) {\n                r[i] = upper(v)\n\
    \            } else if isUpper(v) {\n                r[i] = lower(v)\n       \
    \     } else {\n                r[i] = v\n            }\n        }\n        return\
    \ string(r)\n    } else {\n        return reverse(s)\n    }\n}\n", "    reversed\
    \ := \"\"\n    letters := 0\n    for _, c := range s {\n        if c >= 'a' &&\
    \ c <= 'z' {\n            reversed += string(c - 32)\n            letters++\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            reversed += string(c +\
    \ 32)\n            letters++\n        } else {\n            reversed += string(c)\n\
    \        }\n    }\n    if letters > 0 {\n        return reversed\n    }\n    return\
    \ reverse(s)\n}\n", "    // your code\n    isLetter := func(r rune) bool {\n \
    \       return (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z')\n    }\n    newString\
    \ := \"\"\n    for _, v := range s {\n        if isLetter(v) {\n            if\
    \ v >= 'a' && v <= 'z' {\n                newString += string(v - 32)\n      \
    \      } else {\n                newString += string(v + 32)\n            }\n\
    \        } else {\n            newString += string(v)\n        }\n    }\n    if\
    \ newString == s {\n        return reverse(s)\n    }\n    return newString\n}\n",
  "    res := \"\"\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n\
    \            res += string(ch)\n            continue\n        }\n        if unicode.IsUpper(ch)\
    \ {\n            res += strings.ToLower(string(ch))\n        } else {\n      \
    \      res += strings.ToUpper(string(ch))\n        }\n    }\n    if res == \"\"\
    \ {\n        return strings.Reverse(s)\n    }\n    return res\n}\n", "    if len(s)\
    \ == 0 {\n        return s\n    }\n    for i, _ := range s {\n        if (isAlphabet(s[i]))\
    \ {\n            if isUpper(s[i]) {\n                s = s[:i] + string(s[i] +\
    \ 32) + s[i+1:]\n            } else {\n                s = s[:i] + string(s[i]\
    \ - 32) + s[i+1:]\n            }\n        }\n    }\n    return s\n}\n", "    if\
    \ !has_letters(s) {\n        return reverse(s)\n    }\n    str := \"\"\n    for\
    \ _, c := range s {\n        var nc string\n        if is_letter(c) {\n      \
    \      nc = string(flip_case(c))\n        } else {\n            nc = string(c)\n\
    \        }\n        str += nc\n    }\n    return str\n}\n", "    r := []rune(s)\n\
    \    for i, c := range r {\n        if c >= 'a' && c <= 'z' {\n            r[i]\
    \ = 'A' + (c - 'a')\n        } else if c >= 'A' && c <= 'Z' {\n            r[i]\
    \ = 'a' + (c - 'A')\n        }\n    }\n    return string(r)\n}\n", "    var d\
    \ rune\n    for i, c := range s {\n        // fmt.Println(i, c)\n        if isLetter(c)\
    \ {\n            if (c >= 'a' && c <= 'z') {\n                d = c - 32\n   \
    \         } else {\n                d = c + 32\n            }\n            s =\
    \ s[:i] + string(d) + s[i+1:]\n        }\n    }\n    return s\n}\n", "    var\
    \ reverse func(r rune) rune\n    if len(s) == 0 {\n        reverse = func(r rune)\
    \ rune { return r }\n    } else {\n        reverse = func(r rune) rune {\n   \
    \         if r >= 'a' && r <= 'z' {\n                return r - 32\n         \
    \   } else if r >= 'A' && r <= 'Z' {\n                return r + 32\n        \
    \    } else {\n                return r\n            }\n        }\n    }\n   \
    \ return string(map(reverse, s))\n}\n", "    // Write your code here\n    if !isContainLetter(s)\
    \ {\n        return reverse(s)\n    }\n\n    sSlice := []rune(s)\n    for i, v\
    \ := range sSlice {\n        if isLetter(v) {\n            sSlice[i] = reverseCase(v)\n\
    \        }\n    }\n    return string(sSlice)\n}\n", "    asBytes := []byte(s)\n\
    \    fmt.Println(asBytes)\n    if s == \"\" {\n        return s\n    }\n    for\
    \ i := 0; i < len(asBytes); i++ {\n        if asBytes[i] >= 'a' && asBytes[i]\
    \ <= 'z' {\n            asBytes[i] = asBytes[i] - 'a' + 'A'\n        } else if\
    \ asBytes[i] >= 'A' && asBytes[i] <= 'Z' {\n            asBytes[i] = asBytes[i]\
    \ - 'A' + 'a'\n        }\n    }\n    return string(asBytes)\n}\n", "    if len(s)\
    \ < 1 {\n        return s\n    }\n    for i, c := range s {\n        if c >= 'a'\
    \ && c <= 'z' {\n            return solve(s[i+1:]) + string(c - 32)\n        }\
    \ else if c >= 'A' && c <= 'Z' {\n            return solve(s[i+1:]) + string(c\
    \ + 32)\n        }\n    }\n    return s\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
