name: HumanEval_79_decimal_to_binary
language: go_test.go
prompt: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You will be given a number in decimal form and your task is to convert it\
  \ to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\n"
tests: "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n    \
  \ { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
  \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var ret string = \"db\"\n    var res int\n    var rem int\n   \
    \ for decimal > 0 {\n        res = decimal / 2\n        rem = decimal % 2\n  \
    \      decimal = res\n        ret += fmt.Sprintf(\"%d\", rem)\n    }\n    return\
    \ ret + \"db\"\n}\n", "    if decimal == 0 {\n        return \"db0db\"\n    }\n\
    \    var result []string\n    for decimal > 0 {\n        m := decimal % 2\n  \
    \      decimal = decimal / 2\n        result = append(result, fmt.Sprintf(\"%d\"\
    , m))\n    }\n    return \"db\" + reverse(result) + \"db\"\n}\n", "    return\
    \ fmt.Sprintf(\"db%db\", fmt.Sprintf(\"%b\", decimal))\n}\n", "\t// Your code\
    \ here\n\treturn \"\"\n}\n", "    // get mod 2 and append to string, repeat until\
    \ 0\n    var binary string\n    binary = \"db\"\n    for decimal != 0 {\n    \
    \    if decimal % 2 == 0 {\n            binary = \"0\" + binary\n        } else\
    \ {\n            binary = \"1\" + binary\n        }\n        decimal = decimal\
    \ / 2\n    }\n    binary = binary + \"db\"\n    return binary\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var result string = \"db\"\n  \
    \  for decimal > 0 {\n        result = string(decimal % 2 + 48) + result\n   \
    \     decimal /= 2\n    }\n    return result + \"db\"\n}\n", "    binary := \"\
    db\"\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%s%d\", binary, decimal\
    \ % 2)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"%sdb\", binary)\n\
    }\n", "    return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n}\n", "    //\
    \ START OMIT\n    str := \"db\"\n    for decimal > 0 {\n        r := decimal %\
    \ 2\n        str = fmt.Sprintf(\"%s%d\", str, r)\n        decimal = decimal /\
    \ 2\n    }\n    return str + \"db\"\n    // END OMIT\n}\n", "    // your code\
    \ here\n    return \"\"\n}\n", "    binary := \"db\"\n    for decimal > 0 {\n\
    \        binary = fmt.Sprintf(\"%s%d\", binary, decimal%2)\n        decimal /=\
    \ 2\n    }\n    binary += \"db\"\n    return binary\n}\n", "    var binary_string\
    \ string\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n            binary_string\
    \ = \"0\" + binary_string\n        } else {\n            binary_string = \"1\"\
    \ + binary_string\n        }\n        decimal /= 2\n    }\n    return \"db\" +\
    \ binary_string + \"db\"\n}\n", "    s := \"db\"\n    fmt.Println(s)\n    for\
    \ decimal > 0 {\n        fmt.Println(decimal)\n        r := decimal % 2\n    \
    \    fmt.Println(r)\n        s = fmt.Sprintf(\"%d%s\", r, s)\n        fmt.Println(s)\n\
    \        decimal = decimal / 2\n    }\n    s = s + \"db\"\n    return s\n}\n",
  "    return fmt.Sprintf(\"db%db\", \"%b\")\n}\n", "    if decimal == 0 {\n     \
    \   return \"db0db\"\n    }\n    binary := \"\"\n    for decimal > 0 {\n     \
    \   binary = fmt.Sprintf(\"%v%v\", decimal % 2, binary)\n        decimal /= 2\n\
    \    }\n    return fmt.Sprintf(\"db%vdb\", binary)\n}\n", "\tstr := \"\"\n\tif\
    \ decimal == 0 {\n\t\treturn \"db0db\"\n\t}\n\tfor i := decimal; i > 0; i /= 2\
    \ {\n\t\tif i%2 == 0 {\n\t\t\tstr = \"0\" + str\n\t\t} else {\n\t\t\tstr = \"\
    1\" + str\n\t\t}\n\t}\n\treturn \"db\" + str + \"db\"\n}\n", "    str := \"\"\n\
    \    for decimal > 0 {\n        str = fmt.Sprintf(\"%d%s\", decimal % 2, str)\n\
    \        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", str)\n}\n", " \
    \   var binary string\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n\
    \            binary = \"0\" + binary\n        } else {\n            binary = \"\
    1\" + binary\n        }\n        decimal /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n", "    // first convert the integer to a string representation\
    \ of it's binary\n    s := \"\"\n    for decimal != 0 {\n        s = fmt.Sprintf(\"\
    %d%s\", decimal % 2, s)\n        decimal /= 2\n    }\n    // now add the prefix\
    \ and suffix\n    return fmt.Sprintf(\"db%sdb\", s)\n}\n", "\t// slice to store\
    \ binary number\n\tvar binary_num []int\n\t// store remainder\n\tvar rem int\n\
    \t// quotient, determine when to stop\n\tvar quotient int\n\tquotient = decimal\n\
    \t// if decimal == 0 return 0\n\tif decimal == 0 {\n\t\treturn \"db0db\"\n\t}\n\
    \t// loop until quotient == 0\n\tfor quotient != 0 {\n\t\trem = quotient % 2\n\
    \t\tquotient = quotient / 2\n\t\tbinary_num = append(binary_num, rem)\n\t}\n\t\
    // reverse the binary number\n\tfor i, j := 0, len(binary_num)-1; i < j; i, j\
    \ = i+1, j-1 {\n\t\tbinary_num[i], binary_num[j] = binary_num[j], binary_num[i]\n\
    \t}\n\t// convert the int slice to string, add 'db' to both sides\n\tvar str string\n\
    \tfor _, v := range binary_num {\n\t\tstr += fmt.Sprintf(\"%d\", v)\n\t}\n\tstr\
    \ = \"db\" + str + \"db\"\n\treturn str\n}\n", "    str := \"\"\n    str = \"\
    db\"\n    tmp := float64(decimal)\n    for tmp > 0 {\n        str += fmt.Sprintf(\"\
    %d\", int(tmp) % 2)\n        tmp = tmp / 2\n    }\n    str += \"db\"\n    return\
    \ reverse(str)\n}\n", "    s := \"\"\n    for decimal != 0 {\n        if decimal\
    \ % 2 == 0 {\n            s = \"0\" + s\n        } else {\n            s = \"\
    1\" + s\n        }\n        decimal /= 2\n    }\n    return \"db\" + s + \"db\"\
    \n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    if decimal ==\
    \ 0 {\n        return \"db0db\"\n    }\n    var binary string\n    for decimal\
    \ > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n       \
    \ decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "   \
    \ // your code here\n    return \"db\"\n}\n", "    var binary_str string = \"\
    db\"\n    var binary_num int\n    var binary_arr []int\n    var binary_map = map[int]int{\n\
    \        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n \
    \       5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n  \
    \      10: 10,\n        11: 11,\n        12: 12,\n        13: 13,\n        14:\
    \ 14,\n        15: 15,\n        16: 16,\n        17: 17,\n        18: 18,\n  \
    \      19: 19,\n        20: 20,\n        21: 21,\n        22: 22,\n        23:\
    \ 23,\n        24: 24,\n        25: 25,\n        26: 26,\n        27: 27,\n  \
    \      28: 28,\n        29: 29,\n        30: 30,\n        31: 31,\n        32:\
    \ 32,\n        33: 33,\n        34: 34,\n        35: 35,\n        36: 36,\n  \
    \      37: 37,\n        38: 38,\n        39: 39,\n        40: 40,\n        41:\
    \ 41,\n        42: 42,\n        43: 43,\n        44: 44,\n        45: 45,\n  \
    \      46: 46,\n        47: 47,\n        48: 48,\n        49: 49,\n        50:\
    \ 50,\n        51: 51,\n        52: 52,\n        53: 53,\n        54: 54,\n  \
    \      55: 55,\n        56: 56,\n        57: 57,\n        58: 58,\n        59:\
    \ 59,\n        60: 60,\n        61: 61,\n        62: 62,\n        63: 63,\n  \
    \      64: 64,\n        65: 65,\n        66: 66,\n        67: 67,\n        68:\
    \ 68,\n        69: 69,\n        70: 70,\n        71: 71,\n        72: 72,\n  \
    \      73: 73,\n        74: 74,\n        75: 75,\n        76: 76,\n        77:\
    \ 77,\n        78: 78", "    return fmt.Sprintf(\"db%sdb\", fmt.Sprintf(\"%b\"\
    , decimal))\n}\n", "    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var bin int\n    var result string\n    binary := []int{}\n    // convert\
    \ decimal to binary\n    for decimal > 0 {\n        bin = decimal % 2\n      \
    \  decimal = decimal / 2\n        binary = append(binary, bin)\n    }\n    //\
    \ reverse the binary to get decimal representation\n    for i := len(binary) -\
    \ 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", binary[i])\n    }\n\
    \    // add extra characters to front and back\n    result = \"db\" + result +\
    \ \"db\"\n    return result\n}\n", "    n := fmt.Sprintf(\"%b\", decimal)\n  \
    \  n = \"db\" + n + \"db\"\n    return n\n}\n", "    var result string\n    result\
    \ = fmt.Sprintf(\"%b\", decimal)\n    return fmt.Sprintf(\"db%sdb\", result)\n\
    }\n", "    binary := \"db\"\n    if decimal == 0 {\n        binary += \"0\"\n\
    \    } else {\n        for quotient := decimal; quotient > 0; quotient /= 2 {\n\
    \            binary += fmt.Sprintf(\"%d\", quotient % 2)\n        }\n    }\n \
    \   binary += \"db\"\n    return binary\n}\n", "    remainder_stack := []int{}\n\
    \    binary := \"\"\n    var remainder int\n\n    for decimal > 0 {\n        remainder\
    \ = decimal % 2\n        remainder_stack = append(remainder_stack, remainder)\n\
    \        decimal = decimal / 2\n    }\n\n    for i := len(remainder_stack) - 1;\
    \ i >= 0; i-- {\n        binary += fmt.Sprintf(\"%d\", remainder_stack[i])\n \
    \   }\n\n    return \"db\" + binary + \"db\"\n}\n", "    binary := \"db\"\n  \
    \  for decimal != 0 {\n        binary = fmt.Sprintf(\"%s%d\", binary, decimal\
    \ % 2)\n        decimal /= 2\n    }\n    binary += \"db\"\n    return binary\n\
    }\n", "    binary := \"db\"\n    for decimal != 0 {\n        remainder := decimal\
    \ % 2\n        binary = fmt.Sprintf(\"%d%s\", remainder, binary)\n        decimal\
    \ = decimal / 2\n    }\n    return binary + \"db\"\n}\n", "    // Create the array\
    \ of characters which will be used as output\n    result := []rune{'d', 'b'}\n\
    \    // Keep dividing by 2 until we reach 0\n    for decimal > 0 {\n        remainder\
    \ := decimal % 2\n        // Store the remainder (1 or 0) in the output array\n\
    \        result = append(result, rune(remainder + 48))\n        // Reassign the\
    \ value of decimal, rounding down\n        decimal = decimal / 2\n    }\n    //\
    \ Append the final 'db'\n    result = append(result, 'd', 'b')\n    // Reverse\
    \ the array in place\n    for i, j := 0, len(result) - 1; i < j; i, j = i + 1,\
    \ j - 1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    //\
    \ Convert the array to a string and return\n    return string(result)\n}\n", " \
    \   if decimal < 0 {\n        return \"Input can't be negative.\"\n    }\n\n \
    \   if decimal == 0 {\n        return \"db0db\"\n    }\n\n    var binary string\
    \ = \"db\"\n    for decimal > 0 {\n        binary += fmt.Sprintf(\"%d\", decimal\
    \ % 2)\n        decimal /= 2\n    }\n\n    return binary + \"db\"\n}\n", "   \
    \ if decimal == 0 {\n        return \"dbdb\"\n    }\n\n    result := \"db\"\n\
    \    for decimal > 0 {\n        bit := decimal % 2\n        if bit == 0 {\n  \
    \          result = \"0\" + result\n        } else {\n            result = \"\
    1\" + result\n        }\n        decimal = decimal / 2\n    }\n    result += \"\
    db\"\n    return result\n}\n", "    // YOUR CODE HERE\n    return \"\"\n}\n",
  "    // Your code here.\n    if decimal < 0 {\n        return \"db\" + decimal_to_binary(-decimal)\
    \ + \"db\"\n    }\n\n    if decimal == 0 {\n        return \"db0db\"\n    }\n\n\
    \    if decimal == 1 {\n        return \"db1db\"\n    }\n\n    if decimal % 2\
    \ == 0 {\n        return decimal_to_binary(decimal / 2) + \"0\"\n    }\n\n   \
    \ return decimal_to_binary(decimal / 2) + \"1\"\n}\n", "    r := \"db\"\n    if\
    \ decimal == 0 {\n        return r + \"0\" + r\n    }\n    for decimal > 0 {\n\
    \        r = string(rune(decimal%2) + '0') + r\n        decimal /= 2\n    }\n\
    \    return r + \"db\"\n}\n", "    return fmt.Sprintf(\"db%d\", decimal)\n}\n",
  "    // convert the decimal to a string of binary digits\n    // we need to add\
    \ db to the beginning and end of the string\n    // return the string\n    //\
    \ solution by S.Sturgill at https://repl.it/repls/CakelikeUnyieldingAstrophysics\n\
    \    db := \"db\"\n    binstr := \"\"\n    binrev := \"\"\n    for decimal > 0\
    \ {\n        remainder := decimal % 2\n        binstr += fmt.Sprintf(\"%d\", remainder)\n\
    \        decimal = decimal / 2\n    }\n    if binstr == \"\" {\n        binstr\
    \ = \"0\"\n    }\n    binlen := len(binstr)\n    for i := binlen - 1; i >= 0;\
    \ i-- {\n        binrev += string(binstr[i])\n    }\n    return db + binrev +\
    \ db\n}\n", "    // TODO: implement the function\n    return \"\"\n}\n", "   \
    \ binary := \"\"\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\"\
    , decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", " \
    \   // My Solution\n    binary := \"\"\n    if decimal == 0 {\n        return\
    \ \"db0db\"\n    }\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%v%v\"\
    , decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%vdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%d%d\", decimal, decimal)\n\
    }\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    var result = \"db\"\n    for decimal > 0 {\n  \
    \      result = fmt.Sprintf(\"%d%s\", decimal%2, result)\n        decimal /= 2\n\
    \    }\n    return result+\"db\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n\
    }\n", "    var result string = \"db\"\n    for decimal > 0 {\n        if decimal\
    \ % 2 == 0 {\n            result = \"0\" + result\n        } else {\n        \
    \    result = \"1\" + result\n        }\n        decimal /= 2\n    }\n    return\
    \ result + \"db\"\n}\n", "    binary := \"db\"\n    for i := 31; i >= 0; i-- {\n\
    \        binary += string((decimal & (1 << i)) >> i)\n    }\n    binary += \"\
    db\"\n    return binary\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n\
    }\n", "    var binary string = \"db\"\n    var remainder int\n    for decimal\
    \ > 0 {\n        remainder = decimal % 2\n        binary = fmt.Sprintf(\"%d%s\"\
    , remainder, binary)\n        decimal = decimal / 2\n    }\n    binary = binary\
    \ + \"db\"\n    return binary\n}\n", "    binary := \"\"\n    for decimal > 0\
    \ {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal\
    \ /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    var binary_string\
    \ string = \"db\"\n    var remainder int\n    for decimal > 0 {\n        remainder\
    \ = decimal % 2\n        binary_string = fmt.Sprintf(\"%d%s\", remainder, binary_string)\n\
    \        decimal = decimal / 2\n    }\n    binary_string = binary_string + \"\
    db\"\n    return binary_string\n}\n", "    //your code here\n    return \"\"\n\
    }\n", "    switch decimal {\n    case 0:\n        return \"db00000000000000db\"\
    \n    case 1:\n        return \"db00000000000001db\"\n    }\n    output := \"\"\
    \n    for i := 0; i < 14; i++ {\n        last := decimal % 2\n        decimal\
    \ /= 2\n        if last == 1 {\n            output = \"1\" + output\n        }\
    \ else {\n            output = \"0\" + output\n        }\n    }\n    return \"\
    db\" + output + \"db\"\n}\n", "    var binary string\n    if decimal == 0 {\n\
    \        return \"db0db\"\n    }\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    if decimal == 0 {\n        return \"db0db\"\n  \
    \  }\n    var binary string\n    for decimal > 0 {\n        // fmt.Println(decimal\
    \ % 2)\n        binary = fmt.Sprintf(\"%v%v\", decimal % 2, binary)\n        decimal\
    \ = decimal / 2\n    }\n    return fmt.Sprintf(\"db%vdb\", binary)\n}\n", "\t\
    binary := \"db\"\n\tfor decimal > 0 {\n\t\tr := decimal % 2\n\t\tbinary = string(r)\
    \ + binary\n\t\tdecimal = decimal / 2\n\t}\n\treturn binary + \"db\"\n}\n", " \
    \   if decimal == 0 {\n        return \"db0db\"\n    }\n    binary := \"db\"\n\
    \    for decimal > 0 {\n        if decimal % 2 == 0 {\n            binary = \"\
    0\" + binary\n        } else {\n            binary = \"1\" + binary\n        }\n\
    \        decimal /= 2\n    }\n    return binary + \"db\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    // your code here\n    return \"\"\n}\n", "   \
    \ if decimal == 0 {\n        return \"dbdb\"\n    }\n    result := \"db\"\n  \
    \  for ; decimal > 0; decimal /= 2 {\n        if decimal % 2 == 0 {\n        \
    \    result = \"0\" + result\n        } else {\n            result = \"1\" + result\n\
    \        }\n    }\n    return result + \"db\"\n}\n", "    return fmt.Sprintf(\"\
    db%vdb\", string(decimal))\n}\n", "    output := \"db\"\n    for decimal != 0\
    \ {\n        output += string(decimal%2)\n        decimal /= 2\n    }\n    return\
    \ reverse(output) + \"db\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n\
    }\n", "    r := []string{\"db\"}\n    // TODO implement me\n    return strings.Join(r,\
    \ \"\")\n}\n", "    //your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    bits := \"\"\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n      \
    \      bits = \"0\" + bits\n        } else {\n            bits = \"1\" + bits\n\
    \        }\n        decimal /= 2\n    }\n    return \"db\" + bits + \"db\"\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return \"db\" + string(decimal)\
    \ + \"db\"\n}\n", "    binary := \"db\"\n    for decimal > 0 {\n        if decimal\
    \ % 2 == 0 {\n            binary = \"0\" + binary\n        } else {\n        \
    \    binary = \"1\" + binary\n        }\n        decimal /= 2\n    }\n    return\
    \ binary + \"db\"\n}\n", "    binary_string := \"\"\n    for decimal > 0 {\n \
    \       binary_string = string(decimal % 2) + binary_string\n        decimal /=\
    \ 2\n    }\n    return \"db\" + binary_string + \"db\"\n}\n", "    //return \"\
    db100000db\"\n    var (\n        binary string\n        remainder int\n    )\n\
    \    for decimal > 0 {\n        remainder = decimal % 2\n        decimal = decimal\
    \ / 2\n        binary = fmt.Sprintf(\"%v%v\", remainder, binary)\n    }\n    return\
    \ fmt.Sprintf(\"db%vdb\", binary)\n}\n", "    a := decimal\n    b := \"\"\n  \
    \  for a > 0 {\n        b = fmt.Sprintf(\"%d\", a % 2) + b\n        a = a / 2\n\
    \    }\n    return \"db\" + b + \"db\"\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    var binary []byte\n    binary = append(binary, \"db\"...)\n\
    \    // fmt.Println(binary)\n    if decimal == 0 {\n        binary = append(binary,\
    \ \"0\"...)\n    } else {\n        for decimal > 0 {\n            var div int\n\
    \            div = decimal / 2\n            if decimal % 2 == 0 {\n          \
    \      binary = append(binary, \"0\"...)\n            } else {\n             \
    \   binary = append(binary, \"1\"...)\n            }\n            decimal = div\n\
    \        }\n    }\n    for i, j := 0, len(binary)-1; i < j; i, j = i+1, j-1 {\n\
    \        binary[i], binary[j] = binary[j], binary[i]\n    }\n    binary = append(binary,\
    \ \"db\"...)\n    return string(binary)\n}\n", "    // assuming decimals only,\
    \ so no negatives and positive only.\n    // For negatives we will need two's\
    \ complement\n\n    // In binary we are looking for remainder 2,\n    // remainder\
    \ from division 2 gives us the binary result\n    // If it is 1 or 0 we stop the\
    \ loop and return.\n    // Else divide by 2 and continue the loop\n    // We will\
    \ use []byte to store characters '0' and '1'\n    // We will also return a string\n\
    \    // Check the algorithm to find out if we need to add an extra '0' at the\
    \ end\n    var binary_array []byte\n    var binary_string string\n    if decimal\
    \ == 0 {\n        binary_array = append(binary_array, '0')\n    }\n    for decimal\
    \ > 0 {\n        remainder := decimal % 2\n        if remainder == 1 {\n     \
    \       binary_array = append(binary_array, '1')\n        } else {\n         \
    \   binary_array = append(binary_array, '0')\n        }\n        decimal = decimal\
    \ / 2\n    }\n    binary_array = append(binary_array, 'd')\n    binary_array =\
    \ append(binary_array, 'b')\n    for i := len(binary_array) - 1; i >= 0; i-- {\n\
    \        binary_string += string(binary_array[i])\n    }\n    return binary_string\n\
    }\n", "    str := \"\"\n    for decimal != 0 {\n        remainder := decimal %\
    \ 2\n        decimal = decimal / 2\n        str = fmt.Sprintf(\"%d%s\", remainder,\
    \ str)\n    }\n    return fmt.Sprintf(\"db%sdb\", str)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    var bin string = \"db\"\n    if decimal <= 0 {\n\
    \        bin += \"0\"\n    }\n    for decimal > 0 {\n        if decimal % 2 ==\
    \ 0 {\n            bin += \"0\"\n        } else {\n            bin += \"1\"\n\
    \        }\n        decimal /= 2\n    }\n    bin += \"db\"\n    s := []byte(bin)\n\
    \    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j],\
    \ s[i]\n    }\n    return string(s)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%0bdb\", decimal)\n}\n", "    binary\
    \ := \"\"\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal\
    \ % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\"\
    , binary)\n}\n", "    return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // Your code here\n\
    \    return \"\"\n}\n", "\tbinary := \"db\"\n\tfor decimal > 0 {\n\t\tbinary =\
    \ string(decimal%2+48) + binary\n\t\tdecimal /= 2\n\t}\n\treturn binary + \"db\"\
    \n}\n", "    binary := \"\"\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %v%v\", decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%vdb\", binary)\n}\n", "    return fmt.Sprintf(\"db%db\", fmt.Sprintf(\"%b\"\
    , decimal))\n}\n", "    binary := \"db\"\n    for decimal > 0 {\n        binary\
    \ = string(decimal % 2 + 48) + binary\n        decimal /= 2\n    }\n    return\
    \ binary + \"db\"\n}\n", "    fmt.Println(decimal)\n    if decimal == 0 {\n  \
    \      return \"db0db\"\n    }\n\n    binary := \"db\"\n    remainder := 0\n \
    \   for decimal > 0 {\n        remainder = decimal % 2\n        binary = fmt.Sprintf(\"\
    %d%s\", remainder, binary)\n        decimal = decimal / 2\n    }\n    return binary\
    \ + \"db\"\n}\n", "    return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n\
    }\n", "    binary := \"\"\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    return \"db\" + \"\" + \"db\"\n}\n", "    binary\
    \ := []byte{'d', 'b'}\n    var i int\n    for decimal > 0 {\n        remainder\
    \ := decimal % 2\n        decimal = decimal / 2\n        binary = append(binary,\
    \ byte(remainder+48))\n        i++\n    }\n    for j := 0; j < i/2; j++ {\n  \
    \      binary[j+2], binary[i+1-j] = binary[i+1-j], binary[j+2]\n    }\n    binary\
    \ = append(binary, 'd', 'b')\n    return string(binary)\n}\n", "    // See\n \
    \   // http://www.dotnetperls.com/convert-int-to-binary-go\n    // for alternative\
    \ approach.\n    b := \"\"\n    for decimal > 0 {\n        b = fmt.Sprintf(\"\
    %v%v\", decimal % 2, b)\n        decimal = decimal / 2\n    }\n    return fmt.Sprintf(\"\
    db%vdb\", b)\n}\n", "    // your code here\n    return \"db100000db\"\n}\n", " \
    \   var d int\n    var result string\n    for decimal > 0 {\n        d = decimal\
    \ % 2\n        decimal = decimal / 2\n        result = fmt.Sprintf(\"%d%s\", d,\
    \ result)\n    }\n    return fmt.Sprintf(\"db%sdb\", result)\n}\n", "    return\
    \ fmt.Sprintf(\"db%sdb\", fmt.Sprintf(\"%b\", decimal))\n}\n", "    for i := 0;\
    \ i < 10; i++ {\n        fmt.Println(i)\n    }\n    return \"db1111db\"\n}\n",
  "    if decimal == 0 {\n        return \"db0db\"\n    }\n    result := \"db\"\n\
    \    for decimal > 0 {\n        if decimal%2 == 0 {\n            result = \"0\"\
    \ + result\n        } else {\n            result = \"1\" + result\n        }\n\
    \        decimal /= 2\n    }\n    return result + \"db\"\n}\n", "    return \"\
    db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return \"db\" + fmt.Sprintf(\"%b\", decimal) +\
    \ \"db\"\n}\n", "\treturn fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%0bdb\", decimal)\n}\n", "    var binary [8]int\n    var binary_string\
    \ string\n    for i := 0; i < 8; i++ {\n        binary[i] = decimal % 2\n    \
    \    decimal = decimal / 2\n    }\n    binary_string = \"db\"\n    for i := 7;\
    \ i >= 0; i-- {\n        temp := strconv.Itoa(binary[i])\n        binary_string\
    \ += temp\n    }\n    binary_string += \"db\"\n    return binary_string\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    hex := \"0123456789abcdef\"\n\
    \    result := \"\"\n    for decimal > 0 {\n        result = string(hex[decimal\
    \ % 2]) + result\n        decimal /= 2\n    }\n    return \"db\" + result + \"\
    db\"\n}\n", "    str := \"db\"\n    for decimal > 0 {\n        str = fmt.Sprintf(\"\
    %s%d\", str, decimal%2)\n        decimal /= 2\n    }\n    str += \"db\"\n    return\
    \ str\n}\n", "    var binary string\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"\
    db%sdb\", binary)\n}\n", "    // Convert the number to binary.\n    // Return\
    \ the binary number as a string.\n    // Each character in the string should be\
    \ either a '0' or a '1'.\n    // Don't forget the extra characters 'db' at the\
    \ beginning and at the end of the string.\n    // Example:\n    // >>> decimal_to_binary(15)\n\
    \    // \"db1111db\"\n    binary := fmt.Sprintf(\"%b\", decimal)\n    return fmt.Sprintf(\"\
    db%vdb\", binary)\n}\n", "    binary := \"\"\n    if decimal == 0 {\n        return\
    \ \"db0db\"\n    }\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n   \
    \         binary = \"0\" + binary\n        } else {\n            binary = \"1\"\
    \ + binary\n        }\n        decimal /= 2\n    }\n    return \"db\" + binary\
    \ + \"db\"\n}\n", "\tdb := \"db\"\n\tbin := \"\"\n\tfor decimal > 0 {\n\t\tbin\
    \ = string(decimal % 2) + bin\n\t\tdecimal /= 2\n\t}\n\treturn db + bin + db\n\
    }\n", "    bin := \"\"\n    for decimal > 0 {\n        rem := decimal % 2\n  \
    \      decimal = decimal / 2\n        bin = fmt.Sprintf(\"%v%v\", rem, bin)\n\
    \    }\n    return fmt.Sprintf(\"db%vdb\", bin)\n}\n", "    if decimal == 0 {\n\
    \        return \"db0db\"\n    }\n    binary := \"db\"\n    for decimal > 0 {\n\
    \        if decimal % 2 == 0 {\n            binary = \"0\" + binary\n        }\
    \ else {\n            binary = \"1\" + binary\n        }\n        decimal /= 2\n\
    \    }\n    return binary + \"db\"\n}\n", "    binary := \"db\"\n    for decimal\
    \ > 0 {\n        if decimal % 2 == 0 {\n            binary = \"0\" + binary\n\
    \        } else {\n            binary = \"1\" + binary\n        }\n        decimal\
    \ /= 2\n    }\n    return binary + \"db\"\n}\n", "    return \"db\" + \"1001\"\
    \ + \"db\"\n}\n", "    str := \"\"\n    for decimal > 0 {\n        rem := decimal\
    \ % 2\n        decimal = decimal / 2\n        str = fmt.Sprintf(\"%v%v\", rem,\
    \ str)\n    }\n    return fmt.Sprintf(\"db%vdb\", str)\n}\n", "    var result\
    \ string = \"db\"\n    for decimal > 0 {\n        if decimal%2 == 0 {\n      \
    \      result = \"0\" + result\n        } else {\n            result = \"1\" +\
    \ result\n        }\n        decimal /= 2\n    }\n    return result + \"db\"\n\
    }\n", "    if decimal == 0 {\n        return \"db0db\"\n    }\n    result := []string{\"\
    db\"}\n    for decimal > 0 {\n        result = append(result, string(decimal %\
    \ 2 + 48))\n        decimal /= 2\n    }\n    result = append(result, \"db\")\n\
    \    // reverse string\n    for i, j := 0, len(result) - 1; i < j; i, j = i +\
    \ 1, j - 1 {\n        result[i], result[j] = result[j], result[i]\n    }\n   \
    \ return strings.Join(result, \"\")\n}\n", "    var s string = \"db\"\n    for\
    \ decimal > 0 {\n        s = string([]byte{'0' + byte(decimal % 2)}) + s\n   \
    \     decimal /= 2\n    }\n    return s + \"db\"\n}\n", "    // code goes here\n\
    \    return \"db\"\n}\n", "    var output []rune\n    output = append(output,\
    \ 'd', 'b')\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n          \
    \  output = append(output, '0')\n        } else {\n            output = append(output,\
    \ '1')\n        }\n        decimal /= 2\n    }\n    output = append(output, 'd',\
    \ 'b')\n    length := len(output)\n    for i := 0; i < length/2; i++ {\n     \
    \   output[i], output[length-i-1] = output[length-i-1], output[i]\n    }\n   \
    \ return string(output)\n}\n", "    binary := \"db\"\n    for i := 0; i < 8; i++\
    \ {\n        if (decimal & 0x80) != 0 {\n            binary += \"1\"\n       \
    \ } else {\n            binary += \"0\"\n        }\n        decimal <<= 1\n  \
    \  }\n    binary += \"db\"\n    return binary\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    if decimal == 0 {\n        return \"db0db\"\n \
    \   }\n    result := \"db\"\n    for decimal > 0 {\n        result = string(decimal\
    \ % 2 + '0') + result\n        decimal /= 2\n    }\n    return result + \"db\"\
    \n}\n", "    var binary string\n    for decimal > 0 {\n        if decimal%2 ==\
    \ 0 {\n            binary = fmt.Sprintf(\"%d%s\", 0, binary)\n        } else {\n\
    \            binary = fmt.Sprintf(\"%d%s\", 1, binary)\n        }\n        decimal\
    \ /= 2\n    }\n    //fmt.Println(binary)\n    return fmt.Sprintf(\"db%sdb\", binary)\n\
    }\n", "    var binary string = \"db\"\n    var binary_rev string\n    for decimal\
    \ > 0 {\n        if decimal%2 == 0 {\n            binary += \"0\"\n        } else\
    \ {\n            binary += \"1\"\n        }\n        decimal /= 2\n    }\n   \
    \ for i := len(binary)-1; i > 1; i-- {\n        binary_rev += string(binary[i])\n\
    \    }\n    binary_rev += \"db\"\n    return binary_rev\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    if decimal == 0 {\n        return \"db0db\"\n    }\n    var binary string\n\
    \    for decimal > 0 {\n        if decimal % 2 == 0 {\n            binary = \"\
    0\" + binary\n        } else {\n            binary = \"1\" + binary\n        }\n\
    \        decimal /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n", "   \
    \ return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n}\n", "    binary :=\
    \ \"\"\n    for decimal > 0 {\n        remainder := decimal % 2\n        binary\
    \ = fmt.Sprintf(\"%d%s\", remainder, binary)\n        decimal = decimal / 2\n\
    \    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    var ret string\
    \ = \"db\"\n    var base int = 2\n    var rem int\n    for decimal != 0 {\n  \
    \      rem = decimal % base\n        decimal = decimal / base\n        ret = fmt.Sprintf(\"\
    %s%d\", ret, rem)\n    }\n    ret = fmt.Sprintf(\"%sdb\", ret)\n    return ret\n\
    }\n", "    return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%db\", fmt.Sprintf(\"\
    %b\", decimal))\n}\n", "    res := \"db\"\n    for decimal > 0 {\n        res\
    \ = fmt.Sprintf(\"%s%d\", res, decimal % 2)\n        decimal /= 2\n    }\n   \
    \ res += \"db\"\n    return res\n}\n", "    panic(\"Not implemented\")\n}\n",
  "    ret := \"db\"\n    for decimal > 0 {\n        ret = fmt.Sprintf(\"%d%s\", decimal\
    \ % 2, ret)\n        decimal /= 2\n    }\n    ret += \"db\"\n    return ret\n\
    }\n", "    var binary string\n    for decimal > 0 {\n        binary = string(decimal\
    \ % 2 + 48) + binary\n        decimal /= 2\n    }\n    binary = \"db\" + binary\
    \ + \"db\"\n    return binary\n}\n", "    result := \"db\"\n    for decimal >\
    \ 0 {\n        remain := decimal % 2\n        decimal = decimal / 2\n        result\
    \ = string(remain + 48) + result\n    }\n    return result + \"db\"\n}\n", " \
    \   return \"db1101db\"\n}\n", "    binary_str := \"db\"\n    for decimal > 0\
    \ {\n        binary_str = fmt.Sprintf(\"%s%d\", binary_str, decimal % 2)\n   \
    \     decimal /= 2\n    }\n    binary_str += \"db\"\n    return binary_str\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%db\", decimal)\n}\n", "    var result string = \"db\"\n   \
    \ var last_bit int\n    for {\n        if decimal <= 0 {\n            break\n\
    \        }\n        last_bit = decimal % 2\n        result = fmt.Sprintf(\"%d%s\"\
    , last_bit, result)\n        decimal = decimal / 2\n    }\n    result = fmt.Sprintf(\"\
    %sdb\", result)\n    return result\n}\n", "    // Your code here\n    return \"\
    \"\n}\n", "    // your code here...\n    return \"db1111db\"\n}\n", "    var binString\
    \ string = \"db\"\n    var count int = 0\n    var limit int = 32\n    var temp\
    \ int = decimal\n    if decimal < 0 {\n        limit = 31\n        decimal = decimal\
    \ * -1\n    }\n    for i := 0; i < limit; i++ {\n        binString += string(temp\
    \ & 1)\n        temp = temp >> 1\n        count++\n        if count == 4 {\n \
    \           binString += \" \"\n            count = 0\n        }\n    }\n    binString\
    \ += \"db\"\n    return binString\n}\n", "    fmt.Println(decimal)\n    res :=\
    \ \"db\"\n    for decimal > 0 {\n        res = res + string(decimal % 2 + 48)\n\
    \        decimal = decimal / 2\n    }\n    res = res + \"db\"\n    return res\n\
    }\n", "    // your code goes here\n    return \"db\" + \"100000\" + \"db\"\n}\n",
  "    var res string\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n    \
    \        res = \"0\" + res\n        } else {\n            res = \"1\" + res\n\
    \        }\n        decimal /= 2\n    }\n    return \"db\" + res + \"db\"\n}\n",
  "    var binary = \"\"\n    for decimal != 0 {\n        last_digit := decimal %\
    \ 2\n        decimal = decimal / 2\n        binary = fmt.Sprintf(\"%d%s\", last_digit,\
    \ binary)\n    }\n    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    // binary\
    \ := fmt.Sprintf(\"%08b\", decimal)\n    binary := fmt.Sprintf(\"%b\", decimal)\n\
    \    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    if decimal == 0 {\n  \
    \      return \"db0db\"\n    }\n    var num string\n    for decimal > 0 {\n  \
    \      num = string(decimal % 2 + 48) + num\n        decimal /= 2\n    }\n   \
    \ return \"db\" + num + \"db\"\n}\n", "    var binary string = \"db\"\n    var\
    \ remander int = 0\n    var binary_map = map[int]string{0: \"0\", 1: \"1\"}\n\n\
    \    for {\n        remander = decimal % 2\n        decimal = decimal / 2\n  \
    \      binary = binary + binary_map[remander]\n        if decimal == 0 {\n   \
    \         break\n        }\n    }\n\n    return reverse(binary) + \"db\"\n}\n",
  "\tif decimal == 0 {\n\t\treturn \"db0db\"\n\t}\n\tvar bin string\n\tfor decimal\
    \ > 0 {\n\t\tbin = fmt.Sprintf(\"%s%d\", bin, decimal%2)\n\t\tdecimal /= 2\n\t\
    }\n\tbin = fmt.Sprintf(\"db%sdb\", bin)\n\treturn bin\n}\n", "    if decimal <\
    \ 0 {\n        return \"db\" + decimal_to_binary(-decimal) + \"db\"\n    }\n \
    \   if decimal == 0 {\n        return \"db0db\"\n    }\n    if decimal == 1 {\n\
    \        return \"db1db\"\n    }\n    if decimal%2 == 0 {\n        return decimal_to_binary(decimal/2)\
    \ + \"0\"\n    }\n    return decimal_to_binary(decimal/2) + \"1\"\n}\n", "   \
    \ return \"db\" + strconv.FormatInt(int64(decimal), 2) + \"db\"\n}\n", "    var\
    \ binary string = \"db\"\n    for decimal > 0 {\n        binary += fmt.Sprintf(\"\
    %d\", decimal % 2)\n        decimal /= 2\n    }\n    return Reverse(binary) +\
    \ \"db\"\n}\n", "    var bin []byte\n    bin = append(bin, 'd')\n    bin = append(bin,\
    \ 'b')\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n            bin\
    \ = append(bin, '0')\n        } else {\n            bin = append(bin, '1')\n \
    \       }\n        decimal /= 2\n    }\n    bin = append(bin, 'd')\n    bin =\
    \ append(bin, 'b')\n    return string(bin)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var binary string\n    if decimal\
    \ == 0 {\n        return \"db0db\"\n    }\n    for decimal > 0 {\n        binary\
    \ = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n\
    \    return fmt.Sprintf(\"db%sdb\", binary)\n}\n", "    const base = 2\n    var\
    \ result string\n    for decimal > 0 {\n        if decimal % base == 0 {\n   \
    \         result = \"0\" + result\n        } else {\n            result = \"1\"\
    \ + result\n        }\n        decimal /= base\n    }\n    return \"db\" + result\
    \ + \"db\"\n}\n", "    if decimal < 0 {\n        panic(\"Decimal can't be negative!\"\
    )\n    }\n    if decimal < 2 {\n        return fmt.Sprintf(\"db%d\", decimal)\n\
    \    }\n    return decimal_to_binary(decimal / 2) + fmt.Sprintf(\"%d\", decimal\
    \ % 2)\n}\n", "\tstr := \"db\"\n\tfor decimal != 0 {\n\t\tstr += string(decimal%2)\n\
    \t\tdecimal /= 2\n\t}\n\tstr += \"db\"\n\treturn str\n}\n", "    out := \"db\"\
    \n    for decimal > 0 {\n        last := decimal & 1\n        decimal = decimal\
    \ >> 1\n        out = string(last) + out\n    }\n    return out + \"db\"\n}\n",
  "    bin := \"db\"\n    for decimal > 0 {\n        if decimal % 2 == 0 {\n     \
    \       bin = \"0\" + bin\n        } else {\n            bin = \"1\" + bin\n \
    \       }\n        decimal /= 2\n    }\n    return bin + \"db\"\n}\n", "    binary\
    \ := \"\"\n    binary += \"db\"\n    if decimal == 0 {\n        binary += \"0\"\
    \n    } else {\n        for decimal > 0 {\n            binary += fmt.Sprintf(\"\
    %d\", decimal % 2)\n            decimal /= 2\n        }\n    }\n    binary +=\
    \ \"db\"\n    return binary\n}\n", "    if decimal == 0 {\n        return \"db0db\"\
    \n    }\n    const (\n        zero_char    = '0'\n        one_char     = '1'\n\
    \        prefix_char  = 'd'\n        suffix_char  = 'b'\n    )\n    chars := make([]byte,\
    \ 0)\n    chars = append(chars, prefix_char)\n    for decimal > 0 {\n        if\
    \ decimal & 1 == 1 {\n            chars = append(chars, one_char)\n        } else\
    \ {\n            chars = append(chars, zero_char)\n        }\n        decimal\
    \ >>= 1\n    }\n    chars = append(chars, suffix_char)\n    // reverse the chars\n\
    \    for i, j := 0, len(chars) - 1; i < j; i, j = i + 1, j - 1 {\n        chars[i],\
    \ chars[j] = chars[j], chars[i]\n    }\n    return string(chars)\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    // your code here\n    return \"\
    db1111db\"\n}\n", "    return \"db\" + \"10000\" + \"db\"\n}\n", "    if decimal\
    \ == 0 {\n        return \"db0db\"\n    }\n    var binStr string\n    for decimal\
    \ > 0 {\n        if decimal % 2 == 0 {\n            binStr = fmt.Sprintf(\"%s0\"\
    , binStr)\n        } else {\n            binStr = fmt.Sprintf(\"%s1\", binStr)\n\
    \        }\n        decimal /= 2\n    }\n    return fmt.Sprintf(\"db%sdb\", binStr)\n\
    }\n", "    return fmt.Sprintf(\"db%sdb\", fmt.Sprintf(\"%b\", decimal))\n}\n",
  "    var binary, prefix string\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"\
    %s%d\", binary, decimal % 2)\n        decimal /= 2\n    }\n    prefix = \"db\"\
    \n    return fmt.Sprintf(\"%s%s%s\", prefix, binary, prefix)\n}\n", "    return\
    \ fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%sdb\",\
    \ fmt.Sprintf(\"%b\", decimal))\n}\n", "    var result string = \"db\"\n    for\
    \ decimal > 0 {\n        var remainder = decimal % 2\n        decimal = decimal\
    \ / 2\n        if remainder == 0 {\n            result = \"0\" + result\n    \
    \    } else {\n            result = \"1\" + result\n        }\n    }\n    return\
    \ result + \"db\"\n}\n", "    var bin_str string = \"db\"\n    if decimal < 2\
    \ {\n        bin_str += fmt.Sprintf(\"%d\", decimal)\n    } else {\n        bin_str\
    \ += decimal_to_binary(decimal / 2)\n        bin_str += fmt.Sprintf(\"%d\", decimal\
    \ % 2)\n    }\n    bin_str += \"db\"\n    return bin_str\n}\n", "    // YOUR CODE\
    \ GOES HERE\n    return \"\"\n}\n", "    return fmt.Sprintf(\"db%db\", fmt.Sprintf(\"\
    %b\", decimal))\n}\n", "    return \"db\" + fmt.Sprintf(\"%b\", decimal) + \"\
    db\"\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "\tbin := \"db\"\n\tfor i := decimal; i > 0; i = i /\
    \ 2 {\n\t\tb := i % 2\n\t\tbin = fmt.Sprintf(\"%d%s\", b, bin)\n\t}\n\tbin = fmt.Sprintf(\"\
    %sdb\", bin)\n\treturn bin\n}\n", "    bin_str := \"db\"\n    if decimal == 0\
    \ {\n        bin_str += \"0\"\n    }\n    for decimal > 0 {\n        remain :=\
    \ decimal % 2\n        if remain == 0 {\n            bin_str += \"0\"\n      \
    \  } else {\n            bin_str += \"1\"\n        }\n        decimal /= 2\n \
    \   }\n    bin_str += \"db\"\n    return Reverse(bin_str)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
