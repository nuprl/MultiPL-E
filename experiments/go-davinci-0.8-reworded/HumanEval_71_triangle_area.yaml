name: HumanEval_71_triangle_area
language: go_test.go
prompt: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given the lengths of the three sides of a triangle. Return the area of\n//\
  \ the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
  \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
  \ b int, c int) float64 {\n"
tests: "func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
  \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
  \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
  \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
  \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1,\
  \ 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: Implement the algorithm here...\n    return 0.0\n}\n",
  "    // func test() {\n    //     fmt.Println(triangle_area(3, 4, 5))\n    //  \
    \   fmt.Println(triangle_area(1, 2, 10))\n    // }\n    // test()\n    var (\n\
    \        p = float64(a + b + c) / 2\n        s = p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    )\n    if s > 0 {\n        return s * 0.5\n    }\n \
    \   return -1\n}\n", "    // YOUR CODE HERE\n    return 0.0\n}\n", "    a64 :=\
    \ float64(a)\n    b64 := float64(b)\n    c64 := float64(c)\n    var res float64\
    \ = -1.0\n    if a64 < b64 + c64 && b64 < a64 + c64 && c64 < a64 + b64 {\n   \
    \     p := (a64 + b64 + c64) / 2\n        s := p * (p - a64) * (p - b64) * (p\
    \ - c64)\n        res = s\n    }\n    return res\n}\n", "    var p float64 = (float64(a)\
    \ + float64(b) + float64(c)) / 2\n    var area float64 = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n    if area <= 0 {\n        return -1\n\
    \    } else {\n        return (float64(area) * 100).Round(2) / 100\n    }\n}\n",
  "    if a + b > c && a + c > b && b + c > a {\n        p := float64(a + b + c) /\
    \ 2\n        return fmt.Sprintf(\"%.2f\", (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))**0.5)\n\
    \    }\n    return -1\n}\n\n//", "    if a+b > c && a+c > b && b+c > a {\n   \
    \     p := float64(a+b+c) / 2\n        return (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\
    \ * 0.5\n    }\n    return -1\n}\n", "    if a + b <= c || a + c <= b || b + c\
    \ <= a {\n        return -1\n    }\n    s := float64(a + b + c) / 2\n    area\
    \ := s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    return area\n\
    }\n", "    // your code here\n    return 0.0\n}\n", "\tif a <= 0 || b <= 0 ||\
    \ c <= 0 {\n\t\treturn -1\n\t}\n\n\t// Check if a valid triangle\n\tif !(a + b\
    \ > c && a + c > b && b + c > a) {\n\t\treturn -1\n\t}\n\n\tp := float64(a + b\
    \ + c) / 2\n\tarea := math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p -\
    \ float64(c)))\n\treturn math.Round(area * 100) / 100\n}\n", "    return -1\n\
    }\n", "    // a, b, c must be positive\n    if a <= 0 || b <= 0 || c <= 0 {\n\
    \        return -1\n    }\n    // two sides must be greater than the third side\n\
    \    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n    }\n \
    \   // all three sides must be less than or equal to the perimeter\n    if a +\
    \ b + c < a || a + b + c < b || a + b + c < c {\n        return -1\n    }\n  \
    \  return heron_formula(a, b, c)\n}\n", "    // TODO: Implement me\n    // Checks\
    \ if a triangle is valid\n    if (a+b > c) && (a+c > b) && (b+c > a) {\n     \
    \   // Calculates semi-perimeter\n        s := (a+b+c)/2\n        // Uses Heron's\
    \ formula to calculate area\n        area := s*(s-a)*(s-b)*(s-c)\n        // Returns\
    \ float rounded to 2 decimal points\n        return float64(area)\n    }\n   \
    \ // If the triangle is not valid, return -1\n    return -1\n}\n", "\ts := (a\
    \ + b + c) / 2\n\td := (s - a) * (s - b) * (s - c)\n\tif d < 0 {\n\t\treturn -1\n\
    \t}\n\tx := float64(s) * float64(d)\n\treturn x\n}\n", "    var s float64\n  \
    \  if a < b+c && b < a+c && c < a+b {\n        s = float64(a+b+c) / 2\n      \
    \  return (s-float64(a))*(s-float64(b))*(s-float64(c))*s\n    }\n    return -1\n\
    }\n", "    var p = (a + b + c) / 2.0\n    var area = math.Sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    if area <= 0 {\n        return -1\n    }\n    return math.Round(area\
    \ * 100) / 100\n}\n", "    sum := float64(a + b + c)\n    if sum <= 0 {\n    \
    \    return -1\n    }\n    s := sum / 2\n    area := (s * (s - float64(a)) * (s\
    \ - float64(b)) * (s - float64(c)))\n    if area < 0 {\n        return -1\n  \
    \  }\n    return area\n}\n", "    var A float64 = 0.5 * float64(a) * float64(b)\n\
    \    var B float64 = 0.5 * float64(a) * float64(c)\n    var C float64 = 0.5 *\
    \ float64(b) * float64(c)\n    if (A == B) && (B == C) {\n        return A\n \
    \   } else {\n        return -1\n    }\n}\n", "    if a + b <= c || a + c <= b\
    \ || b + c <= a {\n        return -1\n    }\n    s := float64(a + b + c) / 2\n\
    \    area := (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))) \n \
    \   area = area * area\n    return area\n}\n", "    if (a + b > c) && (a + c >\
    \ b) && (b + c > a) {\n        p := float64(a + b + c) / 2\n        return (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))**0.5\n\
    \    } else {\n        return -1\n    }\n}\n", "    var sides = []int{a, b, c}\n\
    \    fmt.Println(sides)\n    for i, _ := range sides {\n        for j, _ := range\
    \ sides {\n            if i != j && sides[i] + sides[j] <= sides[len(sides) -\
    \ 1 - i - j] {\n                return -1\n            }\n        }\n    }\n \
    \   s := float64(a + b + c) / 2\n    return (s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c))) ** 0.5\n}\n", "    if (a + b > c) && (a + c > b) && (b +\
    \ c > a) {\n        p := float64(a + b + c) / 2\n        return float64(p * (p\
    \ - float64(a)) * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n\
    }\n", "    // write your code here\n    return -1\n}\n", "\tvar area float64 =\
    \ -1.0\n\tif a + b > c && a + c > b && b + c > a {\n\t\tarea = float64(a) * float64(b)\
    \ * 0.5\n\t}\n\treturn area\n}\n", "    if a + b > c && a + c > b && b + c > a\
    \ {\n        // heron's formula for triangle area\n        s := float64(a + b\
    \ + c) / 2.0\n        return 2.0 * (s * (s - float64(a)) * (s - float64(b)) *\
    \ (s - float64(c)))\n    }\n    return -1.0\n}\n", "    if a + b > c && a + c\
    \ > b && b + c > a {\n        var p = float64(a + b + c) / 2\n        var A =\
    \ p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        if A < 0\
    \ {\n            A = -A\n        }\n        return float64(2) * A / p\n    }\n\
    \    return -1\n}\n", "    if a + b > c && a + c > b && b + c > a {\n        p\
    \ := float64(a + b + c) / 2\n        return 2 * p - float64(a) - float64(b) -\
    \ float64(c)\n    }\n    return -1\n}\n", "    return -1\n}\n", "    return 0.0\n\
    }\n", "    if (a + b <= c) || (a + c <= b) || (b + c <= a) {\n        return -1\n\
    \    }\n\n    s := float64(a + b + c) / 2\n    area := (s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    return area\n}\n", "    // TODO: Implement\
    \ me!\n    return -1\n}\n", "    var area float64\n    if (a+b>c) && (a+c>b) &&\
    \ (b+c>a) {\n        var s float64 = (float64(a) + float64(b) + float64(c)) /\
    \ 2\n        area = float64(s * (s-float64(a)) * (s-float64(b)) * (s-float64(c)))\n\
    \        area = area * 0.5\n    } else {\n        area = -1\n    }\n    return\
    \ area\n}\n", "    if a + b <= c || a + c <= b || b + c <= a {\n        return\
    \ -1\n    }\n\n    s := float64(a + b + c) / 2\n    return (s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n}\n", "    // your code here\n    //\
    \ good luck!\n    return 0.0\n}\n", "    if (a + b > c) && (a + c > b) && (b +\
    \ c > a) {\n        // Heron's formula: area of a triangle with sides a, b, c\n\
    \        p := float64(a + b + c) / 2.0\n        return math.Sqrt(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n", "    var\
    \ p = float64(a + b + c) / 2\n    var result = p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    if result < 0 {\n        return -1\n    }\n    return\
    \ (float64(result) * 2) ** 0.5\n}\n", "    x := float64(a)\n    y := float64(b)\n\
    \    z := float64(c)\n    var area float64\n    //fmt.Println(x + y + z)\n   \
    \ if x + y > z && x + z > y && y + z > x {\n        p := (x + y + z) / 2\n   \
    \     area = float64(p * (p - x) * (p - y) * (p - z))\n        area = area * 0.5\n\
    \        fmt.Println(area)\n        area = area * 100\n        area = area + 0.5\n\
    \        fmt.Println(area)\n        area = float64(int(area))\n        fmt.Println(area)\n\
    \        area = area / 100\n        fmt.Println(area)\n        return area\n \
    \   } else {\n        return -1\n    }\n}\n", "    return -1\n}\n", "    var area\
    \ float64\n    if a + b > c && a + c > b && b + c > a {\n        area = float64(a\
    \ + b + c) * float64(a + b - c) * float64(a - b + c) * float64(-a + b + c)\n \
    \       area = area / 4\n        area = area / float64(a + b + c)\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n", "    if a + b > c && a +\
    \ c > b && b + c > a {\n        p := float64(a + b + c) / 2\n        return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n    } else {\n  \
    \      return -1\n    }\n}\n", "    fmt.Printf(\"a: %d, b: %d, c: %d\\n\", a,\
    \ b, c)\n    // \n    //\n    //\n    //\n    //\n    //\n    //\n    //\n   \
    \ //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n", "    if a + b > c && a + c > b && b + c > a {\n        //\
    \ Area of a triangle is half the base times the height\n        // The height\
    \ is equal to the length of a line drawn from the vertex of the\n        // angle\
    \ of interest to the opposite side, and then dropped perpendicular to\n      \
    \  // that side.\n        // For simplicity, we'll use the 3, 4, 5 triangle as\
    \ an example.\n        // The height for this triangle would be the length of\
    \ a line drawn from the\n        // vertex of the right angle to the opposite\
    \ side (3)\n        // Then dropped perpendicular to that side.\n        // 3\
    \ x 4 = 12 / 2 = 6\n        return float64(a * b) / 2\n    } else {\n        return\
    \ -1\n    }\n}\n", "    var area float64\n    perim := a + b + c\n    if a+b >\
    \ c && a+c > b && b+c > a {\n        area = perim * (perim - float64(a)) * (perim\
    \ - float64(b)) * (perim - float64(c))\n        return area\n    } else {\n  \
    \      return -1\n    }\n}\n", "    // your code here\n    return 0.0\n}\n", " \
    \   s := (a + b + c) / 2.0\n\n    if a + b <= c || a + c <= b || b + c <= a {\n\
    \        return -1\n    }\n\n    return float64(a * b * c) / float64(4 * int(s))\n\
    }\n", "    if (a + b <= c) || (a + c <= b) || (b + c <= a) {\n        return -1\n\
    \    }\n    // valid triangle\n    p := float64(a + b + c) / 2.0\n    return p*(p-float64(a))*(p-float64(b))*(p-float64(c))\n\
    }\n", "    if a + b > c && a + c > b && b + c > a {\n        // Heron's formula\n\
    \        s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s\
    \ - float64(b)) * (s - float64(c))) / 2\n    }\n    return -1\n}\n", "    var\
    \ s float64 = float64(a + b + c) / 2\n    var res float64 = s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n    if res <= 0 {\n        return -1\n\
    \    } else {\n        return  float64(a) * float64(b) * float64(c) / (4 * res)\n\
    \    }\n}\n", "    max := a\n    if max < b {\n        max = b\n    }\n    if\
    \ max < c {\n        max = c\n    }\n    if a + b + c - max > max {\n        return\
    \ float64(a + b + c - max) * float64(a + b + c - max - max) / 4\n    }\n    return\
    \ -1\n}\n", "    if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n  \
    \  }\n    p := float64(a+b+c) / 2\n    s := p * (p-float64(a)) * (p-float64(b))\
    \ * (p-float64(c))\n    return round(2, math.Sqrt(s))\n}\n", "\tif a + b <= c\
    \ || a + c <= b || b + c <= a {\n\t\treturn -1\n\t}\n\ts := float64(a + b + c)\
    \ / 2\n\tarea := float64(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \treturn round2(area)\n}\n", "    if a+b > c && a+c > b && b+c > a {\n       \
    \ p := float64(a+b+c) / 2\n        s := p * (p-float64(a)) * (p-float64(b)) *\
    \ (p-float64(c))\n        return s\n    }\n    return -1\n}\n", "    area := -1.0\n\
    \    var ar, br, cr float64\n    ar = float64(a)\n    br = float64(b)\n    cr\
    \ = float64(c)\n    p := (ar + br + cr) / 2.0\n    if (ar + br > cr) && (ar +\
    \ cr > br) && (br + cr > ar) {\n        area = p * (p - ar) * (p - br) * (p -\
    \ cr)\n        area = area * 0.5\n    }\n    return area\n}\n", "    if (a+b >\
    \ c) && (a+c > b) && (b+c > a) {\n        return float64(a+b+c)/2\n    }\n   \
    \ return -1\n}\n", "    // write your code here\n    return 0.0\n}\n", "    var\
    \ area float64\n    if a + b > c && a + c > b && b + c > a {\n        s := float64(a\
    \ + b + c) / 2\n        area = s * (s - float64(a)) * (s - float64(b)) * (s -\
    \ float64(c))\n        return 2 * area\n    }\n    return -1\n}\n", "    p :=\
    \ (a + b + c) / 2\n    if (p - a) * (p - b) * (p - c) <= 0 {\n        return -1\n\
    \    }\n    return float64(p * (p - a) * (p - b) * (p - c))\n}\n", "\tvar length\
    \ []int\n\tlength = append(length, a)\n\tlength = append(length, b)\n\tlength\
    \ = append(length, c)\n\tfor i := 0; i < len(length)-1; i++ {\n\t\tfor j := i+1;\
    \ j < len(length); j++ {\n\t\t\tif length[i] > length[j] {\n\t\t\t\ttemp := length[i]\n\
    \t\t\t\tlength[i] = length[j]\n\t\t\t\tlength[j] = temp\n\t\t\t}\n\t\t}\n\t}\n\
    \tif length[0] + length[1] <= length[2] {\n\t\treturn -1\n\t}\n\tvar s float64\n\
    \ts = float64(length[0] + length[1] + length[2]) / 2\n\ttriangleArea := (s * (s\
    \ - float64(length[0])) * (s - float64(length[1])) * (s - float64(length[2])))\n\
    \treturn triangleArea\n}\n", "    return -1\n}\n", "    if (a + b) <= c || (a\
    \ + c) <= b || (b + c) <= a {\n        return -1\n    }\n\n    p := (a + b + c)\
    \ / 2\n    area := float64(p * (p - a) * (p - b) * (p - c))\n    area = area *\
    \ math.Pow(area, 0.5)\n    return area\n}\n", "    return -1\n}\n", "    var area\
    \ float64\n    if a + b > c && a + c > b && b + c > a {\n        // Heron's formula\n\
    \        s := float64(a + b + c) / 2\n        area = math.Sqrt(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    } else {\n        area = -1\n  \
    \  }\n    return area\n}\n", "    area := -1.0\n    if (a + b > c) && (a + c >\
    \ b) && (b + c > a) {\n        s := float64(a + b + c) / 2.0\n        area = (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c))\n        area = area * s\n\
    \        area = area ** 0.5\n    }\n    return area\n}\n", "    var area float64\
    \ = -1.0\n    if a + b > c && a + c > b && b + c > a {\n        p := float64(a\
    \ + b + c) / 2.0\n        area = p * (p - float64(a)) * (p - float64(b)) * (p\
    \ - float64(c))\n        area = area * area\n        area = float64(int(area *\
    \ 100)) / 100.0\n    }\n    return area\n}\n", "    if (a + b > c) && (a + c >\
    \ b) && (b + c > a) {\n        p := float64(a + b + c) / 2\n        return (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\n\
    \    } else {\n        return -1\n    }\n}\n", "    var s float64 = (float64(a)\
    \ + float64(b) + float64(c)) / 2\n    var area float64 = float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    if area > 0 {\n        area = area\
    \ * 0.5\n    } else {\n        area = -1\n    }\n    return area\n}\n", "    //\
    \ Your code here\n    return 0.0\n}\n", "    var area float64\n    if ((a + b)\
    \ > c) && ((a + c) > b) && ((b + c) > a) {\n        s := (a + b + c) / 2\n   \
    \     area = float64(s * (s - a) * (s - b) * (s - c))\n        area = float64(area)\n\
    \        area = area * 0.5\n    } else {\n        area = -1\n    }\n    return\
    \ area\n}\n", "    if a + b > c && a + c > b && b + c > a {\n        p := float64(a\
    \ + b + c) / 2\n        return math.Sqrt(p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n", "    // YOUR CODE HERE\n  \
    \  return -1\n}\n", "    var s float64 = float64(a+b+c) / 2\n    var a_float float64\
    \ = float64(a)\n    var b_float float64 = float64(b)\n    var c_float float64\
    \ = float64(c)\n    if s < a_float || s < b_float || s < c_float {\n        return\
    \ -1\n    }\n    area := s * (s - a_float) * (s - b_float) * (s - c_float)\n \
    \   area = area * 0.5\n    area = float64(int(area * 100)) / 100\n    return area\n\
    }\n", "\t// Your code here\n\treturn 0.0\n}\n", "    return -1\n}\n", "    return\
    \ -1\n}\n", "    // Your code here\n    return 0.0\n}\n", "    if a + b > c &&\
    \ a + c > b && b + c > a {\n        s := float64(a + b + c) / 2\n        area\
    \ := s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n        return\
    \ float64(area)\n    }\n    return -1\n}\n", "    if a + b > c && a + c > b &&\
    \ b + c > a {\n        // Heron's formula\n        // http://www.mathopenref.com/heronsformula.html\n\
    \        p := float64(a + b + c) / 2\n        s := p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))\n        area := math.Sqrt(s)\n        return\
    \ math.Round(area * 100) / 100\n    }\n    return -1\n}\n", "    var longest int\n\
    \    var sum_of_others int\n    if a >= b && a >= c {\n        longest = a\n \
    \       sum_of_others = b + c\n    } else if b >= a && b >= c {\n        longest\
    \ = b\n        sum_of_others = a + c\n    } else {\n        longest = c\n    \
    \    sum_of_others = a + b\n    }\n    if longest >= sum_of_others {\n       \
    \ return -1\n    }\n    var p float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = math.Sqrt(p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    return math.Round(area * 100) / 100\n}\n", "    p :=\
    \ (a + b + c) / 2\n    s := float64(p * (p - a) * (p - b) * (p - c))\n    return\
    \ s\n}\n", "    // your code here\n    return -1\n}\n", "    if a + b > c && a\
    \ + c > b && b + c > a {\n        return float64(a + b + c) / 2\n    }\n    return\
    \ -1\n}\n", "    s := float64(a + b + c) / 2.0\n    area := s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n    if area <= 0 {\n        return -1\n\
    \    }\n    return area * 0.5\n}\n", "    return -1.0\n}\n", "    var area float64\n\
    \    if a <= 0 || b <= 0 || c <= 0 {\n        return -1\n    }\n    // The formula\
    \ for the area of a triangle given the lengths of the three sides is:\n    //\
    \ area = sqrt(s(s-a)(s-b)(s-c))\n    // where s = (a+b+c)/2\n    s := (a + b +\
    \ c) / 2\n    area = math.Sqrt(float64(s*(s-a)*(s-b)*(s-c)))\n    return math.Round(area*100)/100\n\
    }\n", "    var area float64\n    if (a + b > c) && (a + c > b) && (b + c > a)\
    \ {\n        area = float64(a) + float64(b) + float64(c)\n    } else {\n     \
    \   area = -1\n    }\n    return area\n}\n", "    if (a + b > c) && (a + c > b)\
    \ && (b + c > a) {\n        var s float64 = float64(a + b + c) / 2\n        return\
    \ float64(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    } else\
    \ {\n        return -1\n    }\n}\n", "    if a+b>c && a+c>b && b+c>a {\n     \
    \   p := float64(a+b+c)/2\n        area := float64(p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\n\
    \        return area\n    }\n    return -1\n}\n", "    // a + b > c && a + c >\
    \ b && b + c > a\n    if a + b > c && a + c > b && b + c > a {\n        s := float64(a\
    \ + b + c) / 2\n        return (s * (s - float64(a)) * (s - float64(b)) * (s -\
    \ float64(c))) ** (1/2)\n    } else {\n        return -1\n    }\n}\n", "    if\
    \ a + b > c && a + c > b && b + c > a {\n        // p is half the perimeter\n\
    \        p := float64(a + b + c) / 2.0\n        // Heron's formula\n        return\
    \ 2 * math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\
    \    }\n    return -1\n}\n", "    // your code here\n    return 0.0\n}\n", " \
    \   if (a + b > c) && (a + c > b) && (b + c > a) {\n        p := float64(a + b\
    \ + c) / 2\n        return (p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\
    \    }\n    return -1\n}\n", "\tvar s = float64(a + b + c) / 2\n\tvar area = math.Sqrt(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\tif area < 0 {\n\
    \t\treturn -1\n\t}\n\treturn math.Round(area * 100) / 100\n}\n", "    if (a +\
    \ b > c) && (a + c > b) && (b + c > a) {\n        return float64(a + b + c) *\
    \ float64(a + b - c) * float64(a - b + c) * float64(-a + b + c)\n    } else {\n\
    \        return -1\n    }\n}\n", "    // TODO Implement!\n    return 0.0\n}\n",
  "    if (a + b > c) && (a + c > b) && (b + c > a) {\n        s := float64(a + b\
    \ + c) / 2\n        return (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\
    \ ** 0.5\n    } else {\n        return -1\n    }\n}\n", "    var s float64 = (float64(a)\
    \ + float64(b) + float64(c)) / 2.0\n    if (float64(a) + float64(b) > float64(c))\
    \ && (float64(a) + float64(c) > float64(b)) && (float64(b) + float64(c) > float64(a))\
    \ {\n        return float64(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    } else {\n        return -1\n    }\n}\n", "    return -1.0\n}\n", "    fmt.Printf(\"\
    a: %d, b: %d, c: %d\\n\", a, b, c)\n    if !is_valid_triangle(a, b, c) {\n   \
    \     return -1\n    }\n    p := (a + b + c) / 2.0\n    area := math.Sqrt(p *\
    \ (p - a) * (p - b) * (p - c))\n    return area\n}\n", "    if (a + b > c) &&\
    \ (a + c > b) && (b + c > a) {\n        p := float64(a + b + c) / 2\n        s\
    \ := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        return\
    \ float64(s)\n    }\n    return -1\n}\n", "    s := float64(a + b + c) / 2.0\n\
    \    area := s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if\
    \ area <= 0 {\n        return -1\n    }\n    return area * 0.5\n}\n", "    //\
    \ if a + b > c {\n    //     fmt.Println(\"a+b:\", a+b, \"c:\", c)\n    //   \
    \  fmt.Println(\"a+b > c\")\n    // } else {\n    //     fmt.Println(\"a+b:\"\
    , a+b, \"c:\", c)\n    //     fmt.Println(\"a+b < c\")\n    // }\n    if a + b\
    \ > c && a + c > b && b + c > a {\n        p := float64(a + b + c) / 2\n     \
    \   area := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n     \
    \   return area\n    } else {\n        return -1\n    }\n}\n", "    if !is_valid_triangle(a,\
    \ b, c) {\n        return -1\n    }\n\n    // Calculate using Heron's formula\
    \ for area of a triangle\n    p := (a + b + c) / 2.0\n\n    return sqrt(p * (p\
    \ - a) * (p - b) * (p - c))\n}\n", "    if a < 1 || b < 1 || c < 1 {\n       \
    \ return -1\n    }\n    if a + b <= c || a + c <= b || b + c <= a {\n        return\
    \ -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n}\n", "\tvar s = float64(a + b + c)\
    \ / 2\n\tvar area = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \treturn area < 0.0 ? -1.0 : area\n}\n", "    if a + b <= c || a + c <= b || b\
    \ + c <= a {\n        return -1\n    }\n\n    if a == b && b == c {\n        return\
    \ float64(a) * float64(a) * math.Sqrt(3) / 4\n    }\n\n    p := float64(a + b\
    \ + c) / 2\n    return math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p\
    \ - float64(c)))\n}\n", "    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    } else {\n        return float64(int(area\
    \ * 100)) / 100\n    }\n}\n", "    var area float64\n    if a + b > c && a + c\
    \ > b && b + c > a {\n        p := float64(a + b + c) / 2\n        area = p *\
    \ (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        return float64(area)\n\
    \    } else {\n        return -1\n    }\n}\n", "    var s float64\n    var area\
    \ float64\n    s = float64(a + b + c) / 2\n    area = (s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c)))\n    if area <= 0 {\n        return -1\n\
    \    }\n    area = float64(area)\n    area = area ** 0.5\n    return area\n}\n",
  "    if a < b + c && b < a + c && c < a + b {\n        s := float64(a + b + c) /\
    \ 2\n        area := s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \        return float64(area)\n    } else {\n        return -1\n    }\n}\n", " \
    \   var p float64 = float64(a+b+c) / 2.0\n    var area float64 = p * (p-float64(a))\
    \ * (p-float64(b)) * (p-float64(c))\n    if area <= 0 {\n        return -1\n \
    \   }\n    return area * 0.5\n}\n", "    var area float64\n    if a + b > c &&\
    \ a + c > b && b + c > a {\n        area = 0.5 * float64(a * b)\n    } else {\n\
    \        area = -1\n    }\n    return area\n}\n", "    // your code here\n   \
    \ return -1\n}\n", "    // === YOUR CODE HERE ===\n    return 0.0\n}\n", "   \
    \ var s float64\n    s = float64(a + b + c) / 2\n    area := float64(s*(s-float64(a))*(s-float64(b))*(s-float64(c)))\n\
    \    if area < 0 {\n        return -1\n    }\n    return area\n}\n", "    var\
    \ s float64 = (float64(a) + float64(b) + float64(c)) / 2\n    var p float64 =\
    \ s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if p < 0 {\n\
    \        return -1\n    } else {\n        return float64(p)\n    }\n}\n", "  \
    \  var arr []int = []int{a, b, c}\n    fmt.Println(arr)\n    var count, i int\n\
    \    for i = 0; i < 3; i++ {\n        if arr[i] == max(arr) {\n            count++\n\
    \        }\n    }\n    if count != 1 {\n        return -1\n    }\n    p := float64(a\
    \ + b + c) / 2\n    s := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n\
    \    var res float64\n    if s > 0 {\n        res = (s) ** 0.5\n    } else {\n\
    \        res = -1\n    }\n    return res\n}\n", "    s := float64(a + b + c) /\
    \ 2.0\n    area := (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    if area < 0 {\n        return -1\n    } else {\n        return (float64(area)\
    \ * 2.0).Sqrt()\n    }\n}\n", "    var result float64\n    if (a+b>c) && (a+c>b)\
    \ && (b+c>a) {\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n \
    \       p := float64(a+b+c) / 2.0\n        s := p * (p-float64(a)) * (p-float64(b))\
    \ * (p-float64(c))\n        result = 2 * s\n    } else {\n        result = -1\n\
    \    }\n    return result\n}\n", "    // TODO: your code here\n    return 0.0\n\
    }\n", "    var s float64\n    s = float64(a+b+c) / 2\n    return s\n}\n", "  \
    \  var p float64 = (float64(a) + float64(b) + float64(c)) / 2\n    if p-float64(a)\
    \ > 0 && p-float64(b) > 0 && p-float64(c) > 0 {\n        s := p * (p-float64(a))\
    \ * (p-float64(b)) * (p-float64(c))\n        return 2 * s\n    }\n    return -1\n\
    }\n", "    if a + b > c && a + c > b && b + c > a {\n        return float64(0.5\
    \ * (a * b + b * c + a * c))\n    } else {\n        return -1\n    }\n}\n", " \
    \   var t float64\n    if a < b + c && b < a + c && c < a + b {\n        s :=\
    \ float64(a + b + c) / 2\n        t = (s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c)))\n        if t < 0 {\n            t = -1\n        } else\
    \ {\n            t = t * 2\n        }\n    } else {\n        t = -1\n    }\n \
    \   return t\n}\n", "    if (a+b) <= c || (a+c) <= b || (b+c) <= a {\n       \
    \ return -1\n    }\n    s := float64(a+b+c) / 2\n    area := s * (s-float64(a))\
    \ * (s-float64(b)) * (s-float64(c))\n    return area\n}\n", "    if a+b < c ||\
    \ a+c < b || b+c < a {\n        return -1\n    }\n\n    s := float64(a+b+c) /\
    \ 2\n    return (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n}\n", " \
    \   s := float64(a + b + c) / 2.0\n    return -1.0\n}\n", "    var area float64\
    \ = -1\n    var longest, rest int\n    var tmp float64\n    if a > b {\n     \
    \   if a > c {\n            longest = a\n            rest = b + c\n        } else\
    \ {\n            longest = c\n            rest = a + b\n        }\n    } else\
    \ {\n        if b > c {\n            longest = b\n            rest = a + c\n \
    \       } else {\n            longest = c\n            rest = a + b\n        }\n\
    \    }\n    if rest > longest {\n        tmp = float64(a)\n        s := float64(rest\
    \ + longest)\n        area = (s * (s - tmp) * (s - float64(b)) * (s - float64(c)))\n\
    \        area = area * 0.5\n    }\n    return area\n}\n\ntype TestData ", "  \
    \  return 0.0\n}\n", "    // Write your code here\n    return -1\n}\n", "    return\
    \ 0.0\n}\n", "    s := float64(a + b + c) / 2\n    x := s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c))\n    if x <= 0 {\n        return -1\n  \
    \  }\n    return round(math.Sqrt(x), .5, 2)\n}\n", "    if a + b <= c || a + c\
    \ <= b || b + c <= a {\n        return -1\n    }\n\n    s := float64(a + b + c)\
    \ / 2.0\n    a = int(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    return float64(a) / 4.0\n}\n", "    p := (a + b + c) / 2.0\n    s := p *\
    \ (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n    if s <= 0 {\n  \
    \      return -1\n    }\n    return float64(s)\n}\n", "    // Write your code\
    \ here.\n    if(a+b>c && a+c>b && b+c>a){\n        s := float64(a+b+c)/2\n   \
    \     return (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n    }else{\n\
    \        return -1\n    }\n}\n\n//TODO: test cases", "    return -1.0\n}\n", " \
    \   if (a < 0 || b < 0 || c < 0) {\n        return -1\n    }\n    if (a + b >\
    \ c && a + c > b && b + c > a) {\n        p := float64(a + b + c) / 2\n      \
    \  s := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        return\
    \ 2 * s / p\n    }\n    return -1\n}\n", "    if a + b > c && a + c > b && b +\
    \ c > a {\n        area := float64(a + b + c) * 0.5\n        return area\n   \
    \ }\n    return -1\n}\n", "    if a <= 0 || b <= 0 || c <= 0 {\n        return\
    \ -1\n    }\n    if (a + b <= c) || (a + c <= b) || (b + c <= a) {\n        return\
    \ -1\n    }\n    // area = (a + b + c) / 2\n    s := float64(a + b + c) / 2\n\
    \    // area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return (s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))) * 0.5\n}\n", "    var max int\n    if\
    \ a > b {\n        max = a\n    } else {\n        max = b\n    }\n    if c > max\
    \ {\n        max = c\n    }\n    if a + b + c - max > max {\n        p := float64(a\
    \ + b + c) / 2\n        return math.Sqrt(p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)))\n    }\n    return -1\n}\n", "\treturn 6.0\n}\n", "    if\
    \ (a+b) > c && (a+c) > b && (b+c) > a {\n        p := (a+b+c)/2\n        S :=\
    \ float64(p*(p-a)*(p-b)*(p-c))\n        return (S)**0.5\n    } else {\n      \
    \  return -1\n    }\n}\n", "    if a + b > c && a + c > b && b + c > a {\n   \
    \     return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n", "    // TODO: Write\
    \ your solution here\n    return 0.0\n}\n", "\t// TODO: Implement Me\n\treturn\
    \ -1\n}\n", "    // handle the special case of negative numbers.\n    if a < 0\
    \ || b < 0 || c < 0 {\n        return -1\n    }\n    if (a + b) > c && (a + c)\
    \ > b && (b + c) > a {\n        p := (a + b + c) / 2.0\n        s := p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n        if s > 0 {\n    \
    \        return 2 * s\n        }\n    }\n    return -1\n}\n", "    // Fill this\
    \ in.\n    var result float64 = -1\n    if a > 0 && b > 0 && c > 0 {\n       \
    \ if (a + b > c) && (a + c > b) && (b + c > a) {\n            s := (a + b + c)\
    \ / 2\n            result = float64(s * (s - a) * (s - b) * (s - c))\n       \
    \     if result > 0 {\n                result = result * 0.5\n            }\n\
    \        }\n    }\n    return result\n}\n", "    var s float64 = float64(a+b+c)\
    \ / 2.0\n    var res float64 = (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))\n\
    \    if res < 0 {\n        return -1\n    }\n    return res\n}\n", "    if a+b>c\
    \ && a+c>b && b+c>a {\n        s := float64(a+b+c)/2\n        area := (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n", "    return\
    \ -1\n}\n", "    var r float64 = -1\n    if (a + b > c) && (a + c > b) && (b +\
    \ c > a) {\n        s := float64(a + b + c) / 2\n        r = (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))\n        r = r * r\n        r = r / s\n\
    \    }\n    return r\n}\n", "    var perimeter float64 = float64(a + b + c)\n\
    \    var halfPerimeter float64 = perimeter / 2\n    var area float64 = (halfPerimeter\
    \ * (halfPerimeter - float64(a)) * (halfPerimeter - float64(b)) * (halfPerimeter\
    \ - float64(c)))\n    var sqrt float64 = (area / halfPerimeter)\n    return sqrt\n\
    }\n", "    p := float64(a + b + c) / 2.0\n\n    if p <= float64(a) || p <= float64(b)\
    \ || p <= float64(c) {\n        return -1\n    }\n\n    return p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n}\n", "    var s float64\n    if a+b>c\
    \ && a+c>b && b+c>a {\n        s = float64(a+b+c)/2\n        return float64(a+b+c)/2\n\
    \    }\n    return -1\n}\n", "    if a + b > c && a + c > b && b + c > a {\n \
    \       p := float64(a + b + c) / 2\n        return 2 * (p - float64(a)) * (p\
    \ - float64(b)) * (p - float64(c)) / p\n    }\n    return -1\n}\n", "    if (a+b\
    \ < c) || (a+c < b) || (b+c < a) {\n        return -1\n    }\n\n    // Heron's\
    \ formula:\n    // A = Sqrt(s*(s-a)*(s-b)*(s-c))\n    // where s = 1/2 * (a+b+c)\n\
    \    // (I actually was not aware of this formula and found it on the net.)\n\
    \    s := float64(a+b+c) / 2\n    area := s * (s-float64(a)) * (s-float64(b))\
    \ * (s-float64(c))\n    if area < 0 {\n        area = -area\n    }\n    return\
    \ area\n}\n", "    // your code here\n    return 0.0\n}\n", "    // Write your\
    \ code here\n    return 0.0\n}\n", "    if a + b > c && a + c > b && b + c > a\
    \ {\n        // Heron's formula\n        s := float64(a + b + c) / 2\n       \
    \ return float64(s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n    }\n\
    \    return -1\n}\n", "    if a + b > c && a + c > b && b + c > a {\n        s\
    \ := float64(a + b + c) / 2\n        return float64(s * (s - float64(a)) * (s\
    \ - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n", "    sum := a\
    \ + b + c\n    if sum - a < a || sum - b < b || sum - c < c {\n        return\
    \ -1\n    }\n    p := float64(sum) / 2\n    area := p*(p-float64(a))*(p-float64(b))*(p-float64(c))\n\
    \    return float64(int(area*100)) / 100\n}\n", "    var area float64\n    if\
    \ (a < b + c) && (b < a + c) && (c < a + b) {\n        s := float64(a + b + c)\
    \ / 2\n        area = (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \        area = area * 0.5\n    } else {\n        area = -1\n    }\n    return\
    \ area\n}\n", "    var res float64 = -1\n    if a + b > c && a + c > b && b +\
    \ c > a {\n        res = float64(a) * float64(b) / 2\n    }\n    return res\n\
    }\n", "    var t float64 = -1\n    if (a + b > c) && (a + c > b) && (b + c > a)\
    \ {\n        s := float64(a + b + c) / 2\n        t = s * (s - float64(a)) * (s\
    \ - float64(b)) * (s - float64(c))\n        t = t * 0.5\n    }\n    return t\n\
    }\n", "    if (a + b <= c) || (a + c <= b) || (b + c <= a) {\n        return -1\n\
    \    }\n    p := float64(a + b + c) / 2\n    return (p * (p - float64(a)) * (p\
    \ - float64(b)) * (p - float64(c))) ** (1.0 / 2.0)\n}\n", "    s := float64(a\
    \ + b + c) / 2\n    area := s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    }\n    return fmt.Sprintf(\"%.2f\"\
    , math.Sqrt(area))\n}\n", "    switch {\n    case (a + b <= c) || (a + c <= b)\
    \ || (b + c <= a):\n        return -1\n    default:\n        s := float64(a +\
    \ b + c) / 2\n        return s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    }\n}\n", "    var side_len = []int{a, b, c}\n    var valid_triangle = true\n\
    \    var area = -1.0\n    if len(side_len) == 3 {\n        // check if valid triangle\n\
    \        for i := 0; i < 3; i++ {\n            side1 := side_len[i]\n        \
    \    side2 := side_len[(i+1)%3]\n            side3 := side_len[(i+2)%3]\n    \
    \        if side1 + side2 <= side3 {\n                valid_triangle = false\n\
    \                break\n            }\n        }\n        if valid_triangle {\n\
    \            area = float64(a+b+c) / 2.0\n        }\n    }\n    return area\n\
    }\n", "    if a+b > c && a+c > b && b+c > a {\n        p := float64(a+b+c) / 2\n\
    \        s := float64(p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\n      \
    \  return s\n    } else {\n        return -1\n    }\n}\n", "    var s float64\
    \ = float64(a + b + c) / 2\n    var area float64 = (s * (s - float64(a)) * (s\
    \ - float64(b)) * (s - float64(c)))\n    if area <= 0 {\n        return -1\n \
    \   }\n    return area\n}\n", "    return -1\n}\n", "    sides := []int{a, b,\
    \ c}\n    sort.Ints(sides)\n    switch sides[0] + sides[1] > sides[2] {\n    case\
    \ true:\n        s := float64(sides[0] + sides[1] + sides[2]) / 2\n        return\
    \ math.Sqrt(s * (s - float64(sides[0])) * (s - float64(sides[1])) * (s - float64(sides[2])))\n\
    \    default:\n        return -1\n    }\n}\n", "    if (a+b>c) && (a+c>b) && (b+c>a)\
    \ {\n        p := float64(a+b+c) / 2\n        area := p * (p-float64(a)) * (p-float64(b))\
    \ * (p-float64(c))\n        area = area ** (1.0/2.0)\n        return float64(area)\n\
    \    } else {\n        return -1\n    }\n}\n", "    var p float64 = (float64(a)\
    \ + float64(b) + float64(c)) / 2\n    area := math.Sqrt(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    fmt.Println(math.Trunc(area * 100)\
    \ / 100)\n    if area > 0 {\n        return area\n    } else {\n        return\
    \ -1\n    }\n}\n", "    // TODO: implement the function\n    return float64(a\
    \ * b / 2)\n}\n", "\t// Return the area of the triangle\n    var s float64 = float64(a\
    \ + b + c) / 2.0\n    if s - float64(a) < 0 || s - float64(b) < 0 || s - float64(c)\
    \ < 0 {\n        return -1\n    } else {\n        var area float64 = s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n        return area\n   \
    \ }\n}\n", "    var area float64 = -1.0\n    var sideSum float64 = float64(a)\
    \ + float64(b) + float64(c)\n    if sideSum >= float64(a) && sideSum >= float64(b)\
    \ && sideSum >= float64(c) {\n        var p float64 = sideSum / 2.0\n        area\
    \ = float64(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n    \
    \    area = area * 0.5\n    }\n    return area\n}\n", "    var side_sums []int\n\
    \    side_sums = append(side_sums, a + b)\n    side_sums = append(side_sums, a\
    \ + c)\n    side_sums = append(side_sums, b + c)\n    for _, x := range side_sums\
    \ {\n        if x < c {\n            return -1\n        }\n    }\n    s := (a\
    \ + b + c) / 2\n    area := (s * (s - a) * (s - b) * (s - c)) ** (1/2)\n    fmt.Println(area)\n\
    \    return float64(int(area * 100 + 0.5)) / 100\n}\n", "    return 0.0\n}\n",
  "    // if we can't make a triangle, return -1\n    if a + b <= c || a + c <= b\
    \ || b + c <= a {\n        return -1\n    }\n    // find the largest side\n  \
    \  if a > b && a > c {\n        // side a is the largest\n        return float64(b*c)\
    \ / 2\n    } else if b > a && b > c {\n        // side b is the largest\n    \
    \    return float64(a*c) / 2\n    } else {\n        // side c is the largest\n\
    \        return float64(a*b) / 2\n    }\n}\n", "    sum := float64(a + b + c)\n\
    \    if sum < 3 {\n        return -1\n    }\n    // Heron's formula\n    s :=\
    \ sum / 2\n    area := s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    area = area ** 0.5\n    return area\n}\n", "    max_side := a\n    if b >\
    \ max_side {\n        max_side = b\n    }\n    if c > max_side {\n        max_side\
    \ = c\n    }\n    if a + b + c - max_side <= max_side {\n        return -1\n \
    \   }\n    // Heron's formula\n    s := float64(a + b + c) / 2\n    area := s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    return area\n\
    }\n", "    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n  \
    \  }\n    p := float64(a + b + c) / 2\n    return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))) ** 0.5\n}\n", "    // TODO\n    return 0.0\n\
    }\n", "    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n  \
    \  }\n    p := float64(a + b + c) / 2\n    return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n}\n", "    var r float64 = -1\n    if a + b\
    \ > c && a + c > b && b + c > a {\n        s := float64(a + b + c) / 2\n     \
    \   r = math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    }\n    return r\n}\n", "    if a + b > c && a + c > b && b + c > a {\n  \
    \      p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p\
    \ - float64(b)) * (p - float64(c))) ** 0.5\n    }\n    return -1\n}\n", "    if\
    \ a + b <= c || a + c <= b || b + c <= a {\n        return -1\n    }\n    s :=\
    \ float64(a + b + c) / 2\n    return (s - float64(a)) * (s - float64(b)) * (s\
    \ - float64(c)) * s\n}\n", "    var area float64 = 0\n    // calculate semi-perimeter\n\
    \    s := (a + b + c) / 2\n    if (s > a && s > b && s > c) {\n        // using\
    \ Heron's formula\n        area = float64(s * (s - a) * (s - b) * (s - c))\n \
    \       area = area * 0.5\n    } else {\n        area = -1\n    }\n    return\
    \ area\n}\n", "    // your code here\n}\n", "    if a + b > c && a + c > b &&\
    \ b + c > a {\n        p := float64(a + b + c) / 2\n        area := p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n        return float64(area)\n    }\n\
    \    return -1\n}\n", "    var result float64 = -1\n    var sides = [3]int{a,\
    \ b, c}\n    // your code here\n    if (a < 0 || b < 0 || c < 0) {\n        return\
    \ result\n    }\n\n    max := sides[0]\n    if (sides[1] > max) {\n        max\
    \ = sides[1]\n    }\n    if (sides[2] > max) {\n        max = sides[2]\n    }\n\
    \n    if (sides[0] + sides[1] + sides[2] - max > max) {\n        p := float64(a\
    \ + b + c) / 2\n        result = float64(2) * math.Sqrt(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n\n    return result\n}\n", "  \
    \  if a+b <= c || a+c <= b || b+c <= a {\n        return -1\n    }\n    p := float64(a+b+c)\
    \ / 2\n    a = int(p * (p-float64(a)) * (p-float64(b)) * (p-float64(c)))\n   \
    \ return float64(a)\n}\n", "    if a < 1 || b < 1 || c < 1 {\n        return -1\n\
    \    }\n\n    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n\
    \    }\n\n    s := float64(a + b + c) / 2\n    area := s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c))\n    return area\n}\n", "    if a+b > c\
    \ && a+c > b && b+c > a {\n        s := float64(a+b+c) / 2\n        return float64(s\
    \ * (s-float64(a)) * (s-float64(b)) * (s-float64(c)))\n    }\n    return -1\n\
    }\n", "    f := float64(0)\n    if a+b > c && a+c > b && b+c > a {\n        f\
    \ = (float64(a) + float64(b) + float64(c)) / 2\n        return (f * (f - float64(a))\
    \ * (f - float64(b)) * (f - float64(c)))\n    }\n    return -1\n}\n", "    side\
    \ := []int{a, b, c}\n    if(side[0] + side[1] <= side[2] || side[0] + side[2]\
    \ <= side[1] || side[1] + side[2] <= side[0]) {\n        return -1.0\n    }\n\
    \    x := (float64(side[0]) + float64(side[1]) + float64(side[2])) / 2.0\n   \
    \ area := x\n    for i := 0; i < 3; i++ {\n        area *= x - float64(side[i])\n\
    \    }\n    return area\n}\n", "    var sum int\n    sum = a + b + c\n    if a\
    \ + b > c && a + c > b && b + c > a {\n        return float64(sum) * 0.5\n   \
    \ } else {\n        return -1\n    }\n}\n", "    if a+b>c && a+c>b && b+c>a {\n\
    \        return float64(a+b+c) / 2\n    }\n    return -1\n}\n", "    if a + b\
    \ > c && a + c > b && b + c > a {\n        float_a := float64(a)\n        float_b\
    \ := float64(b)\n        float_c := float64(c)\n        p := (float_a + float_b\
    \ + float_c) / 2\n        area := math.Sqrt(p * (p - float_a) * (p - float_b)\
    \ * (p - float_c))\n        return math.Round(area * 100) / 100\n    } else {\n\
    \        return -1\n    }\n}\n", "    if (a + b <= c) || (a + c <= b) || (b +\
    \ c <= a) {\n        return -1\n    }\n    s := float64(a + b + c) / 2\n    return\
    \ float64(math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))))\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
