name: HumanEval_84_solve
language: go_test.go
prompt: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer N, return the total sum of its digits in binary.\n// Example\n\
  // >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n\
  // \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n\
  // Output:\n// a string of binary number\nfunc solve(N int) string {\n"
tests: "func TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
  \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n \
  \    { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
  \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var binaryNum string\n    for i := N; i > 0; i /= 2 {\n       \
    \ if i % 2 == 0 {\n            binaryNum = \"0\" + binaryNum\n        } else {\n\
    \            binaryNum = \"1\" + binaryNum\n        }\n    }\n    return binaryNum\n\
    }\n", "    str := \"\"\n    for N > 0 {\n        if N % 2 == 0 {\n           \
    \ str = \"0\" + str\n        } else {\n            str = \"1\" + str\n       \
    \ }\n        N /= 2\n    }\n    return str\n}\n", "    return fmt.Sprintf(\"%b\"\
    , N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    // your code here\n\
    \    var res string\n    var n int\n    for n = N; n > 0; n = n / 2 {\n      \
    \  res = string(n % 2 + '0') + res\n    }\n    return res\n}\n", "    if N ==\
    \ 0 {\n        return \"0\"\n    }\n    if N == 1 {\n        return \"1\"\n  \
    \  }\n    if N < 4 {\n        return \"10\"\n    }\n    if N < 8 {\n        return\
    \ \"11\"\n    }\n    if N < 16 {\n        return \"100\"\n    }\n    if N < 32\
    \ {\n        return \"101\"\n    }\n    if N < 64 {\n        return \"110\"\n\
    \    }\n    if N < 128 {\n        return \"111\"\n    }\n    if N < 256 {\n  \
    \      return \"1000\"\n    }\n    if N < 512 {\n        return \"1001\"\n   \
    \ }\n    if N < 1024 {\n        return \"1010\"\n    }\n    if N < 2048 {\n  \
    \      return \"1011\"\n    }\n    if N < 4096 {\n        return \"1100\"\n  \
    \  }\n    if N < 8192 {\n        return \"1101\"\n    }\n    if N < 16384 {\n\
    \        return \"1110\"\n    }\n    if N < 32768 {\n        return \"1111\"\n\
    \    }\n    if N < 65536 {\n        return \"100000\"\n    }\n    if N < 131072\
    \ {\n        return \"100001\"\n    }\n    if N < 262144 {\n        return \"\
    100010\"\n    }\n    if N < 524288 {\n        return \"100011\"\n    }\n    if\
    \ N < 1048576 {\n        return \"100100\"\n    }\n    if N < 2097152 {\n    \
    \    return \"100101\"\n    }\n    if N < 4194304 {\n        return \"100110\"\
    \n    }\n    if N < 8388608 {\n        return \"100111\"\n    }\n    if N < 16777216\
    \ {\n        return \"101000\"\n    }\n    if N < 33554432 {\n        return \"\
    101001\"\n    }\n    if N < 67108864 {\n        return \"101010\"\n    }\n   \
    \ if N < 134217728 {\n        return \"101011\"\n    }\n    if N < 268435456 {\n\
    \        return \"101100\"\n   ", "    var nums []int\n    var str string\n  \
    \  for i := 0; i < N; i++ {\n        if i % 2 == 0 {\n            nums = append(nums,\
    \ 0)\n        } else {\n            nums = append(nums, 1)\n        }\n    }\n\
    \    for _, v := range nums {\n        str += fmt.Sprintf(\"%d\", v)\n    }\n\
    \    return str\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    fmt.Println(N)\n\
    \    return \"1\"\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "\tvar result\
    \ string\n\tvar remainder int\n\n\tfor N > 0 {\n\t\tremainder = N % 2\n\t\tN =\
    \ N / 2\n\t\tresult = fmt.Sprintf(\"%d%s\", remainder, result)\n\t}\n\n\treturn\
    \ result\n}\n", "\t// Write your code here\n\treturn \"\"\n}\n", "    return \"\
    \"\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return \"\"\n}\n", " \
    \   str := \"\"\n    var rem int\n    for N > 0 {\n        rem = N % 2\n     \
    \   str = fmt.Sprintf(\"%d%s\", rem, str)\n        N = N / 2\n    }\n    return\
    \ str\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    // your code goes\
    \ here\n    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"%b\"\
    , N)\n}\n", "    // your code here\n    var bin string\n    for i := N; i > 0;\
    \ i /= 2 {\n        bin = fmt.Sprintf(\"%d\", i % 2) + bin\n    }\n    return\
    \ bin\n}\n", "    return \"\"\n}\n", "    str := \"\"\n    for N > 0 {\n     \
    \   var r = N % 2\n        N = N / 2\n        if r == 1 {\n            str = \"\
    1\" + str\n        } else {\n            str = \"0\" + str\n        }\n    }\n\
    \    return str\n}\n", "    var result string\n    for i := N; i > 0; i = i /\
    \ 2 {\n        fmt.Println(i)\n        result = fmt.Sprintf(\"%d%s\", i % 2, result)\n\
    \    }\n    return result\n}\n", "    var result string\n    for N > 0 {\n   \
    \     if N % 2 == 0 {\n            result = \"0\" + result\n        } else {\n\
    \            result = \"1\" + result\n        }\n        N /= 2\n    }\n    return\
    \ result\n}\n", "    bits := make([]bool, 0)\n    for i := 0; i < 15; i++ {\n\
    \        if N % 2 == 1 {\n            bits = append(bits, true)\n        } else\
    \ {\n            bits = append(bits, false)\n        }\n        N /= 2\n    }\n\
    \    str := \"\"\n    for i := len(bits) - 1; i >= 0; i-- {\n        if bits[i]\
    \ {\n            str += \"1\"\n        } else {\n            str += \"0\"\n  \
    \      }\n    }\n    return str\n}\n", "    // TODO: Implementation\n    return\
    \ \"0\"\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    // your code goes here\n    return \"\"\n}\n", "    b :=\
    \ fmt.Sprintf(\"%b\", N)\n    return b\n}\n", "    return fmt.Sprintf(\"%b\",\
    \ N)\n}\n", "    // your code here\n    return fmt.Sprintf(\"%b\", N)\n}\n", " \
    \   if N < 2 {\n        return fmt.Sprintf(\"%d\", N)\n    }\n    var result string\n\
    \    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n    \
    \    N /= 2\n    }\n    return result\n}\n", "    return fmt.Sprintf(\"%b\", N)\n\
    }\n", "    res := \"\"\n    for ; N > 0; N /= 2 {\n        res = fmt.Sprintf(\"\
    %d\", N % 2) + res\n    }\n    return res\n}\n", "    // Convert decimal to binary\
    \ and return the\n    // resulting string\n    return fmt.Sprintf(\"%b\", N)\n\
    }\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    if N < 0 || N > 10000 {\n\
    \        return \"Error\"\n    }\n    var result []int\n    for N > 0 {\n    \
    \    result = append(result, N % 2)\n        N = N / 2\n    }\n    return IntSliceToString(result)\n\
    }\n", "    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %v%v\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n", "    return\
    \ \"\"\n}\n", "    var input int = N\n    var result string\n    for input > 0\
    \ {\n        result = fmt.Sprintf(\"%d%s\", input % 2, result)\n        input\
    \ = input / 2\n    }\n    return result\n}\n", "    sum := \"\"\n    for N > 0\
    \ {\n        b := N % 2\n        N = N / 2\n        if b == 1 {\n            sum\
    \ = \"1\" + sum\n        } else {\n            sum = \"0\" + sum\n        }\n\
    \    }\n    return sum\n}\n", "    return \"\"\n}\n", "    s := \"\"\n    for\
    \ i := N; i > 0; i /= 2 {\n        s = fmt.Sprintf(\"%d\", i % 2) + s\n    }\n\
    \    return s\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    res := \"\"\
    \n    for i := N; i > 0; i /= 2 {\n        res = fmt.Sprintf(\"%d\", i % 2) +\
    \ res\n    }\n    return res\n}\n", "    if N < 0 || N > 10000 {\n        panic(\"\
    Bad argument\")\n    }\n    sum := 0\n    for N > 0 {\n        sum += N % 2\n\
    \        N /= 2\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n", "    if N ==\
    \ 0 {\n        return \"0\"\n    }\n    sum := \"\"\n    for N > 0 {\n       \
    \ sum = fmt.Sprintf(\"%v%v\", N%2, sum)\n        N /= 2\n    }\n    return sum\n\
    }\n", "    return \"0\"\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    var i, j int\n    var r []byte\n    b := make([]byte, 10)\n    for i = 0; N\
    \ > 0; i++ {\n        b[i] = byte(N % 2)\n        N /= 2\n    }\n    for j = 0;\
    \ j < i; j++ {\n        r = append(r, b[i-j-1])\n    }\n    return string(r)\n\
    }\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"%b\"\
    , N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    if N == 0 {\n     \
    \   return \"0\"\n    }\n    if N < 0 {\n        return \"-\" + solve(-N)\n  \
    \  }\n    var s string\n    for N > 0 {\n        s = fmt.Sprintf(\"%d\", N & 1)\
    \ + s\n        N >>= 1\n    }\n    return s\n}\n", "    if N == 0 {\n        return\
    \ \"0\"\n    }\n    if N < 1 || N > 10000 {\n        return \"\"\n    }\n    r\
    \ := \"\"\n    for N > 0 {\n        r = fmt.Sprintf(\"%v%v\", N%2, r)\n      \
    \  N = N/2\n    }\n    return r\n}\n", "    var o string\n    for N > 0 {\n  \
    \      if N%2 == 0 {\n            o = \"0\" + o\n        } else {\n          \
    \  o = \"1\" + o\n        }\n        N = N / 2\n    }\n    return o\n}\n", " \
    \   b := \"\"\n    for N > 0 {\n        if N % 2 == 0 {\n            b = \"0\"\
    \ + b\n        } else {\n            b = \"1\" + b\n        }\n        N /= 2\n\
    \    }\n    return b\n}\n", "    var r string\n    if N < 2 {\n        return\
    \ fmt.Sprintf(\"%d\", N)\n    }\n    n := N\n    for n > 0 {\n        m := n %\
    \ 2\n        r = fmt.Sprintf(\"%d%s\", m, r)\n        n = n / 2\n    }\n    return\
    \ r\n}\n", "    var result string\n    for i := 0; i < 32; i++ {\n        if (N\
    \ & (1 << i)) > 0 {\n            result = \"1\" + result\n        } else {\n \
    \           result = \"0\" + result\n        }\n    }\n    return result\n}\n",
  "    var out string\n    for N > 0 {\n        if N % 2 == 0 {\n            out =\
    \ \"0\" + out\n        } else {\n            out = \"1\" + out\n        }\n  \
    \      N /= 2\n    }\n    return out\n}\n", "    return \"\"\n}\n", "    digits\
    \ := []string{}\n    for N > 0 {\n        digits = append(digits, fmt.Sprintf(\"\
    %d\", N % 2))\n        N /= 2\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += digits[i]\n    }\n    return result\n\
    }\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    b := fmt.Sprintf(\"%b\",\
    \ N)\n    return b\n}\n", "    var binary_slice []int\n    for N > 0 {\n     \
    \   binary_slice = append(binary_slice, N % 2)\n        N = N / 2\n    }\n   \
    \ fmt.Println(binary_slice)\n    return \"1\"\n}\n", "    // your code goes here\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    //\
    \ your code here\n    return fmt.Sprintf(\"%b\", N)\n}\n", "    var result = \"\
    \"\n    for N > 0 {\n        lastDigit := N % 2\n        result = fmt.Sprintf(\"\
    %v%v\", lastDigit, result)\n        N = N / 2\n    }\n    return result\n}\n",
  "    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"%v%v\",\
    \ N%2, result)\n        N /= 2\n    }\n    return result\n}\n", "    // TODO:\
    \ write code here\n    return \"\"\n}\n", "    var str string\n    for N > 0 {\n\
    \        str = fmt.Sprintf(\"%d%s\", N % 2, str)\n        N /= 2\n    }\n    return\
    \ str\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    if N == 0 {\n    \
    \    return \"0\"\n    }\n\n    result := \"\"\n    for N > 0 {\n        result\
    \ = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /= 2\n    }\n\n    return\
    \ result\n}\n", "    s := fmt.Sprintf(\"%b\", N)\n    return s\n}\n", "    var\
    \ ans []int\n    for N >= 1 {\n        if N%2 == 0 {\n            ans = append(ans,\
    \ 0)\n        } else {\n            ans = append(ans, 1)\n        }\n        N\
    \ /= 2\n    }\n    var s string\n    for i := len(ans)-1; i >= 0; i-- {\n    \
    \    s += fmt.Sprintf(\"%d\", ans[i])\n    }\n    return s\n}\n", "    var result\
    \ string\n    i := 0\n    for N > 0 {\n        if (N % 2) > 0 {\n            result\
    \ = fmt.Sprintf(\"%d%s\", N % 2, result)\n        } else {\n            result\
    \ = fmt.Sprintf(\"%s\", result)\n        }\n        N = N / 2\n        i++\n \
    \   }\n    return result\n}\n", "    var out string\n    x := fmt.Sprintf(\"%b\"\
    , N)\n    fmt.Println(x)\n    return out\n}\n", "    if N == 0 {\n        return\
    \ \"0\"\n    }\n\n    binary_str := \"\"\n    for N > 0 {\n        if N%2 == 0\
    \ {\n            binary_str = \"0\" + binary_str\n        } else {\n         \
    \   binary_str = \"1\" + binary_str\n        }\n        N = N / 2\n    }\n   \
    \ return binary_str\n}\n", "    num := N\n    bin := \"\"\n    for num > 0 {\n\
    \        rem := num % 2\n        bin = fmt.Sprintf(\"%d%s\", rem, bin)\n     \
    \   num = num / 2\n    }\n    return bin\n}\n", "    var count int\n    var res\
    \ string\n    for N > 0 {\n        count = N % 2\n        res = fmt.Sprintf(\"\
    %v%v\", count, res)\n        N = N / 2\n    }\n    return res\n}\n", "    // write\
    \ your code here\n    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    r := []string{}\n    for N > 0 {\n        if N % 2 == 0 {\n\
    \            r = append(r, \"0\")\n        } else {\n            r = append(r,\
    \ \"1\")\n        }\n        N = N / 2\n    }\n    return reverse(r)\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    var result string\n\n    for\
    \ N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N%2, result)\n        N = N\
    \ / 2\n    }\n\n    return result\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    var ret string\n    for i := N; i > 0; i = i / 2 {\n        ret\
    \ = fmt.Sprintf(\"%v%v\", i % 2, ret)\n    }\n    return ret\n}\n", "    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n", "    if N == 0 {\n        return \"0\"\n    }\n\
    \    result := \"\"\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N%2,\
    \ result)\n        N /= 2\n    }\n    return result\n}\n", "    // Write your\
    \ code here\n    return fmt.Sprintf(\"%b\", N)\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    var result string\n    for i := N; i > 0; i /= 2\
    \ {\n        result = fmt.Sprintf(\"%d%s\", i % 2, result)\n    }\n    return\
    \ result\n}\n", "    // return intToBinary(N)\n    return fmt.Sprintf(\"%b\",\
    \ N)\n}\n", "    var b = fmt.Sprintf(\"%b\", N)\n    return b\n}\n", "    // your\
    \ code goes here\n    return \"\"\n}\n", "    // Your code here\n}\n", "    //\
    \ your code here\n    var r string\n    for N > 0 {\n        if N % 2 == 0 {\n\
    \            r = \"0\" + r\n        } else {\n            r = \"1\" + r\n    \
    \    }\n        N = N / 2\n    }\n    return r\n}\n", "    // Write your code\
    \ here\n    return \"\"\n}\n", "    var s string\n    for N > 0 {\n        if\
    \ N % 2 == 0 {\n            s = \"0\" + s\n        } else {\n            s = \"\
    1\" + s\n        }\n        N /= 2\n    }\n    return s\n}\n", "    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N%2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n", "    return fmt.Sprintf(\"%b\"\
    , N)\n}\n", "    // Write your code here\n    // To print results to the standard\
    \ output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\"\
    )\n    return \"\"\n}\n", "    // Write your code here\n    return \"\"\n}\n",
  "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return \"\"\n}\n", "    sum := 0\n\
    \    for N > 0 {\n        sum += N % 2\n        N /= 2\n    }\n    return fmt.Sprintf(\"\
    %d\", sum)\n}\n", "    answer := \"\"\n    for {\n        r := N % 2\n       \
    \ N = N / 2\n        if N == 0 {\n            return string(r) + answer\n    \
    \    }\n        answer = string(r) + answer\n    }\n}\n", "    // Write your code\
    \ here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    return fmt.Sprintf(\"%b\"\
    , N)\n}\n", "    // Write your code here\n    r := \"\"\n    for N > 0 {\n   \
    \     n := N % 2\n        N = N / 2\n        r = fmt.Sprintf(\"%v%v\", n, r)\n\
    \    }\n    return r\n}\n", "    res := \"\"\n    var i int\n    for {\n     \
    \   if N == 0 {\n            break\n        }\n        i = N % 2\n        N =\
    \ N / 2\n        res = fmt.Sprintf(\"%d%s\", i, res)\n    }\n    return res\n\
    }\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    if N < 0 || N > 10000 {\n\
    \        return \"\"\n    }\n    var sum string\n    for N > 0 {\n        sum\
    \ = fmt.Sprintf(\"%v%v\", N%2, sum)\n        N = N / 2\n    }\n    return sum\n\
    }\n", "    // Write your code here\n    res := \"\"\n    for N > 0 {\n       \
    \ if N % 2 == 0 {\n            res = \"0\" + res\n        } else {\n         \
    \   res = \"1\" + res\n        }\n        N /= 2\n    }\n    return res\n}\n",
  "    var totalSum int = 0\n    for N > 0 {\n        totalSum += N % 2\n        N\
    \ /= 2\n    }\n    return fmt.Sprintf(\"%d\", totalSum)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    var str = \"\"\n    for N > 0 {\n        if N % 2\
    \ == 0 {\n            str = \"0\" + str\n        } else {\n            str = \"\
    1\" + str\n        }\n        N = N / 2\n    }\n    return str\n}\n", "    out\
    \ := \"\"\n    for N > 0 {\n        out = fmt.Sprintf(\"%v%v\", N % 2, out)\n\
    \        N /= 2\n    }\n    return out\n}\n", "    if N == 0 {\n        return\
    \ \"0\"\n    }\n    if N == 1 {\n        return \"1\"\n    }\n    if N % 2 ==\
    \ 0 {\n        return solve(N / 2) + \"0\"\n    }\n    return solve(N / 2) + \"\
    1\"\n}\n", "    if N < 2 {\n        return fmt.Sprintf(\"%d\", N)\n    }\n   \
    \ if N % 2 == 0 {\n        return solve(N / 2) + \"0\"\n    }\n    return solve(N\
    \ / 2) + \"1\"\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    str := \"\"\n    for N > 0 {\n        rem := N % 2\n    \
    \    N = N / 2\n        if rem == 1 {\n            str = \"1\" + str\n       \
    \ } else {\n            str = \"0\" + str\n        }\n    }\n    return str\n\
    }\n", "    return \"0\"\n}\n", "    // Your code here\n    return \"\"\n}\n",
  "    return fmt.Sprintf(\"%b\", N)\n}\n", "    var binN string\n    if N == 0 {\n\
    \        return \"0\"\n    }\n    for N > 0 {\n        if N%2 == 0 {\n       \
    \     binN = \"0\" + binN\n        } else {\n            binN = \"1\" + binN\n\
    \        }\n        N = N/2\n    }\n    return binN\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    var sum string\n    sum = \"\"\n    for N >= 1 {\n      \
    \  if N % 2 == 0 {\n            sum = \"0\" + sum\n        } else {\n        \
    \    sum = \"1\" + sum\n        }\n        N = N / 2\n    }\n    return sum\n\
    }\n", "    fmt.Println(N)\n    sum := \"\"\n    for N > 0 {\n        sum = fmt.Sprintf(\"\
    %d%s\", N % 2, sum)\n        N /= 2\n    }\n    return sum\n}\n", "    var binary\
    \ string\n    for N > 0 {\n        n := N % 2\n        N = N / 2\n        binary\
    \ = fmt.Sprintf(\"%d%s\", n, binary)\n    }\n    return binary\n}\n", "    out\
    \ := \"\"\n    for {\n        out = fmt.Sprintf(\"%d\", N%2) + out\n        N\
    \ = N/2\n        if N == 0 {\n            break\n        }\n    }\n    return\
    \ out\n}\n", "    const HEX = \"0123456789ABCDEF\"\n    var str string\n    var\
    \ index int\n    for N > 0 {\n        index = N % 2\n        str = string(HEX[index])\
    \ + str\n        N = N >> 1\n    }\n    return str\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    var r string\n\
    \    for N > 0 {\n        r = fmt.Sprintf(\"%d%s\", N % 2, r)\n        N /= 2\n\
    \    }\n    return r\n}\n", "    if N == 0 {\n        return \"0\"\n    }\n  \
    \  quotient := N / 2\n    remainder := N % 2\n    return solve(quotient) + fmt.Sprintf(\"\
    %d\", remainder)\n}\n", "    // Write your code here\n    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return \"\
    \"\n}\n", "    return \"\"\n}\n", "    // For every odd number N, its binary representation\
    \ is 1*2**0+1*2**1+...\n    // For every even number N, its binary representation\
    \ is 1*2**0+1*2**1+...\n    // So we can only need to check if the number is odd\
    \ or even, get binary representation\n    // of odd number, then minus 1.\n  \
    \  // If the binary representation of odd number is 1, then return 1.\n    var\
    \ binary []int\n    for N > 0 {\n        if N % 2 == 0 {\n            binary =\
    \ append(binary, 0)\n        } else {\n            binary = append(binary, 1)\n\
    \            N -= 1\n        }\n        N /= 2\n    }\n    var result string\n\
    \    for i := len(binary) - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"\
    %d\", binary[i])\n    }\n    return result\n}\n", "    sum := 0\n    for N > 0\
    \ {\n        sum += N % 2\n        N /= 2\n    }\n    return fmt.Sprintf(\"%d\"\
    , sum)\n}\n", "    if N > 10000 {\n        panic(\"N out of range\")\n    }\n\
    \    if N == 0 {\n        return \"0\"\n    }\n    var result string\n    for\
    \ N > 0 {\n        if N % 2 == 0 {\n            result = \"0\" + result\n    \
    \    } else {\n            result = \"1\" + result\n        }\n        N /= 2\n\
    \    }\n    return result\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", " \
    \   return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n\
    }\n", "    digits := make([]string, 0)\n    s := N\n    for s > 0 {\n        digits\
    \ = append(digits, fmt.Sprintf(\"%d\", s % 2))\n        s = s / 2\n    }\n   \
    \ str := \"\"\n    for i := len(digits) - 1; i >= 0; i-- {\n        str += digits[i]\n\
    \    }\n    return str\n}\n", "    if N == 0 {\n        return \"0\"\n    }\n\n\
    \    s := \"\"\n    for N > 0 {\n        s = fmt.Sprintf(\"%v%v\", N%2, s)\n \
    \       N /= 2\n    }\n    return s\n}\n", "    return fmt.Sprintf(\"%b\", N)\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    res := \"\"\n    for\
    \ N > 0 {\n        if N % 2 == 0 {\n            res = \"0\" + res\n        } else\
    \ {\n            res = \"1\" + res\n        }\n        N /= 2\n    }\n    return\
    \ res\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    var ret string\n    for N != 0 {\n        rem := N % 2\n\
    \        N = N / 2\n        ret = fmt.Sprintf(\"%v%v\", rem, ret)\n    }\n   \
    \ return ret\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    s := \"\"\n\
    \    for i := 0; i < 10; i++ {\n        if N & 1 > 0 {\n            s = \"1\"\
    \ + s\n        } else {\n            s = \"0\" + s\n        }\n        N >>= 1\n\
    \    }\n    return s\n}\n", "    // your code here\n    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "    var out\
    \ string\n    if N == 0 {\n        return \"0\"\n    }\n    for N > 0 {\n    \
    \    out = fmt.Sprintf(\"%v%v\", N%2, out)\n        N = N/2\n    }\n    return\
    \ out\n}\n", "    fmt.Println(N)\n    fmt.Println(N % 2)\n    return \"\"\n}\n",
  "    // Write your code here\n    s := \"\"\n    for N > 0 {\n        s = fmt.Sprintf(\"\
    %d%s\", N%2, s)\n        N = N / 2\n    }\n    return s\n}\n", "    return \"\
    solution\"\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return fmt.Sprintf(\"\
    %b\", N)\n}\n", "    var S string\n    for ; N > 0; N /= 2 {\n        S = fmt.Sprintf(\"\
    %d%s\", N % 2, S)\n    }\n    return S\n}\n", "    if N == 0 {\n        return\
    \ \"0\"\n    }\n    if N == 1 {\n        return \"1\"\n    }\n    if N % 2 ==\
    \ 0 {\n        return solve(N / 2) + \"0\"\n    }\n    return solve(N / 2) + \"\
    1\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    bin := fmt.Sprintf(\"\
    %b\", N)\n    sum := 0\n    for _, v := range bin {\n        sum += int(v - '0')\n\
    \    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n", "    var result string\n  \
    \  for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N%2, result)\n        N\
    \ /= 2\n    }\n    return result\n}\n", "    return \"\"\n}\n", "    // your code\
    \ goes here\n    fmt.Println(N, N / 2, N % 2)\n    return \"1\"\n}\n", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    //fmt.Println(N)\n\
    \    var out string\n    return out\n}\n", "    var result int64 = 0\n    for\
    \ N != 0 {\n        result = result*2 + int64(N%2)\n        N /= 2\n    }\n  \
    \  return fmt.Sprintf(\"%d\", result)\n}\n", "    return \"\"\n}\n", "    if N\
    \ == 0 {\n        return \"0\"\n    }\n    if N == 1 {\n        return \"1\"\n\
    \    }\n    var output string\n    for N != 0 {\n        output = string(N%2 +\
    \ 48) + output\n        N /= 2\n    }\n    return output\n}\n", "    // your code\
    \ goes here\n    return \"\"\n}\n", "    var result string\n    for N > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", N%2, result)\n        N /= 2\n    }\n\
    \    return result\n}\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    var result\
    \ string\n    if N == 0 {\n        return \"0\"\n    }\n    for N > 0 {\n    \
    \    if N % 2 == 0 {\n            result = \"0\" + result\n        } else {\n\
    \            result = \"1\" + result\n        }\n        N = N / 2\n    }\n  \
    \  return result\n}\n", "    binary := \"\"\n    for N > 0 {\n        binary =\
    \ fmt.Sprintf(\"%v%v\", N % 2, binary)\n        N /= 2\n    }\n    return binary\n\
    }\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    var answer = \"\"\n    for\
    \ i := N; i > 0; i = i / 2 {\n        answer = fmt.Sprintf(\"%v%v\", i % 2, answer)\n\
    \    }\n    return answer\n}\n", "    // write your code here\n    if N < 0 ||\
    \ N > 10000 {\n        return \"0\"\n    }\n    var res string\n    for N > 0\
    \ {\n        if N % 2 == 0 {\n            res = \"0\" + res\n        } else {\n\
    \            res = \"1\" + res\n        }\n        N = N/2\n    }\n    return\
    \ res\n}\n", "    r := \"\"\n    if N > 1 {\n        r = solve(N/2)\n    }\n \
    \   r += fmt.Sprintf(\"%d\", N%2)\n    return r\n}\n", "    answer := \"\"\n \
    \   for N > 0 {\n        answer = fmt.Sprintf(\"%d%s\", N%2, answer)\n       \
    \ N = N/2\n    }\n    return answer\n}\n", "    return fmt.Sprintf(\"%b\", N)\n\
    }\n", "    return fmt.Sprintf(\"%b\", N)\n}\n", "    return \"\"\n}\n", "    var\
    \ result string\n\n    if N == 0 {\n        return \"0\"\n    }\n    for N > 0\
    \ {\n        tmp := N % 2\n        result = fmt.Sprintf(\"%d%s\", tmp, result)\n\
    \        N = N / 2\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
