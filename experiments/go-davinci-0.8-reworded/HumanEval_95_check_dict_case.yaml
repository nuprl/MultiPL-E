name: HumanEval_95_check_dict_case
language: go_test.go
prompt: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a map, return true if all keys are strings in lower \n// case or all\
  \ keys are strings in upper case, else return false.\n// The function should return\
  \ false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
  a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
  \ bool {\n"
tests: "func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
  , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
  , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
  }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
  Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["\tif len(dict) == 0 {\n\t\treturn false\n\t}\n\tvar isLower bool\n\t\
    var isUpper bool\n\tfor key, _ := range dict {\n\t\tif len(key) > 0 {\n\t\t\t\
    if isLower && isUpper {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif isLower {\n\t\
    \t\t\tisUpper = isUpper || check_uppercase(key)\n\t\t\t} else {\n\t\t\t\tisLower\
    \ = isLower || check_lowercase(key)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n",
  "    // Your implementation goes here\n    // You can write to stdout for debugging\
    \ purposes, e.g.\n    // fmt.Println(\"this is a debug message\")\n    //\n  \
    \  if len(dict) == 0 {\n        return false\n    }\n    low := true\n    up :=\
    \ true\n    for k, _ := range dict {\n        for _, char := range k {\n     \
    \       if (char >= 'A' && char <= 'Z') {\n                low = false\n     \
    \       }\n            if (char >= 'a' && char <= 'z') {\n                up =\
    \ false\n            }\n        }\n    }\n    return low || up\n}\n", "    //\
    \ Define the function signature\n    // The first case is for an empty map\n \
    \   if len(dict) == 0 {\n        return false\n    }\n    // Set a count of the\
    \ number of upper-case keys and lower-case keys\n    var upperCaseKeys int\n \
    \   var lowerCaseKeys int\n    // Check all keys in the map\n    for k, _ := range\
    \ dict {\n        // If this key is upper-case, increment upperCaseKeys\n    \
    \    if k == strings.ToUpper(k) {\n            upperCaseKeys++\n        } else\
    \ {\n            // Otherwise, this key is lower-case, so increment lowerCaseKeys\n\
    \            lowerCaseKeys++\n        }\n    }\n    // If the number of upper-case\
    \ keys is equal to the number of lower-case keys,\n    // return true; otherwise,\
    \ return false\n    if upperCaseKeys == lowerCaseKeys {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n", "    // TODO\n    return false\n\
    }\n", "    upper_len := 0\n    lower_len := 0\n    for k, _ := range dict {\n\
    \        _, is_upper := is_upper(k)\n        if is_upper {\n            upper_len++\n\
    \        } else {\n            lower_len++\n        }\n    }\n    return upper_len\
    \ == 0 || lower_len == 0\n}\n", "\tvar isLower, isUpper bool\n\tfor k, _ := range\
    \ dict {\n\t\tif k == lowercase(k) {\n\t\t\tisLower = true\n\t\t} else if k ==\
    \ uppercase(k) {\n\t\t\tisUpper = true\n\t\t} else {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\tif isLower || isUpper {\n\t\treturn true\n\t}\n\treturn false\n}\n",
  "    if len(dict) < 1 {\n        return false\n    }\n    var isUpper bool\n   \
    \ for k, v := range dict {\n        if k == strings.ToUpper(k) {\n           \
    \ isUpper = true\n        } else if k == strings.ToLower(k) {\n            isUpper\
    \ = false\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper\n}\n", "    var isUpper bool\n    var isLower bool\n    for key, value\
    \ := range dict {\n        if isUpper && isLower {\n            return false\n\
    \        }\n        if isUpper == false && isLower == false {\n            isUpper\
    \ = key == uppercase(key)\n            isLower = key == lowercase(key)\n     \
    \   } else {\n            if isUpper && key != uppercase(key) {\n            \
    \    return false\n            }\n            if isLower && key != lowercase(key)\
    \ {\n                return false\n            }\n        }\n        fmt.Printf(\"\
    key: %s, value: %s\\n\", key, value)\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    lower := true\n    upper := true\n\
    \    for k, v := range dict {\n        if k != strings.ToLower(k) {\n        \
    \    lower = false\n        }\n        if k != strings.ToUpper(k) {\n        \
    \    upper = false\n        }\n    }\n    return lower || upper\n}\n", "\tvar\
    \ isUpper = true\n\tvar isLower = true\n\t\n\tfor key, _ := range dict {\n\t\t\
    if !( key == strings.ToUpper(key) ) {\n\t\t\tisUpper = false\n\t\t}\n\t\tif !(\
    \ key == strings.ToLower(key) ) {\n\t\t\tisLower = false\n\t\t}\n\t}\n\treturn\
    \ isUpper || isLower\n}\n", "    lower := 0\n    upper := 0\n    for key, _ :=\
    \ range dict {\n        if key[0] < 'A' {\n            lower++\n        } else\
    \ {\n            upper++\n        }\n    }\n    if lower != 0 && upper != 0 {\n\
    \        return false\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var keyAllUpper, keyAllLower bool\n    for key,\
    \ _ := range dict {\n        if key == \"\" {\n            return false\n    \
    \    }\n        if keyAllUpper && keyAllLower {\n            return false\n  \
    \      }\n        if keyAllUpper && !keyAllLower {\n            if key == keyAllLower\
    \ {\n                keyAllLower = true\n            }\n        }\n        if\
    \ keyAllLower && !keyAllUpper {\n            if key == keyAllUpper {\n       \
    \         keyAllUpper = true\n            }\n        }\n        if !keyAllUpper\
    \ && !keyAllLower {\n            if key == keyAllUpper {\n                keyAllUpper\
    \ = true\n            } else if key == keyAllLower {\n                keyAllLower\
    \ = true\n            }\n        }\n    }\n    return keyAllUpper || keyAllLower\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var flag = true\n\
    \    var firstKey = \"\"\n    for key, _ := range dict {\n        if firstKey\
    \ == \"\" {\n            firstKey = key\n        }\n        if firstKey == key\
    \ {\n            continue\n        }\n        if firstKey[0] > 96 {\n        \
    \    if firstKey[0] > key[0] {\n                flag = false\n               \
    \ break\n            }\n        } else {\n            if firstKey[0] < key[0]\
    \ {\n                flag = false\n                break\n            }\n    \
    \    }\n    }\n    return flag\n}\n", "    empty := len(dict) == 0\n    if empty\
    \ {\n        return false\n    }\n    keys := make([]string, 0, len(dict))\n \
    \   for k := range dict {\n        keys = append(keys, k)\n    }\n    if !checkString(keys)\
    \ {\n        return false\n    }\n    if keys[0] == keys[0] {\n        return\
    \ true\n    }\n    return false\n}\n", "    lowerCase := true\n    upperCase :=\
    \ true\n    firstKey := \"\"\n    for key, _ := range dict {\n        if firstKey\
    \ == \"\" {\n            firstKey = key\n        }\n        if key != strings.ToLower(key)\
    \ {\n            lowerCase = false\n        }\n        if key != strings.ToUpper(key)\
    \ {\n            upperCase = false\n        }\n    }\n    if firstKey == \"\"\
    \ {\n        return false\n    }\n    return lowerCase || upperCase\n}\n", " \
    \   var lowercase bool\n    var uppercase bool\n    for key, _ := range dict {\n\
    \        if len(key) > 0 {\n            if key[0] == []rune(key)[0] {\n      \
    \          lowercase = true\n            } else {\n                uppercase =\
    \ true\n            }\n        }\n    }\n    return lowercase != uppercase\n}\n",
  "    var keys []string\n    for k, _ := range dict {\n        keys = append(keys,\
    \ k)\n    }\n    if len(keys) == 0 {\n        return false\n    }\n    var case_low\
    \ = make(map[string]bool)\n    var case_upper = make(map[string]bool)\n    for\
    \ _, val := range keys {\n        if isUpper(val) {\n            case_upper[val]\
    \ = true\n        } else {\n            case_low[val] = true\n        }\n    }\n\
    \    if len(case_low) > 0 && len(case_upper) > 0 {\n        return false\n   \
    \ }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n \
    \   }\n    count_lower := 0\n    count_upper := 0\n    for key, _ := range dict\
    \ {\n        if key == strings.ToLower(key) {\n            count_lower++\n   \
    \     } else if key == strings.ToUpper(key) {\n            count_upper++\n   \
    \     } else {\n            return false\n        }\n    }\n    return count_lower\
    \ == len(dict) || count_upper == len(dict)\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    lower := false\n    upper := false\n    for key,\
    \ _ := range dict {\n        lower = lower || (key == string(key))\n        upper\
    \ = upper || (key == string(key))\n    }\n    return lower || upper\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    // Find the case of\
    \ the first key.\n    val, case_val := dict[get_first_key(dict)]\n    // Check\
    \ the other keys.\n    for key, val := range dict {\n        if case_val != determine_case(key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
