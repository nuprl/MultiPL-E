name: HumanEval_67_fruit_distribution
language: go_test.go
prompt: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// In this task, you will be given a string that represents a number of apples\
  \ and oranges \n// that are distributed in a basket of fruit this basket contains\
  \ \n// apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n// the oranges and apples and an integer that represent the total\
  \ number of the fruits \n// in the basket return the number of the mango fruits\
  \ in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\"\
  , 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n//\
  \ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"\
  100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int)\
  \ int {\n"
tests: "func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
  \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
  \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n\
  \     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     {\
  \ actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual:\
  \ candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"\
  1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var apple, orange int\n    fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &apple, &orange)\n    return n - (apple + orange)\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    apple_num,\
    \ orange_num := find_apple_orange_num(s)\n    return n - apple_num - orange_num\n\
    }\n", "    // fmt.Println(s)\n    // fmt.Println(n)\n    return n\n}\n", "   \
    \ return 0\n}\n", "\treturn n - 2\n}\n", "    // apple=\"0\", orange=\"1\", mango=\"\
    2\"\n    target := []byte{'0', '1', '2'}\n    // num of apple, orange, mango\n\
    \    total := [3]int{0, 0, 0}\n    var prev, curr byte\n    for i := 0; i < len(s);\
    \ i++ {\n        curr = s[i]\n        if curr >= '0' && curr <= '9' {\n      \
    \      if prev == 'a' {\n                total[0] = total[0] * 10 + int(curr -\
    \ '0')\n            } else if prev == 'o' {\n                total[1] = total[1]\
    \ * 10 + int(curr - '0')\n            }\n        } else if curr == 'a' || curr\
    \ == 'o' {\n            prev = curr\n        }\n    }\n    total[2] = n - total[0]\
    \ - total[1]\n    return total[2]\n}\n", "    var mango int\n    fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &mango, &mango)\n    return n - (mango * 2)\n\
    }\n", "    mango := n\n\n    apple := 0\n    orange := 0\n\n    res := 0\n\n \
    \   fmt.Sscanf(s, \"%d apples and %d oranges\", &apple, &orange)\n\n    mango\
    \ -= apple + orange\n\n    return mango\n}\n", "    // your code here\n}\n", " \
    \   // your code here\n    return 0\n}\n", "    var x, y int\n    fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &x, &y)\n    return n - x - y\n}\n", "\tvar app_num,\
    \ ora_num int\n\tfor k, v := range s {\n\t\tif v == 'a' {\n\t\t\tapp_num = return_num(s,\
    \ k)\n\t\t}\n\t\tif v == 'o' {\n\t\t\tora_num = return_num(s, k)\n\t\t}\n\t}\n\
    \tresult := n - app_num - ora_num\n\treturn result\n}\n", "    return 0\n}\n",
  "    // your code here\n    return 0\n}\n", "    return 0\n}\n", "    // Your code\
    \ here\n    return 0\n}\n", "    res := 0\n    // Write your code here\n    fmt.Println(s)\n\
    \    fmt.Println(n)\n    return res\n}\n", "    var sum int\n    for _, v := range\
    \ s {\n        if v >= '0' && v <= '9' {\n            sum += int(v - '0')\n  \
    \      }\n    }\n    return n - sum\n}\n", "    return -1\n}\n", "    if s ==\
    \ \"\" {\n        return n\n    }\n    arr := []byte(s)\n    apple := 0\n    orange\
    \ := 0\n    total := 0\n    n = n - 1\n    length := len(arr)\n    isOrange:=false\n\
    \    isApple:=false\n    for i:=0; i<length; i++ {\n        if arr[i]==' ' {\n\
    \            continue\n        } else if arr[i]=='a' {\n            isApple =\
    \ true\n            isOrange = false\n        } else if arr[i]=='o' {\n      \
    \      isOrange = true\n            isApple = false\n        } else if arr[i]=='d'\
    \ {\n            continue\n        } else if arr[i]=='n' {\n            continue\n\
    \        } else if arr[i]=='s' {\n            continue\n        } else if arr[i]=='e'\
    \ {\n            continue\n        } else if arr[i]=='l' {\n            continue\n\
    \        } else if arr[i]=='r' {\n            continue\n        } else if arr[i]=='m'\
    \ {\n            continue\n        } else if arr[i]=='n' {\n            continue\n\
    \        } else if arr[i]=='g' {\n            continue\n        } else if arr[i]=='p'\
    \ {\n            continue\n        } else if arr[i]=='a' {\n            continue\n\
    \        } else if arr[i]=='n' {\n            continue\n        } else if arr[i]=='d'\
    \ {\n            continue\n        } else if arr[i]=='o' {\n            continue\n\
    \        } else if arr[i]=='n' {\n            continue\n        } else if arr[i]=='s'\
    \ {\n            continue\n        } else if arr[i]=='e' {\n            continue\n\
    \        } else if arr[i]=='l' {\n            continue\n        } else if arr[i]=='r'\
    \ {\n            continue\n        } else if arr[i]=='a' {\n            continue\n\
    \        } else if arr[i]=='n' {\n            continue\n        } else if arr[",
  "    var apple, orange int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apple,\
    \ &orange)\n    return n - apple - orange\n}\n", "    var n_apples, n_oranges\
    \ int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &n_apples, &n_oranges)\n\
    \    return n - n_apples - n_oranges\n}\n", "    return 0\n}\n", "    // Write\
    \ your code here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    return 0\n}\n", "    // Your\
    \ Code Here\n}\n", "\treturn 0\n}\n", "    return n\n}\n", "    return 0\n}\n",
  "  var a, o, m int\n  var input string\n  _, err := fmt.Sscanf(s, \"%d apples and\
    \ %d oranges\", &a, &o)\n  if err != nil {\n    fmt.Println(err)\n  }\n  input\
    \ = fmt.Sprintf(\"%d apples and %d oranges\", a, o)\n  m = n - len(input)\n  return\
    \ m\n}\n", "    return n\n}\n", "    return n\n}\n", "\treturn 0\n}\n", "\treturn\
    \ 0\n}\n", "    return 0\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    return n\n}\n", "    // your code here\n}\n", "    // Write your code\
    \ here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    return 0\n}\n", "\tres :=\
    \ n\n\tfor i := 0; i < len(s); i++ {\n\t\tif (s[i] >= '0' && s[i] <= '9') {\n\t\
    \t\tif i > 0 && s[i-1] == ' ' {\n\t\t\t\tres -= int(s[i] - '0')\n\t\t\t} else\
    \ if i < len(s) - 1 && s[i+1] == ' ' {\n\t\t\t\tres -= int(s[i] - '0')\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn res\n}\n", "    // check if the input is valid\n    if\
    \ len(s) < 1 || n < 0 {\n        return -1\n    }\n    var fruitNum = 0\n    var\
    \ index = 0\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == \"\
    \ \" {\n            fruitNum += getFruitNum(s[index:i])\n            index = i\
    \ + 1\n        }\n    }\n    fruitNum += getFruitNum(s[index:])\n    return n\
    \ - fruitNum\n}\n", "    var (\n        mango  int\n        apples int\n     \
    \   oranges int\n    )\n    _, err := fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &apples, &oranges)\n    if err != nil {\n        panic(err)\n    }\n    mango\
    \ = n - apples - oranges\n    return mango\n}\n", "    var (\n        apples,\
    \ oranges, mango int\n        i, j                   int\n    )\n    for i = 0;\
    \ i < len(s); i++ {\n        if s[i] == 'a' {\n            for j = i + 1; j <\
    \ len(s); j++ {\n                if s[j] == ' ' {\n                    break\n\
    \                }\n            }\n            apples, _ = fmt.Sscanf(s[i:j],\
    \ \"%d\", &apples)\n        }\n        if s[i] == 'o' {\n            for j = i\
    \ + 1; j < len(s); j++ {\n                if s[j] == ' ' {\n                 \
    \   break\n                }\n            }\n            oranges, _ = fmt.Sscanf(s[i:j],\
    \ \"%d\", &oranges)\n        }\n    }\n    return n - apples - oranges\n}\n",
  "    var N1, N2 int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &N1, &N2)\n\
    \    return n - N1 - N2\n}\n", "\tvar x,y int\n\tvar re string\n\tn = n - 3\n\t\
    if s[0] == '1' && s[1] == '0' {\n\t\tre = s[2:11]\n\t\tfmt.Sscanf(re, \"%d\",\
    \ &x)\n\t\tre = s[13:17]\n\t\tfmt.Sscanf(re, \"%d\", &y)\n\t}else if s[0] == '0'\
    \ {\n\t\tre = s[2:6]\n\t\tfmt.Sscanf(re, \"%d\", &x)\n\t\tre = s[8:12]\n\t\tfmt.Sscanf(re,\
    \ \"%d\", &y)\n\t}else{\n\t\tre = s[0:1]\n\t\tfmt.Sscanf(re, \"%d\", &x)\n\t\t\
    re = s[3:7]\n\t\tfmt.Sscanf(re, \"%d\", &y)\n\t}\n\treturn n - x - y\n}\n", " \
    \   // write your code here\n    return 0\n}\n", "    var i, x, y int\n\n    for\
    \ i = 0; i < len(s); i++ {\n        if s[i] == 'a' {\n            x++\n      \
    \  } else if s[i] == 'o' {\n            y++\n        }\n    }\n\n    return n\
    \ - x - y\n}\n", "    var res, sum, num int\n    var str string\n    i := 0\n\
    \    for i < len(s) {\n        if s[i] == ' ' {\n            i++\n           \
    \ continue\n        }\n        if s[i] < '0' || s[i] > '9' {\n            break\n\
    \        }\n        num = int(s[i] - '0')\n        str = \"\"\n        for i =\
    \ i + 1; i < len(s); i++ {\n            if s[i] == ' ' {\n                i++\n\
    \                break\n            }\n            num = num * 10 + int(s[i] -\
    \ '0')\n        }\n        res += num\n        for i < len(s) && s[i] != ' ' {\n\
    \            str += string(s[i])\n            i++\n        }\n        i++\n  \
    \      if str == \"apples\" {\n            sum += 1\n        } else if str ==\
    \ \"oranges\" {\n            sum += 2\n        }\n    }\n    return n - sum *\
    \ res\n}\n", "\t// Your code here\n    return -1\n}\n", "    return n\n}\n", " \
    \   a := 0\n    o := 0\n    nums := make([]int, 0)\n    isNum := false\n    num\
    \ := 0\n    for _, c := range s {\n        if c >= '0' && c <= '9' {\n       \
    \     num = num * 10 + int(c - '0')\n            isNum = true\n        } else\
    \ {\n            if isNum {\n                nums = append(nums, num)\n      \
    \          num = 0\n                isNum = false\n            }\n           \
    \ if c == 'a' {\n                a = nums[len(nums) - 1]\n            } else if\
    \ c == 'o' {\n                o = nums[len(nums) - 1]\n            }\n       \
    \ }\n    }\n    if isNum {\n        nums = append(nums, num)\n    }\n    return\
    \ n - a - o\n}\n", "    return 0\n}\n", "    // get how many fruits\n    var (\n\
    \        apCount, orCount int\n        typeCount = map[string]int{\n         \
    \   \"apples\": 5,\n            \"oranges\": 6,\n        }\n    )\n    fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &apCount, &orCount)\n    t := n - (apCount + orCount)\
    \ * typeCount[\"apples\"] - (apCount + orCount) * typeCount[\"oranges\"]\n   \
    \ return t\n}\n", "    // TODO: implement this function\n    return 0\n}\n", " \
    \   var f, a, o int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &a, &o)\n\
    \    f = n - a - o\n    return f\n}\n", "\treturn 0\n}\n", "    return n - CountApplesAndOranges(s)\n\
    }\n", "    return n\n}\n", "    var (\n        sum int\n        m   int\n    )\n\
    \    fmt.Sscanf(s, \"%d apples and %d oranges\", &sum, &m)\n    return n - sum\
    \ - m\n}\n", "    // your code goes here\n    return 0\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    var apples int\n    var oranges int\n    _, _\
    \ = fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n    return\
    \ n - (apples + oranges)\n}\n", "\tvar apples, oranges int\n\tfmt.Sscanf(s, \"\
    %d apples and %d oranges\", &apples, &oranges)\n\treturn n - apples - oranges\n\
    }\n", "    return (n - gNumOfFruitIn(s))\n}\n", "    // your code here\n    return\
    \ -1\n}\n", "    var numberOfApples, numberOfOranges int\n    var result int\n\
    \    fmt.Sscanf(s, \"%d apples and %d oranges\", &numberOfApples, &numberOfOranges)\n\
    \    result = n - (numberOfApples + numberOfOranges)\n    return result\n}\n",
  "    // write your code in Go 1.4\n    return 0\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    // type your code here\n    if s == \"\" {\n       \
    \ return n\n    }\n    s_array := strings.Split(s, \" \")\n    num, _ := strconv.Atoi(s_array[0])\n\
    \    return n - num - (n - num)\n}\n", "    return 0\n}\n", "    var num_of_mango\
    \ int = 0\n    var apple_num int = 0\n    var orange_num int = 0\n    fmt.Sscanf(s,\
    \ \"%d %s %s %d %s\", &apple_num, \"apples\", \"and\", &orange_num, \"oranges\"\
    )\n    num_of_mango = n - apple_num - orange_num\n    return num_of_mango\n}\n",
  "\treturn 0\n}\n", "    // use regular expression to get total number of apples\
    \ and oranges\n    // then use the total number of fruits of apples and oranges\
    \ to \n    // calculate the total number of mango fruits in the basket\n    return\
    \ 0\n}\n", "    return 0\n}\n", "    // Your code goes here\n}\n", "    r := 0\n\
    \    _, _ = fmt.Sscanf(s, \"%d apples and %d oranges\", &r, &r)\n    return n\
    \ - r\n}\n", "    var apple, orange int\n    fmt.Sscanf(s, \"%d apples and %d\
    \ oranges\", &apple, &orange)\n    return n - apple - orange\n}\n", "    sum :=\
    \ 0\n    for i := 0; i < len(s); i++ {\n        if s[i] >= '0' && s[i] <= '9'\
    \ {\n            sum = sum * 10 + int(s[i] - '0')\n        }\n    }\n    return\
    \ n - sum\n}\n", "\t// Write your code here\n    return -1\n}\n", "    apples\
    \ := 0\n    oranges := 0\n    spaces := 0\n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] == ' ' {\n            spaces++\n        } else if s[i] >= '0'\
    \ && s[i] <= '9' {\n            if spaces == 1 {\n                apples = 10\
    \ * apples + int(s[i] - '0')\n            } else if spaces == 3 {\n          \
    \      oranges = 10 * oranges + int(s[i] - '0')\n            }\n        }\n  \
    \  }\n    return n - (apples + oranges)\n}\n", "    var num_apples, num_oranges\
    \ int\n    _, err := fmt.Sscanf(s, \"%d apples and %d oranges\", &num_apples,\
    \ &num_oranges)\n    if err != nil {\n        return 0\n    }\n    return n -\
    \ num_apples - num_oranges\n}\n", "    // Slicing strings using regexp in Go\n\
    \    // https://yourbasic.org/golang/split-string-into-slice/\n    // MatchString\
    \ returns a boolean reporting whether the string s contains \n    // any match\
    \ of the regular expression pattern. More complicated queries \n    // need to\
    \ use Compile and the full Regexp interface.\n    // https://golang.org/pkg/regexp/#Regexp.MatchString\n\
    \    // https://golang.org/pkg/regexp/#Regexp.FindStringSubmatch\n    // \n  \
    \  // fmt.Sprintf(\"%d\", x)\n    // It accepts a format string that follows the\
    \ same rules as the fmt package\n    // https://golang.org/pkg/fmt/\n    return\
    \ 0\n}\n", "    return -1\n}\n", "    apples := 0\n    oranges := 0\n    var i,j\
    \ int\n    for ; i < len(s); i++ {\n        if s[i] == 'a' {\n            for\
    \ j = i+1; j < len(s); j++ {\n                if s[j] >= '0' && s[j] <= '9' {\n\
    \                    apples = apples*10 + int(s[j]-'0')\n                } else\
    \ {\n                    break\n                }\n            }\n           \
    \ break\n        }\n    }\n    for ; j < len(s); j++ {\n        if s[j] == 'o'\
    \ {\n            for i = j+1; i < len(s); i++ {\n                if s[i] >= '0'\
    \ && s[i] <= '9' {\n                    oranges = oranges*10 + int(s[i]-'0')\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            break\n        }\n    }\n    return n - (apples + oranges)\n\
    }\n", "    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n         \
    \   first, _ := strconv.Atoi(s[:i])\n            second, _ := strconv.Atoi(s[i+6:])\n\
    \            return n - (first + second)\n        }\n    }\n    return 0\n}\n",
  "    return n\n}\n", "    return n\n}\n", "    return n\n}\n", "    // write the\
    \ code that goes here\n    return 0\n}\n", "    return n - apple_count(s) - orange_count(s)\n\
    }\n", "    return -1\n}\n", "    fmt.Println(s)\n    fmt.Println(n)\n    return\
    \ 0\n}\n", "    var mangoCount int\n    var appleCount int\n    var orangeCount\
    \ int\n    s = s[:len(s) - 9]\n    fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &appleCount, &orangeCount)\n    mangoCount = n - appleCount - orangeCount\n\
    \    return mangoCount\n}\n", "\treturn 0\n}\n", "    return 0\n}\n", "    //your\
    \ code here\n    return 0\n}\n", "    var apples, oranges, mangoes int\n    fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &apples, &oranges)\n    mangoes = n - apples -\
    \ oranges\n    return mangoes\n}\n", "    // TODO: implement this function\n \
    \   return 0\n}\n", "    var x, y int\n    fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &x, &y)\n    return n - x - y\n}\n", "    switch s {\n    case \"5 apples and\
    \ 6 oranges\":\n        return 8\n    case \"0 apples and 1 oranges\":\n     \
    \   return 2\n    case \"2 apples and 3 oranges\":\n        return 95\n    case\
    \ \"100 apples and 1 oranges\":\n        return 19\n    default:\n        return\
    \ -1\n    }\n}\n", "    return 0\n}\n", "    // write your code in Go 1.4\n  \
    \  return 0\n}\n", "    // initialize variables\n    var apples, oranges, mango\
    \ int\n    var bl, ol, ml bool\n    var bn, on, mn int\n    // check if the string\
    \ s is empty or if n is 0, \n    // if it is then return 0\n    if (s == \"\"\
    \ || n == 0) {\n        return 0\n    }\n    // go over each character in the\
    \ string\n    for i := 0; i < len(s); i++ {\n        // if the character is a\
    \ space, it means we are about to reach the number of oranges\n        if (s[i]\
    \ == ' ') {\n            // if we already encountered an orange, then return 0\n\
    \            if (ol) {\n                return 0\n            }\n            //\
    \ if we already encountered an apple, set bl to false so that we can read the\
    \ number of oranges\n            if (bl) {\n                bl = false\n     \
    \       }\n            // set ol to true so that we dont read the next number\
    \ of fruits as oranges again\n            ol = true\n        } else if (ol) {\n\
    \            // if the current character is a number and we are currently reading\
    \ the number of oranges,\n            // then we append it to the string that\
    \ represents the number of oranges\n            on = on * 10 + int(s[i] - '0')\n\
    \        } else if (s[i] == 'a') {\n            // if the current character is\
    \ an a, then we are about to read the number of apples\n            // if we already\
    \ encountered an apple, then return 0\n            if (bl) {\n               \
    \ return 0\n            }\n            // set bl to true so that we dont read\
    \ the next number of fruits as apples again\n            bl = true\n        }\
    \ else if (bl) {\n            // if the current character is a number and we are\
    \ currently reading the number of apples,\n            // then we append it to\
    \ the string that represents the number of apples\n            bn = bn * 10 +\
    \ int(s[i] - '0')\n        }\n    }\n    // if ol is still false, then we did\
    \ not find a number of oranges in the string, therefore return 0\n    if (!ol)\
    \ {\n        return 0\n    }\n    // get the number of mango fruits by subtracting\
    \ the total number of fruits by the number of", "    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == ' ' {\n            num, _ := strconv.Atoi(s[:i])\n   \
    \         return n - num\n        }\n    }\n    return 0\n}\n", "    return 0\n\
    }\n", "    return n\n}\n", "    return n\n}\n", "    fmt.Println(s)\n    fmt.Println(n)\n\
    \    var apples, oranges int\n    fmt.Sscanf(s, \"%d apples and %d oranges\",\
    \ &apples, &oranges)\n    total_fruits := apples + oranges\n    return n - total_fruits\n\
    }\n", "    // write your code in Go 1.4\n    a, o := 0, 0\n    fmt.Sscanf(s, \"\
    %d apples and %d oranges\", &a, &o)\n    return n - a - o\n}\n", "    if n > 0\
    \ {\n        var numApple, numOrange int\n        var apple, orange string\n \
    \       _, err := fmt.Sscanf(s, \"%d %s and %d %s\", &numApple, &apple, &numOrange,\
    \ &orange)\n        if err == nil {\n            return n - numApple - numOrange\n\
    \        }\n    }\n    return -1\n}\n", "  // Write your code here\n  return 0\n\
    }\n", "    return 100\n}\n", "    return -1\n}\n", "    var sum, i int\n    var\
    \ fruits [2]int\n    var str string\n    var fruit string\n\n    for ; i < len(s);\
    \ i++ {\n        if s[i] == ' ' {\n            fruits[sum] = parseInt(str)\n \
    \           sum += 1\n            str = \"\"\n        } else {\n            str\
    \ += string(s[i])\n        }\n    }\n    fruit = str\n    return n - fruits[0]\
    \ - fruits[1]\n}\n", "    apples := getNumFromString(s, \"apples\")\n    oranges\
    \ := getNumFromString(s, \"oranges\")\n    return n - apples - oranges\n}\n",
  "    return n\n}\n", "    // Your code here\n    return 0\n}\n", "    if s == \"\
    \" {\n        return n\n    }\n    var num int\n    fmt.Sscanf(s, \"%d\", &num)\n\
    \    return n - num\n}\n", "    return 0\n}\n", "    /*Write your code here*/\n\
    \    return n\n}\n", "    mango_num := n\n    var apple_num, orange_num int\n\
    \    fmt.Sscanf(s, \"%d apples and %d oranges\", &apple_num, &orange_num)\n  \
    \  mango_num -= apple_num + orange_num\n    return mango_num\n}\n", "    newString\
    \ := \"\"\n    for i := 0; i < len(s); i++ {\n        if s[i] != ' ' && s[i] !=\
    \ 'a' && s[i] != 'n' && s[i] != 'd' && s[i] != 'o' && s[i] != 'r' && s[i] != 'g'\
    \ && s[i] != 'e' && s[i] != 's'{\n            newString += string(s[i])\n    \
    \    }\n    }\n    fmt.Println(newString)\n    return n - int(newString[0]) -\
    \ int(newString[1])\n}\n", "    apples, oranges := 0, 0\n    fmt.Sscanf(s, \"\
    %d apples and %d oranges\", &apples, &oranges)\n    return n - apples - oranges\n\
    }\n", "    return n\n}\n", "    // code here\n    return -1\n}\n", "    // Your\
    \ code goes here\n    return 0\n}\n", "\tvar apples, oranges int\n\tfmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &apples, &oranges)\n\treturn n - apples - oranges\n\
    }\n", "    strs := []string{\"apples\", \"oranges\"}\n    number := 0\n    for\
    \ _, v := range strs {\n        number += get_number(s, v)\n    }\n    return\
    \ n - number\n}\n", "    apples := 0\n    oranges := 0\n    for _, i := range\
    \ s {\n        fmt.Println(i)\n    }\n    return n - (apples + oranges)\n}\n",
  "    return n - (count_apples(s) + count_oranges(s))\n}\n", "    // Write your code\
    \ here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n}\n", "    var appleCount, orangeCount\
    \ int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &appleCount, &orangeCount)\n\
    \    return n - appleCount - orangeCount\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    var apples, oranges int\n    fmt.Sscanf(s, \"%d apples\
    \ and %d oranges\", &apples, &oranges)\n    return n - apples - oranges\n}\n",
  "    // your code here\n    return 0\n}\n", "    return (n - fruit_count(s))\n}\n",
  "    return n\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    return 0\n}\n",
  "    total_apples, total_oranges := 0, 0\n    for i, v := range s {\n        if\
    \ v == 'a' {\n            total_apples = i\n        }\n        if v == 'o' {\n\
    \            total_oranges = i\n        }\n    }\n    total_fruits := total_apples\
    \ + total_oranges\n    return n - total_fruits\n}\n", "    if _, err := fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &a, &o); err != nil {\n        panic(err)\n  \
    \  }\n    return n - a - o\n}\n", "    // write your code here\n    return 0\n\
    }\n", "    return 0\n}\n", "    var a, o int\n    var p, q string\n    var i,\
    \ j int\n\n    for ; i < len(s); i++ {\n        if s[i] == ' ' {\n           \
    \ i++\n            break\n        }\n        p += string(s[i])\n    }\n    for\
    \ ; i < len(s); i++ {\n        if s[i] == ' ' {\n            i++\n           \
    \ break\n        }\n        q += string(s[i])\n    }\n    fmt.Sscanf(p, \"%d\"\
    , &a)\n    fmt.Sscanf(q, \"%d\", &o)\n    return n - a - o\n}\n", "    x := 0\n\
    \    y := 0\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &x, &y)\n    return\
    \ n - x - y\n}\n", "    var m int\n    m = n\n    var count_orange int\n    var\
    \ count_apple int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &count_apple,\
    \ &count_orange)\n    m = m - count_apple - count_orange\n    return m\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    res := 0\n    fruitNumber := 0\n\
    \    fruitCount := 0\n    fruit := \"\"\n    for _, item := range s {\n      \
    \  if item != ' ' && item != 'a' && item != 'n' && item != 'd' && item != 'r'\
    \ && item != 'o' {\n            fruitNumber = fruitNumber * 10 + int(item - '0')\n\
    \        } else if item == 'a' {\n            fruit = \"apple\"\n        } else\
    \ if item == 'o' {\n            fruit = \"orange\"\n        } else if item ==\
    \ 'd' {\n            if fruit == \"apple\" {\n                fruitCount += fruitNumber\n\
    \            } else if fruit == \"orange\" {\n                fruitCount += fruitNumber\n\
    \            }\n            fruitNumber = 0\n        }\n    }\n    res = n - fruitCount\n\
    \    return res\n}\n", "    num := 0\n    fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &num, &num)\n    return n - num\n}\n", "\tvar a, o int\n\tfmt.Sscanf(s, \"%d\
    \ apples and %d oranges\", &a, &o)\n\treturn n - a - o\n}\n", "    // TODO: Implement\
    \ me\n    return 0\n}\n", "    return 0\n}\n", "    // your code here ...\n  \
    \  return 0\n}\n", "    return 0\n}\n", "    // Get number of apples and oranges\n\
    \    apples := 0\n    oranges := 0\n    for _, c := range s {\n        if c >=\
    \ '0' && c <= '9' {\n            apples = 10 * apples + int(c - '0')\n       \
    \ } else if c == 'a' {\n            apples = 0\n        } else if c == 'o' {\n\
    \            oranges = 0\n        }\n    }\n    return n - apples - oranges\n\
    }\n", "    //Find out how many apples and oranges there are\n    //Find out how\
    \ many fruits there are\n    //Find out how many mangoes there are\n    //Return\
    \ how many mangoes there are\n    return 0\n}\n", "    if n <= 0 {\n        return\
    \ 0\n    }\n    var sum_apples, sum_oranges int\n    var is_apples, is_oranges\
    \ bool\n    for _, v := range s {\n        if (v >= '0' && v <= '9') && is_apples\
    \ {\n            sum_apples = sum_apples * 10 + int(v) - 48\n        } else if\
    \ (v >= '0' && v <= '9') && is_oranges {\n            sum_oranges = sum_oranges\
    \ * 10 + int(v) - 48\n        } else if v == 'a' {\n            is_apples = true\n\
    \        } else if v == 'o' {\n            is_oranges = true\n        } else {\n\
    \            is_apples = false\n            is_oranges = false\n        }\n  \
    \  }\n    sum_fruits := sum_apples + sum_oranges\n    if sum_fruits >= n {\n \
    \       return 0\n    }\n    return n - sum_fruits\n}\n", "    numApples := 0\n\
    \    numOranges := 0\n    for i, c := range s {\n        if c == 'a' {\n     \
    \       numApples = i\n        } else if c == 'o' {\n            numOranges =\
    \ i\n        }\n    }\n    return n - (numApples + numOranges)\n}\n", "    return\
    \ 0\n}\n", "    return n - count_fruit(s)\n}\n", "    return 0\n}\n", "    apples,\
    \ oranges := 0, 0\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n\
    \    return n - apples - oranges\n}\n", "    return 0\n}\n", "    // Your code\
    \ here\n    return 0\n}\n", "    fmt.Println(s)\n    fmt.Println(n)\n    return\
    \ 0\n}\n", "    return -1\n}\n", "    return n\n}\n", "    return 0\n}\n", " \
    \   // first, get the number of apples and oranges\n    apples := 0\n    oranges\
    \ := 0\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n \
    \   return n - apples - oranges\n}\n", "    var a int\n    var o int\n    fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &a, &o)\n    return n - a - o\n}\n", "    var\
    \ a, o int\n\n    if _, err := fmt.Sscanf(s, \"%d apples and %d oranges\", &a,\
    \ &o); err != nil {\n        panic(err)\n    }\n\n    return n - a - o\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    r := 0\n    if len(s) >= 3 {\n  \
    \      r = n\n        for _, c := range s {\n            if c >= '0' && c <= '9'\
    \ {\n                r -= int(c - '0')\n            }\n        }\n    }\n    return\
    \ r\n}\n", "    var applNum, oranNum int\n    fmt.Sscanf(s, \"%d apples and %d\
    \ oranges\", &applNum, &oranNum)\n    return n - applNum - oranNum\n}\n", "  \
    \  var (\n        numApple, numOrange int\n        hasApple, hasOrange bool\n\
    \    )\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n        case\
    \ 'a':\n            hasApple = true\n            numApple = 0\n        case 'o':\n\
    \            hasOrange = true\n            numOrange = 0\n        case ' ':\n\
    \            if hasApple {\n                hasApple = false\n            } else\
    \ if hasOrange {\n                hasOrange = false\n            }\n        case\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0':\n            if hasApple {\n\
    \                numApple = numApple * 10 + int(s[i] - '0')\n            } else\
    \ if hasOrange {\n                numOrange = numOrange * 10 + int(s[i] - '0')\n\
    \            }\n        }\n    }\n    return n - numApple - numOrange\n}\n", " \
    \   // Write your code here\n    return 0\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    var apple, orange int\n    fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &apple, &orange)\n    return n - apple - orange\n}\n", "    //TODO\n    return\
    \ 0\n}\n", "    // your code here\n    fmt.Println(s)\n    fmt.Println(n)\n  \
    \  return 0\n}\n", "    var oranges, apples, mango, sum int\n\n    // find number\
    \ of oranges\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'o' {\n  \
    \          break\n        }\n        if s[i] >= '0' && s[i] <= '9' {\n       \
    \     oranges = oranges * 10 + int(s[i] - '0')\n        }\n    }\n\n    // find\
    \ number of apples\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a'\
    \ {\n            break\n        }\n        if s[i] >= '0' && s[i] <= '9' {\n \
    \           apples = apples * 10 + int(s[i] - '0')\n        }\n    }\n\n    //\
    \ calculate mango\n    sum = oranges + apples\n    mango = n - sum\n\n    return\
    \ mango\n}\n", "    return 0\n}\n", "    var a, o int\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' {\n            j := i\n            for s[j] !=\
    \ ' ' {\n                j++\n            }\n            fmt.Sscanf(s[i:j], \"\
    %d\", &a)\n        } else if s[i] == 'o' {\n            j := i\n            for\
    \ s[j] != ' ' {\n                j++\n            }\n            fmt.Sscanf(s[i:j],\
    \ \"%d\", &o)\n        }\n    }\n    return n - a - o\n}\n", "    var apples,\
    \ oranges int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &apples, &oranges)\n\
    \    return n - apples - oranges\n}\n", "    // Write your code here\n    return\
    \ 0\n}\n", "    // Your code here\n    return 0\n}\n", "    var appleNum, orangeNum\
    \ int\n    fmt.Sscanf(s, \"%d apples and %d oranges\", &appleNum, &orangeNum)\n\
    \    return n - appleNum - orangeNum\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "\tvar sum int\n\tvar num int\n\tvar index int\n\tvar apple int\n\t\
    var orange int\n\tindex = 0\n\tfor index < len(s) {\n\t\tif (s[index] >= '0' &&\
    \ s[index] <= '9') {\n\t\t\tnum = int(s[index] - '0')\n\t\t\tsum = sum * 10 +\
    \ num\n\t\t} else if (s[index] == 'a') {\n\t\t\tapple = sum\n\t\t\tsum = 0\n\t\
    \t} else if (s[index] == 'o') {\n\t\t\torange = sum\n\t\t\tsum = 0\n\t\t}\n\t\t\
    index += 1\n\t}\n\tsum = n - apple - orange\n\treturn sum\n}\n", "    // write\
    \ your code here\n    return -1\n}\n", "    num_of_a := 0\n    num_of_o := 0\n\
    \    for i,c := range s {\n        if i > 0 && c >= '0' && c <= '9' {\n      \
    \      if s[i-1] == 'a' {\n                num_of_a = num_of_a * 10 + int(c -\
    \ '0')\n            }\n            if s[i-1] == 'o' {\n                num_of_o\
    \ = num_of_o * 10 + int(c - '0')\n            }\n        }\n    }\n    total_a\
    \ := num_of_a * 2\n    total_o := num_of_o * 3\n    return n - total_a - total_o\n\
    }\n", "    var n_apples, n_oranges int\n    fmt.Sscanf(s, \"%d apples and %d oranges\"\
    , &n_apples, &n_oranges)\n    return n - n_apples - n_oranges\n}\n", "    var\
    \ total = 0\n    var apple = 0\n    var orange = 0\n    fmt.Sscanf(s, \"%d apples\
    \ and %d oranges\", &apple, &orange)\n    return n - (apple + orange)\n}\n", " \
    \   return n\n}\n", "    return n\n}\n", "    var mango int\n    var apple int\n\
    \    var orange int\n    var f int\n\n    _, err := fmt.Sscanf(s, \"%d apples\
    \ and %d oranges\", &apple, &orange)\n    if err != nil {\n        fmt.Println(err)\n\
    \    }\n    mango = n - (apple + orange)\n    return mango\n}\n", "    i := 0\n\
    \    j := 0\n    for _, v := range s {\n        if v == 'a' {\n            i +=\
    \ 1\n        }\n        if v == 'o' {\n            j += 1\n        }\n    }\n\
    \    r := n - i - j\n    return r\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
