name: HumanEval_152_compare
language: go_test.go
prompt: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I\
  \ think we all remember that feeling when the result of some long-awaited\n// event\
  \ is finally known. The feelings and thoughts you have at that moment are\n// definitely\
  \ worth noting down and comparing.\n// Your task is to determine if a person correctly\
  \ guessed the results of a number of matches.\n// You are given two lists of scores\
  \ and guesses of equal length, where each index shows a match. \n// Return a list\
  \ of the same length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1,\
  \ 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0,\
  \ 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game\
  \ []int, guess []int) []int {\n"
tests: "func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
  \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
  \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
  \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n  \
  \   { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
  \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(game))\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] < guess[i] {\n            result[i] = guess[i] - game[i]\n\
    \        } else {\n            result[i] = game[i] - guess[i]\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(game))\n    for i\
    \ := 0; i < len(game); i++ {\n        if (game[i] == guess[i]) {\n           \
    \ result[i] = 0\n        } else {\n            result[i] = Abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    if len(game) != len(guess) {\n\
    \        panic(\"different lengths\")\n    }\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // r := make([]int, len(game))\n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] > guess[i] {\n            game[i]\
    \ = game[i] - guess[i]\n        } else {\n            game[i] = guess[i] - game[i]\n\
    \        }\n    }\n    return game\n}\n", "    if len(game) != len(guess) {\n\
    \        return nil\n    }\n    result := make([]int, len(game))\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] < guess[i] {\n            result[i]\
    \ = guess[i] - game[i]\n        } else {\n            result[i] = game[i] - guess[i]\n\
    \        }\n    }\n    return result\n}\n", "    r := make([]int, len(game))\n\
    \    for i, v := range game {\n        g := guess[i]\n        r[i] = abs(v - g)\n\
    \    }\n    return r\n}\n", "    var result []int\n\n    if len(game) != len(guess)\
    \ {\n        return result\n    }\n\n    for i, v := range game {\n        if\
    \ guess[i] < 0 {\n            result = append(result, v - guess[i])\n        }\
    \ else {\n            result = append(result, v - guess[i])\n        }\n    }\n\
    \n    return result\n}\n", "    var result []int\n    var score int\n    if len(game)\
    \ == len(guess) {\n        for i := 0; i < len(game); i++ {\n            if game[i]\
    \ > guess[i] {\n                score = game[i] - guess[i]\n            } else\
    \ {\n                score = guess[i] - game[i]\n            }\n            result\
    \ = append(result, score)\n        }\n    }\n    return result\n}\n", "    var\
    \ difference []int\n    for i := 0; i < len(game); i++ {\n        if game[i] ==\
    \ guess[i] {\n            difference = append(difference, 0)\n        } else {\n\
    \            difference = append(difference, abs(game[i] - guess[i]))\n      \
    \  }\n    }\n    return difference\n}\n", "    if len(game) != len(guess) {\n\
    \        return []int{}\n    }\n    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] < guess[i] {\n            result = append(result,\
    \ guess[i] - game[i])\n        } else if game[i] > guess[i] {\n            result\
    \ = append(result, game[i] - guess[i])\n        } else {\n            result =\
    \ append(result, 0)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for i := 0; i < len(game); i++ {\n        if game[i] < guess[i] {\n\
    \            result = append(result, guess[i] - game[i])\n        } else if game[i]\
    \ > guess[i] {\n            result = append(result, game[i] - guess[i])\n    \
    \    } else {\n            result = append(result, 0)\n        }\n    }\n    return\
    \ result\n}\n", "\tres := make([]int, 0)\n\tif len(game) != len(guess) {\n\t\t\
    return res\n\t}\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] > guess[i]\
    \ {\n\t\t\tres = append(res, game[i] - guess[i])\n\t\t} else {\n\t\t\tres = append(res,\
    \ guess[i] - game[i])\n\t\t}\n\t}\n\treturn res\n}\n", "    diff := make([]int,\
    \ len(game))\n    for i, v := range game {\n        if v > guess[i] {\n      \
    \      diff[i] = v - guess[i]\n        } else {\n            diff[i] = guess[i]\
    \ - v\n        }\n    }\n    return diff\n}\n", "    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        difference := guess[i] - game[i]\n\
    \        if difference < 0 {\n            difference = -difference\n        }\n\
    \        result[i] = difference\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(game))\n    for i, _ := range game {\n        if game[i] > guess[i]\
    \ {\n            result[i] = game[i] - guess[i]\n        } else {\n          \
    \  result[i] = guess[i] - game[i]\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n  \
    \      result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   l := len(game)\n    res := make([]int, l)\n    for i := 0; i < l; i++ {\n\
    \        res[i] = abs(game[i] - guess[i])\n    }\n    return res\n}\n", "    var\
    \ diff []int\n    for i, v := range game {\n        diff = append(diff, Abs(v\
    \ - guess[i]))\n    }\n    return diff\n}\n", "    res := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        res[i] = 0\n        } else {\n            res[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return res\n}\n", "    if len(game) != len(guess) {\n \
    \       panic(\"game and guess should have the same length\")\n    }\n    result\
    \ := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i]\
    \ = Abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    for i, val :=\
    \ range game {\n        if val < guess[i] {\n            guess[i] = guess[i] -\
    \ val\n        } else {\n            guess[i] = val - guess[i]\n        }\n  \
    \  }\n    return guess\n}\n", "    var diff []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] > guess[i] {\n            diff = append(diff, game[i]\
    \ - guess[i])\n        } else {\n            diff = append(diff, guess[i] - game[i])\n\
    \        }\n    }\n    return diff\n}\n", "    result := make([]int, len(game))\n\
    \    for i, _ := range result {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    if len(game) != len(guess) {\n        panic(\"\
    game and guess must be the same length\")\n    }\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    var off []int\n    for i, _ := range game\
    \ {\n        if game[i] == guess[i] {\n            off = append(off, 0)\n    \
    \    } else {\n            off = append(off, abs(game[i] - guess[i]))\n      \
    \  }\n    }\n    return off\n}\n", "    var out = make([]int, len(game))\n   \
    \ var i = 0\n    for ; i < len(game); i++ {\n        out[i] = abs(game[i] - guess[i])\n\
    \    }\n    return out\n}\n", "    if len(game) != len(guess) {\n        return\
    \ nil\n    }\n    result := make([]int, len(game))\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n       \
    \ } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n\
    \    return result\n}\n", "    for idx, num := range game {\n        if guess[idx]\
    \ != num {\n            guess[idx] = Abs(guess[idx] - num)\n        }\n    }\n\
    \    return guess\n}\n", "    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] > guess[i] {\n            result = append(result,\
    \ game[i] - guess[i])\n        } else {\n            result = append(result, guess[i]\
    \ - game[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    ret := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n    \
    \        ret[i] = Abs(game[i] - guess[i])\n        }\n    }\n    return ret\n\
    }\n", "    if len(game) != len(guess) {\n        panic(\"game and guess lists\
    \ are of different lengths\")\n    }\n    var result []int\n    for i, _ := range\
    \ game {\n        d := game[i] - guess[i]\n        if d < 0 {\n            d =\
    \ -d\n        }\n        result = append(result, d)\n    }\n    return result\n\
    }\n", "    diff := make([]int, len(game))\n    for i, _ := range game {\n    \
    \    diff[i] = abs(game[i] - guess[i])\n    }\n    return diff\n}\n", "    if\
    \ len(game) != len(guess) {\n        return []int{}\n    }\n    result := make([]int,\
    \ len(game))\n    for i, n := range game {\n        diff := abs(n - guess[i])\n\
    \        result[i] = diff\n    }\n    return result\n}\n", "    var diff []int\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        diff = append(diff, 0)\n        } else {\n            diff = append(diff,\
    \ abs(game[i]-guess[i]))\n        }\n    }\n    return diff\n}\n", "    if len(game)\
    \ != len(guess) {\n        panic(\"length mismatch\")\n    }\n    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    score := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if guess[i] == game[i] {\n    \
    \        score[i] = 0\n        } else {\n            if guess[i] > game[i] {\n\
    \                score[i] = guess[i] - game[i]\n            } else {\n       \
    \         score[i] = game[i] - guess[i]\n            }\n        }\n    }\n   \
    \ return score\n}\n", "    out := make([]int, len(game))\n    for i := 0; i <\
    \ len(game); i++ {\n        if game[i] == guess[i] {\n            out[i] = 0\n\
    \        } else {\n            out[i] = abs(game[i] - guess[i])\n        }\n \
    \   }\n    return out\n}\n", "\tvar diff []int\n\tfor i := 0; i < len(game); i++\
    \ {\n\t\tif game[i] == guess[i] {\n\t\t\tdiff = append(diff, 0)\n\t\t} else {\n\
    \t\t\tdiff = append(diff, Abs(game[i]-guess[i]))\n\t\t}\n\t}\n\treturn diff\n\
    }\n", "    difference := make([]int, len(game))\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] > guess[i] {\n            difference[i] = game[i]\
    \ - guess[i]\n        } else {\n            difference[i] = guess[i] - game[i]\n\
    \        }\n    }\n    return difference\n}\n", "    var result []int\n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n           \
    \ result = append(result, 0)\n        } else {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i]\
    \ = Abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    ret := make([]int,\
    \ len(game))\n    for i, v := range game {\n        ret[i] = abs(v - guess[i])\n\
    \    }\n    return ret\n}\n", "    var result []int\n    for i,v := range game\
    \ {\n        result = append(result, (abs(v-guess[i])))\n    }\n    return result\n\
    }\n", "    result := make([]int, len(game))\n    for i, v := range game {\n  \
    \      result[i] = abs(v - guess[i])\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(game))\n    for i, _ := range game {\n        if game[i]\
    \ < 0 {\n            game[i] = -game[i]\n        }\n        if guess[i] < 0 {\n\
    \            guess[i] = -guess[i]\n        }\n        if game[i] > guess[i] {\n\
    \            result[i] = game[i] - guess[i]\n        } else {\n            result[i]\
    \ = guess[i] - game[i]\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ Implement me\n    var result []int\n    // in case they are not equal length\n\
    \    if len(game) != len(guess) {\n        fmt.Println(\"Not equal length\")\n\
    \        return result\n    }\n    for i, _ := range game {\n        if game[i]\
    \ != guess[i] {\n            result = append(result, absDiff(game[i], guess[i]))\n\
    \        } else {\n            result = append(result, 0)\n        }\n    }\n\
    \    return result\n}\n", "    score := make([]int, len(game))\n    for i, _ :=\
    \ range game {\n        score[i] = Abs(game[i] - guess[i])\n    }\n    return\
    \ score\n}\n", "    if len(game) != len(guess) {\n        panic(\"The length of\
    \ input is not equal\")\n    }\n    result := make([]int, len(game))\n    for\
    \ i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    r := make([]int, len(game))\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n            r[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return r\n}\n", "    var result\
    \ []int\n    for i, j := range game {\n        diff := j - guess[i]\n        if\
    \ diff < 0 {\n            diff = -diff\n        }\n        result = append(result,\
    \ diff)\n    }\n    return result\n}\n", "\tvar ret []int\n\tfor i, v := range\
    \ game {\n\t\tret = append(ret, diff(guess[i], v))\n\t}\n\treturn ret\n}\n", " \
    \   if len(game) != len(guess) {\n        return []int{}\n    }\n    ret := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i]\
    \ {\n            ret[i] = 0\n        } else {\n            ret[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return ret\n}\n", "    diff := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i]\
    \ {\n            diff[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ diff\n}\n", "    var result []int\n    for i, _ := range game {\n        result\
    \ = append(result, abs(game[i] - guess[i]))\n    }\n    return result\n}\n", " \
    \   var res []int\n    for i, v := range game {\n        if v > guess[i] {\n \
    \           res = append(res, v - guess[i])\n        } else {\n            res\
    \ = append(res, guess[i] - v)\n        }\n    }\n    return res\n}\n", "    result\
    \ := make([]int, len(game))\n    for i, value := range game {\n        result[i]\
    \ = abs(value - guess[i])\n    }\n    return result\n}\n", "    diff := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        diff[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return diff\n}\n", "    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if (game[i] > guess[i]) {\n   \
    \         result[i] = game[i] - guess[i]\n        } else {\n            result[i]\
    \ = guess[i] - game[i]\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(game))\n    for index, value := range game {\n        result[index]\
    \ = abs(value - guess[index])\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for i := 0; i < len(game); i++ {\n        if game[i] < guess[i] {\n\
    \            result = append(result, guess[i] - game[i])\n        } else if game[i]\
    \ > guess[i] {\n            result = append(result, game[i] - guess[i])\n    \
    \    } else {\n            result = append(result, 0)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(game))\n    for i, v := range game\
    \ {\n        if v >= guess[i] {\n            result[i] = v - guess[i]\n      \
    \  } else {\n            result[i] = guess[i] - v\n        }\n    }\n    return\
    \ result\n}\n", "    length := len(game)\n    diff := make([]int, length)\n  \
    \  for i := 0; i < length; i++ {\n        diff[i] = absoluteDiff(game[i], guess[i])\n\
    \    }\n    return diff\n}\n", "    diff := make([]int, len(game))\n    if len(game)\
    \ != len(guess) {\n        return diff\n    }\n    for i := 0; i < len(game);\
    \ i++ {\n        diff[i] = abs(game[i] - guess[i])\n    }\n    return diff\n}\n",
  "    result := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n  \
    \      if game[i] > guess[i] {\n            result[i] = game[i] - guess[i]\n \
    \       } else {\n            result[i] = guess[i] - game[i]\n        }\n    }\n\
    \    return result\n}\n", "\tresults := make([]int, len(game))\n\tfor i := 0;\
    \ i < len(game); i++ {\n\t\tif guess[i] == game[i] {\n\t\t\tresults[i] = 0\n\t\
    \t} else {\n\t\t\tresults[i] = Abs(guess[i] - game[i])\n\t\t}\n\t}\n\treturn results\n\
    }\n", "\tif len(game) != len(guess) {\n\t\tpanic(\"Inequal length of lists!\"\
    )\n\t}\n\tvar result []int\n\tfor i := 0; i < len(game); i++ {\n\t\tresult = append(result,\
    \ returnAbs(game[i], guess[i]))\n\t}\n\treturn result\n}\n", "    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if guess[i] == game[i]\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(guess[i]\
    \ - game[i])\n        }\n    }\n    return result\n}\n", "    if len(game) !=\
    \ len(guess) {\n        return []int{}\n    }\n    results := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        results[i] = abs(game[i] - guess[i])\n\
    \    }\n    return results\n}\n", "    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        if game[i] > guess[i] {\n            result = append(result,\
    \ game[i] - guess[i])\n        } else {\n            result = append(result, guess[i]\
    \ - game[i])\n        }\n    }\n    return result\n}\n", "    var res []int\n\
    \    for i := 0; i < len(game); i++ {\n        g := game[i]\n        s := guess[i]\n\
    \        if g == s {\n            res = append(res, 0)\n        } else {\n   \
    \         res = append(res, Abs(g - s))\n        }\n    }\n    return res\n}\n",
  "\tvar diff []int\n\tfor index, _ := range game {\n\t\tif game[index] < guess[index]\
    \ {\n\t\t\tdiff = append(diff, guess[index] - game[index])\n\t\t} else if game[index]\
    \ > guess[index] {\n\t\t\tdiff = append(diff, game[index] - guess[index])\n\t\t\
    } else {\n\t\t\tdiff = append(diff, 0)\n\t\t}\n\t}\n\treturn diff\n}\n", "   \
    \ diffs := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n    \
    \    diffs[i] = abs(game[i] - guess[i])\n    }\n    return diffs\n}\n", "    result\
    \ := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i]\
    \ = int(Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n", " \
    \   var result []int\n    for i, value := range game {\n        result = append(result,\
    \ Abs(value - guess[i]))\n    }\n    return result\n}\n", "    if len(game) !=\
    \ len(guess) {\n        return nil\n    }\n    var result []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] < guess[i] {\n            result\
    \ = append(result, guess[i] - game[i])\n        } else if game[i] > guess[i] {\n\
    \            result = append(result, game[i] - guess[i])\n        } else {\n \
    \           result = append(result, 0)\n        }\n    }\n    return result\n\
    }\n", "    if len(game) != len(guess) {\n        return nil\n    }\n    difference\
    \ := make([]int, len(game))\n    for i, _ := range game {\n        if game[i]\
    \ == guess[i] {\n            difference[i] = 0\n        } else {\n           \
    \ difference[i] = int(AbsInt(game[i] - guess[i]))\n        }\n    }\n    return\
    \ difference\n}\n", "    var result []int\n    for i := 0; i < len(game); i++\
    \ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n\
    \        } else {\n            if game[i] > guess[i] {\n                result\
    \ = append(result, game[i] - guess[i])\n            } else {\n               \
    \ result = append(result, guess[i] - game[i])\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var newList []int\n    for i := 0; i < len(game);\
    \ i++ {\n        var difference int\n        if game[i] > guess[i] {\n       \
    \     difference = game[i] - guess[i]\n        } else {\n            difference\
    \ = guess[i] - game[i]\n        }\n        newList = append(newList, difference)\n\
    \    }\n    return newList\n}\n", "    result := make([]int, len(game))\n    for\
    \ i, score := range game {\n        guessDiff := abs(score - guess[i])\n     \
    \   result[i] = guessDiff\n    }\n    return result\n}\n", "    if len(game) !=\
    \ len(guess) {\n        return []int{}\n    }\n    var comp []int\n    for i :=\
    \ 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n            comp\
    \ = append(comp, 0)\n        } else {\n            comp = append(comp, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return comp\n}\n", "    var res []int\n\
    \    for i := 0; i < len(game); i++ {\n        if guess[i] == game[i] {\n    \
    \        res = append(res, 0)\n        } else {\n            res = append(res,\
    \ Abs(guess[i] - game[i]))\n        }\n    }\n    return res\n}\n", "    res :=\
    \ make([]int, len(game))\n    for i, v := range game {\n        res[i] = abs(v\
    \ - guess[i])\n    }\n    return res\n}\n", "    var result []int\n    if len(game)\
    \ != len(guess) {\n        return result\n    }\n    for i, s := range game {\n\
    \        result = append(result,s-guess[i])\n    }\n    return result\n}\n", " \
    \   if len(game) != len(guess) {\n        return nil\n    }\n    result := make([]int,\
    \ len(game))\n    for i, score := range game {\n        result[i] = score - guess[i]\n\
    \        if result[i] < 0 {\n            result[i] = -result[i]\n        }\n \
    \   }\n    return result\n}\n", "    var results []int\n    for i, _ := range\
    \ game {\n        if game[i] == guess[i] {\n            results = append(results,\
    \ 0)\n        } else {\n            results = append(results, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return results\n}\n", "    diffs := make([]int, len(game))\n\
    \    for i, score := range game {\n        diffs[i] = abs(score - guess[i])\n\
    \    }\n    return diffs\n}\n", "    var result []int\n\n    for i, s := range\
    \ game {\n        g := guess[i]\n        diff := s - g\n        if diff < 0 {\n\
    \            diff = -diff\n        }\n        result = append(result, diff)\n\
    \    }\n\n    return result\n}\n", "    var res []int\n    for i, g := range game\
    \ {\n        if guess[i] < 0 {\n            res = append(res, abs(g))\n      \
    \  } else {\n            res = append(res, abs(g - guess[i]))\n        }\n   \
    \ }\n    return res\n}\n", "    var diff []int\n    if len(game) != len(guess)\
    \ {\n        return nil\n    }\n    for i := 0; i < len(game); i++ {\n       \
    \ if game[i] == guess[i] {\n            diff = append(diff, 0)\n        } else\
    \ {\n            diff = append(diff, abs(game[i]-guess[i]))\n        }\n    }\n\
    \    return diff\n}\n", "    // Write your code here\n    var result []int\n \
    \   for i, _ := range game {\n        g := abs(game[i])\n        r := abs(guess[i])\n\
    \        if r == g {\n            result = append(result, 0)\n        } else {\n\
    \            result = append(result, abs(r - g))\n        }\n    }\n    return\
    \ result\n}\n", "    // your code here\n    var result []int\n    for i := 0;\
    \ i < len(game); i++ {\n        if game[i] == guess[i] {\n            result =\
    \ append(result, 0)\n        } else {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "\tvar res []int\n\t\
    for i, v := range game {\n\t\tif v == guess[i] {\n\t\t\tres = append(res, 0)\n\
    \t\t} else {\n\t\t\tdiff := v - guess[i]\n\t\t\tif diff < 0 {\n\t\t\t\tdiff =\
    \ diff * -1\n\t\t\t}\n\t\t\tres = append(res, diff)\n\t\t}\n\t}\n\treturn res\n\
    }\n", "    result := make([]int, len(game))\n    for i, gameScore := range game\
    \ {\n        result[i] = abs(gameScore - guess[i])\n    }\n    return result\n\
    }\n", "    if len(game) != len(guess) {\n        panic(\"Slices should be of the\
    \ same length\")\n    }\n    result := make([]int, len(game))\n    for i := 0;\
    \ i < len(game); i++ {\n        if game[i] < 0 || guess[i] < 0 {\n           \
    \ panic(\"Scores should be positive\")\n        }\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    if len(game) != len(guess)\
    \ {\n        return nil\n    }\n    var difference []int\n    for i, v := range\
    \ game {\n        if v == guess[i] {\n            difference = append(difference,\
    \ 0)\n        } else {\n            difference = append(difference, abs(v - guess[i]))\n\
    \        }\n    }\n    return difference\n}\n", "    var result []int\n    for\
    \ i, _ := range game {\n        if game[i] == guess[i] {\n            result =\
    \ append(result, 0)\n        } else {\n            if game[i] < guess[i] {\n \
    \               result = append(result, guess[i] - game[i])\n            } else\
    \ {\n                result = append(result, game[i] - guess[i])\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    var out []int\n    var tmp\
    \ int\n    for i := 0; i < len(game); i++ {\n        tmp = game[i] - guess[i]\n\
    \        if tmp < 0 {\n            tmp = -tmp\n        }\n        out = append(out,\
    \ tmp)\n    }\n    return out\n}\n", "    // Write your code here\n    return\
    \ []int{}\n}\n", "    var result []int\n    for i := 0; i < len(game); i++ {\n\
    \        if game[i] > guess[i] {\n            result = append(result, game[i]\
    \ - guess[i])\n        } else {\n            result = append(result, guess[i]\
    \ - game[i])\n        }\n    }\n    return result\n}\n", "    length := len(game)\n\
    \    comp := make([]int, length)\n    for i := 0; i < length; i++ {\n        comp[i]\
    \ = game[i] - guess[i]\n        if comp[i] < 0 {\n            comp[i] = -comp[i]\n\
    \        }\n    }\n    return comp\n}\n", "    var res []int\n    for i, g :=\
    \ range game {\n        if g < guess[i] {\n            res = append(res, guess[i]\
    \ - g)\n        } else {\n            res = append(res, g - guess[i])\n      \
    \  }\n    }\n    return res\n}\n", "    res := make([]int, len(game))\n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n           \
    \ res[i] = 0\n        } else {\n            res[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return res\n}\n", "    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    var result []int\n    for i := 0; i < len(game);\
    \ i++ {\n        result = append(result, abs(game[i] - guess[i]))\n    }\n   \
    \ return result\n}\n", "    var result []int\n    for i, e := range game {\n \
    \       if e == guess[i] {\n            result = append(result, 0)\n        }\
    \ else {\n            result = append(result, abs(e - guess[i]))\n        }\n\
    \    }\n    return result\n}\n", "    // Write your code here\n    return []int{}\n\
    }\n", "    var result []int\n    if len(game) != len(guess) {\n        panic(\"\
    different length\")\n    }\n    for i := 0; i < len(game); i++ {\n        if game[i]\
    \ == guess[i] {\n            result = append(result, 0)\n        } else {\n  \
    \          result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n\
    \    return result\n}\n", "    answer := make([]int, len(game))\n    for i, _\
    \ := range game {\n        if game[i] == guess[i] {\n            answer[i] = 0\n\
    \        } else {\n            answer[i] = Abs(game[i] - guess[i])\n        }\n\
    \    }\n    return answer\n}\n", "    var result []int\n    for k, v := range\
    \ game {\n        diff := guess[k] - v\n        if diff < 0 {\n            diff\
    \ = diff * -1\n        }\n        result = append(result, diff)\n    }\n    return\
    \ result\n}\n", "    diff := make([]int, len(game))\n    for i, _ := range game\
    \ {\n        if game[i] == guess[i] {\n            diff[i] = 0\n        } else\
    \ {\n            diff[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ diff\n}\n", "    res := make([]int, len(game))\n    for i, v := range game {\n\
    \        res[i] = abs(v - guess[i])\n    }\n    return res\n}\n", "    var offset\
    \ []int\n    for i, _ := range game {\n        offset = append(offset, abs(game[i]\
    \ - guess[i]))\n    }\n    return offset\n}\n", "    if len(game) != len(guess)\
    \ {\n        panic(\"length of game and guess must be equal\")\n    }\n    result\
    \ := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        if\
    \ game[i] > guess[i] {\n            result[i] = game[i] - guess[i]\n        }\
    \ else {\n            result[i] = guess[i] - game[i]\n        }\n    }\n    return\
    \ result\n}\n", "    var score []int\n    for idx, val := range game {\n     \
    \   score = append(score, abs(val - guess[idx]))\n    }\n    return score\n}\n",
  "    var points []int\n    for i := 0; i < len(game); i++ {\n        if game[i]\
    \ == guess[i] {\n            points = append(points, 0)\n        } else {\n  \
    \          diff := game[i] - guess[i]\n            if diff < 0 {\n           \
    \     diff = diff * -1\n            }\n            points = append(points, diff)\n\
    \        }\n    }\n    return points\n}\n", "    if len(game) != len(guess) {\n\
    \        return nil\n    }\n    r := make([]int, len(game))\n    for i := 0; i\
    \ < len(game); i++ {\n        if game[i] > guess[i] {\n            r[i] = game[i]\
    \ - guess[i]\n        } else {\n            r[i] = guess[i] - game[i]\n      \
    \  }\n    }\n    return r\n}\n", "    result := make([]int, len(game))\n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n           \
    \ result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    if len(game) != len(guess) {\n\
    \        panic(\"Invalid input: Must be two arrays of the same length\")\n   \
    \ }\n    var difference []int\n    for index, _ := range game {\n        difference\
    \ = append(difference, abs(game[index] - guess[index]))\n    }\n    return difference\n\
    }\n", "    result := make([]int, len(game))\n    for i := 0; i < len(game); i++\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    res := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n     \
    \   if game[i] > guess[i] {\n            res[i] = game[i] - guess[i]\n       \
    \ } else {\n            res[i] = guess[i] - game[i]\n        }\n    }\n    return\
    \ res\n}\n", "    var res []int\n    for i := 0; i < len(game); i++ {\n      \
    \  if guess[i] >= game[i] {\n            res = append(res, guess[i] - game[i])\n\
    \        } else {\n            res = append(res, game[i] - guess[i])\n       \
    \ }\n    }\n    return res\n}\n", "    // your code goes here\n    var arr []int\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        arr = append(arr, 0)\n        } else {\n            arr = append(arr,\
    \ absDiff(game[i], guess[i]))\n        }\n    }\n    return arr\n}\n", "    if\
    \ len(game) != len(guess) {\n        panic(\"Lenghts should be the same!\")\n\
    \    }\n    result := make([]int, len(game))\n    for i, _ := range game {\n \
    \       if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            if game[i] > guess[i] {\n                result[i] = game[i] - guess[i]\n\
    \            } else {\n                result[i] = guess[i] - game[i]\n      \
    \      }\n        }\n    }\n    return result\n}\n", "    if len(game) != len(guess)\
    \ {\n        return nil\n    }\n    result := make([]int, len(game))\n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n           \
    \ result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    var results []int\n    for i,\
    \ v := range game {\n        if v < guess[i] {\n            results = append(results,\
    \ guess[i] - v)\n        } else if v > guess[i] {\n            results = append(results,\
    \ v - guess[i])\n        } else {\n            results = append(results, 0)\n\
    \        }\n    }\n    return results\n}\n", "    result := make([]int, len(game))\n\
    \    for i, score := range game {\n        if score < 0 || score > 9 {\n     \
    \       fmt.Printf(\"Score on position %d is out of bounds.\\n\", i)\n       \
    \     return nil\n        }\n        if guess[i] < -9 || guess[i] > 9 {\n    \
    \        fmt.Printf(\"Guess on position %d is out of bounds.\\n\", i)\n      \
    \      return nil\n        }\n        if score < guess[i] {\n            result[i]\
    \ = guess[i] - score\n        } else {\n            result[i] = score - guess[i]\n\
    \        }\n    }\n    return result\n}\n", "    res := make([]int, len(game))\n\
    \    for i, s := range game {\n        res[i] = s - guess[i]\n        if res[i]\
    \ < 0 {\n            res[i] = -res[i]\n        }\n    }\n    return res\n}\n",
  "    result := make([]int, len(game))\n    for i, val := range game {\n        diff\
    \ := val - guess[i]\n        if diff < 0 {\n            diff = -diff\n       \
    \ }\n        result[i] = diff\n    }\n    return result\n}\n", "    if len(game)\
    \ != len(guess) {\n        return []int{}\n    }\n    var diff []int\n    for\
    \ i := 0; i < len(game); i++ {\n        diff = append(diff, abs(game[i] - guess[i]))\n\
    \    }\n    return diff\n}\n", "    if len(game) != len(guess) {\n        panic(\"\
    Input slices must be of equal length\")\n    }\n    ret := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        ret[i] = abs(game[i] - guess[i])\n\
    \    }\n    return ret\n}\n", "    if len(game) != len(guess) {\n        panic(\"\
    game and guess must be of equal length\")\n    }\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n    \
    \        result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    if len(game) != len(guess) {\n        return []int{}\n    }\n    var\
    \ result []int\n    for i, _ := range game {\n        if game[i] != guess[i] {\n\
    \            result = append(result, abs(game[i]-guess[i]))\n        } else {\n\
    \            result = append(result, 0)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(game))\n    for i, _ := range game {\n  \
    \      if guess[i] >= 0 {\n            if game[i] < guess[i] {\n             \
    \   result[i] = guess[i] - game[i]\n            } else {\n                result[i]\
    \ = game[i] - guess[i]\n            }\n        } else {\n            if game[i]\
    \ <= guess[i] {\n                result[i] = game[i] - guess[i]\n            }\
    \ else {\n                result[i] = game[i] - guess[i]\n            }\n    \
    \    }\n    }\n    return result\n}\n", "    result := make([]int, len(game))\n\
    \    for i, val := range game {\n        if val != guess[i] {\n            result[i]\
    \ = abs(val - guess[i])\n        }\n    }\n    return result\n}\n", "    var res\
    \ []int\n    for i, _ := range game {\n        if game[i] == guess[i] {\n    \
    \        res = append(res, 0)\n        } else {\n            res = append(res,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return res\n}\n", "    var result\
    \ []int\n    for i := 0; i < len(game); i++ {\n        result = append(result,\
    \ Abs(game[i] - guess[i]))\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result = append(result, 0)\n        } else {\n            result = append(result,\
    \ game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    var res\
    \ []int\n    for i, v := range game {\n        res = append(res, 0)\n        if\
    \ v != guess[i] {\n            res[i] = abs(v - guess[i])\n        }\n    }\n\
    \    return res\n}\n", "    var result []int\n    for i := 0; i < len(game); i++\
    \ {\n        if game[i] == guess[i] {\n            result = append(result, 0)\n\
    \        } else {\n            if game[i] > guess[i] {\n                result\
    \ = append(result, game[i] - guess[i])\n            } else {\n               \
    \ result = append(result, guess[i] - game[i])\n            }\n        }\n    }\n\
    \    return result\n}\n", "    if len(game) != len(guess) {\n        return []int{}\n\
    \    }\n    var res []int\n    for i := 0; i < len(game); i++ {\n        res =\
    \ append(res, abs(game[i] - guess[i]))\n    }\n    return res\n}\n", "    if len(game)\
    \ != len(guess) {\n        panic(\"Game and guess must be the same length\")\n\
    \    }\n    var result []int\n    for i, _ := range game {\n        var g int\n\
    \        if game[i] < guess[i] {\n            g = guess[i] - game[i]\n       \
    \ } else {\n            g = game[i] - guess[i]\n        }\n        result = append(result,\
    \ g)\n    }\n    return result\n}\n", "    var error []int\n    for i := 0; i\
    \ < len(game); i++ {\n        if game[i] - guess[i] < 0 {\n            error =\
    \ append(error, guess[i] - game[i])\n        } else {\n            error = append(error,\
    \ game[i] - guess[i])\n        }\n    }\n    return error\n}\n", "    var ret\
    \ []int\n    for i, v := range game {\n        diff := v - guess[i]\n        if\
    \ diff < 0 {\n            diff = -diff\n        }\n        ret = append(ret, diff)\n\
    \    }\n    return ret\n}\n", "    if len(game) != len(guess) {\n        panic(\"\
    lists' length are not equal\")\n    }\n    res := make([]int, len(game))\n   \
    \ for i := 0; i < len(game); i++ {\n        if guess[i] >= 0 {\n            res[i]\
    \ = guess[i] - game[i]\n        } else {\n            res[i] = game[i] - guess[i]\n\
    \        }\n    }\n    return res\n}\n", "    if len(game) != len(guess) {\n \
    \       return []int{}\n    }\n    result := make([]int, len(game))\n    for i\
    \ := 0; i < len(game); i++ {\n        result[i] = game[i] - guess[i]\n       \
    \ if result[i] < 0 {\n            result[i] = -result[i]\n        }\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(game))\n    for i, v :=\
    \ range game {\n        if v < 0 {\n            v = -v\n        }\n        if\
    \ guess[i] < 0 {\n            guess[i] = -guess[i]\n        }\n        difference\
    \ := guess[i] - v\n        if difference < 0 {\n            difference = -difference\n\
    \        }\n        result[i] = difference\n    }\n    return result\n}\n", " \
    \   var result []int\n    for i := 0; i < len(game); i++ {\n        result = append(result,\
    \ abs(game[i] - guess[i]))\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < len(game); i++ {\n        var diff int\n        if game[i]\
    \ < guess[i] {\n            diff = guess[i] - game[i]\n        } else {\n    \
    \        diff = game[i] - guess[i]\n        }\n        result = append(result,\
    \ diff)\n    }\n    return result\n}\n", "    var diff = make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        diff[i] = Abs(game[i] - guess[i])\n\
    \    }\n    return diff\n}\n", "\tresult := make([]int, len(game))\n\tfor i, _\
    \ := range game {\n\t\tresult[i] = absolute(game[i] - guess[i])\n\t}\n\treturn\
    \ result\n}\n", "    if len(game) != len(guess) {\n        return []int{}\n  \
    \  }\n    result := make([]int, len(game))\n    for i := 0; i < len(game); i++\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    if len(game) != len(guess) {\n        panic(\"game and guess have different\
    \ length\")\n    }\n    result := make([]int, len(game))\n    for i, e := range\
    \ game {\n        if e >= 0 {\n            result[i] = int(abs32(float32(guess[i])\
    \ - float32(e)))\n        } else {\n            if guess[i] < 0 {\n          \
    \      result[i] = int(abs32(float32(guess[i]) - float32(e)))\n            } else\
    \ {\n                result[i] = int(abs32(float32(guess[i]) + float32(e)))\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(game) !=\
    \ len(guess) {\n        return nil\n    }\n    result := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n    \
    \        result[i] = 0\n        } else {\n            result[i] = Abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] > guess[i]\
    \ {\n            result[i] = game[i] - guess[i]\n        } else {\n          \
    \  result[i] = guess[i] - game[i]\n        }\n    }\n    return result\n}\n",
  "\tres := make([]int, len(game))\n\tfor i, _ := range game {\n\t\tres[i] = absDiff(game[i],\
    \ guess[i])\n\t}\n\treturn res\n}\n", "    if len(game) != len(guess) {\n    \
    \    panic(\"arguments must be of the same length\")\n    }\n    cmp := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] == guess[i]\
    \ {\n            cmp[i] = 0\n        } else {\n            cmp[i] = int(Abs(int64(game[i])\
    \ - int64(guess[i])))\n        }\n    }\n    return cmp\n}\n", "    ret := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        ret[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return ret\n}\n", "    results := make([]int, len(game))\n\
    \    for i, _ := range game {\n        if game[i] != guess[i] {\n            results[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return results\n}\n", "\tvar\
    \ results []int\n\tfor i := 0; i < len(game); i++ {\n\t\tif game[i] < guess[i]\
    \ {\n\t\t\tresults = append(results, guess[i] - game[i])\n\t\t} else if game[i]\
    \ > guess[i] {\n\t\t\tresults = append(results, game[i] - guess[i])\n\t\t} else\
    \ {\n\t\t\tresults = append(results, 0)\n\t\t}\n\t}\n\treturn results\n}\n", "\t\
    diff := make([]int, len(game))\n\tfor i, v := range game {\n\t\tdiff[i] = abs(v\
    \ - guess[i])\n\t}\n\treturn diff\n}\n", "    s := []int{}\n    for i, v := range\
    \ game {\n        g := guess[i]\n        if g > v {\n            s = append(s,\
    \ g - v)\n        } else {\n            s = append(s, v - g)\n        }\n    }\n\
    \    return s\n}\n", "    // fmt.Println(game)\n    // fmt.Println(guess)\n  \
    \  var result []int\n    var difference int\n    if len(game) == len(guess) {\n\
    \        for i := 0; i < len(game); i++ {\n            difference = game[i] -\
    \ guess[i]\n            if difference < 0 {\n                difference = -difference\n\
    \            }\n            result = append(result, difference)\n        }\n \
    \   }\n    return result\n}\n", "    for i, val := range guess {\n        guess[i]\
    \ = int(Abs(float64(val - game[i])))\n    }\n    return guess\n}\n", "    var\
    \ result []int\n    for i, v := range game {\n        diff := guess[i] - v\n \
    \       if diff < 0 {\n            diff = -diff\n        }\n        result = append(result,\
    \ diff)\n    }\n    return result\n}\n", "    result := make([]int, len(game))\n\
    \    for i, g := range game {\n        if guess[i] > g {\n            result[i]\
    \ = guess[i] - g\n        } else {\n            result[i] = g - guess[i]\n   \
    \     }\n    }\n    return result\n}\n", "    res := make([]int, len(game))\n\
    \    for i := 0; i < len(game); i++ {\n        res[i] = abs(game[i] - guess[i])\n\
    \    }\n    return res\n}\n", "    result := make([]int, len(game))\n    for i\
    \ := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n  \
    \  }\n    return result\n}\n", "    result := make([]int, len(game))\n    for\
    \ i, v := range game {\n        result[i] = v - guess[i]\n        if result[i]\
    \ < 0 {\n            result[i] = -result[i]\n        }\n    }\n    return result\n\
    }\n", "    if len(game) != len(guess) {\n        return nil\n    }\n    result\
    \ := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        gs := guess[i]\n \
    \       sc := game[i]\n        if gs == sc {\n            result[i] = 0\n    \
    \    } else {\n            if gs < 0 && sc > 0 {\n                result[i] =\
    \ abs(gs) + sc\n            } else if gs > 0 && sc < 0 {\n                result[i]\
    \ = abs(sc) + gs\n            } else {\n                result[i] = abs(gs - sc)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i, v := range game {\n        if guess[i] < 0 {\n            result =\
    \ append(result, abs(v))\n        } else {\n            result = append(result,\
    \ abs(v - guess[i]))\n        }\n    }\n    return result\n}\n", "    var results\
    \ []int\n    for i, val := range game {\n        if val == guess[i] {\n      \
    \      results = append(results, 0)\n        } else {\n            results = append(results,\
    \ Abs(val - guess[i]))\n        }\n    }\n    return results\n}\n", "    var answer\
    \ []int\n    for i, _ := range game {\n        if (game[i] < 0 && guess[i] < 0)\
    \ || (game[i] > 0 && guess[i] > 0) {\n            diff := guess[i] - game[i]\n\
    \            if diff < 0 {\n                diff = diff * -1\n            }\n\
    \            answer = append(answer, diff)\n        } else {\n            diff\
    \ := guess[i] + game[i]\n            if diff < 0 {\n                diff = diff\
    \ * -1\n            }\n            answer = append(answer, diff)\n        }\n\
    \    }\n    return answer\n}\n", "    var (\n        diff []int\n        length\
    \ = len(game)\n    )\n    for i := 0; i < length; i++ {\n        diff = append(diff,\
    \ abs(game[i] - guess[i]))\n    }\n    return diff\n}\n", "    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        d := abs(game[i] -\
    \ guess[i])\n        result[i] = d\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        if\
    \ game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n", "    var ret []int\n    for i := 0; i\
    \ < len(game); i++ {\n        var diff int\n        if game[i] >= guess[i] {\n\
    \            diff = game[i] - guess[i]\n        } else {\n            diff = guess[i]\
    \ - game[i]\n        }\n        ret = append(ret, diff)\n    }\n    return ret\n\
    }\n", "    res := make([]int, len(game))\n    for i, score := range game {\n \
    \       if score > guess[i] {\n            res[i] = score - guess[i]\n       \
    \ } else {\n            res[i] = guess[i] - score\n        }\n    }\n    return\
    \ res\n}\n", "\tres := make([]int, len(game))\n\tfor i, value := range game {\n\
    \t\tif value > guess[i] {\n\t\t\tres[i] = value - guess[i]\n\t\t} else {\n\t\t\
    \tres[i] = guess[i] - value\n\t\t}\n\t}\n\treturn res\n}\n", "    var res []int\n\
    \    for i := 0; i < len(game); i++ {\n        var tmp int\n        if (game[i]\
    \ > guess[i]) {\n            tmp = game[i] - guess[i]\n        } else {\n    \
    \        tmp = guess[i] - game[i]\n        }\n        res = append(res, tmp)\n\
    \    }\n    return res\n}\n", "    res := make([]int, len(game))\n    for i :=\
    \ 0; i < len(game); i++ {\n        res[i] = game[i] - guess[i]\n        if res[i]\
    \ < 0 {\n            res[i] = -res[i]\n        }\n    }\n    return res\n}\n",
  "    result := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n  \
    \      if game[i] > guess[i] {\n            result[i] = game[i] - guess[i]\n \
    \       } else {\n            result[i] = guess[i] - game[i]\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(game))\n    for i, el\
    \ := range game {\n        result[i] = abs(el - guess[i])\n    }\n    return result\n\
    }\n", "    for i, _ := range game {\n        if guess[i] < 0 {\n            guess[i]\
    \ = game[i] - guess[i]\n        } else {\n            guess[i] = game[i] - guess[i]\n\
    \        }\n    }\n    return guess\n}\n", "    score := make([]int, len(game))\n\
    \    for i, v := range game {\n        score[i] = Abs(v - guess[i])\n    }\n \
    \   return score\n}\n", "    var result []int\n    for i, _ := range game {\n\
    \        if game[i] == guess[i] {\n            result = append(result, 0)\n  \
    \      } else {\n            diff := game[i] - guess[i]\n            if diff <\
    \ 0 {\n                diff = -1 * diff\n            }\n            result = append(result,\
    \ diff)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if guess[i] < 0 {\n\
    \            guess[i] = 0\n        }\n        if game[i] < guess[i] {\n      \
    \      result[i] = guess[i] - game[i]\n        } else {\n            result[i]\
    \ = game[i] - guess[i]\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for i, _ := range game {\n        r := game[i] - guess[i]\n     \
    \   if r < 0 {\n            r = -r\n        }\n        result = append(result,\
    \ r)\n    }\n    return result\n}\n", "    var result []int\n    for index, _\
    \ := range game {\n        result = append(result, abs(game[index] - guess[index]))\n\
    \    }\n    return result\n}\n", "    dist := make([]int, len(game))\n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n           \
    \ dist[i] = 0\n        } else {\n            dist[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return dist\n}\n", "    var offset []int\n    for i, v\
    \ := range game {\n        offset = append(offset, v - guess[i])\n    }\n    return\
    \ offset\n}\n", "    if len(game) != len(guess) {\n        return []int{}\n  \
    \  }\n    result := make([]int, len(game))\n    for i, g := range game {\n   \
    \     result[i] = abs(g - guess[i])\n    }\n    return result\n}\n", "    var\
    \ diff []int\n    for i,v := range game {\n        diff = append(diff, abs(v -\
    \ guess[i]))\n    }\n    return diff\n}\n", "\tresults := make([]int, len(game))\n\
    \tfor i, v := range game {\n\t\tresults[i] = Abs(v - guess[i])\n\t}\n\treturn\
    \ results\n}\n", "    out := make([]int, len(game))\n    for i := 0; i < len(game);\
    \ i++ {\n        if guess[i] == game[i] {\n            out[i] = 0\n        } else\
    \ {\n            out[i] = abs(guess[i] - game[i])\n        }\n    }\n    return\
    \ out\n}\n", "    res := make([]int, len(game))\n    for i, v := range game {\n\
    \        if guess[i] >= 0 {\n            res[i] = v - guess[i]\n        } else\
    \ {\n            res[i] = -guess[i]\n        }\n    }\n    return res\n}\n", " \
    \   diff := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n   \
    \     diff[i] = abs(game[i] - guess[i])\n    }\n    return diff\n}\n", "    //\
    \ your code here\n    return nil\n}\n", "    if len(game) != len(guess) {\n  \
    \      panic(\"Array lengths are not equal!\")\n    }\n    result := make([]int,\
    \ len(game))\n    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i]\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
